###################################################################################################
#                                                                                                 #
#     IAR Assembler V8.22.1.15669/W32 for ARM 24/Dec/2018  16:49:15                               #
#     Copyright 1999-2018 IAR Systems AB.                                                         #
#                                                                                                 #
#           Source file   =  C:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\FISH_STM32F4_IAR.s #
#           List file     =  C:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\STM32F407_Disco_Debug\List\FISH_STM32F4_IAR.lst#
#           Object file   =  C:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\STM32F407_Disco_Debug\Obj\FISH_STM32F4_IAR.o#
#           Command line  =  -f C:\Users\CLYDEW~1\AppData\Local\Temp\EW268D.tmp                   #
#                            (C:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\FISH_STM32F4_IAR.s #
#                            -OC:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\STM32F407_Disco_Debug\Obj #
#                            -s+ -M<> -w+ -r -DSTM32F4_XRC08_168MHZ                               #
#                            -LC:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\STM32F407_Disco_Debug\List #
#                            -cM -i -B -t8 -xD --cpu Cortex-M4 --fpu VFPv4_sp                     #
#                            -IC:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\..\FISH_Libs\FISH_RM_COMMON\ #
#                            -IC:\Users\Clyde W Phillips Jr\Desktop\FISHv4th-OEM\..\FISH_Libs\FISH_RM_COMMON_CODE_CORTEX_M\) #
#                                                                                                 #
###################################################################################################

    1                           // FISH_STM32F4_IAR.s - FULL WORD v1.8
    2                           // FISH FOR THE STM IS CURRENTLY SUPPORTING F2 TO F4
    3                           // Code is common, seperate linker files used for memory map differences.
    4                           $FISH_STM32F4_MAIN_INCLUDES.h
    1                           //------------------------------------------------------------------------------
    2                           // Valid thru FISHv4th-OEM
    3                           //$PROJ_DIR$\stm32F205RC.icf
    4                           // This include begins the .sym file
    5                           
    6                           $FISH_AUTHOR.h
    1                           FISH_Author_Clyde_W_Phillips_Jr:
    2                           FISH_Copyright_2014_2018:
    3                           FISH_Team_A_Team_Forth:
    4                           FISH_Questions_Welcome:
    5                           FISH_FUNDING_Contributions_NEEDED:
    6                           CWPJR02_at_gmail_dot_com:
    7                           // This include is for generic IAR stuff
    8                           $FISH_IAR.h
    1                           //------------------------------------------------------------------------------
    2                           // Valid thru FISHv4th-OEM
    3                             COL 132           // required for dis-assembly output sanity
    4                           // M0 ISR:
    5                               // Pretty much the same as STM except:
    6                               // intvec placement in ram has to be done thru memory remap.
    7                               // saving of hi registers convoluted because only r0-r5 savable by PUSH.
    8                               // Not saving upper regs (r10-12) worked but shouldnt so they will be saved.
    9                               // use of c coroutines us same stack as isr.
   10                           
   11                           // PUSH in ISR uses cstack so:
   12                               // C_CMSIS_DISABLE_IRQS and C_CMSIS_ENABLE_IRQS wrapper used in:
   13                               // c_64by32div      :NONAME USLASH:
   14                               // c_32by32to64mul  :NONAME USTAR:
   15                           
   16                           // Next step is remap IntVecs to RAM. No VTOR!
   17                           // Cortex-M0 (e.g. NXP LPC11xx) has a memory remap feature on its memory system
   18                           // (not a part of the processor) to allow vector table accesses to be optionally redirected to the
                                 SRAM.
   19                           // On a Cortex-M0 (STM32F0) part, you also can't change the vector table, and the trick there is to
                                 either // map FLASH at zero, or copy a small vector table into RAM, and then map RAM at zero.
   20                           
   21                           // Test:
   22                           // : .ST BEGIN STCTR ? ?KEY UNTIL ;
   23                               // .ST skipping 8 on average
   24                           
   25                           // 0x9D8: 3f b5 50 46 59 46 62 46 07 b4 01 4a 08 ca 98 47 00 0a 00 00 f1 09 00 00 35 68 36 1d 07 bc
                                 82 46 8b 46 94 46 3f bd 00 00 01 06 00 00 18 22 00 00 98 35 00 00 14 19 00 00 ec 09 00 00
   26                           /*
   27                           DOCOL_ISR:
   28                           FM0_SYSTICK_ISR:
   29                                   0x9d8: 0xb53f         PUSH      {R0-R5, LR}
   30                                   MOV     r0, r10
   31                                   0x9da: 0x4650         MOV       R0, R10
   32                                   MOV     r1, r11
   33                                   0x9dc: 0x4659         MOV       R1, R11
   34                                   MOV     r2, r12
   35                                   0x9de: 0x4662         MOV       R2, R12
   36                                   PUSH    {r0-r2}
   37                                   0x9e0: 0xb407         PUSH      {R0-R2}
   38                                   LDR     w, [PC, #0X4] //= MY_LTORG The High Level Target
   39                                   0x9e2: 0x4a01         LDR.N     R2, [PC, #0x4]          ; [0x9e8] NONAME_STCTR_INCR
   40                               NEXT1   // -> SEMIS_ISR RETURN required instead of SEMIS!
   41                                   0x9e4: 0xca08         LDM       R2!, {R3}
   42                               NEXT1   // -> SEMIS_ISR RETURN required instead of SEMIS!
   43                                   0x9e6: 0x4798         BLX       R3
   44                                   0x9e8: 0x00000a00     DC32      NONAME_STCTR_INCR
   45                           MY_LTORG_ISR_SEMIS:
   46                                   0x9ec: 0x000009f1     DC32      2545                    ; 'ñ ..'
   47                               POPr2i  // SEMIS to balance DOCOL!!!
   48                                   0x9f0: 0x6835         LDR       R5, [R6]
   49                               POPr2i  // SEMIS to balance DOCOL!!!
   50                                   0x9f2: 0x1d36         ADDS      R6, R6, #4
   51                                   POP     {r0-r2}
   52                                   0x9f4: 0xbc07         POP       {R0-R2}
   53                                   MOV     r10, r0
   54                                   0x9f6: 0x4682         MOV       R10, R0
   55                                   MOV     r11, r1
   56                                   0x9f8: 0x468b         MOV       R11, R1
   57                                   MOV     r12, r2
   58                                   0x9fa: 0x4694         MOV       R12, R2
   59                                   POP     {r0-r5, pc }
   60                                   0x9fc: 0xbd3f         POP       {R0-R5, PC}
   61                                   0x9fe: 0x0000         MOVS      R0, R0
   62                           NONAME_STCTR_INCR:
   63                                   0xa00: 0x00000601     DC32      DOCOL
   64                                   0xa04: 0x00002218     DC32      ONE
   65                                   0xa08: 0x00003598     DC32      STCTR
   66                                   0xa0c: 0x00001914     DC32      PSTORE
   67                                   0xa10: 0x000009ec     DC32      MY_LTORG_ISR_SEMIS
   68                           
   69                           */
   70                           /*
   71                           Here is one implementation:
   72                           
   73                           void SysTick_Handler(void) {
   74                              msTicks++;
   75                           }
   76                           
   77                           void Slow_SysTick_Handler(void) {
   78                              static int slow;
   79                           
   80                              slow++;
   81                              if((slow%4) == 3) {
   82                                 msTicks++;
   83                                 }
   84                           }
   85                            
   86                           /* Declare pFunc_t as a function pointer to a function with no parameters typedef */
   87                           //   typedef void (*pFunc_t)(void);
   88                           
   89                           /* Declare a pointer to an array of function pointers that points to RAM */
   90                           #define pfRAMVectors ((pFunc_t *)0x10000000)
   91                            
   92                           //int main (void) {
   93                            
   94                           //...
   95                            
   96                             // Step 1: modify linker script to leave 0x200 bytes of RAM free
   97                             // In LPCXpresso this is done in the projectname_Debug_mem.ld file
   98                             // MEMORY
   99                             // {
  100                             //   /* Define each memory region */
  101                             //   MFlash32 (rx) : ORIGIN = 0x0, LENGTH = 0x8000 /* 32k */
  102                             //   RamLoc8 (rwx) : ORIGIN = 0x10000200, LENGTH = 0x1E00 /* 8k */
  103                             // }
  104                            
  105                             // 2: Copy current vectors to RAM.
  106                             // memcpy( destination, source, length in bytes )
  107                           //  memcpy( (void *)0x10000000, (void *)0x00000000, 0x200);
  108                           
  109                             // 3: Modify the vector table- redirect SysTick interrupt
  110                           //  pfRAMVectors[15] = Slow_SysTick_Handler;
  111                           
  112                             // 4: Switch over to modified vector table
  113                           //  LPC_SYSCON->SYSMEMREMAP = 1;
  114                            
  115                           //...
  116                           
  117                           /*
  118                               By default, the flash memory is mapped to address 0x0000 0000.
  119                               When the MAP bits in the SYSMEMREMAP register are set to 0x0 or 0x1,
  120                               the boot ROM or RAM respectively are mapped to the bottom 512 bytes
  121                               of the memory map (addresses 0x0000 0000 to 0x0000 0200). 
  122                           */
    9                           //------------------------------------------------------------------------------
   10                           // Include STM32F4 SoC PERIPHERAL REGISTER ADDRESS FILES
   11                           $ioSTM32F4x7x.h // Vic MODIFIED FOR STM32F4VG DISCO transformed from .ddf
    1                           ;
    2                           ;               NVIC
    3                           ;
    4                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
    5                           ;     ----                                    ----      -------     --------  -----------
                                 --------
    6                           
    7                           NVIC                                            EQU 0xE000E004
    8                           ;'NVIC.INTLINESNUM`                     EQU 0xE000E004,        4, base=16,    bitRange=0-4
    9                           
   10                           SYST_CSR                                EQU     0xE000E010 ; E000E010h
   11                           SYSTICKCSR                              EQU     SYST_CSR
   12                           ;'SYSTICKCSR.ENABLE`                    EQU 0xE000E010,        4, base=16,    bitRange=0-0
   13                           ;'SYSTICKCSR.TICKINT`                   EQU 0xE000E010,        4, base=16,    bitRange=1-1
   14                           ;'SYSTICKCSR.CLKSOURCE`                 EQU 0xE000E010,        4, base=16,    bitRange=2-2
   15                           ;'SYSTICKCSR.COUNTFLAG`                 EQU 0xE000E010,        4, base=16,    bitRange=16-16
   16                           
   17                           SYST_RVR                EQU     0xE000E014 ;
   18                           SYSTICKRVR              EQU     SYST_RVR
   19                           ;'SYSTICKRVR.RELOAD`                   EQU 0xE000E014,        4, base=16,    bitRange=0-23
   20                           
   21                           SYST_CVR                EQU     0xE000E018 ;
   22                           SYSTICKCVR              EQU     SYST_CVR
   23                           ;'SYSTICKCVR.CURRENT`                  EQU 0xE000E018,        4, base=16,    bitRange=0-23
   24                           
   25                           SYST_CALIB              EQU     0xE000E01C;
   26                           SYSTICKCALVR            EQU     SYST_CALIB
   27                           ;'SYSTICKCALVR.TENMS`                  EQU 0xE000E01C,        4, base=16,    bitRange=0-23
   28                           ;'SYSTICKCALVR.SKEW`                   EQU 0xE000E01C,        4, base=16,    bitRange=30-30
   29                           ;'SYSTICKCALVR.NOREF`                  EQU 0xE000E01C,        4, base=16,    bitRange=31-31
   30                           
   31                           SETENA0                             EQU 0xE000E100
   32                           ;'SETENA0.SETENA0`                     EQU 0xE000E100,        4, base=16,    bitRange=0-0
   33                           ;'SETENA0.SETENA1`                     EQU 0xE000E100,        4, base=16,    bitRange=1-1
   34                           ;'SETENA0.SETENA2`                     EQU 0xE000E100,        4, base=16,    bitRange=2-2
   35                           ;'SETENA0.SETENA3`                     EQU 0xE000E100,        4, base=16,    bitRange=3-3
   36                           ;'SETENA0.SETENA4`                     EQU 0xE000E100,        4, base=16,    bitRange=4-4
   37                           ;'SETENA0.SETENA5`                     EQU 0xE000E100,        4, base=16,    bitRange=5-5
   38                           ;'SETENA0.SETENA6`                     EQU 0xE000E100,        4, base=16,    bitRange=6-6
   39                           ;'SETENA0.SETENA7`                     EQU 0xE000E100,        4, base=16,    bitRange=7-7
   40                           ;'SETENA0.SETENA8`                     EQU 0xE000E100,        4, base=16,    bitRange=8-8
   41                           ;'SETENA0.SETENA9`                     EQU 0xE000E100,        4, base=16,    bitRange=9-9
   42                           ;'SETENA0.SETENA10`                    EQU 0xE000E100,        4, base=16,    bitRange=10-10
   43                           ;'SETENA0.SETENA11`                    EQU 0xE000E100,        4, base=16,    bitRange=11-11
   44                           ;'SETENA0.SETENA12`                    EQU 0xE000E100,        4, base=16,    bitRange=12-12
   45                           ;'SETENA0.SETENA13`                    EQU 0xE000E100,        4, base=16,    bitRange=13-13
   46                           ;'SETENA0.SETENA14`                    EQU 0xE000E100,        4, base=16,    bitRange=14-14
   47                           ;'SETENA0.SETENA15`                    EQU 0xE000E100,        4, base=16,    bitRange=15-15
   48                           ;'SETENA0.SETENA16`                    EQU 0xE000E100,        4, base=16,    bitRange=16-16
   49                           ;'SETENA0.SETENA17`                    EQU 0xE000E100,        4, base=16,    bitRange=17-17
   50                           ;'SETENA0.SETENA18`                    EQU 0xE000E100,        4, base=16,    bitRange=18-18
   51                           ;'SETENA0.SETENA19`                    EQU 0xE000E100,        4, base=16,    bitRange=19-19
   52                           ;'SETENA0.SETENA20`                    EQU 0xE000E100,        4, base=16,    bitRange=20-20
   53                           ;'SETENA0.SETENA21`                    EQU 0xE000E100,        4, base=16,    bitRange=21-21
   54                           ;'SETENA0.SETENA22`                    EQU 0xE000E100,        4, base=16,    bitRange=22-22
   55                           ;'SETENA0.SETENA23`                    EQU 0xE000E100,        4, base=16,    bitRange=23-23
   56                           ;'SETENA0.SETENA24`                    EQU 0xE000E100,        4, base=16,    bitRange=24-24
   57                           ;'SETENA0.SETENA25`                    EQU 0xE000E100,        4, base=16,    bitRange=25-25
   58                           ;'SETENA0.SETENA26`                    EQU 0xE000E100,        4, base=16,    bitRange=26-26
   59                           ;'SETENA0.SETENA27`                    EQU 0xE000E100,        4, base=16,    bitRange=27-27
   60                           ;'SETENA0.SETENA28`                    EQU 0xE000E100,        4, base=16,    bitRange=28-28
   61                           ;'SETENA0.SETENA29`                    EQU 0xE000E100,        4, base=16,    bitRange=29-29
   62                           ;'SETENA0.SETENA30`                    EQU 0xE000E100,        4, base=16,    bitRange=30-30
   63                           ;'SETENA0.SETENA31`                    EQU 0xE000E100,        4, base=16,    bitRange=31-31
   64                           
   65                           SETENA1                             EQU 0xE000E104
   66                           ;'SETENA1.SETENA32`                    EQU 0xE000E104,        4, base=16,    bitRange=0-0
   67                           ;'SETENA1.SETENA33`                    EQU 0xE000E104,        4, base=16,    bitRange=1-1
   68                           ;'SETENA1.SETENA34`                    EQU 0xE000E104,        4, base=16,    bitRange=2-2
   69                           ;'SETENA1.SETENA35`                    EQU 0xE000E104,        4, base=16,    bitRange=3-3
   70                           ;'SETENA1.SETENA36`                    EQU 0xE000E104,        4, base=16,    bitRange=4-4
   71                           ;'SETENA1.SETENA37`                    EQU 0xE000E104,        4, base=16,    bitRange=5-5
   72                           ;'SETENA1.SETENA38`                    EQU 0xE000E104,        4, base=16,    bitRange=6-6
   73                           ;'SETENA1.SETENA39`                    EQU 0xE000E104,        4, base=16,    bitRange=7-7
   74                           ;'SETENA1.SETENA40`                    EQU 0xE000E104,        4, base=16,    bitRange=8-8
   75                           ;'SETENA1.SETENA41`                    EQU 0xE000E104,        4, base=16,    bitRange=9-9
   76                           ;'SETENA1.SETENA42`                    EQU 0xE000E104,        4, base=16,    bitRange=10-10
   77                           ;'SETENA1.SETENA43`                    EQU 0xE000E104,        4, base=16,    bitRange=11-11
   78                           ;'SETENA1.SETENA44`                    EQU 0xE000E104,        4, base=16,    bitRange=12-12
   79                           ;'SETENA1.SETENA45`                    EQU 0xE000E104,        4, base=16,    bitRange=13-13
   80                           ;'SETENA1.SETENA46`                    EQU 0xE000E104,        4, base=16,    bitRange=14-14
   81                           ;'SETENA1.SETENA47`                    EQU 0xE000E104,        4, base=16,    bitRange=15-15
   82                           ;'SETENA1.SETENA48`                    EQU 0xE000E104,        4, base=16,    bitRange=16-16
   83                           ;'SETENA1.SETENA49`                    EQU 0xE000E104,        4, base=16,    bitRange=17-17
   84                           ;'SETENA1.SETENA50`                    EQU 0xE000E104,        4, base=16,    bitRange=18-18
   85                           ;'SETENA1.SETENA51`                    EQU 0xE000E104,        4, base=16,    bitRange=19-19
   86                           ;'SETENA1.SETENA52`                    EQU 0xE000E104,        4, base=16,    bitRange=20-20
   87                           ;'SETENA1.SETENA53`                    EQU 0xE000E104,        4, base=16,    bitRange=21-21
   88                           ;'SETENA1.SETENA54`                    EQU 0xE000E104,        4, base=16,    bitRange=22-22
   89                           ;'SETENA1.SETENA55`                    EQU 0xE000E104,        4, base=16,    bitRange=23-23
   90                           ;'SETENA1.SETENA56`                    EQU 0xE000E104,        4, base=16,    bitRange=24-24
   91                           ;'SETENA1.SETENA57`                    EQU 0xE000E104,        4, base=16,    bitRange=25-25
   92                           ;'SETENA1.SETENA58`                    EQU 0xE000E104,        4, base=16,    bitRange=26-26
   93                           ;'SETENA1.SETENA59`                    EQU 0xE000E104,        4, base=16,    bitRange=27-27
   94                           ;'SETENA1.SETENA60`                    EQU 0xE000E104,        4, base=16,    bitRange=28-28
   95                           ;'SETENA1.SETENA61`                    EQU 0xE000E104,        4, base=16,    bitRange=29-29
   96                           ;'SETENA1.SETENA62`                    EQU 0xE000E104,        4, base=16,    bitRange=30-30
   97                           ;'SETENA1.SETENA63`                    EQU 0xE000E104,        4, base=16,    bitRange=31-31
   98                           
   99                           SETENA2                             EQU 0xE000E108
  100                           ;'SETENA2.SETENA64`                    EQU 0xE000E108,        4, base=16,    bitRange=0-0
  101                           ;'SETENA2.SETENA65`                    EQU 0xE000E108,        4, base=16,    bitRange=1-1
  102                           ;'SETENA2.SETENA66`                    EQU 0xE000E108,        4, base=16,    bitRange=2-2
  103                           ;'SETENA2.SETENA67`                    EQU 0xE000E108,        4, base=16,    bitRange=3-3
  104                           ;'SETENA2.SETENA68`                    EQU 0xE000E108,        4, base=16,    bitRange=4-4
  105                           ;'SETENA2.SETENA69`                    EQU 0xE000E108,        4, base=16,    bitRange=5-5
  106                           ;'SETENA2.SETENA70`                    EQU 0xE000E108,        4, base=16,    bitRange=6-6
  107                           ;'SETENA2.SETENA71`                    EQU 0xE000E108,        4, base=16,    bitRange=7-7
  108                           ;'SETENA2.SETENA72`                    EQU 0xE000E108,        4, base=16,    bitRange=8-8
  109                           ;'SETENA2.SETENA73`                    EQU 0xE000E108,        4, base=16,    bitRange=9-9
  110                           ;'SETENA2.SETENA74`                    EQU 0xE000E108,        4, base=16,    bitRange=10-10
  111                           ;'SETENA2.SETENA75`                    EQU 0xE000E108,        4, base=16,    bitRange=11-11
  112                           ;'SETENA2.SETENA76`                    EQU 0xE000E108,        4, base=16,    bitRange=12-12
  113                           ;'SETENA2.SETENA77`                    EQU 0xE000E108,        4, base=16,    bitRange=13-13
  114                           ;'SETENA2.SETENA78`                    EQU 0xE000E108,        4, base=16,    bitRange=14-14
  115                           ;'SETENA2.SETENA79`                    EQU 0xE000E108,        4, base=16,    bitRange=15-15
  116                           ;'SETENA2.SETENA80`                    EQU 0xE000E108,        4, base=16,    bitRange=16-16
  117                           ;'SETENA2.SETENA81`                    EQU 0xE000E108,        4, base=16,    bitRange=17-17
  118                           ;'SETENA2.SETENA82`                    EQU 0xE000E108,        4, base=16,    bitRange=18-18
  119                           ;'SETENA2.SETENA83`                    EQU 0xE000E108,        4, base=16,    bitRange=19-19
  120                           ;'SETENA2.SETENA84`                    EQU 0xE000E108,        4, base=16,    bitRange=20-20
  121                           ;'SETENA2.SETENA85`                    EQU 0xE000E108,        4, base=16,    bitRange=21-21
  122                           ;'SETENA2.SETENA86`                    EQU 0xE000E108,        4, base=16,    bitRange=22-22
  123                           ;'SETENA2.SETENA87`                    EQU 0xE000E108,        4, base=16,    bitRange=23-23
  124                           ;'SETENA2.SETENA88`                    EQU 0xE000E108,        4, base=16,    bitRange=24-24
  125                           ;'SETENA2.SETENA89`                    EQU 0xE000E108,        4, base=16,    bitRange=25-25
  126                           ;'SETENA2.SETENA90`                    EQU 0xE000E108,        4, base=16,    bitRange=26-26
  127                           ;'SETENA2.SETENA91`                    EQU 0xE000E108,        4, base=16,    bitRange=27-27
  128                           ;'SETENA2.SETENA92`                    EQU 0xE000E108,        4, base=16,    bitRange=28-28
  129                           ;'SETENA2.SETENA93`                    EQU 0xE000E108,        4, base=16,    bitRange=29-29
  130                           ;'SETENA2.SETENA94`                    EQU 0xE000E108,        4, base=16,    bitRange=30-30
  131                           ;'SETENA2.SETENA95`                    EQU 0xE000E108,        4, base=16,    bitRange=31-31
  132                           
  133                           CLRENA0                             EQU 0xE000E180
  134                           ;'CLRENA0.CLRENA0`                     EQU 0xE000E180,        4, base=16,    bitRange=0-0
  135                           ;'CLRENA0.CLRENA1`                     EQU 0xE000E180,        4, base=16,    bitRange=1-1
  136                           ;'CLRENA0.CLRENA2`                     EQU 0xE000E180,        4, base=16,    bitRange=2-2
  137                           ;'CLRENA0.CLRENA3`                     EQU 0xE000E180,        4, base=16,    bitRange=3-3
  138                           ;'CLRENA0.CLRENA4`                     EQU 0xE000E180,        4, base=16,    bitRange=4-4
  139                           ;'CLRENA0.CLRENA5`                     EQU 0xE000E180,        4, base=16,    bitRange=5-5
  140                           ;'CLRENA0.CLRENA6`                     EQU 0xE000E180,        4, base=16,    bitRange=6-6
  141                           ;'CLRENA0.CLRENA7`                     EQU 0xE000E180,        4, base=16,    bitRange=7-7
  142                           ;'CLRENA0.CLRENA8`                     EQU 0xE000E180,        4, base=16,    bitRange=8-8
  143                           ;'CLRENA0.CLRENA9`                     EQU 0xE000E180,        4, base=16,    bitRange=9-9
  144                           ;'CLRENA0.CLRENA10`                    EQU 0xE000E180,        4, base=16,    bitRange=10-10
  145                           ;'CLRENA0.CLRENA11`                    EQU 0xE000E180,        4, base=16,    bitRange=11-11
  146                           ;'CLRENA0.CLRENA12`                    EQU 0xE000E180,        4, base=16,    bitRange=12-12
  147                           ;'CLRENA0.CLRENA13`                    EQU 0xE000E180,        4, base=16,    bitRange=13-13
  148                           ;'CLRENA0.CLRENA14`                    EQU 0xE000E180,        4, base=16,    bitRange=14-14
  149                           ;'CLRENA0.CLRENA15`                    EQU 0xE000E180,        4, base=16,    bitRange=15-15
  150                           ;'CLRENA0.CLRENA16`                    EQU 0xE000E180,        4, base=16,    bitRange=16-16
  151                           ;'CLRENA0.CLRENA17`                    EQU 0xE000E180,        4, base=16,    bitRange=17-17
  152                           ;'CLRENA0.CLRENA18`                    EQU 0xE000E180,        4, base=16,    bitRange=18-18
  153                           ;'CLRENA0.CLRENA19`                    EQU 0xE000E180,        4, base=16,    bitRange=19-19
  154                           ;'CLRENA0.CLRENA20`                    EQU 0xE000E180,        4, base=16,    bitRange=20-20
  155                           ;'CLRENA0.CLRENA21`                    EQU 0xE000E180,        4, base=16,    bitRange=21-21
  156                           ;'CLRENA0.CLRENA22`                    EQU 0xE000E180,        4, base=16,    bitRange=22-22
  157                           ;'CLRENA0.CLRENA23`                    EQU 0xE000E180,        4, base=16,    bitRange=23-23
  158                           ;'CLRENA0.CLRENA24`                    EQU 0xE000E180,        4, base=16,    bitRange=24-24
  159                           ;'CLRENA0.CLRENA25`                    EQU 0xE000E180,        4, base=16,    bitRange=25-25
  160                           ;'CLRENA0.CLRENA26`                    EQU 0xE000E180,        4, base=16,    bitRange=26-26
  161                           ;'CLRENA0.CLRENA27`                    EQU 0xE000E180,        4, base=16,    bitRange=27-27
  162                           ;'CLRENA0.CLRENA28`                    EQU 0xE000E180,        4, base=16,    bitRange=28-28
  163                           ;'CLRENA0.CLRENA29`                    EQU 0xE000E180,        4, base=16,    bitRange=29-29
  164                           ;'CLRENA0.CLRENA30`                    EQU 0xE000E180,        4, base=16,    bitRange=30-30
  165                           ;'CLRENA0.CLRENA31`                    EQU 0xE000E180,        4, base=16,    bitRange=31-31
  166                           
  167                           CLRENA1                             EQU 0xE000E184
  168                           ;'CLRENA1.CLRENA32`                    EQU 0xE000E184,        4, base=16,    bitRange=0-0
  169                           ;'CLRENA1.CLRENA33`                    EQU 0xE000E184,        4, base=16,    bitRange=1-1
  170                           ;'CLRENA1.CLRENA34`                    EQU 0xE000E184,        4, base=16,    bitRange=2-2
  171                           ;'CLRENA1.CLRENA35`                    EQU 0xE000E184,        4, base=16,    bitRange=3-3
  172                           ;'CLRENA1.CLRENA36`                    EQU 0xE000E184,        4, base=16,    bitRange=4-4
  173                           ;'CLRENA1.CLRENA37`                    EQU 0xE000E184,        4, base=16,    bitRange=5-5
  174                           ;'CLRENA1.CLRENA38`                    EQU 0xE000E184,        4, base=16,    bitRange=6-6
  175                           ;'CLRENA1.CLRENA39`                    EQU 0xE000E184,        4, base=16,    bitRange=7-7
  176                           ;'CLRENA1.CLRENA40`                    EQU 0xE000E184,        4, base=16,    bitRange=8-8
  177                           ;'CLRENA1.CLRENA41`                    EQU 0xE000E184,        4, base=16,    bitRange=9-9
  178                           ;'CLRENA1.CLRENA42`                    EQU 0xE000E184,        4, base=16,    bitRange=10-10
  179                           ;'CLRENA1.CLRENA43`                    EQU 0xE000E184,        4, base=16,    bitRange=11-11
  180                           ;'CLRENA1.CLRENA44`                    EQU 0xE000E184,        4, base=16,    bitRange=12-12
  181                           ;'CLRENA1.CLRENA45`                    EQU 0xE000E184,        4, base=16,    bitRange=13-13
  182                           ;'CLRENA1.CLRENA46`                    EQU 0xE000E184,        4, base=16,    bitRange=14-14
  183                           ;'CLRENA1.CLRENA47`                    EQU 0xE000E184,        4, base=16,    bitRange=15-15
  184                           ;'CLRENA1.CLRENA48`                    EQU 0xE000E184,        4, base=16,    bitRange=16-16
  185                           ;'CLRENA1.CLRENA49`                    EQU 0xE000E184,        4, base=16,    bitRange=17-17
  186                           ;'CLRENA1.CLRENA50`                    EQU 0xE000E184,        4, base=16,    bitRange=18-18
  187                           ;'CLRENA1.CLRENA51`                    EQU 0xE000E184,        4, base=16,    bitRange=19-19
  188                           ;'CLRENA1.CLRENA52`                    EQU 0xE000E184,        4, base=16,    bitRange=20-20
  189                           ;'CLRENA1.CLRENA53`                    EQU 0xE000E184,        4, base=16,    bitRange=21-21
  190                           ;'CLRENA1.CLRENA54`                    EQU 0xE000E184,        4, base=16,    bitRange=22-22
  191                           ;'CLRENA1.CLRENA55`                    EQU 0xE000E184,        4, base=16,    bitRange=23-23
  192                           ;'CLRENA1.CLRENA56`                    EQU 0xE000E184,        4, base=16,    bitRange=24-24
  193                           ;'CLRENA1.CLRENA57`                    EQU 0xE000E184,        4, base=16,    bitRange=25-25
  194                           ;'CLRENA1.CLRENA58`                    EQU 0xE000E184,        4, base=16,    bitRange=26-26
  195                           ;'CLRENA1.CLRENA59`                    EQU 0xE000E184,        4, base=16,    bitRange=27-27
  196                           ;'CLRENA1.CLRENA60`                    EQU 0xE000E184,        4, base=16,    bitRange=28-28
  197                           ;'CLRENA1.CLRENA61`                    EQU 0xE000E184,        4, base=16,    bitRange=29-29
  198                           ;'CLRENA1.CLRENA62`                    EQU 0xE000E184,        4, base=16,    bitRange=30-30
  199                           ;'CLRENA1.CLRENA63`                    EQU 0xE000E184,        4, base=16,    bitRange=31-31
  200                           
  201                           CLRENA2                             EQU 0xE000E188
  202                           ;'CLRENA2.CLRENA64`                    EQU 0xE000E188,        4, base=16,    bitRange=0-0
  203                           ;'CLRENA2.CLRENA65`                    EQU 0xE000E188,        4, base=16,    bitRange=1-1
  204                           ;'CLRENA2.CLRENA66`                    EQU 0xE000E188,        4, base=16,    bitRange=2-2
  205                           ;'CLRENA2.CLRENA67`                    EQU 0xE000E188,        4, base=16,    bitRange=3-3
  206                           ;'CLRENA2.CLRENA68`                    EQU 0xE000E188,        4, base=16,    bitRange=4-4
  207                           ;'CLRENA2.CLRENA69`                    EQU 0xE000E188,        4, base=16,    bitRange=5-5
  208                           ;'CLRENA2.CLRENA70`                    EQU 0xE000E188,        4, base=16,    bitRange=6-6
  209                           ;'CLRENA2.CLRENA71`                    EQU 0xE000E188,        4, base=16,    bitRange=7-7
  210                           ;'CLRENA2.CLRENA72`                    EQU 0xE000E188,        4, base=16,    bitRange=8-8
  211                           ;'CLRENA2.CLRENA73`                    EQU 0xE000E188,        4, base=16,    bitRange=9-9
  212                           ;'CLRENA2.CLRENA74`                    EQU 0xE000E188,        4, base=16,    bitRange=10-10
  213                           ;'CLRENA2.CLRENA75`                    EQU 0xE000E188,        4, base=16,    bitRange=11-11
  214                           ;'CLRENA2.CLRENA76`                    EQU 0xE000E188,        4, base=16,    bitRange=12-12
  215                           ;'CLRENA2.CLRENA77`                    EQU 0xE000E188,        4, base=16,    bitRange=13-13
  216                           ;'CLRENA2.CLRENA78`                    EQU 0xE000E188,        4, base=16,    bitRange=14-14
  217                           ;'CLRENA2.CLRENA79`                    EQU 0xE000E188,        4, base=16,    bitRange=15-15
  218                           ;'CLRENA2.CLRENA80`                    EQU 0xE000E188,        4, base=16,    bitRange=16-16
  219                           ;'CLRENA2.CLRENA81`                    EQU 0xE000E188,        4, base=16,    bitRange=17-17
  220                           ;'CLRENA2.CLRENA82`                    EQU 0xE000E188,        4, base=16,    bitRange=18-18
  221                           ;'CLRENA2.CLRENA83`                    EQU 0xE000E188,        4, base=16,    bitRange=19-19
  222                           ;'CLRENA2.CLRENA84`                    EQU 0xE000E188,        4, base=16,    bitRange=20-20
  223                           ;'CLRENA2.CLRENA85`                    EQU 0xE000E188,        4, base=16,    bitRange=21-21
  224                           ;'CLRENA2.CLRENA86`                    EQU 0xE000E188,        4, base=16,    bitRange=22-22
  225                           ;'CLRENA2.CLRENA87`                    EQU 0xE000E188,        4, base=16,    bitRange=23-23
  226                           ;'CLRENA2.CLRENA88`                    EQU 0xE000E188,        4, base=16,    bitRange=24-24
  227                           ;'CLRENA2.CLRENA89`                    EQU 0xE000E188,        4, base=16,    bitRange=25-25
  228                           ;'CLRENA2.CLRENA90`                    EQU 0xE000E188,        4, base=16,    bitRange=26-26
  229                           ;'CLRENA2.CLRENA91`                    EQU 0xE000E188,        4, base=16,    bitRange=27-27
  230                           ;'CLRENA2.CLRENA92`                    EQU 0xE000E188,        4, base=16,    bitRange=28-28
  231                           ;'CLRENA2.CLRENA93`                    EQU 0xE000E188,        4, base=16,    bitRange=29-29
  232                           ;'CLRENA2.CLRENA94`                    EQU 0xE000E188,        4, base=16,    bitRange=30-30
  233                           ;'CLRENA2.CLRENA95`                    EQU 0xE000E188,        4, base=16,    bitRange=31-31
  234                           
  235                           SETPEND0                            EQU 0xE000E200
  236                           ;'SETPEND0.SETPEND0`                   EQU 0xE000E200,        4, base=16,    bitRange=0-0
  237                           ;'SETPEND0.SETPEND1`                   EQU 0xE000E200,        4, base=16,    bitRange=1-1
  238                           ;'SETPEND0.SETPEND2`                   EQU 0xE000E200,        4, base=16,    bitRange=2-2
  239                           ;'SETPEND0.SETPEND3`                   EQU 0xE000E200,        4, base=16,    bitRange=3-3
  240                           ;'SETPEND0.SETPEND4`                   EQU 0xE000E200,        4, base=16,    bitRange=4-4
  241                           ;'SETPEND0.SETPEND5`                   EQU 0xE000E200,        4, base=16,    bitRange=5-5
  242                           ;'SETPEND0.SETPEND6`                   EQU 0xE000E200,        4, base=16,    bitRange=6-6
  243                           ;'SETPEND0.SETPEND7`                   EQU 0xE000E200,        4, base=16,    bitRange=7-7
  244                           ;'SETPEND0.SETPEND8`                   EQU 0xE000E200,        4, base=16,    bitRange=8-8
  245                           ;'SETPEND0.SETPEND9`                   EQU 0xE000E200,        4, base=16,    bitRange=9-9
  246                           ;'SETPEND0.SETPEND10`                  EQU 0xE000E200,        4, base=16,    bitRange=10-10
  247                           ;'SETPEND0.SETPEND11`                  EQU 0xE000E200,        4, base=16,    bitRange=11-11
  248                           ;'SETPEND0.SETPEND12`                  EQU 0xE000E200,        4, base=16,    bitRange=12-12
  249                           ;'SETPEND0.SETPEND13`                  EQU 0xE000E200,        4, base=16,    bitRange=13-13
  250                           ;'SETPEND0.SETPEND14`                  EQU 0xE000E200,        4, base=16,    bitRange=14-14
  251                           ;'SETPEND0.SETPEND15`                  EQU 0xE000E200,        4, base=16,    bitRange=15-15
  252                           ;'SETPEND0.SETPEND16`                  EQU 0xE000E200,        4, base=16,    bitRange=16-16
  253                           ;'SETPEND0.SETPEND17`                  EQU 0xE000E200,        4, base=16,    bitRange=17-17
  254                           ;'SETPEND0.SETPEND18`                  EQU 0xE000E200,        4, base=16,    bitRange=18-18
  255                           ;'SETPEND0.SETPEND19`                  EQU 0xE000E200,        4, base=16,    bitRange=19-19
  256                           ;'SETPEND0.SETPEND20`                  EQU 0xE000E200,        4, base=16,    bitRange=20-20
  257                           ;'SETPEND0.SETPEND21`                  EQU 0xE000E200,        4, base=16,    bitRange=21-21
  258                           ;'SETPEND0.SETPEND22`                  EQU 0xE000E200,        4, base=16,    bitRange=22-22
  259                           ;'SETPEND0.SETPEND23`                  EQU 0xE000E200,        4, base=16,    bitRange=23-23
  260                           ;'SETPEND0.SETPEND24`                  EQU 0xE000E200,        4, base=16,    bitRange=24-24
  261                           ;'SETPEND0.SETPEND25`                  EQU 0xE000E200,        4, base=16,    bitRange=25-25
  262                           ;'SETPEND0.SETPEND26`                  EQU 0xE000E200,        4, base=16,    bitRange=26-26
  263                           ;'SETPEND0.SETPEND27`                  EQU 0xE000E200,        4, base=16,    bitRange=27-27
  264                           ;'SETPEND0.SETPEND28`                  EQU 0xE000E200,        4, base=16,    bitRange=28-28
  265                           ;'SETPEND0.SETPEND29`                  EQU 0xE000E200,        4, base=16,    bitRange=29-29
  266                           ;'SETPEND0.SETPEND30`                  EQU 0xE000E200,        4, base=16,    bitRange=30-30
  267                           ;'SETPEND0.SETPEND31`                  EQU 0xE000E200,        4, base=16,    bitRange=31-31
  268                           
  269                           SETPEND1                            EQU 0xE000E204
  270                           ;'SETPEND1.SETPEND32`                  EQU 0xE000E204,        4, base=16,    bitRange=0-0
  271                           ;'SETPEND1.SETPEND33`                  EQU 0xE000E204,        4, base=16,    bitRange=1-1
  272                           ;'SETPEND1.SETPEND34`                  EQU 0xE000E204,        4, base=16,    bitRange=2-2
  273                           ;'SETPEND1.SETPEND35`                  EQU 0xE000E204,        4, base=16,    bitRange=3-3
  274                           ;'SETPEND1.SETPEND36`                  EQU 0xE000E204,        4, base=16,    bitRange=4-4
  275                           ;'SETPEND1.SETPEND37`                  EQU 0xE000E204,        4, base=16,    bitRange=5-5
  276                           ;'SETPEND1.SETPEND38`                  EQU 0xE000E204,        4, base=16,    bitRange=6-6
  277                           ;'SETPEND1.SETPEND39`                  EQU 0xE000E204,        4, base=16,    bitRange=7-7
  278                           ;'SETPEND1.SETPEND40`                  EQU 0xE000E204,        4, base=16,    bitRange=8-8
  279                           ;'SETPEND1.SETPEND41`                  EQU 0xE000E204,        4, base=16,    bitRange=9-9
  280                           ;'SETPEND1.SETPEND42`                  EQU 0xE000E204,        4, base=16,    bitRange=10-10
  281                           ;'SETPEND1.SETPEND43`                  EQU 0xE000E204,        4, base=16,    bitRange=11-11
  282                           ;'SETPEND1.SETPEND44`                  EQU 0xE000E204,        4, base=16,    bitRange=12-12
  283                           ;'SETPEND1.SETPEND45`                  EQU 0xE000E204,        4, base=16,    bitRange=13-13
  284                           ;'SETPEND1.SETPEND46`                  EQU 0xE000E204,        4, base=16,    bitRange=14-14
  285                           ;'SETPEND1.SETPEND47`                  EQU 0xE000E204,        4, base=16,    bitRange=15-15
  286                           ;'SETPEND1.SETPEND48`                  EQU 0xE000E204,        4, base=16,    bitRange=16-16
  287                           ;'SETPEND1.SETPEND49`                  EQU 0xE000E204,        4, base=16,    bitRange=17-17
  288                           ;'SETPEND1.SETPEND50`                  EQU 0xE000E204,        4, base=16,    bitRange=18-18
  289                           ;'SETPEND1.SETPEND51`                  EQU 0xE000E204,        4, base=16,    bitRange=19-19
  290                           ;'SETPEND1.SETPEND52`                  EQU 0xE000E204,        4, base=16,    bitRange=20-20
  291                           ;'SETPEND1.SETPEND53`                  EQU 0xE000E204,        4, base=16,    bitRange=21-21
  292                           ;'SETPEND1.SETPEND54`                  EQU 0xE000E204,        4, base=16,    bitRange=22-22
  293                           ;'SETPEND1.SETPEND55`                  EQU 0xE000E204,        4, base=16,    bitRange=23-23
  294                           ;'SETPEND1.SETPEND56`                  EQU 0xE000E204,        4, base=16,    bitRange=24-24
  295                           ;'SETPEND1.SETPEND57`                  EQU 0xE000E204,        4, base=16,    bitRange=25-25
  296                           ;'SETPEND1.SETPEND58`                  EQU 0xE000E204,        4, base=16,    bitRange=26-26
  297                           ;'SETPEND1.SETPEND59`                  EQU 0xE000E204,        4, base=16,    bitRange=27-27
  298                           ;'SETPEND1.SETPEND60`                  EQU 0xE000E204,        4, base=16,    bitRange=28-28
  299                           ;'SETPEND1.SETPEND61`                  EQU 0xE000E204,        4, base=16,    bitRange=29-29
  300                           ;'SETPEND1.SETPEND62`                  EQU 0xE000E204,        4, base=16,    bitRange=30-30
  301                           ;'SETPEND1.SETPEND63`                  EQU 0xE000E204,        4, base=16,    bitRange=31-31
  302                           
  303                           SETPEND2                            EQU 0xE000E208
  304                           ;'SETPEND2.SETPEND64`                  EQU 0xE000E208,        4, base=16,    bitRange=0-0
  305                           ;'SETPEND2.SETPEND65`                  EQU 0xE000E208,        4, base=16,    bitRange=1-1
  306                           ;'SETPEND2.SETPEND66`                  EQU 0xE000E208,        4, base=16,    bitRange=2-2
  307                           ;'SETPEND2.SETPEND67`                  EQU 0xE000E208,        4, base=16,    bitRange=3-3
  308                           ;'SETPEND2.SETPEND68`                  EQU 0xE000E208,        4, base=16,    bitRange=4-4
  309                           ;'SETPEND2.SETPEND69`                  EQU 0xE000E208,        4, base=16,    bitRange=5-5
  310                           ;'SETPEND2.SETPEND70`                  EQU 0xE000E208,        4, base=16,    bitRange=6-6
  311                           ;'SETPEND2.SETPEND71`                  EQU 0xE000E208,        4, base=16,    bitRange=7-7
  312                           ;'SETPEND2.SETPEND72`                  EQU 0xE000E208,        4, base=16,    bitRange=8-8
  313                           ;'SETPEND2.SETPEND73`                  EQU 0xE000E208,        4, base=16,    bitRange=9-9
  314                           ;'SETPEND2.SETPEND74`                  EQU 0xE000E208,        4, base=16,    bitRange=10-10
  315                           ;'SETPEND2.SETPEND75`                  EQU 0xE000E208,        4, base=16,    bitRange=11-11
  316                           ;'SETPEND2.SETPEND76`                  EQU 0xE000E208,        4, base=16,    bitRange=12-12
  317                           ;'SETPEND2.SETPEND77`                  EQU 0xE000E208,        4, base=16,    bitRange=13-13
  318                           ;'SETPEND2.SETPEND78`                  EQU 0xE000E208,        4, base=16,    bitRange=14-14
  319                           ;'SETPEND2.SETPEND79`                  EQU 0xE000E208,        4, base=16,    bitRange=15-15
  320                           ;'SETPEND2.SETPEND80`                  EQU 0xE000E208,        4, base=16,    bitRange=16-16
  321                           ;'SETPEND2.SETPEND81`                  EQU 0xE000E208,        4, base=16,    bitRange=17-17
  322                           ;'SETPEND2.SETPEND82`                  EQU 0xE000E208,        4, base=16,    bitRange=18-18
  323                           ;'SETPEND2.SETPEND83`                  EQU 0xE000E208,        4, base=16,    bitRange=19-19
  324                           ;'SETPEND2.SETPEND84`                  EQU 0xE000E208,        4, base=16,    bitRange=20-20
  325                           ;'SETPEND2.SETPEND85`                  EQU 0xE000E208,        4, base=16,    bitRange=21-21
  326                           ;'SETPEND2.SETPEND86`                  EQU 0xE000E208,        4, base=16,    bitRange=22-22
  327                           ;'SETPEND2.SETPEND87`                  EQU 0xE000E208,        4, base=16,    bitRange=23-23
  328                           ;'SETPEND2.SETPEND88`                  EQU 0xE000E208,        4, base=16,    bitRange=24-24
  329                           ;'SETPEND2.SETPEND89`                  EQU 0xE000E208,        4, base=16,    bitRange=25-25
  330                           ;'SETPEND2.SETPEND90`                  EQU 0xE000E208,        4, base=16,    bitRange=26-26
  331                           ;'SETPEND2.SETPEND91`                  EQU 0xE000E208,        4, base=16,    bitRange=27-27
  332                           ;'SETPEND2.SETPEND92`                  EQU 0xE000E208,        4, base=16,    bitRange=28-28
  333                           ;'SETPEND2.SETPEND93`                  EQU 0xE000E208,        4, base=16,    bitRange=29-29
  334                           ;'SETPEND2.SETPEND94`                  EQU 0xE000E208,        4, base=16,    bitRange=30-30
  335                           ;'SETPEND2.SETPEND95`                  EQU 0xE000E208,        4, base=16,    bitRange=31-31
  336                           
  337                           CLRPEND0                            EQU 0xE000E280
  338                           ;'CLRPEND0.CLRPEND0`                   EQU 0xE000E280,        4, base=16,    bitRange=0-0
  339                           ;'CLRPEND0.CLRPEND1`                   EQU 0xE000E280,        4, base=16,    bitRange=1-1
  340                           ;'CLRPEND0.CLRPEND2`                   EQU 0xE000E280,        4, base=16,    bitRange=2-2
  341                           ;'CLRPEND0.CLRPEND3`                   EQU 0xE000E280,        4, base=16,    bitRange=3-3
  342                           ;'CLRPEND0.CLRPEND4`                   EQU 0xE000E280,        4, base=16,    bitRange=4-4
  343                           ;'CLRPEND0.CLRPEND5`                   EQU 0xE000E280,        4, base=16,    bitRange=5-5
  344                           ;'CLRPEND0.CLRPEND6`                   EQU 0xE000E280,        4, base=16,    bitRange=6-6
  345                           ;'CLRPEND0.CLRPEND7`                   EQU 0xE000E280,        4, base=16,    bitRange=7-7
  346                           ;'CLRPEND0.CLRPEND8`                   EQU 0xE000E280,        4, base=16,    bitRange=8-8
  347                           ;'CLRPEND0.CLRPEND9`                   EQU 0xE000E280,        4, base=16,    bitRange=9-9
  348                           ;'CLRPEND0.CLRPEND10`                  EQU 0xE000E280,        4, base=16,    bitRange=10-10
  349                           ;'CLRPEND0.CLRPEND11`                  EQU 0xE000E280,        4, base=16,    bitRange=11-11
  350                           ;'CLRPEND0.CLRPEND12`                  EQU 0xE000E280,        4, base=16,    bitRange=12-12
  351                           ;'CLRPEND0.CLRPEND13`                  EQU 0xE000E280,        4, base=16,    bitRange=13-13
  352                           ;'CLRPEND0.CLRPEND14`                  EQU 0xE000E280,        4, base=16,    bitRange=14-14
  353                           ;'CLRPEND0.CLRPEND15`                  EQU 0xE000E280,        4, base=16,    bitRange=15-15
  354                           ;'CLRPEND0.CLRPEND16`                  EQU 0xE000E280,        4, base=16,    bitRange=16-16
  355                           ;'CLRPEND0.CLRPEND17`                  EQU 0xE000E280,        4, base=16,    bitRange=17-17
  356                           ;'CLRPEND0.CLRPEND18`                  EQU 0xE000E280,        4, base=16,    bitRange=18-18
  357                           ;'CLRPEND0.CLRPEND19`                  EQU 0xE000E280,        4, base=16,    bitRange=19-19
  358                           ;'CLRPEND0.CLRPEND20`                  EQU 0xE000E280,        4, base=16,    bitRange=20-20
  359                           ;'CLRPEND0.CLRPEND21`                  EQU 0xE000E280,        4, base=16,    bitRange=21-21
  360                           ;'CLRPEND0.CLRPEND22`                  EQU 0xE000E280,        4, base=16,    bitRange=22-22
  361                           ;'CLRPEND0.CLRPEND23`                  EQU 0xE000E280,        4, base=16,    bitRange=23-23
  362                           ;'CLRPEND0.CLRPEND24`                  EQU 0xE000E280,        4, base=16,    bitRange=24-24
  363                           ;'CLRPEND0.CLRPEND25`                  EQU 0xE000E280,        4, base=16,    bitRange=25-25
  364                           ;'CLRPEND0.CLRPEND26`                  EQU 0xE000E280,        4, base=16,    bitRange=26-26
  365                           ;'CLRPEND0.CLRPEND27`                  EQU 0xE000E280,        4, base=16,    bitRange=27-27
  366                           ;'CLRPEND0.CLRPEND28`                  EQU 0xE000E280,        4, base=16,    bitRange=28-28
  367                           ;'CLRPEND0.CLRPEND29`                  EQU 0xE000E280,        4, base=16,    bitRange=29-29
  368                           ;'CLRPEND0.CLRPEND30`                  EQU 0xE000E280,        4, base=16,    bitRange=30-30
  369                           ;'CLRPEND0.CLRPEND31`                  EQU 0xE000E280,        4, base=16,    bitRange=31-31
  370                           
  371                           CLRPEND1                            EQU 0xE000E284
  372                           ;'CLRPEND1.CLRPEND32`                  EQU 0xE000E284,        4, base=16,    bitRange=0-0
  373                           ;'CLRPEND1.CLRPEND33`                  EQU 0xE000E284,        4, base=16,    bitRange=1-1
  374                           ;'CLRPEND1.CLRPEND34`                  EQU 0xE000E284,        4, base=16,    bitRange=2-2
  375                           ;'CLRPEND1.CLRPEND35`                  EQU 0xE000E284,        4, base=16,    bitRange=3-3
  376                           ;'CLRPEND1.CLRPEND36`                  EQU 0xE000E284,        4, base=16,    bitRange=4-4
  377                           ;'CLRPEND1.CLRPEND37`                  EQU 0xE000E284,        4, base=16,    bitRange=5-5
  378                           ;'CLRPEND1.CLRPEND38`                  EQU 0xE000E284,        4, base=16,    bitRange=6-6
  379                           ;'CLRPEND1.CLRPEND39`                  EQU 0xE000E284,        4, base=16,    bitRange=7-7
  380                           ;'CLRPEND1.CLRPEND40`                  EQU 0xE000E284,        4, base=16,    bitRange=8-8
  381                           ;'CLRPEND1.CLRPEND41`                  EQU 0xE000E284,        4, base=16,    bitRange=9-9
  382                           ;'CLRPEND1.CLRPEND42`                  EQU 0xE000E284,        4, base=16,    bitRange=10-10
  383                           ;'CLRPEND1.CLRPEND43`                  EQU 0xE000E284,        4, base=16,    bitRange=11-11
  384                           ;'CLRPEND1.CLRPEND44`                  EQU 0xE000E284,        4, base=16,    bitRange=12-12
  385                           ;'CLRPEND1.CLRPEND45`                  EQU 0xE000E284,        4, base=16,    bitRange=13-13
  386                           ;'CLRPEND1.CLRPEND46`                  EQU 0xE000E284,        4, base=16,    bitRange=14-14
  387                           ;'CLRPEND1.CLRPEND47`                  EQU 0xE000E284,        4, base=16,    bitRange=15-15
  388                           ;'CLRPEND1.CLRPEND48`                  EQU 0xE000E284,        4, base=16,    bitRange=16-16
  389                           ;'CLRPEND1.CLRPEND49`                  EQU 0xE000E284,        4, base=16,    bitRange=17-17
  390                           ;'CLRPEND1.CLRPEND50`                  EQU 0xE000E284,        4, base=16,    bitRange=18-18
  391                           ;'CLRPEND1.CLRPEND51`                  EQU 0xE000E284,        4, base=16,    bitRange=19-19
  392                           ;'CLRPEND1.CLRPEND52`                  EQU 0xE000E284,        4, base=16,    bitRange=20-20
  393                           ;'CLRPEND1.CLRPEND53`                  EQU 0xE000E284,        4, base=16,    bitRange=21-21
  394                           ;'CLRPEND1.CLRPEND54`                  EQU 0xE000E284,        4, base=16,    bitRange=22-22
  395                           ;'CLRPEND1.CLRPEND55`                  EQU 0xE000E284,        4, base=16,    bitRange=23-23
  396                           ;'CLRPEND1.CLRPEND56`                  EQU 0xE000E284,        4, base=16,    bitRange=24-24
  397                           ;'CLRPEND1.CLRPEND57`                  EQU 0xE000E284,        4, base=16,    bitRange=25-25
  398                           ;'CLRPEND1.CLRPEND58`                  EQU 0xE000E284,        4, base=16,    bitRange=26-26
  399                           ;'CLRPEND1.CLRPEND59`                  EQU 0xE000E284,        4, base=16,    bitRange=27-27
  400                           ;'CLRPEND1.CLRPEND60`                  EQU 0xE000E284,        4, base=16,    bitRange=28-28
  401                           ;'CLRPEND1.CLRPEND61`                  EQU 0xE000E284,        4, base=16,    bitRange=29-29
  402                           ;'CLRPEND1.CLRPEND62`                  EQU 0xE000E284,        4, base=16,    bitRange=30-30
  403                           ;'CLRPEND1.CLRPEND63`                  EQU 0xE000E284,        4, base=16,    bitRange=31-31
  404                           
  405                           CLRPEND2                            EQU 0xE000E288
  406                           ;'CLRPEND2.CLRPEND64`                  EQU 0xE000E288,        4, base=16,    bitRange=0-0
  407                           ;'CLRPEND2.CLRPEND65`                  EQU 0xE000E288,        4, base=16,    bitRange=1-1
  408                           ;'CLRPEND2.CLRPEND66`                  EQU 0xE000E288,        4, base=16,    bitRange=2-2
  409                           ;'CLRPEND2.CLRPEND67`                  EQU 0xE000E288,        4, base=16,    bitRange=3-3
  410                           ;'CLRPEND2.CLRPEND68`                  EQU 0xE000E288,        4, base=16,    bitRange=4-4
  411                           ;'CLRPEND2.CLRPEND69`                  EQU 0xE000E288,        4, base=16,    bitRange=5-5
  412                           ;'CLRPEND2.CLRPEND70`                  EQU 0xE000E288,        4, base=16,    bitRange=6-6
  413                           ;'CLRPEND2.CLRPEND71`                  EQU 0xE000E288,        4, base=16,    bitRange=7-7
  414                           ;'CLRPEND2.CLRPEND72`                  EQU 0xE000E288,        4, base=16,    bitRange=8-8
  415                           ;'CLRPEND2.CLRPEND73`                  EQU 0xE000E288,        4, base=16,    bitRange=9-9
  416                           ;'CLRPEND2.CLRPEND74`                  EQU 0xE000E288,        4, base=16,    bitRange=10-10
  417                           ;'CLRPEND2.CLRPEND75`                  EQU 0xE000E288,        4, base=16,    bitRange=11-11
  418                           ;'CLRPEND2.CLRPEND76`                  EQU 0xE000E288,        4, base=16,    bitRange=12-12
  419                           ;'CLRPEND2.CLRPEND77`                  EQU 0xE000E288,        4, base=16,    bitRange=13-13
  420                           ;'CLRPEND2.CLRPEND78`                  EQU 0xE000E288,        4, base=16,    bitRange=14-14
  421                           ;'CLRPEND2.CLRPEND79`                  EQU 0xE000E288,        4, base=16,    bitRange=15-15
  422                           ;'CLRPEND2.CLRPEND80`                  EQU 0xE000E288,        4, base=16,    bitRange=16-16
  423                           ;'CLRPEND2.CLRPEND81`                  EQU 0xE000E288,        4, base=16,    bitRange=17-17
  424                           ;'CLRPEND2.CLRPEND82`                  EQU 0xE000E288,        4, base=16,    bitRange=18-18
  425                           ;'CLRPEND2.CLRPEND83`                  EQU 0xE000E288,        4, base=16,    bitRange=19-19
  426                           ;'CLRPEND2.CLRPEND84`                  EQU 0xE000E288,        4, base=16,    bitRange=20-20
  427                           ;'CLRPEND2.CLRPEND85`                  EQU 0xE000E288,        4, base=16,    bitRange=21-21
  428                           ;'CLRPEND2.CLRPEND86`                  EQU 0xE000E288,        4, base=16,    bitRange=22-22
  429                           ;'CLRPEND2.CLRPEND87`                  EQU 0xE000E288,        4, base=16,    bitRange=23-23
  430                           ;'CLRPEND2.CLRPEND88`                  EQU 0xE000E288,        4, base=16,    bitRange=24-24
  431                           ;'CLRPEND2.CLRPEND89`                  EQU 0xE000E288,        4, base=16,    bitRange=25-25
  432                           ;'CLRPEND2.CLRPEND90`                  EQU 0xE000E288,        4, base=16,    bitRange=26-26
  433                           ;'CLRPEND2.CLRPEND91`                  EQU 0xE000E288,        4, base=16,    bitRange=27-27
  434                           ;'CLRPEND2.CLRPEND92`                  EQU 0xE000E288,        4, base=16,    bitRange=28-28
  435                           ;'CLRPEND2.CLRPEND93`                  EQU 0xE000E288,        4, base=16,    bitRange=29-29
  436                           ;'CLRPEND2.CLRPEND94`                  EQU 0xE000E288,        4, base=16,    bitRange=30-30
  437                           ;'CLRPEND2.CLRPEND95`                  EQU 0xE000E288,        4, base=16,    bitRange=31-31
  438                           
  439                           ACTIVE0                             EQU 0xE000E300
  440                           ;'ACTIVE0.ACTIVE0`                     EQU 0xE000E300,        4, base=16,    bitRange=0-0
  441                           ;'ACTIVE0.ACTIVE1`                     EQU 0xE000E300,        4, base=16,    bitRange=1-1
  442                           ;'ACTIVE0.ACTIVE2`                     EQU 0xE000E300,        4, base=16,    bitRange=2-2
  443                           ;'ACTIVE0.ACTIVE3`                     EQU 0xE000E300,        4, base=16,    bitRange=3-3
  444                           ;'ACTIVE0.ACTIVE4`                     EQU 0xE000E300,        4, base=16,    bitRange=4-4
  445                           ;'ACTIVE0.ACTIVE5`                     EQU 0xE000E300,        4, base=16,    bitRange=5-5
  446                           ;'ACTIVE0.ACTIVE6`                     EQU 0xE000E300,        4, base=16,    bitRange=6-6
  447                           ;'ACTIVE0.ACTIVE7`                     EQU 0xE000E300,        4, base=16,    bitRange=7-7
  448                           ;'ACTIVE0.ACTIVE8`                     EQU 0xE000E300,        4, base=16,    bitRange=8-8
  449                           ;'ACTIVE0.ACTIVE9`                     EQU 0xE000E300,        4, base=16,    bitRange=9-9
  450                           ;'ACTIVE0.ACTIVE10`                    EQU 0xE000E300,        4, base=16,    bitRange=10-10
  451                           ;'ACTIVE0.ACTIVE11`                    EQU 0xE000E300,        4, base=16,    bitRange=11-11
  452                           ;'ACTIVE0.ACTIVE12`                    EQU 0xE000E300,        4, base=16,    bitRange=12-12
  453                           ;'ACTIVE0.ACTIVE13`                    EQU 0xE000E300,        4, base=16,    bitRange=13-13
  454                           ;'ACTIVE0.ACTIVE14`                    EQU 0xE000E300,        4, base=16,    bitRange=14-14
  455                           ;'ACTIVE0.ACTIVE15`                    EQU 0xE000E300,        4, base=16,    bitRange=15-15
  456                           ;'ACTIVE0.ACTIVE16`                    EQU 0xE000E300,        4, base=16,    bitRange=16-16
  457                           ;'ACTIVE0.ACTIVE17`                    EQU 0xE000E300,        4, base=16,    bitRange=17-17
  458                           ;'ACTIVE0.ACTIVE18`                    EQU 0xE000E300,        4, base=16,    bitRange=18-18
  459                           ;'ACTIVE0.ACTIVE19`                    EQU 0xE000E300,        4, base=16,    bitRange=19-19
  460                           ;'ACTIVE0.ACTIVE20`                    EQU 0xE000E300,        4, base=16,    bitRange=20-20
  461                           ;'ACTIVE0.ACTIVE21`                    EQU 0xE000E300,        4, base=16,    bitRange=21-21
  462                           ;'ACTIVE0.ACTIVE22`                    EQU 0xE000E300,        4, base=16,    bitRange=22-22
  463                           ;'ACTIVE0.ACTIVE23`                    EQU 0xE000E300,        4, base=16,    bitRange=23-23
  464                           ;'ACTIVE0.ACTIVE24`                    EQU 0xE000E300,        4, base=16,    bitRange=24-24
  465                           ;'ACTIVE0.ACTIVE25`                    EQU 0xE000E300,        4, base=16,    bitRange=25-25
  466                           ;'ACTIVE0.ACTIVE26`                    EQU 0xE000E300,        4, base=16,    bitRange=26-26
  467                           ;'ACTIVE0.ACTIVE27`                    EQU 0xE000E300,        4, base=16,    bitRange=27-27
  468                           ;'ACTIVE0.ACTIVE28`                    EQU 0xE000E300,        4, base=16,    bitRange=28-28
  469                           ;'ACTIVE0.ACTIVE29`                    EQU 0xE000E300,        4, base=16,    bitRange=29-29
  470                           ;'ACTIVE0.ACTIVE30`                    EQU 0xE000E300,        4, base=16,    bitRange=30-30
  471                           ;'ACTIVE0.ACTIVE31`                    EQU 0xE000E300,        4, base=16,    bitRange=31-31
  472                           
  473                           ACTIVE1                             EQU 0xE000E304
  474                           ;'ACTIVE1.ACTIVE32`                    EQU 0xE000E304,        4, base=16,    bitRange=0-0
  475                           ;'ACTIVE1.ACTIVE33`                    EQU 0xE000E304,        4, base=16,    bitRange=1-1
  476                           ;'ACTIVE1.ACTIVE34`                    EQU 0xE000E304,        4, base=16,    bitRange=2-2
  477                           ;'ACTIVE1.ACTIVE35`                    EQU 0xE000E304,        4, base=16,    bitRange=3-3
  478                           ;'ACTIVE1.ACTIVE36`                    EQU 0xE000E304,        4, base=16,    bitRange=4-4
  479                           ;'ACTIVE1.ACTIVE37`                    EQU 0xE000E304,        4, base=16,    bitRange=5-5
  480                           ;'ACTIVE1.ACTIVE38`                    EQU 0xE000E304,        4, base=16,    bitRange=6-6
  481                           ;'ACTIVE1.ACTIVE39`                    EQU 0xE000E304,        4, base=16,    bitRange=7-7
  482                           ;'ACTIVE1.ACTIVE40`                    EQU 0xE000E304,        4, base=16,    bitRange=8-8
  483                           ;'ACTIVE1.ACTIVE41`                    EQU 0xE000E304,        4, base=16,    bitRange=9-9
  484                           ;'ACTIVE1.ACTIVE42`                    EQU 0xE000E304,        4, base=16,    bitRange=10-10
  485                           ;'ACTIVE1.ACTIVE43`                    EQU 0xE000E304,        4, base=16,    bitRange=11-11
  486                           ;'ACTIVE1.ACTIVE44`                    EQU 0xE000E304,        4, base=16,    bitRange=12-12
  487                           ;'ACTIVE1.ACTIVE45`                    EQU 0xE000E304,        4, base=16,    bitRange=13-13
  488                           ;'ACTIVE1.ACTIVE46`                    EQU 0xE000E304,        4, base=16,    bitRange=14-14
  489                           ;'ACTIVE1.ACTIVE47`                    EQU 0xE000E304,        4, base=16,    bitRange=15-15
  490                           ;'ACTIVE1.ACTIVE48`                    EQU 0xE000E304,        4, base=16,    bitRange=16-16
  491                           ;'ACTIVE1.ACTIVE49`                    EQU 0xE000E304,        4, base=16,    bitRange=17-17
  492                           ;'ACTIVE1.ACTIVE50`                    EQU 0xE000E304,        4, base=16,    bitRange=18-18
  493                           ;'ACTIVE1.ACTIVE51`                    EQU 0xE000E304,        4, base=16,    bitRange=19-19
  494                           ;'ACTIVE1.ACTIVE52`                    EQU 0xE000E304,        4, base=16,    bitRange=20-20
  495                           ;'ACTIVE1.ACTIVE53`                    EQU 0xE000E304,        4, base=16,    bitRange=21-21
  496                           ;'ACTIVE1.ACTIVE54`                    EQU 0xE000E304,        4, base=16,    bitRange=22-22
  497                           ;'ACTIVE1.ACTIVE55`                    EQU 0xE000E304,        4, base=16,    bitRange=23-23
  498                           ;'ACTIVE1.ACTIVE56`                    EQU 0xE000E304,        4, base=16,    bitRange=24-24
  499                           ;'ACTIVE1.ACTIVE57`                    EQU 0xE000E304,        4, base=16,    bitRange=25-25
  500                           ;'ACTIVE1.ACTIVE58`                    EQU 0xE000E304,        4, base=16,    bitRange=26-26
  501                           ;'ACTIVE1.ACTIVE59`                    EQU 0xE000E304,        4, base=16,    bitRange=27-27
  502                           ;'ACTIVE1.ACTIVE60`                    EQU 0xE000E304,        4, base=16,    bitRange=28-28
  503                           ;'ACTIVE1.ACTIVE61`                    EQU 0xE000E304,        4, base=16,    bitRange=29-29
  504                           ;'ACTIVE1.ACTIVE62`                    EQU 0xE000E304,        4, base=16,    bitRange=30-30
  505                           ;'ACTIVE1.ACTIVE63`                    EQU 0xE000E304,        4, base=16,    bitRange=31-31
  506                           
  507                           ACTIVE2                             EQU 0xE000E308
  508                           ;'ACTIVE2.ACTIVE64`                    EQU 0xE000E308,        4, base=16,    bitRange=0-0
  509                           ;'ACTIVE2.ACTIVE65`                    EQU 0xE000E308,        4, base=16,    bitRange=1-1
  510                           ;'ACTIVE2.ACTIVE66`                    EQU 0xE000E308,        4, base=16,    bitRange=2-2
  511                           ;'ACTIVE2.ACTIVE67`                    EQU 0xE000E308,        4, base=16,    bitRange=3-3
  512                           ;'ACTIVE2.ACTIVE68`                    EQU 0xE000E308,        4, base=16,    bitRange=4-4
  513                           ;'ACTIVE2.ACTIVE69`                    EQU 0xE000E308,        4, base=16,    bitRange=5-5
  514                           ;'ACTIVE2.ACTIVE70`                    EQU 0xE000E308,        4, base=16,    bitRange=6-6
  515                           ;'ACTIVE2.ACTIVE71`                    EQU 0xE000E308,        4, base=16,    bitRange=7-7
  516                           ;'ACTIVE2.ACTIVE72`                    EQU 0xE000E308,        4, base=16,    bitRange=8-8
  517                           ;'ACTIVE2.ACTIVE73`                    EQU 0xE000E308,        4, base=16,    bitRange=9-9
  518                           ;'ACTIVE2.ACTIVE74`                    EQU 0xE000E308,        4, base=16,    bitRange=10-10
  519                           ;'ACTIVE2.ACTIVE75`                    EQU 0xE000E308,        4, base=16,    bitRange=11-11
  520                           ;'ACTIVE2.ACTIVE76`                    EQU 0xE000E308,        4, base=16,    bitRange=12-12
  521                           ;'ACTIVE2.ACTIVE77`                    EQU 0xE000E308,        4, base=16,    bitRange=13-13
  522                           ;'ACTIVE2.ACTIVE78`                    EQU 0xE000E308,        4, base=16,    bitRange=14-14
  523                           ;'ACTIVE2.ACTIVE79`                    EQU 0xE000E308,        4, base=16,    bitRange=15-15
  524                           ;'ACTIVE2.ACTIVE80`                    EQU 0xE000E308,        4, base=16,    bitRange=16-16
  525                           ;'ACTIVE2.ACTIVE81`                    EQU 0xE000E308,        4, base=16,    bitRange=17-17
  526                           ;'ACTIVE2.ACTIVE82`                    EQU 0xE000E308,        4, base=16,    bitRange=18-18
  527                           ;'ACTIVE2.ACTIVE83`                    EQU 0xE000E308,        4, base=16,    bitRange=19-19
  528                           ;'ACTIVE2.ACTIVE84`                    EQU 0xE000E308,        4, base=16,    bitRange=20-20
  529                           ;'ACTIVE2.ACTIVE85`                    EQU 0xE000E308,        4, base=16,    bitRange=21-21
  530                           ;'ACTIVE2.ACTIVE86`                    EQU 0xE000E308,        4, base=16,    bitRange=22-22
  531                           ;'ACTIVE2.ACTIVE87`                    EQU 0xE000E308,        4, base=16,    bitRange=23-23
  532                           ;'ACTIVE2.ACTIVE88`                    EQU 0xE000E308,        4, base=16,    bitRange=24-24
  533                           ;'ACTIVE2.ACTIVE89`                    EQU 0xE000E308,        4, base=16,    bitRange=25-25
  534                           ;'ACTIVE2.ACTIVE90`                    EQU 0xE000E308,        4, base=16,    bitRange=26-26
  535                           ;'ACTIVE2.ACTIVE91`                    EQU 0xE000E308,        4, base=16,    bitRange=27-27
  536                           ;'ACTIVE2.ACTIVE92`                    EQU 0xE000E308,        4, base=16,    bitRange=28-28
  537                           ;'ACTIVE2.ACTIVE93`                    EQU 0xE000E308,        4, base=16,    bitRange=29-29
  538                           ;'ACTIVE2.ACTIVE94`                    EQU 0xE000E308,        4, base=16,    bitRange=30-30
  539                           ;'ACTIVE2.ACTIVE95`                    EQU 0xE000E308,        4, base=16,    bitRange=31-31
  540                           
  541                           IP0                                 EQU 0xE000E400
  542                           ;'IP0.PRI_0`                           EQU 0xE000E400,        4, base=16,    bitRange=0-7
  543                           ;'IP0.PRI_1`                           EQU 0xE000E400,        4, base=16,    bitRange=8-15
  544                           ;'IP0.PRI_2`                           EQU 0xE000E400,        4, base=16,    bitRange=16-23
  545                           ;'IP0.PRI_3`                           EQU 0xE000E400,        4, base=16,    bitRange=24-31
  546                           
  547                           IP1                                 EQU 0xE000E404
  548                           ;'IP1.PRI_4`                           EQU 0xE000E404,        4, base=16,    bitRange=0-7
  549                           ;'IP1.PRI_5`                           EQU 0xE000E404,        4, base=16,    bitRange=8-15
  550                           ;'IP1.PRI_6`                           EQU 0xE000E404,        4, base=16,    bitRange=16-23
  551                           ;'IP1.PRI_7`                           EQU 0xE000E404,        4, base=16,    bitRange=24-31
  552                           
  553                           IP2                                 EQU 0xE000E408
  554                           ;'IP2.PRI_8`                           EQU 0xE000E408,        4, base=16,    bitRange=0-7
  555                           ;'IP2.PRI_9`                           EQU 0xE000E408,        4, base=16,    bitRange=8-15
  556                           ;'IP2.PRI_10`                          EQU 0xE000E408,        4, base=16,    bitRange=16-23
  557                           ;'IP2.PRI_11`                          EQU 0xE000E408,        4, base=16,    bitRange=24-31
  558                           
  559                           IP3                                 EQU 0xE000E40C
  560                           ;'IP3.PRI_12`                          EQU 0xE000E40C,        4, base=16,    bitRange=0-7
  561                           ;'IP3.PRI_13`                          EQU 0xE000E40C,        4, base=16,    bitRange=8-15
  562                           ;'IP3.PRI_14`                          EQU 0xE000E40C,        4, base=16,    bitRange=16-23
  563                           ;'IP3.PRI_15`                          EQU 0xE000E40C,        4, base=16,    bitRange=24-31
  564                           
  565                           IP4                                 EQU 0xE000E410
  566                           ;'IP4.PRI_16`                          EQU 0xE000E410,        4, base=16,    bitRange=0-7
  567                           ;'IP4.PRI_17`                          EQU 0xE000E410,        4, base=16,    bitRange=8-15
  568                           ;'IP4.PRI_18`                          EQU 0xE000E410,        4, base=16,    bitRange=16-23
  569                           ;'IP4.PRI_19`                          EQU 0xE000E410,        4, base=16,    bitRange=24-31
  570                           
  571                           IP5                                 EQU 0xE000E414
  572                           ;'IP5.PRI_20`                          EQU 0xE000E414,        4, base=16,    bitRange=0-7
  573                           ;'IP5.PRI_21`                          EQU 0xE000E414,        4, base=16,    bitRange=8-15
  574                           ;'IP5.PRI_22`                          EQU 0xE000E414,        4, base=16,    bitRange=16-23
  575                           ;'IP5.PRI_23`                          EQU 0xE000E414,        4, base=16,    bitRange=24-31
  576                           
  577                           IP6                                 EQU 0xE000E418
  578                           ;'IP6.PRI_24`                          EQU 0xE000E418,        4, base=16,    bitRange=0-7
  579                           ;'IP6.PRI_25`                          EQU 0xE000E418,        4, base=16,    bitRange=8-15
  580                           ;'IP6.PRI_26`                          EQU 0xE000E418,        4, base=16,    bitRange=16-23
  581                           ;'IP6.PRI_27`                          EQU 0xE000E418,        4, base=16,    bitRange=24-31
  582                           
  583                           IP7                                 EQU 0xE000E41C
  584                           ;'IP7.PRI_28`                          EQU 0xE000E41C,        4, base=16,    bitRange=0-7
  585                           ;'IP7.PRI_29`                          EQU 0xE000E41C,        4, base=16,    bitRange=8-15
  586                           ;'IP7.PRI_30`                          EQU 0xE000E41C,        4, base=16,    bitRange=16-23
  587                           ;'IP7.PRI_31`                          EQU 0xE000E41C,        4, base=16,    bitRange=24-31
  588                           
  589                           IP8                                 EQU 0xE000E420
  590                           ;'IP8.PRI_32`                          EQU 0xE000E420,        4, base=16,    bitRange=0-7
  591                           ;'IP8.PRI_33`                          EQU 0xE000E420,        4, base=16,    bitRange=8-15
  592                           ;'IP8.PRI_34`                          EQU 0xE000E420,        4, base=16,    bitRange=16-23
  593                           ;'IP8.PRI_35`                          EQU 0xE000E420,        4, base=16,    bitRange=24-31
  594                           
  595                           IP9                                 EQU 0xE000E424
  596                           ;'IP9.PRI_36`                          EQU 0xE000E424,        4, base=16,    bitRange=0-7
  597                           ;'IP9.PRI_37`                          EQU 0xE000E424,        4, base=16,    bitRange=8-15
  598                           ;'IP9.PRI_38`                          EQU 0xE000E424,        4, base=16,    bitRange=16-23
  599                           ;'IP9.PRI_39`                          EQU 0xE000E424,        4, base=16,    bitRange=24-31
  600                           
  601                           IP10                                EQU 0xE000E428
  602                           ;'IP10.PRI_40`                         EQU 0xE000E428,        4, base=16,    bitRange=0-7
  603                           ;'IP10.PRI_41`                         EQU 0xE000E428,        4, base=16,    bitRange=8-15
  604                           ;'IP10.PRI_42`                         EQU 0xE000E428,        4, base=16,    bitRange=16-23
  605                           ;'IP10.PRI_43`                         EQU 0xE000E428,        4, base=16,    bitRange=24-31
  606                           
  607                           IP11                                EQU 0xE000E42C
  608                           ;'IP11.PRI_44`                         EQU 0xE000E42C,        4, base=16,    bitRange=0-7
  609                           ;'IP11.PRI_45`                         EQU 0xE000E42C,        4, base=16,    bitRange=8-15
  610                           ;'IP11.PRI_46`                         EQU 0xE000E42C,        4, base=16,    bitRange=16-23
  611                           ;'IP11.PRI_47`                         EQU 0xE000E42C,        4, base=16,    bitRange=24-31
  612                           
  613                           IP12                                EQU 0xE000E430
  614                           ;'IP12.PRI_48`                         EQU 0xE000E430,        4, base=16,    bitRange=0-7
  615                           ;'IP12.PRI_49`                         EQU 0xE000E430,        4, base=16,    bitRange=8-15
  616                           ;'IP12.PRI_50`                         EQU 0xE000E430,        4, base=16,    bitRange=16-23
  617                           ;'IP12.PRI_51`                         EQU 0xE000E430,        4, base=16,    bitRange=24-31
  618                           
  619                           IP13                                EQU 0xE000E434
  620                           ;'IP13.PRI_52`                         EQU 0xE000E434,        4, base=16,    bitRange=0-7
  621                           ;'IP13.PRI_53`                         EQU 0xE000E434,        4, base=16,    bitRange=8-15
  622                           ;'IP13.PRI_54`                         EQU 0xE000E434,        4, base=16,    bitRange=16-23
  623                           ;'IP13.PRI_55`                         EQU 0xE000E434,        4, base=16,    bitRange=24-31
  624                           
  625                           IP14                                EQU 0xE000E438
  626                           ;'IP14.PRI_56`                         EQU 0xE000E438,        4, base=16,    bitRange=0-7
  627                           ;'IP14.PRI_57`                         EQU 0xE000E438,        4, base=16,    bitRange=8-15
  628                           ;'IP14.PRI_58`                         EQU 0xE000E438,        4, base=16,    bitRange=16-23
  629                           ;'IP14.PRI_59`                         EQU 0xE000E438,        4, base=16,    bitRange=24-31
  630                           
  631                           IP15                                EQU 0xE000E43C
  632                           ;'IP15.PRI_60`                         EQU 0xE000E43C,        4, base=16,    bitRange=0-7
  633                           ;'IP15.PRI_61`                         EQU 0xE000E43C,        4, base=16,    bitRange=8-15
  634                           ;'IP15.PRI_62`                         EQU 0xE000E43C,        4, base=16,    bitRange=16-23
  635                           ;'IP15.PRI_63`                         EQU 0xE000E43C,        4, base=16,    bitRange=24-31
  636                           
  637                           IP16                                EQU 0xE000E440
  638                           ;'IP16.PRI_64`                         EQU 0xE000E440,        4, base=16,    bitRange=0-7
  639                           ;'IP16.PRI_65`                         EQU 0xE000E440,        4, base=16,    bitRange=8-15
  640                           ;'IP16.PRI_66`                         EQU 0xE000E440,        4, base=16,    bitRange=16-23
  641                           ;'IP16.PRI_67`                         EQU 0xE000E440,        4, base=16,    bitRange=24-31
  642                           
  643                           CPUIDBR                             EQU 0xE000ED00
  644                           ;'CPUIDBR.REVISION`                    EQU 0xE000ED00,        4, base=16,    bitRange=0-3
  645                           ;'CPUIDBR.PARTNO`                      EQU 0xE000ED00,        4, base=16,    bitRange=4-15
  646                           ;'CPUIDBR.VARIANT`                     EQU 0xE000ED00,        4, base=16,    bitRange=20-23
  647                           ;'CPUIDBR.IMPLEMENTER`                 EQU 0xE000ED00,        4, base=16,    bitRange=24-31
  648                           
  649                           ICSR                                EQU 0xE000ED04
  650                           ;'ICSR.VECTACTIVE`                     EQU 0xE000ED04,        4, base=16,    bitRange=0-9
  651                           ;'ICSR.RETTOBASE`                      EQU 0xE000ED04,        4, base=16,    bitRange=11-11
  652                           ;'ICSR.VECTPENDING`                    EQU 0xE000ED04,        4, base=16,    bitRange=12-21
  653                           ;'ICSR.ISRPENDING`                     EQU 0xE000ED04,        4, base=16,    bitRange=22-22
  654                           ;'ICSR.ISRPREEMPT`                     EQU 0xE000ED04,        4, base=16,    bitRange=23-23
  655                           ;'ICSR.PENDSTCLR`                      EQU 0xE000ED04,        4, base=16,    bitRange=25-25
  656                           ;'ICSR.PENDSTSET`                      EQU 0xE000ED04,        4, base=16,    bitRange=26-26
  657                           ;'ICSR.PENDSVCLR`                      EQU 0xE000ED04,        4, base=16,    bitRange=27-27
  658                           ;'ICSR.PENDSVSET`                      EQU 0xE000ED04,        4, base=16,    bitRange=28-28
  659                           ;'ICSR.NMIPENDSET`                     EQU 0xE000ED04,        4, base=16,    bitRange=31-31
  660                           
  661                           VTOR                                EQU 0xE000ED08
  662                           ;'VTOR.TBLOFF`                         EQU 0xE000ED08,        4, base=16,    bitRange=7-28
  663                           ;'VTOR.TBLBASE`                        EQU 0xE000ED08,        4, base=16,    bitRange=29-29
  664                           
  665                           AIRCR                               EQU 0xE000ED0C
  666                           ;'AIRCR.VECTRESET`                     EQU 0xE000ED0C,        4, base=16,    bitRange=0-0
  667                           ;'AIRCR.VECTCLRACTIVE`                 EQU 0xE000ED0C,        4, base=16,    bitRange=1-1
  668                           ;'AIRCR.SYSRESETREQ`                   EQU 0xE000ED0C,        4, base=16,    bitRange=2-2
  669                           ;'AIRCR.PRIGROUP`                      EQU 0xE000ED0C,        4, base=16,    bitRange=8-10
  670                           ;'AIRCR.ENDIANESS`                     EQU 0xE000ED0C,        4, base=16,    bitRange=15-15
  671                           ;'AIRCR.VECTKEY`                       EQU 0xE000ED0C,        4, base=16,    bitRange=16-31
  672                           
  673                           SCR                                 EQU 0xE000ED10
  674                           ;'SCR.SLEEPONEXIT`                     EQU 0xE000ED10,        4, base=16,    bitRange=1-1
  675                           ;'SCR.SLEEPDEEP`                       EQU 0xE000ED10,        4, base=16,    bitRange=2-2
  676                           ;'SCR.SEVONPEND`                       EQU 0xE000ED10,        4, base=16,    bitRange=4-4
  677                           
  678                           CCR                                 EQU 0xE000ED14
  679                           ;'CCR.NONEBASETHRDENA`                 EQU 0xE000ED14,        4, base=16,    bitRange=0-0
  680                           ;'CCR.USERSETMPEND`                    EQU 0xE000ED14,        4, base=16,    bitRange=1-1
  681                           ;'CCR.UNALIGN_TRP`                     EQU 0xE000ED14,        4, base=16,    bitRange=3-3
  682                           ;'CCR.DIV_0_TRP`                       EQU 0xE000ED14,        4, base=16,    bitRange=4-4
  683                           ;'CCR.BFHFNMIGN`                       EQU 0xE000ED14,        4, base=16,    bitRange=8-8
  684                           ;'CCR.STKALIGN`                        EQU 0xE000ED14,        4, base=16,    bitRange=9-9
  685                           
  686                           SHPR0                               EQU 0xE000ED18
  687                           ;'SHPR0.PRI_4`                         EQU 0xE000ED18,        4, base=16,    bitRange=0-7
  688                           ;'SHPR0.PRI_5`                         EQU 0xE000ED18,        4, base=16,    bitRange=8-15
  689                           ;'SHPR0.PRI_6`                         EQU 0xE000ED18,        4, base=16,    bitRange=16-23
  690                           ;'SHPR0.PRI_7`                         EQU 0xE000ED18,        4, base=16,    bitRange=24-31
  691                           
  692                           SHPR1                               EQU 0xE000ED1C
  693                           ;'SHPR1.PRI_8`                         EQU 0xE000ED1C,        4, base=16,    bitRange=0-7
  694                           ;'SHPR1.PRI_9`                         EQU 0xE000ED1C,        4, base=16,    bitRange=8-15
  695                           ;'SHPR1.PRI_10`                        EQU 0xE000ED1C,        4, base=16,    bitRange=16-23
  696                           ;'SHPR1.PRI_11`                        EQU 0xE000ED1C,        4, base=16,    bitRange=24-31
  697                           
  698                           SHPR2                               EQU 0xE000ED20
  699                           ;'SHPR2.PRI_12`                        EQU 0xE000ED20,        4, base=16,    bitRange=0-7
  700                           ;'SHPR2.PRI_13`                        EQU 0xE000ED20,        4, base=16,    bitRange=8-15
  701                           ;'SHPR2.PRI_14`                        EQU 0xE000ED20,        4, base=16,    bitRange=16-23
  702                           ;'SHPR2.PRI_15`                        EQU 0xE000ED20,        4, base=16,    bitRange=24-31
  703                           
  704                           SHCSR                               EQU 0xE000ED24
  705                           ;'SHCSR.MEMFAULTACT`                   EQU 0xE000ED24,        4, base=16,    bitRange=0-0
  706                           ;'SHCSR.BUSFAULTACT`                   EQU 0xE000ED24,        4, base=16,    bitRange=1-1
  707                           ;'SHCSR.USGFAULTACT`                   EQU 0xE000ED24,        4, base=16,    bitRange=3-3
  708                           ;'SHCSR.SVCALLACT`                     EQU 0xE000ED24,        4, base=16,    bitRange=7-7
  709                           ;'SHCSR.MONITORACT`                    EQU 0xE000ED24,        4, base=16,    bitRange=8-8
  710                           ;'SHCSR.PENDSVACT`                     EQU 0xE000ED24,        4, base=16,    bitRange=10-10
  711                           ;'SHCSR.SYSTICKACT`                    EQU 0xE000ED24,        4, base=16,    bitRange=11-11
  712                           ;'SHCSR.MEMFAULTPENDED`                EQU 0xE000ED24,        4, base=16,    bitRange=13-13
  713                           ;'SHCSR.BUSFAULTPENDED`                EQU 0xE000ED24,        4, base=16,    bitRange=14-14
  714                           ;'SHCSR.SVCALLPENDED`                  EQU 0xE000ED24,        4, base=16,    bitRange=15-15
  715                           ;'SHCSR.MEMFAULTENA`                   EQU 0xE000ED24,        4, base=16,    bitRange=16-16
  716                           ;'SHCSR.BUSFAULTENA`                   EQU 0xE000ED24,        4, base=16,    bitRange=17-17
  717                           ;'SHCSR.USGFAULTENA`                   EQU 0xE000ED24,        4, base=16,    bitRange=18-18
  718                           
  719                           CFSR                                EQU 0xE000ED28
  720                           ;'CFSR.IACCVIOL`                       EQU 0xE000ED28,        4, base=16,    bitRange=0-0
  721                           ;'CFSR.DACCVIOL`                       EQU 0xE000ED28,        4, base=16,    bitRange=1-1
  722                           ;'CFSR.MUNSTKERR`                      EQU 0xE000ED28,        4, base=16,    bitRange=3-3
  723                           ;'CFSR.MSTKERR`                        EQU 0xE000ED28,        4, base=16,    bitRange=4-4
  724                           ;'CFSR.MMARVALID`                      EQU 0xE000ED28,        4, base=16,    bitRange=7-7
  725                           ;'CFSR.IBUSERR`                        EQU 0xE000ED28,        4, base=16,    bitRange=8-8
  726                           ;'CFSR.PRECISERR`                      EQU 0xE000ED28,        4, base=16,    bitRange=9-9
  727                           ;'CFSR.IMPRECISERR`                    EQU 0xE000ED28,        4, base=16,    bitRange=10-10
  728                           ;'CFSR.UNSTKERR`                       EQU 0xE000ED28,        4, base=16,    bitRange=11-11
  729                           ;'CFSR.STKERR`                         EQU 0xE000ED28,        4, base=16,    bitRange=12-12
  730                           ;'CFSR.BFARVALID`                      EQU 0xE000ED28,        4, base=16,    bitRange=15-15
  731                           ;'CFSR.UNDEFINSTR`                     EQU 0xE000ED28,        4, base=16,    bitRange=16-16
  732                           ;'CFSR.INVSTATE`                       EQU 0xE000ED28,        4, base=16,    bitRange=17-17
  733                           ;'CFSR.INVPC`                          EQU 0xE000ED28,        4, base=16,    bitRange=18-18
  734                           ;'CFSR.NOCP`                           EQU 0xE000ED28,        4, base=16,    bitRange=19-19
  735                           ;'CFSR.UNALIGNED`                      EQU 0xE000ED28,        4, base=16,    bitRange=24-24
  736                           ;'CFSR.DIVBYZERO`                      EQU 0xE000ED28,        4, base=16,    bitRange=25-25
  737                           
  738                           HFSR                                EQU 0xE000ED2C
  739                           ;'HFSR.VECTTBL`                        EQU 0xE000ED2C,        4, base=16,    bitRange=1-1
  740                           ;'HFSR.FORCED`                         EQU 0xE000ED2C,        4, base=16,    bitRange=30-30
  741                           ;'HFSR.DEBUGEVT`                       EQU 0xE000ED2C,        4, base=16,    bitRange=31-31
  742                           
  743                           DFSR                                EQU 0xE000ED30
  744                           ;'DFSR.HALTED`                         EQU 0xE000ED30,        4, base=16,    bitRange=0-0
  745                           ;'DFSR.BKPT`                           EQU 0xE000ED30,        4, base=16,    bitRange=1-1
  746                           ;'DFSR.DWTTRAP`                        EQU 0xE000ED30,        4, base=16,    bitRange=2-2
  747                           ;'DFSR.VCATCH`                         EQU 0xE000ED30,        4, base=16,    bitRange=3-3
  748                           ;'DFSR.EXTERNAL`                       EQU 0xE000ED30,        4, base=16,    bitRange=4-4
  749                           
  750                           MMFAR                               EQU 0xE000ED34
  751                           
  752                           BFAR                                EQU 0xE000ED38
  753                           
  754                           STIR                                EQU 0xE000EF00
  755                           ;'STIR.INTID`                          EQU 0xE000EF00,        4, base=16,    bitRange=0-8
  756                           
  757                           
  758                           ;
  759                           ;               DBG
  760                           ;
  761                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
  762                           ;     ----                                    ----      -------     --------  -----------
                                 --------
  763                           
  764                           DBGMCU_IDCODE                       EQU 0xE0042000
  765                           ;'DBGMCU_IDCODE.DEV_ID`                EQU 0xE0042000,        4, base=16,    bitRange=0-11
  766                           ;'DBGMCU_IDCODE.REV_ID`                EQU 0xE0042000,        4, base=16,    bitRange=16-31
  767                           
  768                           DBGMCU_CR                           EQU 0xE0042004
  769                           ;'DBGMCU_CR.DBG_SLEEP`                 EQU 0xE0042004,        4, base=16,    bitRange=0-0
  770                           ;'DBGMCU_CR.DBG_STOP`                  EQU 0xE0042004,        4, base=16,    bitRange=1-1
  771                           ;'DBGMCU_CR.DBG_STANDBY`               EQU 0xE0042004,        4, base=16,    bitRange=2-2
  772                           ;'DBGMCU_CR.TRACE_IOEN`                EQU 0xE0042004,        4, base=16,    bitRange=5-5
  773                           ;'DBGMCU_CR.TRACE_MODE`                EQU 0xE0042004,        4, base=16,    bitRange=6-7
  774                           
  775                           DBGMCU_APB1_FZ                      EQU 0xE0042008
  776                           ;'DBGMCU_APB1_FZ.DBG_TIM2_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=0-0
  777                           ;'DBGMCU_APB1_FZ.DBG_TIM3_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=1-1
  778                           ;'DBGMCU_APB1_FZ.DBG_TIM4_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=2-2
  779                           ;'DBGMCU_APB1_FZ.DBG_TIM5_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=3-3
  780                           ;'DBGMCU_APB1_FZ.DBG_TIM6_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=4-4
  781                           ;'DBGMCU_APB1_FZ.DBG_TIM7_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=5-5
  782                           ;'DBGMCU_APB1_FZ.DBG_TIM12_STOP`       EQU 0xE0042008,        4, base=16,    bitRange=6-6
  783                           ;'DBGMCU_APB1_FZ.DBG_TIM13_STOP`       EQU 0xE0042008,        4, base=16,    bitRange=7-7
  784                           ;'DBGMCU_APB1_FZ.DBG_TIM14_STOP`       EQU 0xE0042008,        4, base=16,    bitRange=8-8
  785                           ;'DBGMCU_APB1_FZ.DBG_WWDG_TOP`         EQU 0xE0042008,        4, base=16,    bitRange=11-11
  786                           ;'DBGMCU_APB1_FZ.DBG_IWDG_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=12-12
  787                           ;'DBGMCU_APB1_FZ.DBG_I2C1_SMBUS_TIMEOUT`EQU 0xE0042008,        4, base=16,    bitRange=21-21
  788                           ;'DBGMCU_APB1_FZ.DBG_I2C2_SMBUS_TIMEOUT`EQU 0xE0042008,        4, base=16,    bitRange=22-22
  789                           ;'DBGMCU_APB1_FZ.DBG_I2C3_SMBUS_TIMEOUT`EQU 0xE0042008,        4, base=16,    bitRange=23-23
  790                           ;'DBGMCU_APB1_FZ.DBG_CAN1_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=25-25
  791                           ;'DBGMCU_APB1_FZ.DBG_CAN2_STOP`        EQU 0xE0042008,        4, base=16,    bitRange=26-26
  792                           
  793                           DBGMCU_APB2_FZ                      EQU 0xE004200C
  794                           ;'DBGMCU_APB2_FZ.DBG_TIM1_STOP`        EQU 0xE004200C,        4, base=16,    bitRange=0-0
  795                           ;'DBGMCU_APB2_FZ.DBG_TIM8_STOP`        EQU 0xE004200C,        4, base=16,    bitRange=1-1
  796                           ;'DBGMCU_APB2_FZ.DBG_TIM9_STOP`        EQU 0xE004200C,        4, base=16,    bitRange=16-16
  797                           ;'DBGMCU_APB2_FZ.DBG_TIM10_STOP`       EQU 0xE004200C,        4, base=16,    bitRange=17-17
  798                           ;'DBGMCU_APB2_FZ.DBG_TIM11_STOP`       EQU 0xE004200C,        4, base=16,    bitRange=18-18
  799                           
  800                           
  801                           ;
  802                           ;               PWR
  803                           ;
  804                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
  805                           ;     ----                                    ----      -------     --------  -----------
                                 --------
  806                           
  807                           PWR_CR                              EQU 0x40007000
  808                           ;'PWR_CR.LPDS`                         EQU 0x40007000,        4, base=16,    bitRange=0-0
  809                           ;'PWR_CR.PDDS`                         EQU 0x40007000,        4, base=16,    bitRange=1-1
  810                           ;'PWR_CR.CWUF`                         EQU 0x40007000,        4, base=16,    bitRange=2-2
  811                           ;'PWR_CR.CSBF`                         EQU 0x40007000,        4, base=16,    bitRange=3-3
  812                           ;'PWR_CR.PVDE`                         EQU 0x40007000,        4, base=16,    bitRange=4-4
  813                           ;'PWR_CR.PLS`                          EQU 0x40007000,        4, base=16,    bitRange=5-7
  814                           ;'PWR_CR.DBP`                          EQU 0x40007000,        4, base=16,    bitRange=8-8
  815                           ;'PWR_CR.FPDS`                         EQU 0x40007000,        4, base=16,    bitRange=9-9
  816                           
  817                           PWR_CSR                             EQU 0x40007004
  818                           ;'PWR_CSR.WUF`                         EQU 0x40007004,        4, base=16,    bitRange=0-0
  819                           ;'PWR_CSR.SBF`                         EQU 0x40007004,        4, base=16,    bitRange=1-1
  820                           ;'PWR_CSR.PVDO`                        EQU 0x40007004,        4, base=16,    bitRange=2-2
  821                           ;'PWR_CSR.BRR`                         EQU 0x40007004,        4, base=16,    bitRange=3-3
  822                           ;'PWR_CSR.EWUP`                        EQU 0x40007004,        4, base=16,    bitRange=8-8
  823                           ;'PWR_CSR.BRE`                         EQU 0x40007004,        4, base=16,    bitRange=9-9
  824                           
  825                           
  826                           ;
  827                           ;               RCC
  828                           ;
  829                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
  830                           ;     ----                                    ----      -------     --------  -----------
                                 --------
  831                           
  832                           RCC_CR                              EQU 0x40023800
  833                           ;'RCC_CR.HSION`                        EQU 0x40023800,        4, base=16,    bitRange=0-0
  834                           ;'RCC_CR.HSIRDY`                       EQU 0x40023800,        4, base=16,    bitRange=1-1
  835                           ;'RCC_CR.HSITRIM`                      EQU 0x40023800,        4, base=16,    bitRange=3-7
  836                           ;'RCC_CR.HSICAL`                       EQU 0x40023800,        4, base=16,    bitRange=8-15
  837                           ;'RCC_CR.HSEON`                        EQU 0x40023800,        4, base=16,    bitRange=16-16
  838                           ;'RCC_CR.HSERDY`                       EQU 0x40023800,        4, base=16,    bitRange=17-17
  839                           ;'RCC_CR.HSEBYP`                       EQU 0x40023800,        4, base=16,    bitRange=18-18
  840                           ;'RCC_CR.CSSON`                        EQU 0x40023800,        4, base=16,    bitRange=19-19
  841                           ;'RCC_CR.PLLON`                        EQU 0x40023800,        4, base=16,    bitRange=24-24
  842                           ;'RCC_CR.PLLRDY`                       EQU 0x40023800,        4, base=16,    bitRange=25-25
  843                           ;'RCC_CR.PLL2ON`                       EQU 0x40023800,        4, base=16,    bitRange=26-26
  844                           ;'RCC_CR.PLL2RDY`                      EQU 0x40023800,        4, base=16,    bitRange=27-27
  845                           
  846                           RCC_PLLCFGR                         EQU 0x40023804
  847                           ;'RCC_PLLCFGR.PLLM`                    EQU 0x40023804,        4, base=16,    bitRange=0-5
  848                           ;'RCC_PLLCFGR.PLLN`                    EQU 0x40023804,        4, base=16,    bitRange=6-14
  849                           ;'RCC_PLLCFGR.PLLP`                    EQU 0x40023804,        4, base=16,    bitRange=16-17
  850                           ;'RCC_PLLCFGR.PLLSRC`                  EQU 0x40023804,        4, base=16,    bitRange=22-22
  851                           ;'RCC_PLLCFGR.PLLQ`                    EQU 0x40023804,        4, base=16,    bitRange=24-27
  852                           
  853                           RCC_CFGR                            EQU 0x40023808
  854                           ;'RCC_CFGR.SW`                         EQU 0x40023808,        4, base=16,    bitRange=0-1
  855                           ;'RCC_CFGR.SWS`                        EQU 0x40023808,        4, base=16,    bitRange=2-3
  856                           ;'RCC_CFGR.HPRE`                       EQU 0x40023808,        4, base=16,    bitRange=4-7
  857                           ;'RCC_CFGR.PPRE1`                      EQU 0x40023808,        4, base=16,    bitRange=10-12
  858                           ;'RCC_CFGR.PPRE2`                      EQU 0x40023808,        4, base=16,    bitRange=13-15
  859                           ;'RCC_CFGR.RTCPRE`                     EQU 0x40023808,        4, base=16,    bitRange=16-20
  860                           ;'RCC_CFGR.MCO1`                       EQU 0x40023808,        4, base=16,    bitRange=21-22
  861                           ;'RCC_CFGR.I2SSCR`                     EQU 0x40023808,        4, base=16,    bitRange=23-23
  862                           ;'RCC_CFGR.MCO1PRE`                    EQU 0x40023808,        4, base=16,    bitRange=24-26
  863                           ;'RCC_CFGR.MCO2PRE`                    EQU 0x40023808,        4, base=16,    bitRange=27-29
  864                           ;'RCC_CFGR.MCO2`                       EQU 0x40023808,        4, base=16,    bitRange=30-31
  865                           
  866                           RCC_CIR                             EQU 0x4002380C
  867                           ;'RCC_CIR.LSIRDYF`                     EQU 0x4002380C,        4, base=16,    bitRange=0-0
  868                           ;'RCC_CIR.LSERDYF`                     EQU 0x4002380C,        4, base=16,    bitRange=1-1
  869                           ;'RCC_CIR.HSIRDYF`                     EQU 0x4002380C,        4, base=16,    bitRange=2-2
  870                           ;'RCC_CIR.HSERDYF`                     EQU 0x4002380C,        4, base=16,    bitRange=3-3
  871                           ;'RCC_CIR.PLLRDYF`                     EQU 0x4002380C,        4, base=16,    bitRange=4-4
  872                           ;'RCC_CIR.PLL2RDYF`                    EQU 0x4002380C,        4, base=16,    bitRange=5-5
  873                           ;'RCC_CIR.CSSF`                        EQU 0x4002380C,        4, base=16,    bitRange=7-7
  874                           ;'RCC_CIR.LSIRDYIE`                    EQU 0x4002380C,        4, base=16,    bitRange=8-8
  875                           ;'RCC_CIR.LSERDYIE`                    EQU 0x4002380C,        4, base=16,    bitRange=9-9
  876                           ;'RCC_CIR.HSIRDYIE`                    EQU 0x4002380C,        4, base=16,    bitRange=10-10
  877                           ;'RCC_CIR.HSERDYIE`                    EQU 0x4002380C,        4, base=16,    bitRange=11-11
  878                           ;'RCC_CIR.PLLRDYIE`                    EQU 0x4002380C,        4, base=16,    bitRange=12-12
  879                           ;'RCC_CIR.PLL2RDYIE`                   EQU 0x4002380C,        4, base=16,    bitRange=13-13
  880                           ;'RCC_CIR.LSIRDYC`                     EQU 0x4002380C,        4, base=16,    bitRange=16-16
  881                           ;'RCC_CIR.LSERDYC`                     EQU 0x4002380C,        4, base=16,    bitRange=17-17
  882                           ;'RCC_CIR.HSIRDYC`                     EQU 0x4002380C,        4, base=16,    bitRange=18-18
  883                           ;'RCC_CIR.HSERDYC`                     EQU 0x4002380C,        4, base=16,    bitRange=19-19
  884                           ;'RCC_CIR.PLLRDYC`                     EQU 0x4002380C,        4, base=16,    bitRange=20-20
  885                           ;'RCC_CIR.PLL2RDYC`                    EQU 0x4002380C,        4, base=16,    bitRange=21-21
  886                           ;'RCC_CIR.CSSC`                        EQU 0x4002380C,        4, base=16,    bitRange=23-23
  887                           
  888                           RCC_AHB1RSTR                        EQU 0x40023810
  889                           ;'RCC_AHB1RSTR.GPIOARST`               EQU 0x40023810,        4, base=16,    bitRange=0-0
  890                           ;'RCC_AHB1RSTR.GPIOBRST`               EQU 0x40023810,        4, base=16,    bitRange=1-1
  891                           ;'RCC_AHB1RSTR.GPIOCRST`               EQU 0x40023810,        4, base=16,    bitRange=2-2
  892                           ;'RCC_AHB1RSTR.GPIODRST`               EQU 0x40023810,        4, base=16,    bitRange=3-3
  893                           ;'RCC_AHB1RSTR.GPIOERST`               EQU 0x40023810,        4, base=16,    bitRange=4-4
  894                           ;'RCC_AHB1RSTR.GPIOFRST`               EQU 0x40023810,        4, base=16,    bitRange=5-5
  895                           ;'RCC_AHB1RSTR.GPIOGRST`               EQU 0x40023810,        4, base=16,    bitRange=6-6
  896                           ;'RCC_AHB1RSTR.GPIOHRST`               EQU 0x40023810,        4, base=16,    bitRange=7-7
  897                           ;'RCC_AHB1RSTR.GPIOIRST`               EQU 0x40023810,        4, base=16,    bitRange=8-8
  898                           ;'RCC_AHB1RSTR.CRCRST`                 EQU 0x40023810,        4, base=16,    bitRange=12-12
  899                           ;'RCC_AHB1RSTR.DMA1RST`                EQU 0x40023810,        4, base=16,    bitRange=21-21
  900                           ;'RCC_AHB1RSTR.DMA2RST`                EQU 0x40023810,        4, base=16,    bitRange=22-22
  901                           ;'RCC_AHB1RSTR.ETHMACRST`              EQU 0x40023810,        4, base=16,    bitRange=25-25
  902                           ;'RCC_AHB1RSTR.OTGHSRST`               EQU 0x40023810,        4, base=16,    bitRange=29-29
  903                           
  904                           RCC_AHB2RSTR                        EQU 0x40023814
  905                           ;'RCC_AHB2RSTR.DCMIRST`                EQU 0x40023814,        4, base=16,    bitRange=0-0
  906                           ;'RCC_AHB2RSTR.RNGRST`                 EQU 0x40023814,        4, base=16,    bitRange=6-6
  907                           ;'RCC_AHB2RSTR.OTGFSRST`               EQU 0x40023814,        4, base=16,    bitRange=7-7
  908                           
  909                           RCC_AHB3RSTR                        EQU 0x40023818
  910                           ;'RCC_AHB3RSTR.FSMCRST`                EQU 0x40023818,        4, base=16,    bitRange=0-0
  911                           
  912                           RCC_APB1RSTR                        EQU 0x40023820
  913                           ;'RCC_APB1RSTR.TIM2RST`                EQU 0x40023820,        4, base=16,    bitRange=0-0
  914                           ;'RCC_APB1RSTR.TIM3RST`                EQU 0x40023820,        4, base=16,    bitRange=1-1
  915                           ;'RCC_APB1RSTR.TIM4RST`                EQU 0x40023820,        4, base=16,    bitRange=2-2
  916                           ;'RCC_APB1RSTR.TIM5RST`                EQU 0x40023820,        4, base=16,    bitRange=3-3
  917                           ;'RCC_APB1RSTR.TIM6RST`                EQU 0x40023820,        4, base=16,    bitRange=4-4
  918                           ;'RCC_APB1RSTR.TIM7RST`                EQU 0x40023820,        4, base=16,    bitRange=5-5
  919                           ;'RCC_APB1RSTR.TIM12RST`               EQU 0x40023820,        4, base=16,    bitRange=6-6
  920                           ;'RCC_APB1RSTR.TIM13RST`               EQU 0x40023820,        4, base=16,    bitRange=7-7
  921                           ;'RCC_APB1RSTR.TIM14RST`               EQU 0x40023820,        4, base=16,    bitRange=8-8
  922                           ;'RCC_APB1RSTR.WWDGRST`                EQU 0x40023820,        4, base=16,    bitRange=11-11
  923                           ;'RCC_APB1RSTR.SPI2RST`                EQU 0x40023820,        4, base=16,    bitRange=14-14
  924                           ;'RCC_APB1RSTR.SPI3RST`                EQU 0x40023820,        4, base=16,    bitRange=15-15
  925                           ;'RCC_APB1RSTR.UART2RST`               EQU 0x40023820,        4, base=16,    bitRange=17-17
  926                           ;'RCC_APB1RSTR.UART3RST`               EQU 0x40023820,        4, base=16,    bitRange=18-18
  927                           ;'RCC_APB1RSTR.UART4RST`               EQU 0x40023820,        4, base=16,    bitRange=19-19
  928                           ;'RCC_APB1RSTR.UART5RST`               EQU 0x40023820,        4, base=16,    bitRange=20-20
  929                           ;'RCC_APB1RSTR.I2C1RST`                EQU 0x40023820,        4, base=16,    bitRange=21-21
  930                           ;'RCC_APB1RSTR.I2C2RST`                EQU 0x40023820,        4, base=16,    bitRange=22-22
  931                           ;'RCC_APB1RSTR.I2C3RST`                EQU 0x40023820,        4, base=16,    bitRange=23-23
  932                           ;'RCC_APB1RSTR.CAN1RST`                EQU 0x40023820,        4, base=16,    bitRange=25-25
  933                           ;'RCC_APB1RSTR.CAN2RST`                EQU 0x40023820,        4, base=16,    bitRange=26-26
  934                           ;'RCC_APB1RSTR.PWRRST`                 EQU 0x40023820,        4, base=16,    bitRange=28-28
  935                           ;'RCC_APB1RSTR.DACRST`                 EQU 0x40023820,        4, base=16,    bitRange=29-29
  936                           
  937                           RCC_APB2RSTR                        EQU 0x40023824
  938                           ;'RCC_APB2RSTR.TIM1RST`                EQU 0x40023824,        4, base=16,    bitRange=0-0
  939                           ;'RCC_APB2RSTR.TIM8RST`                EQU 0x40023824,        4, base=16,    bitRange=1-1
  940                           ;'RCC_APB2RSTR.USART1RST`              EQU 0x40023824,        4, base=16,    bitRange=4-4
  941                           ;'RCC_APB2RSTR.USART6RST`              EQU 0x40023824,        4, base=16,    bitRange=5-5
  942                           ;'RCC_APB2RSTR.ADCRST`                 EQU 0x40023824,        4, base=16,    bitRange=8-8
  943                           ;'RCC_APB2RSTR.SDIORST`                EQU 0x40023824,        4, base=16,    bitRange=11-11
  944                           ;'RCC_APB2RSTR.SPI1RST`                EQU 0x40023824,        4, base=16,    bitRange=12-12
  945                           ;'RCC_APB2RSTR.SYSCFGRST`              EQU 0x40023824,        4, base=16,    bitRange=14-14
  946                           ;'RCC_APB2RSTR.TIM9RST`                EQU 0x40023824,        4, base=16,    bitRange=16-16
  947                           ;'RCC_APB2RSTR.TIM10RST`               EQU 0x40023824,        4, base=16,    bitRange=17-17
  948                           ;'RCC_APB2RSTR.TIM11RST`               EQU 0x40023824,        4, base=16,    bitRange=18-18
  949                           
  950                           RCC_AHB1ENR                         EQU 0x40023830
  951                           ;'RCC_AHB1ENR.GPIOAEN`                 EQU 0x40023830,        4, base=16,    bitRange=0-0
  952                           ;'RCC_AHB1ENR.GPIOBEN`                 EQU 0x40023830,        4, base=16,    bitRange=1-1
  953                           ;'RCC_AHB1ENR.GPIOCEN`                 EQU 0x40023830,        4, base=16,    bitRange=2-2
  954                           ;'RCC_AHB1ENR.GPIODEN`                 EQU 0x40023830,        4, base=16,    bitRange=3-3
  955                           ;'RCC_AHB1ENR.GPIOEEN`                 EQU 0x40023830,        4, base=16,    bitRange=4-4
  956                           ;'RCC_AHB1ENR.GPIOFEN`                 EQU 0x40023830,        4, base=16,    bitRange=5-5
  957                           ;'RCC_AHB1ENR.GPIOGEN`                 EQU 0x40023830,        4, base=16,    bitRange=6-6
  958                           ;'RCC_AHB1ENR.GPIOHEN`                 EQU 0x40023830,        4, base=16,    bitRange=7-7
  959                           ;'RCC_AHB1ENR.GPIOIEN`                 EQU 0x40023830,        4, base=16,    bitRange=8-8
  960                           ;'RCC_AHB1ENR.CRCEN`                   EQU 0x40023830,        4, base=16,    bitRange=12-12
  961                           ;'RCC_AHB1ENR.BKPSRAMEN`               EQU 0x40023830,        4, base=16,    bitRange=18-18
  962                           ;'RCC_AHB1ENR.CCMDATARAMEN`            EQU 0x40023830,        4, base=16,    bitRange=20-20
  963                           ;'RCC_AHB1ENR.DMA1EN`                  EQU 0x40023830,        4, base=16,    bitRange=21-21
  964                           ;'RCC_AHB1ENR.DMA2EN`                  EQU 0x40023830,        4, base=16,    bitRange=22-22
  965                           ;'RCC_AHB1ENR.ETHMACEN`                EQU 0x40023830,        4, base=16,    bitRange=25-25
  966                           ;'RCC_AHB1ENR.ETHMACTXEN`              EQU 0x40023830,        4, base=16,    bitRange=26-26
  967                           ;'RCC_AHB1ENR.ETHMACRXEN`              EQU 0x40023830,        4, base=16,    bitRange=27-27
  968                           ;'RCC_AHB1ENR.ETHMACPTPEN`             EQU 0x40023830,        4, base=16,    bitRange=28-28
  969                           ;'RCC_AHB1ENR.OTGHSEN`                 EQU 0x40023830,        4, base=16,    bitRange=29-29
  970                           ;'RCC_AHB1ENR.OTGHSULPIEN`             EQU 0x40023830,        4, base=16,    bitRange=30-30
  971                           
  972                           RCC_AHB2ENR                         EQU 0x40023834
  973                           ;'RCC_AHB2ENR.DCMIEN`                  EQU 0x40023834,        4, base=16,    bitRange=0-0
  974                           ;'RCC_AHB2ENR.RNGEN`                   EQU 0x40023834,        4, base=16,    bitRange=6-6
  975                           ;'RCC_AHB2ENR.OTGFSEN`                 EQU 0x40023834,        4, base=16,    bitRange=7-7
  976                           
  977                           RCC_AHB3ENR                         EQU 0x40023838
  978                           ;'RCC_AHB3ENR.FSMCEN`                  EQU 0x40023838,        4, base=16,    bitRange=0-0
  979                           
  980                           RCC_APB1ENR                         EQU 0x40023840
  981                           ;'RCC_APB1ENR.TIM2EN`                  EQU 0x40023840,        4, base=16,    bitRange=0-0
  982                           ;'RCC_APB1ENR.TIM3EN`                  EQU 0x40023840,        4, base=16,    bitRange=1-1
  983                           ;'RCC_APB1ENR.TIM4EN`                  EQU 0x40023840,        4, base=16,    bitRange=2-2
  984                           ;'RCC_APB1ENR.TIM5EN`                  EQU 0x40023840,        4, base=16,    bitRange=3-3
  985                           ;'RCC_APB1ENR.TIM6EN`                  EQU 0x40023840,        4, base=16,    bitRange=4-4
  986                           ;'RCC_APB1ENR.TIM7EN`                  EQU 0x40023840,        4, base=16,    bitRange=5-5
  987                           ;'RCC_APB1ENR.TIM12EN`                 EQU 0x40023840,        4, base=16,    bitRange=6-6
  988                           ;'RCC_APB1ENR.TIM13EN`                 EQU 0x40023840,        4, base=16,    bitRange=7-7
  989                           ;'RCC_APB1ENR.TIM14EN`                 EQU 0x40023840,        4, base=16,    bitRange=8-8
  990                           ;'RCC_APB1ENR.WWDGEN`                  EQU 0x40023840,        4, base=16,    bitRange=11-11
  991                           ;'RCC_APB1ENR.SPI2EN`                  EQU 0x40023840,        4, base=16,    bitRange=14-14
  992                           ;'RCC_APB1ENR.SPI3EN`                  EQU 0x40023840,        4, base=16,    bitRange=15-15
  993                           ;'RCC_APB1ENR.USART2EN`                EQU 0x40023840,        4, base=16,    bitRange=17-17
  994                           ;'RCC_APB1ENR.USART3EN`                EQU 0x40023840,        4, base=16,    bitRange=18-18
  995                           ;'RCC_APB1ENR.USART4EN`                EQU 0x40023840,        4, base=16,    bitRange=19-19
  996                           ;'RCC_APB1ENR.USART5EN`                EQU 0x40023840,        4, base=16,    bitRange=20-20
  997                           ;'RCC_APB1ENR.I2C1EN`                  EQU 0x40023840,        4, base=16,    bitRange=21-21
  998                           ;'RCC_APB1ENR.I2C2EN`                  EQU 0x40023840,        4, base=16,    bitRange=22-22
  999                           ;'RCC_APB1ENR.I2C3EN`                  EQU 0x40023840,        4, base=16,    bitRange=23-23
 1000                           ;'RCC_APB1ENR.CAN1EN`                  EQU 0x40023840,        4, base=16,    bitRange=25-25
 1001                           ;'RCC_APB1ENR.CAN2EN`                  EQU 0x40023840,        4, base=16,    bitRange=26-26
 1002                           ;'RCC_APB1ENR.PWREN`                   EQU 0x40023840,        4, base=16,    bitRange=28-28
 1003                           ;'RCC_APB1ENR.DACEN`                   EQU 0x40023840,        4, base=16,    bitRange=29-29
 1004                           
 1005                           RCC_APB2ENR                         EQU 0x40023844
 1006                           ;'RCC_APB2ENR.TIM1EN`                  EQU 0x40023844,        4, base=16,    bitRange=0-0
 1007                           ;'RCC_APB2ENR.TIM8EN`                  EQU 0x40023844,        4, base=16,    bitRange=1-1
 1008                           ;'RCC_APB2ENR.USART1EN`                EQU 0x40023844,        4, base=16,    bitRange=4-4
 1009                           ;'RCC_APB2ENR.USART6EN`                EQU 0x40023844,        4, base=16,    bitRange=5-5
 1010                           ;'RCC_APB2ENR.ADC1EN`                  EQU 0x40023844,        4, base=16,    bitRange=8-8
 1011                           ;'RCC_APB2ENR.ADC2EN`                  EQU 0x40023844,        4, base=16,    bitRange=9-9
 1012                           ;'RCC_APB2ENR.ADC3EN`                  EQU 0x40023844,        4, base=16,    bitRange=10-10
 1013                           ;'RCC_APB2ENR.SDIOEN`                  EQU 0x40023844,        4, base=16,    bitRange=11-11
 1014                           ;'RCC_APB2ENR.SPI1EN`                  EQU 0x40023844,        4, base=16,    bitRange=12-12
 1015                           ;'RCC_APB2ENR.SYSCFGEN`                EQU 0x40023844,        4, base=16,    bitRange=14-14
 1016                           ;'RCC_APB2ENR.TIM9EN`                  EQU 0x40023844,        4, base=16,    bitRange=16-16
 1017                           ;'RCC_APB2ENR.TIM10EN`                 EQU 0x40023844,        4, base=16,    bitRange=17-17
 1018                           ;'RCC_APB2ENR.TIM11EN`                 EQU 0x40023844,        4, base=16,    bitRange=18-18
 1019                           
 1020                           RCC_AHB1LPENR                       EQU 0x40023850
 1021                           ;'RCC_AHB1LPENR.GPIOALPEN`             EQU 0x40023850,        4, base=16,    bitRange=0-0
 1022                           ;'RCC_AHB1LPENR.GPIOBLPEN`             EQU 0x40023850,        4, base=16,    bitRange=1-1
 1023                           ;'RCC_AHB1LPENR.GPIOCLPEN`             EQU 0x40023850,        4, base=16,    bitRange=2-2
 1024                           ;'RCC_AHB1LPENR.GPIODLPEN`             EQU 0x40023850,        4, base=16,    bitRange=3-3
 1025                           ;'RCC_AHB1LPENR.GPIOELPEN`             EQU 0x40023850,        4, base=16,    bitRange=4-4
 1026                           ;'RCC_AHB1LPENR.GPIOFLPEN`             EQU 0x40023850,        4, base=16,    bitRange=5-5
 1027                           ;'RCC_AHB1LPENR.GPIOGLPEN`             EQU 0x40023850,        4, base=16,    bitRange=6-6
 1028                           ;'RCC_AHB1LPENR.GPIOHLPEN`             EQU 0x40023850,        4, base=16,    bitRange=7-7
 1029                           ;'RCC_AHB1LPENR.GPIOILPEN`             EQU 0x40023850,        4, base=16,    bitRange=8-8
 1030                           ;'RCC_AHB1LPENR.CRCLPEN`               EQU 0x40023850,        4, base=16,    bitRange=12-12
 1031                           ;'RCC_AHB1LPENR.FLITFLPEN`             EQU 0x40023850,        4, base=16,    bitRange=15-15
 1032                           ;'RCC_AHB1LPENR.SRAM1LPEN`             EQU 0x40023850,        4, base=16,    bitRange=16-16
 1033                           ;'RCC_AHB1LPENR.SRAM2LPEN`             EQU 0x40023850,        4, base=16,    bitRange=17-17
 1034                           ;'RCC_AHB1LPENR.BKPSRAMLPEN`           EQU 0x40023850,        4, base=16,    bitRange=18-18
 1035                           ;'RCC_AHB1LPENR.DMA1LPEN`              EQU 0x40023850,        4, base=16,    bitRange=21-21
 1036                           ;'RCC_AHB1LPENR.DMA2LPEN`              EQU 0x40023850,        4, base=16,    bitRange=22-22
 1037                           ;'RCC_AHB1LPENR.ETHMACLPEN`            EQU 0x40023850,        4, base=16,    bitRange=25-25
 1038                           ;'RCC_AHB1LPENR.ETHTXLPEN`             EQU 0x40023850,        4, base=16,    bitRange=26-26
 1039                           ;'RCC_AHB1LPENR.ETHMACRXLPEN`          EQU 0x40023850,        4, base=16,    bitRange=27-27
 1040                           ;'RCC_AHB1LPENR.ETHMACPTPLPEN`         EQU 0x40023850,        4, base=16,    bitRange=28-28
 1041                           ;'RCC_AHB1LPENR.OTGHSLPEN`             EQU 0x40023850,        4, base=16,    bitRange=29-29
 1042                           ;'RCC_AHB1LPENR.OTGHSULPILPEN`         EQU 0x40023850,        4, base=16,    bitRange=30-30
 1043                           
 1044                           RCC_AHB2LPENR                       EQU 0x40023854
 1045                           ;'RCC_AHB2LPENR.DCMILPEN`              EQU 0x40023854,        4, base=16,    bitRange=0-0
 1046                           ;'RCC_AHB2LPENR.RNGLPEN`               EQU 0x40023854,        4, base=16,    bitRange=6-6
 1047                           ;'RCC_AHB2LPENR.OTGFSLPEN`             EQU 0x40023854,        4, base=16,    bitRange=7-7
 1048                           
 1049                           RCC_AHB3LPENR                       EQU 0x40023858
 1050                           ;'RCC_AHB3LPENR.FSMCLPEN`              EQU 0x40023858,        4, base=16,    bitRange=0-0
 1051                           
 1052                           RCC_APB1LPENR                       EQU 0x40023860
 1053                           ;'RCC_APB1LPENR.TIM2LPEN`              EQU 0x40023860,        4, base=16,    bitRange=0-0
 1054                           ;'RCC_APB1LPENR.TIM3LPEN`              EQU 0x40023860,        4, base=16,    bitRange=1-1
 1055                           ;'RCC_APB1LPENR.TIM4LPEN`              EQU 0x40023860,        4, base=16,    bitRange=2-2
 1056                           ;'RCC_APB1LPENR.TIM5LPEN`              EQU 0x40023860,        4, base=16,    bitRange=3-3
 1057                           ;'RCC_APB1LPENR.TIM6LPEN`              EQU 0x40023860,        4, base=16,    bitRange=4-4
 1058                           ;'RCC_APB1LPENR.TIM7LPEN`              EQU 0x40023860,        4, base=16,    bitRange=5-5
 1059                           ;'RCC_APB1LPENR.TIM12LPEN`             EQU 0x40023860,        4, base=16,    bitRange=6-6
 1060                           ;'RCC_APB1LPENR.TIM13LPEN`             EQU 0x40023860,        4, base=16,    bitRange=7-7
 1061                           ;'RCC_APB1LPENR.TIM14LPEN`             EQU 0x40023860,        4, base=16,    bitRange=8-8
 1062                           ;'RCC_APB1LPENR.WWDGLPEN`              EQU 0x40023860,        4, base=16,    bitRange=11-11
 1063                           ;'RCC_APB1LPENR.SPI2LPEN`              EQU 0x40023860,        4, base=16,    bitRange=14-14
 1064                           ;'RCC_APB1LPENR.SPI3LPEN`              EQU 0x40023860,        4, base=16,    bitRange=15-15
 1065                           ;'RCC_APB1LPENR.USART2LPEN`            EQU 0x40023860,        4, base=16,    bitRange=17-17
 1066                           ;'RCC_APB1LPENR.USART3LPEN`            EQU 0x40023860,        4, base=16,    bitRange=18-18
 1067                           ;'RCC_APB1LPENR.USART4LPEN`            EQU 0x40023860,        4, base=16,    bitRange=19-19
 1068                           ;'RCC_APB1LPENR.USART5LPEN`            EQU 0x40023860,        4, base=16,    bitRange=20-20
 1069                           ;'RCC_APB1LPENR.I2C1LPEN`              EQU 0x40023860,        4, base=16,    bitRange=21-21
 1070                           ;'RCC_APB1LPENR.I2C2LPEN`              EQU 0x40023860,        4, base=16,    bitRange=22-22
 1071                           ;'RCC_APB1LPENR.I2C3LPEN`              EQU 0x40023860,        4, base=16,    bitRange=23-23
 1072                           ;'RCC_APB1LPENR.CAN1LPEN`              EQU 0x40023860,        4, base=16,    bitRange=25-25
 1073                           ;'RCC_APB1LPENR.CAN2LPEN`              EQU 0x40023860,        4, base=16,    bitRange=26-26
 1074                           ;'RCC_APB1LPENR.PWRLPEN`               EQU 0x40023860,        4, base=16,    bitRange=28-28
 1075                           ;'RCC_APB1LPENR.DACLPEN`               EQU 0x40023860,        4, base=16,    bitRange=29-29
 1076                           
 1077                           RCC_APB2LPENR                       EQU 0x40023864
 1078                           ;'RCC_APB2LPENR.TIM1LPEN`              EQU 0x40023864,        4, base=16,    bitRange=0-0
 1079                           ;'RCC_APB2LPENR.TIM8LPEN`              EQU 0x40023864,        4, base=16,    bitRange=1-1
 1080                           ;'RCC_APB2LPENR.USART1LPEN`            EQU 0x40023864,        4, base=16,    bitRange=4-4
 1081                           ;'RCC_APB2LPENR.USART6LPEN`            EQU 0x40023864,        4, base=16,    bitRange=5-5
 1082                           ;'RCC_APB2LPENR.ADC1LPEN`              EQU 0x40023864,        4, base=16,    bitRange=8-8
 1083                           ;'RCC_APB2LPENR.ADC2LPEN`              EQU 0x40023864,        4, base=16,    bitRange=9-9
 1084                           ;'RCC_APB2LPENR.ADC3LPEN`              EQU 0x40023864,        4, base=16,    bitRange=10-10
 1085                           ;'RCC_APB2LPENR.SDIOLPEN`              EQU 0x40023864,        4, base=16,    bitRange=11-11
 1086                           ;'RCC_APB2LPENR.SPI1LPEN`              EQU 0x40023864,        4, base=16,    bitRange=12-12
 1087                           ;'RCC_APB2LPENR.SYSCFGLPEN`            EQU 0x40023864,        4, base=16,    bitRange=14-14
 1088                           ;'RCC_APB2LPENR.TIM9LPEN`              EQU 0x40023864,        4, base=16,    bitRange=16-16
 1089                           ;'RCC_APB2LPENR.TIM10LPEN`             EQU 0x40023864,        4, base=16,    bitRange=17-17
 1090                           ;'RCC_APB2LPENR.TIM11LPEN`             EQU 0x40023864,        4, base=16,    bitRange=18-18
 1091                           
 1092                           RCC_BDCR                            EQU 0x40023870
 1093                           ;'RCC_BDCR.LSEON`                      EQU 0x40023870,        4, base=16,    bitRange=0-0
 1094                           ;'RCC_BDCR.LSERDY`                     EQU 0x40023870,        4, base=16,    bitRange=1-1
 1095                           ;'RCC_BDCR.LSEBYP`                     EQU 0x40023870,        4, base=16,    bitRange=2-2
 1096                           ;'RCC_BDCR.RTCSEL`                     EQU 0x40023870,        4, base=16,    bitRange=8-9
 1097                           ;'RCC_BDCR.RTCEN`                      EQU 0x40023870,        4, base=16,    bitRange=15-15
 1098                           ;'RCC_BDCR.BDRST`                      EQU 0x40023870,        4, base=16,    bitRange=16-16
 1099                           
 1100                           RCC_CSR                             EQU 0x40023874
 1101                           ;'RCC_CSR.LSION`                       EQU 0x40023874,        4, base=16,    bitRange=0-0
 1102                           ;'RCC_CSR.LSIRDY`                      EQU 0x40023874,        4, base=16,    bitRange=1-1
 1103                           ;'RCC_CSR.RMVF`                        EQU 0x40023874,        4, base=16,    bitRange=24-24
 1104                           ;'RCC_CSR.BORRSTF`                     EQU 0x40023874,        4, base=16,    bitRange=25-25
 1105                           ;'RCC_CSR.PINRSTF`                     EQU 0x40023874,        4, base=16,    bitRange=26-26
 1106                           ;'RCC_CSR.PORRSTF`                     EQU 0x40023874,        4, base=16,    bitRange=27-27
 1107                           ;'RCC_CSR.SFTRSTF`                     EQU 0x40023874,        4, base=16,    bitRange=28-28
 1108                           ;'RCC_CSR.IWDGRSTF`                    EQU 0x40023874,        4, base=16,    bitRange=29-29
 1109                           ;'RCC_CSR.WWDGRSTF`                    EQU 0x40023874,        4, base=16,    bitRange=30-30
 1110                           ;'RCC_CSR.LPWRRSTF`                    EQU 0x40023874,        4, base=16,    bitRange=31-31
 1111                           
 1112                           RCC_SSCGR                           EQU 0x40023880
 1113                           ;'RCC_SSCGR.MODPER`                    EQU 0x40023880,        4, base=16,    bitRange=0-15
 1114                           ;'RCC_SSCGR.INCSTEP`                   EQU 0x40023880,        4, base=16,    bitRange=16-27
 1115                           ;'RCC_SSCGR.SPREADSEL`                 EQU 0x40023880,        4, base=16,    bitRange=30-30
 1116                           ;'RCC_SSCGR.SSCGEN`                    EQU 0x40023880,        4, base=16,    bitRange=31-31
 1117                           
 1118                           RCC_PLLI2SCFGR                      EQU 0x40023884
 1119                           ;'RCC_PLLI2SCFGR.PLLRI2SN`             EQU 0x40023884,        4, base=16,    bitRange=6-14
 1120                           ;'RCC_PLLI2SCFGR.PLLI2SR`              EQU 0x40023884,        4, base=16,    bitRange=28-30
 1121                           
 1122                           
 1123                           ;
 1124                           ;               GPIOA
 1125                           ;
 1126                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 1127                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 1128                           
 1129                           GPIOA_MODER                         EQU 0x40020000
 1130                           ;'GPIOA_MODER.MODER0`                  EQU 0x40020000,        4, base=16,    bitRange=0-1
 1131                           ;'GPIOA_MODER.MODER1`                  EQU 0x40020000,        4, base=16,    bitRange=2-3
 1132                           ;'GPIOA_MODER.MODER2`                  EQU 0x40020000,        4, base=16,    bitRange=4-5
 1133                           ;'GPIOA_MODER.MODER3`                  EQU 0x40020000,        4, base=16,    bitRange=6-7
 1134                           ;'GPIOA_MODER.MODER4`                  EQU 0x40020000,        4, base=16,    bitRange=8-9
 1135                           ;'GPIOA_MODER.MODER5`                  EQU 0x40020000,        4, base=16,    bitRange=10-11
 1136                           ;'GPIOA_MODER.MODER6`                  EQU 0x40020000,        4, base=16,    bitRange=12-13
 1137                           ;'GPIOA_MODER.MODER7`                  EQU 0x40020000,        4, base=16,    bitRange=14-15
 1138                           ;'GPIOA_MODER.MODER8`                  EQU 0x40020000,        4, base=16,    bitRange=16-17
 1139                           ;'GPIOA_MODER.MODER9`                  EQU 0x40020000,        4, base=16,    bitRange=18-19
 1140                           ;'GPIOA_MODER.MODER10`                 EQU 0x40020000,        4, base=16,    bitRange=20-21
 1141                           ;'GPIOA_MODER.MODER11`                 EQU 0x40020000,        4, base=16,    bitRange=22-23
 1142                           ;'GPIOA_MODER.MODER12`                 EQU 0x40020000,        4, base=16,    bitRange=24-25
 1143                           ;'GPIOA_MODER.MODER13`                 EQU 0x40020000,        4, base=16,    bitRange=26-27
 1144                           ;'GPIOA_MODER.MODER14`                 EQU 0x40020000,        4, base=16,    bitRange=28-29
 1145                           ;'GPIOA_MODER.MODER15`                 EQU 0x40020000,        4, base=16,    bitRange=30-31
 1146                           
 1147                           GPIOA_OTYPER                        EQU 0x40020004
 1148                           ;'GPIOA_OTYPER.OT0`                    EQU 0x40020004,        4, base=16,    bitRange=0-0
 1149                           ;'GPIOA_OTYPER.OT1`                    EQU 0x40020004,        4, base=16,    bitRange=1-1
 1150                           ;'GPIOA_OTYPER.OT2`                    EQU 0x40020004,        4, base=16,    bitRange=2-2
 1151                           ;'GPIOA_OTYPER.OT3`                    EQU 0x40020004,        4, base=16,    bitRange=3-3
 1152                           ;'GPIOA_OTYPER.OT4`                    EQU 0x40020004,        4, base=16,    bitRange=4-4
 1153                           ;'GPIOA_OTYPER.OT5`                    EQU 0x40020004,        4, base=16,    bitRange=5-5
 1154                           ;'GPIOA_OTYPER.OT6`                    EQU 0x40020004,        4, base=16,    bitRange=6-6
 1155                           ;'GPIOA_OTYPER.OT7`                    EQU 0x40020004,        4, base=16,    bitRange=7-7
 1156                           ;'GPIOA_OTYPER.OT8`                    EQU 0x40020004,        4, base=16,    bitRange=8-8
 1157                           ;'GPIOA_OTYPER.OT9`                    EQU 0x40020004,        4, base=16,    bitRange=9-9
 1158                           ;'GPIOA_OTYPER.OT10`                   EQU 0x40020004,        4, base=16,    bitRange=10-10
 1159                           ;'GPIOA_OTYPER.OT11`                   EQU 0x40020004,        4, base=16,    bitRange=11-11
 1160                           ;'GPIOA_OTYPER.OT12`                   EQU 0x40020004,        4, base=16,    bitRange=12-12
 1161                           ;'GPIOA_OTYPER.OT13`                   EQU 0x40020004,        4, base=16,    bitRange=13-13
 1162                           ;'GPIOA_OTYPER.OT14`                   EQU 0x40020004,        4, base=16,    bitRange=14-14
 1163                           ;'GPIOA_OTYPER.OT15`                   EQU 0x40020004,        4, base=16,    bitRange=15-15
 1164                           
 1165                           GPIOA_OSPEEDR                       EQU 0x40020008
 1166                           ;'GPIOA_OSPEEDR.OSPEEDR0`              EQU 0x40020008,        4, base=16,    bitRange=0-1
 1167                           ;'GPIOA_OSPEEDR.OSPEEDR1`              EQU 0x40020008,        4, base=16,    bitRange=2-3
 1168                           ;'GPIOA_OSPEEDR.OSPEEDR2`              EQU 0x40020008,        4, base=16,    bitRange=4-5
 1169                           ;'GPIOA_OSPEEDR.OSPEEDR3`              EQU 0x40020008,        4, base=16,    bitRange=6-7
 1170                           ;'GPIOA_OSPEEDR.OSPEEDR4`              EQU 0x40020008,        4, base=16,    bitRange=8-9
 1171                           ;'GPIOA_OSPEEDR.OSPEEDR5`              EQU 0x40020008,        4, base=16,    bitRange=10-11
 1172                           ;'GPIOA_OSPEEDR.OSPEEDR6`              EQU 0x40020008,        4, base=16,    bitRange=12-13
 1173                           ;'GPIOA_OSPEEDR.OSPEEDR7`              EQU 0x40020008,        4, base=16,    bitRange=14-15
 1174                           ;'GPIOA_OSPEEDR.OSPEEDR8`              EQU 0x40020008,        4, base=16,    bitRange=16-17
 1175                           ;'GPIOA_OSPEEDR.OSPEEDR9`              EQU 0x40020008,        4, base=16,    bitRange=18-19
 1176                           ;'GPIOA_OSPEEDR.OSPEEDR10`             EQU 0x40020008,        4, base=16,    bitRange=20-21
 1177                           ;'GPIOA_OSPEEDR.OSPEEDR11`             EQU 0x40020008,        4, base=16,    bitRange=22-23
 1178                           ;'GPIOA_OSPEEDR.OSPEEDR12`             EQU 0x40020008,        4, base=16,    bitRange=24-25
 1179                           ;'GPIOA_OSPEEDR.OSPEEDR13`             EQU 0x40020008,        4, base=16,    bitRange=26-27
 1180                           ;'GPIOA_OSPEEDR.OSPEEDR14`             EQU 0x40020008,        4, base=16,    bitRange=28-29
 1181                           ;'GPIOA_OSPEEDR.OSPEEDR15`             EQU 0x40020008,        4, base=16,    bitRange=30-31
 1182                           
 1183                           GPIOA_PUPDR                         EQU 0x4002000C
 1184                           ;'GPIOA_PUPDR.PUPDR0`                  EQU 0x4002000C,        4, base=16,    bitRange=0-1
 1185                           ;'GPIOA_PUPDR.PUPDR1`                  EQU 0x4002000C,        4, base=16,    bitRange=2-3
 1186                           ;'GPIOA_PUPDR.PUPDR2`                  EQU 0x4002000C,        4, base=16,    bitRange=4-5
 1187                           ;'GPIOA_PUPDR.PUPDR3`                  EQU 0x4002000C,        4, base=16,    bitRange=6-7
 1188                           ;'GPIOA_PUPDR.PUPDR4`                  EQU 0x4002000C,        4, base=16,    bitRange=8-9
 1189                           ;'GPIOA_PUPDR.PUPDR5`                  EQU 0x4002000C,        4, base=16,    bitRange=10-11
 1190                           ;'GPIOA_PUPDR.PUPDR6`                  EQU 0x4002000C,        4, base=16,    bitRange=12-13
 1191                           ;'GPIOA_PUPDR.PUPDR7`                  EQU 0x4002000C,        4, base=16,    bitRange=14-15
 1192                           ;'GPIOA_PUPDR.PUPDR8`                  EQU 0x4002000C,        4, base=16,    bitRange=16-17
 1193                           ;'GPIOA_PUPDR.PUPDR9`                  EQU 0x4002000C,        4, base=16,    bitRange=18-19
 1194                           ;'GPIOA_PUPDR.PUPDR10`                 EQU 0x4002000C,        4, base=16,    bitRange=20-21
 1195                           ;'GPIOA_PUPDR.PUPDR11`                 EQU 0x4002000C,        4, base=16,    bitRange=22-23
 1196                           ;'GPIOA_PUPDR.PUPDR12`                 EQU 0x4002000C,        4, base=16,    bitRange=24-25
 1197                           ;'GPIOA_PUPDR.PUPDR13`                 EQU 0x4002000C,        4, base=16,    bitRange=26-27
 1198                           ;'GPIOA_PUPDR.PUPDR14`                 EQU 0x4002000C,        4, base=16,    bitRange=28-29
 1199                           ;'GPIOA_PUPDR.PUPDR15`                 EQU 0x4002000C,        4, base=16,    bitRange=30-31
 1200                           
 1201                           GPIOA_IDR                           EQU 0x40020010
 1202                           ;'GPIOA_IDR.IDR0`                      EQU 0x40020010,        4, base=16,    bitRange=0-0
 1203                           ;'GPIOA_IDR.IDR1`                      EQU 0x40020010,        4, base=16,    bitRange=1-1
 1204                           ;'GPIOA_IDR.IDR2`                      EQU 0x40020010,        4, base=16,    bitRange=2-2
 1205                           ;'GPIOA_IDR.IDR3`                      EQU 0x40020010,        4, base=16,    bitRange=3-3
 1206                           ;'GPIOA_IDR.IDR4`                      EQU 0x40020010,        4, base=16,    bitRange=4-4
 1207                           ;'GPIOA_IDR.IDR5`                      EQU 0x40020010,        4, base=16,    bitRange=5-5
 1208                           ;'GPIOA_IDR.IDR6`                      EQU 0x40020010,        4, base=16,    bitRange=6-6
 1209                           ;'GPIOA_IDR.IDR7`                      EQU 0x40020010,        4, base=16,    bitRange=7-7
 1210                           ;'GPIOA_IDR.IDR8`                      EQU 0x40020010,        4, base=16,    bitRange=8-8
 1211                           ;'GPIOA_IDR.IDR9`                      EQU 0x40020010,        4, base=16,    bitRange=9-9
 1212                           ;'GPIOA_IDR.IDR10`                     EQU 0x40020010,        4, base=16,    bitRange=10-10
 1213                           ;'GPIOA_IDR.IDR11`                     EQU 0x40020010,        4, base=16,    bitRange=11-11
 1214                           ;'GPIOA_IDR.IDR12`                     EQU 0x40020010,        4, base=16,    bitRange=12-12
 1215                           ;'GPIOA_IDR.IDR13`                     EQU 0x40020010,        4, base=16,    bitRange=13-13
 1216                           ;'GPIOA_IDR.IDR14`                     EQU 0x40020010,        4, base=16,    bitRange=14-14
 1217                           ;'GPIOA_IDR.IDR15`                     EQU 0x40020010,        4, base=16,    bitRange=15-15
 1218                           
 1219                           GPIOA_ODR                           EQU 0x40020014
 1220                           ;'GPIOA_ODR.ODR0`                      EQU 0x40020014,        4, base=16,    bitRange=0-0
 1221                           ;'GPIOA_ODR.ODR1`                      EQU 0x40020014,        4, base=16,    bitRange=1-1
 1222                           ;'GPIOA_ODR.ODR2`                      EQU 0x40020014,        4, base=16,    bitRange=2-2
 1223                           ;'GPIOA_ODR.ODR3`                      EQU 0x40020014,        4, base=16,    bitRange=3-3
 1224                           ;'GPIOA_ODR.ODR4`                      EQU 0x40020014,        4, base=16,    bitRange=4-4
 1225                           ;'GPIOA_ODR.ODR5`                      EQU 0x40020014,        4, base=16,    bitRange=5-5
 1226                           ;'GPIOA_ODR.ODR6`                      EQU 0x40020014,        4, base=16,    bitRange=6-6
 1227                           ;'GPIOA_ODR.ODR7`                      EQU 0x40020014,        4, base=16,    bitRange=7-7
 1228                           ;'GPIOA_ODR.ODR8`                      EQU 0x40020014,        4, base=16,    bitRange=8-8
 1229                           ;'GPIOA_ODR.ODR9`                      EQU 0x40020014,        4, base=16,    bitRange=9-9
 1230                           ;'GPIOA_ODR.ODR10`                     EQU 0x40020014,        4, base=16,    bitRange=10-10
 1231                           ;'GPIOA_ODR.ODR11`                     EQU 0x40020014,        4, base=16,    bitRange=11-11
 1232                           ;'GPIOA_ODR.ODR12`                     EQU 0x40020014,        4, base=16,    bitRange=12-12
 1233                           ;'GPIOA_ODR.ODR13`                     EQU 0x40020014,        4, base=16,    bitRange=13-13
 1234                           ;'GPIOA_ODR.ODR14`                     EQU 0x40020014,        4, base=16,    bitRange=14-14
 1235                           ;'GPIOA_ODR.ODR15`                     EQU 0x40020014,        4, base=16,    bitRange=15-15
 1236                           
 1237                           GPIOA_BSRR                          EQU 0x40020018
 1238                           ;'GPIOA_BSRR.BS0`                      EQU 0x40020018,        4, base=16,    bitRange=0-0
 1239                           ;'GPIOA_BSRR.BS1`                      EQU 0x40020018,        4, base=16,    bitRange=1-1
 1240                           ;'GPIOA_BSRR.BS2`                      EQU 0x40020018,        4, base=16,    bitRange=2-2
 1241                           ;'GPIOA_BSRR.BS3`                      EQU 0x40020018,        4, base=16,    bitRange=3-3
 1242                           ;'GPIOA_BSRR.BS4`                      EQU 0x40020018,        4, base=16,    bitRange=4-4
 1243                           ;'GPIOA_BSRR.BS5`                      EQU 0x40020018,        4, base=16,    bitRange=5-5
 1244                           ;'GPIOA_BSRR.BS6`                      EQU 0x40020018,        4, base=16,    bitRange=6-6
 1245                           ;'GPIOA_BSRR.BS7`                      EQU 0x40020018,        4, base=16,    bitRange=7-7
 1246                           ;'GPIOA_BSRR.BS8`                      EQU 0x40020018,        4, base=16,    bitRange=8-8
 1247                           ;'GPIOA_BSRR.BS9`                      EQU 0x40020018,        4, base=16,    bitRange=9-9
 1248                           ;'GPIOA_BSRR.BS10`                     EQU 0x40020018,        4, base=16,    bitRange=10-10
 1249                           ;'GPIOA_BSRR.BS11`                     EQU 0x40020018,        4, base=16,    bitRange=11-11
 1250                           ;'GPIOA_BSRR.BS12`                     EQU 0x40020018,        4, base=16,    bitRange=12-12
 1251                           ;'GPIOA_BSRR.BS13`                     EQU 0x40020018,        4, base=16,    bitRange=13-13
 1252                           ;'GPIOA_BSRR.BS14`                     EQU 0x40020018,        4, base=16,    bitRange=14-14
 1253                           ;'GPIOA_BSRR.BS15`                     EQU 0x40020018,        4, base=16,    bitRange=15-15
 1254                           ;'GPIOA_BSRR.BR0`                      EQU 0x40020018,        4, base=16,    bitRange=16-16
 1255                           ;'GPIOA_BSRR.BR1`                      EQU 0x40020018,        4, base=16,    bitRange=17-17
 1256                           ;'GPIOA_BSRR.BR2`                      EQU 0x40020018,        4, base=16,    bitRange=18-18
 1257                           ;'GPIOA_BSRR.BR3`                      EQU 0x40020018,        4, base=16,    bitRange=19-19
 1258                           ;'GPIOA_BSRR.BR4`                      EQU 0x40020018,        4, base=16,    bitRange=20-20
 1259                           ;'GPIOA_BSRR.BR5`                      EQU 0x40020018,        4, base=16,    bitRange=21-21
 1260                           ;'GPIOA_BSRR.BR6`                      EQU 0x40020018,        4, base=16,    bitRange=22-22
 1261                           ;'GPIOA_BSRR.BR7`                      EQU 0x40020018,        4, base=16,    bitRange=23-23
 1262                           ;'GPIOA_BSRR.BR8`                      EQU 0x40020018,        4, base=16,    bitRange=24-24
 1263                           ;'GPIOA_BSRR.BR9`                      EQU 0x40020018,        4, base=16,    bitRange=25-25
 1264                           ;'GPIOA_BSRR.BR10`                     EQU 0x40020018,        4, base=16,    bitRange=26-26
 1265                           ;'GPIOA_BSRR.BR11`                     EQU 0x40020018,        4, base=16,    bitRange=27-27
 1266                           ;'GPIOA_BSRR.BR12`                     EQU 0x40020018,        4, base=16,    bitRange=28-28
 1267                           ;'GPIOA_BSRR.BR13`                     EQU 0x40020018,        4, base=16,    bitRange=29-29
 1268                           ;'GPIOA_BSRR.BR14`                     EQU 0x40020018,        4, base=16,    bitRange=30-30
 1269                           ;'GPIOA_BSRR.BR15`                     EQU 0x40020018,        4, base=16,    bitRange=31-31
 1270                           
 1271                           GPIOA_LCKR                          EQU 0x4002001C
 1272                           ;'GPIOA_LCKR.LCK0`                     EQU 0x4002001C,        4, base=16,    bitRange=0-0
 1273                           ;'GPIOA_LCKR.LCK1`                     EQU 0x4002001C,        4, base=16,    bitRange=1-1
 1274                           ;'GPIOA_LCKR.LCK2`                     EQU 0x4002001C,        4, base=16,    bitRange=2-2
 1275                           ;'GPIOA_LCKR.LCK3`                     EQU 0x4002001C,        4, base=16,    bitRange=3-3
 1276                           ;'GPIOA_LCKR.LCK4`                     EQU 0x4002001C,        4, base=16,    bitRange=4-4
 1277                           ;'GPIOA_LCKR.LCK5`                     EQU 0x4002001C,        4, base=16,    bitRange=5-5
 1278                           ;'GPIOA_LCKR.LCK6`                     EQU 0x4002001C,        4, base=16,    bitRange=6-6
 1279                           ;'GPIOA_LCKR.LCK7`                     EQU 0x4002001C,        4, base=16,    bitRange=7-7
 1280                           ;'GPIOA_LCKR.LCK8`                     EQU 0x4002001C,        4, base=16,    bitRange=8-8
 1281                           ;'GPIOA_LCKR.LCK9`                     EQU 0x4002001C,        4, base=16,    bitRange=9-9
 1282                           ;'GPIOA_LCKR.LCK10`                    EQU 0x4002001C,        4, base=16,    bitRange=10-10
 1283                           ;'GPIOA_LCKR.LCK11`                    EQU 0x4002001C,        4, base=16,    bitRange=11-11
 1284                           ;'GPIOA_LCKR.LCK12`                    EQU 0x4002001C,        4, base=16,    bitRange=12-12
 1285                           ;'GPIOA_LCKR.LCK13`                    EQU 0x4002001C,        4, base=16,    bitRange=13-13
 1286                           ;'GPIOA_LCKR.LCK14`                    EQU 0x4002001C,        4, base=16,    bitRange=14-14
 1287                           ;'GPIOA_LCKR.LCK15`                    EQU 0x4002001C,        4, base=16,    bitRange=15-15
 1288                           ;'GPIOA_LCKR.LCKK`                     EQU 0x4002001C,        4, base=16,    bitRange=16-16
 1289                           
 1290                           GPIOA_AFRL                          EQU 0x40020020
 1291                           ;'GPIOA_AFRL.AFRL0`                    EQU 0x40020020,        4, base=16,    bitRange=0-3
 1292                           ;'GPIOA_AFRL.AFRL1`                    EQU 0x40020020,        4, base=16,    bitRange=4-7
 1293                           ;'GPIOA_AFRL.AFRL2`                    EQU 0x40020020,        4, base=16,    bitRange=8-11
 1294                           ;'GPIOA_AFRL.AFRL3`                    EQU 0x40020020,        4, base=16,    bitRange=12-15
 1295                           ;'GPIOA_AFRL.AFRL4`                    EQU 0x40020020,        4, base=16,    bitRange=16-19
 1296                           ;'GPIOA_AFRL.AFRL5`                    EQU 0x40020020,        4, base=16,    bitRange=20-23
 1297                           ;'GPIOA_AFRL.AFRL6`                    EQU 0x40020020,        4, base=16,    bitRange=24-27
 1298                           ;'GPIOA_AFRL.AFRL7`                    EQU 0x40020020,        4, base=16,    bitRange=28-31
 1299                           
 1300                           GPIOA_AFRH                          EQU 0x40020024
 1301                           ;'GPIOA_AFRH.AFRL8`                    EQU 0x40020024,        4, base=16,    bitRange=0-3
 1302                           ;'GPIOA_AFRH.AFRL9`                    EQU 0x40020024,        4, base=16,    bitRange=4-7
 1303                           ;'GPIOA_AFRH.AFRL10`                   EQU 0x40020024,        4, base=16,    bitRange=8-11
 1304                           ;'GPIOA_AFRH.AFRL11`                   EQU 0x40020024,        4, base=16,    bitRange=12-15
 1305                           ;'GPIOA_AFRH.AFRL12`                   EQU 0x40020024,        4, base=16,    bitRange=16-19
 1306                           ;'GPIOA_AFRH.AFRL13`                   EQU 0x40020024,        4, base=16,    bitRange=20-23
 1307                           ;'GPIOA_AFRH.AFRL14`                   EQU 0x40020024,        4, base=16,    bitRange=24-27
 1308                           ;'GPIOA_AFRH.AFRL15`                   EQU 0x40020024,        4, base=16,    bitRange=28-31
 1309                           
 1310                           
 1311                           ;
 1312                           ;               GPIOB
 1313                           ;
 1314                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 1315                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 1316                           
 1317                           GPIOB_MODER                         EQU 0x40020400
 1318                           ;'GPIOB_MODER.MODER0`                  EQU 0x40020400,        4, base=16,    bitRange=0-1
 1319                           ;'GPIOB_MODER.MODER1`                  EQU 0x40020400,        4, base=16,    bitRange=2-3
 1320                           ;'GPIOB_MODER.MODER2`                  EQU 0x40020400,        4, base=16,    bitRange=4-5
 1321                           ;'GPIOB_MODER.MODER3`                  EQU 0x40020400,        4, base=16,    bitRange=6-7
 1322                           ;'GPIOB_MODER.MODER4`                  EQU 0x40020400,        4, base=16,    bitRange=8-9
 1323                           ;'GPIOB_MODER.MODER5`                  EQU 0x40020400,        4, base=16,    bitRange=10-11
 1324                           ;'GPIOB_MODER.MODER6`                  EQU 0x40020400,        4, base=16,    bitRange=12-13
 1325                           ;'GPIOB_MODER.MODER7`                  EQU 0x40020400,        4, base=16,    bitRange=14-15
 1326                           ;'GPIOB_MODER.MODER8`                  EQU 0x40020400,        4, base=16,    bitRange=16-17
 1327                           ;'GPIOB_MODER.MODER9`                  EQU 0x40020400,        4, base=16,    bitRange=18-19
 1328                           ;'GPIOB_MODER.MODER10`                 EQU 0x40020400,        4, base=16,    bitRange=20-21
 1329                           ;'GPIOB_MODER.MODER11`                 EQU 0x40020400,        4, base=16,    bitRange=22-23
 1330                           ;'GPIOB_MODER.MODER12`                 EQU 0x40020400,        4, base=16,    bitRange=24-25
 1331                           ;'GPIOB_MODER.MODER13`                 EQU 0x40020400,        4, base=16,    bitRange=26-27
 1332                           ;'GPIOB_MODER.MODER14`                 EQU 0x40020400,        4, base=16,    bitRange=28-29
 1333                           ;'GPIOB_MODER.MODER15`                 EQU 0x40020400,        4, base=16,    bitRange=30-31
 1334                           
 1335                           GPIOB_OTYPER                        EQU 0x40020404
 1336                           ;'GPIOB_OTYPER.OT0`                    EQU 0x40020404,        4, base=16,    bitRange=0-0
 1337                           ;'GPIOB_OTYPER.OT1`                    EQU 0x40020404,        4, base=16,    bitRange=1-1
 1338                           ;'GPIOB_OTYPER.OT2`                    EQU 0x40020404,        4, base=16,    bitRange=2-2
 1339                           ;'GPIOB_OTYPER.OT3`                    EQU 0x40020404,        4, base=16,    bitRange=3-3
 1340                           ;'GPIOB_OTYPER.OT4`                    EQU 0x40020404,        4, base=16,    bitRange=4-4
 1341                           ;'GPIOB_OTYPER.OT5`                    EQU 0x40020404,        4, base=16,    bitRange=5-5
 1342                           ;'GPIOB_OTYPER.OT6`                    EQU 0x40020404,        4, base=16,    bitRange=6-6
 1343                           ;'GPIOB_OTYPER.OT7`                    EQU 0x40020404,        4, base=16,    bitRange=7-7
 1344                           ;'GPIOB_OTYPER.OT8`                    EQU 0x40020404,        4, base=16,    bitRange=8-8
 1345                           ;'GPIOB_OTYPER.OT9`                    EQU 0x40020404,        4, base=16,    bitRange=9-9
 1346                           ;'GPIOB_OTYPER.OT10`                   EQU 0x40020404,        4, base=16,    bitRange=10-10
 1347                           ;'GPIOB_OTYPER.OT11`                   EQU 0x40020404,        4, base=16,    bitRange=11-11
 1348                           ;'GPIOB_OTYPER.OT12`                   EQU 0x40020404,        4, base=16,    bitRange=12-12
 1349                           ;'GPIOB_OTYPER.OT13`                   EQU 0x40020404,        4, base=16,    bitRange=13-13
 1350                           ;'GPIOB_OTYPER.OT14`                   EQU 0x40020404,        4, base=16,    bitRange=14-14
 1351                           ;'GPIOB_OTYPER.OT15`                   EQU 0x40020404,        4, base=16,    bitRange=15-15
 1352                           
 1353                           GPIOB_OSPEEDR                       EQU 0x40020408
 1354                           ;'GPIOB_OSPEEDR.OSPEEDR0`              EQU 0x40020408,        4, base=16,    bitRange=0-1
 1355                           ;'GPIOB_OSPEEDR.OSPEEDR1`              EQU 0x40020408,        4, base=16,    bitRange=2-3
 1356                           ;'GPIOB_OSPEEDR.OSPEEDR2`              EQU 0x40020408,        4, base=16,    bitRange=4-5
 1357                           ;'GPIOB_OSPEEDR.OSPEEDR3`              EQU 0x40020408,        4, base=16,    bitRange=6-7
 1358                           ;'GPIOB_OSPEEDR.OSPEEDR4`              EQU 0x40020408,        4, base=16,    bitRange=8-9
 1359                           ;'GPIOB_OSPEEDR.OSPEEDR5`              EQU 0x40020408,        4, base=16,    bitRange=10-11
 1360                           ;'GPIOB_OSPEEDR.OSPEEDR6`              EQU 0x40020408,        4, base=16,    bitRange=12-13
 1361                           ;'GPIOB_OSPEEDR.OSPEEDR7`              EQU 0x40020408,        4, base=16,    bitRange=14-15
 1362                           ;'GPIOB_OSPEEDR.OSPEEDR8`              EQU 0x40020408,        4, base=16,    bitRange=16-17
 1363                           ;'GPIOB_OSPEEDR.OSPEEDR9`              EQU 0x40020408,        4, base=16,    bitRange=18-19
 1364                           ;'GPIOB_OSPEEDR.OSPEEDR10`             EQU 0x40020408,        4, base=16,    bitRange=20-21
 1365                           ;'GPIOB_OSPEEDR.OSPEEDR11`             EQU 0x40020408,        4, base=16,    bitRange=22-23
 1366                           ;'GPIOB_OSPEEDR.OSPEEDR12`             EQU 0x40020408,        4, base=16,    bitRange=24-25
 1367                           ;'GPIOB_OSPEEDR.OSPEEDR13`             EQU 0x40020408,        4, base=16,    bitRange=26-27
 1368                           ;'GPIOB_OSPEEDR.OSPEEDR14`             EQU 0x40020408,        4, base=16,    bitRange=28-29
 1369                           ;'GPIOB_OSPEEDR.OSPEEDR15`             EQU 0x40020408,        4, base=16,    bitRange=30-31
 1370                           
 1371                           GPIOB_PUPDR                         EQU 0x4002040C
 1372                           ;'GPIOB_PUPDR.PUPDR0`                  EQU 0x4002040C,        4, base=16,    bitRange=0-1
 1373                           ;'GPIOB_PUPDR.PUPDR1`                  EQU 0x4002040C,        4, base=16,    bitRange=2-3
 1374                           ;'GPIOB_PUPDR.PUPDR2`                  EQU 0x4002040C,        4, base=16,    bitRange=4-5
 1375                           ;'GPIOB_PUPDR.PUPDR3`                  EQU 0x4002040C,        4, base=16,    bitRange=6-7
 1376                           ;'GPIOB_PUPDR.PUPDR4`                  EQU 0x4002040C,        4, base=16,    bitRange=8-9
 1377                           ;'GPIOB_PUPDR.PUPDR5`                  EQU 0x4002040C,        4, base=16,    bitRange=10-11
 1378                           ;'GPIOB_PUPDR.PUPDR6`                  EQU 0x4002040C,        4, base=16,    bitRange=12-13
 1379                           ;'GPIOB_PUPDR.PUPDR7`                  EQU 0x4002040C,        4, base=16,    bitRange=14-15
 1380                           ;'GPIOB_PUPDR.PUPDR8`                  EQU 0x4002040C,        4, base=16,    bitRange=16-17
 1381                           ;'GPIOB_PUPDR.PUPDR9`                  EQU 0x4002040C,        4, base=16,    bitRange=18-19
 1382                           ;'GPIOB_PUPDR.PUPDR10`                 EQU 0x4002040C,        4, base=16,    bitRange=20-21
 1383                           ;'GPIOB_PUPDR.PUPDR11`                 EQU 0x4002040C,        4, base=16,    bitRange=22-23
 1384                           ;'GPIOB_PUPDR.PUPDR12`                 EQU 0x4002040C,        4, base=16,    bitRange=24-25
 1385                           ;'GPIOB_PUPDR.PUPDR13`                 EQU 0x4002040C,        4, base=16,    bitRange=26-27
 1386                           ;'GPIOB_PUPDR.PUPDR14`                 EQU 0x4002040C,        4, base=16,    bitRange=28-29
 1387                           ;'GPIOB_PUPDR.PUPDR15`                 EQU 0x4002040C,        4, base=16,    bitRange=30-31
 1388                           
 1389                           GPIOB_IDR                           EQU 0x40020410
 1390                           ;'GPIOB_IDR.IDR0`                      EQU 0x40020410,        4, base=16,    bitRange=0-0
 1391                           ;'GPIOB_IDR.IDR1`                      EQU 0x40020410,        4, base=16,    bitRange=1-1
 1392                           ;'GPIOB_IDR.IDR2`                      EQU 0x40020410,        4, base=16,    bitRange=2-2
 1393                           ;'GPIOB_IDR.IDR3`                      EQU 0x40020410,        4, base=16,    bitRange=3-3
 1394                           ;'GPIOB_IDR.IDR4`                      EQU 0x40020410,        4, base=16,    bitRange=4-4
 1395                           ;'GPIOB_IDR.IDR5`                      EQU 0x40020410,        4, base=16,    bitRange=5-5
 1396                           ;'GPIOB_IDR.IDR6`                      EQU 0x40020410,        4, base=16,    bitRange=6-6
 1397                           ;'GPIOB_IDR.IDR7`                      EQU 0x40020410,        4, base=16,    bitRange=7-7
 1398                           ;'GPIOB_IDR.IDR8`                      EQU 0x40020410,        4, base=16,    bitRange=8-8
 1399                           ;'GPIOB_IDR.IDR9`                      EQU 0x40020410,        4, base=16,    bitRange=9-9
 1400                           ;'GPIOB_IDR.IDR10`                     EQU 0x40020410,        4, base=16,    bitRange=10-10
 1401                           ;'GPIOB_IDR.IDR11`                     EQU 0x40020410,        4, base=16,    bitRange=11-11
 1402                           ;'GPIOB_IDR.IDR12`                     EQU 0x40020410,        4, base=16,    bitRange=12-12
 1403                           ;'GPIOB_IDR.IDR13`                     EQU 0x40020410,        4, base=16,    bitRange=13-13
 1404                           ;'GPIOB_IDR.IDR14`                     EQU 0x40020410,        4, base=16,    bitRange=14-14
 1405                           ;'GPIOB_IDR.IDR15`                     EQU 0x40020410,        4, base=16,    bitRange=15-15
 1406                           
 1407                           GPIOB_ODR                           EQU 0x40020414
 1408                           ;'GPIOB_ODR.ODR0`                      EQU 0x40020414,        4, base=16,    bitRange=0-0
 1409                           ;'GPIOB_ODR.ODR1`                      EQU 0x40020414,        4, base=16,    bitRange=1-1
 1410                           ;'GPIOB_ODR.ODR2`                      EQU 0x40020414,        4, base=16,    bitRange=2-2
 1411                           ;'GPIOB_ODR.ODR3`                      EQU 0x40020414,        4, base=16,    bitRange=3-3
 1412                           ;'GPIOB_ODR.ODR4`                      EQU 0x40020414,        4, base=16,    bitRange=4-4
 1413                           ;'GPIOB_ODR.ODR5`                      EQU 0x40020414,        4, base=16,    bitRange=5-5
 1414                           ;'GPIOB_ODR.ODR6`                      EQU 0x40020414,        4, base=16,    bitRange=6-6
 1415                           ;'GPIOB_ODR.ODR7`                      EQU 0x40020414,        4, base=16,    bitRange=7-7
 1416                           ;'GPIOB_ODR.ODR8`                      EQU 0x40020414,        4, base=16,    bitRange=8-8
 1417                           ;'GPIOB_ODR.ODR9`                      EQU 0x40020414,        4, base=16,    bitRange=9-9
 1418                           ;'GPIOB_ODR.ODR10`                     EQU 0x40020414,        4, base=16,    bitRange=10-10
 1419                           ;'GPIOB_ODR.ODR11`                     EQU 0x40020414,        4, base=16,    bitRange=11-11
 1420                           ;'GPIOB_ODR.ODR12`                     EQU 0x40020414,        4, base=16,    bitRange=12-12
 1421                           ;'GPIOB_ODR.ODR13`                     EQU 0x40020414,        4, base=16,    bitRange=13-13
 1422                           ;'GPIOB_ODR.ODR14`                     EQU 0x40020414,        4, base=16,    bitRange=14-14
 1423                           ;'GPIOB_ODR.ODR15`                     EQU 0x40020414,        4, base=16,    bitRange=15-15
 1424                           
 1425                           GPIOB_BSRR                          EQU 0x40020418
 1426                           ;'GPIOB_BSRR.BS0`                      EQU 0x40020418,        4, base=16,    bitRange=0-0
 1427                           ;'GPIOB_BSRR.BS1`                      EQU 0x40020418,        4, base=16,    bitRange=1-1
 1428                           ;'GPIOB_BSRR.BS2`                      EQU 0x40020418,        4, base=16,    bitRange=2-2
 1429                           ;'GPIOB_BSRR.BS3`                      EQU 0x40020418,        4, base=16,    bitRange=3-3
 1430                           ;'GPIOB_BSRR.BS4`                      EQU 0x40020418,        4, base=16,    bitRange=4-4
 1431                           ;'GPIOB_BSRR.BS5`                      EQU 0x40020418,        4, base=16,    bitRange=5-5
 1432                           ;'GPIOB_BSRR.BS6`                      EQU 0x40020418,        4, base=16,    bitRange=6-6
 1433                           ;'GPIOB_BSRR.BS7`                      EQU 0x40020418,        4, base=16,    bitRange=7-7
 1434                           ;'GPIOB_BSRR.BS8`                      EQU 0x40020418,        4, base=16,    bitRange=8-8
 1435                           ;'GPIOB_BSRR.BS9`                      EQU 0x40020418,        4, base=16,    bitRange=9-9
 1436                           ;'GPIOB_BSRR.BS10`                     EQU 0x40020418,        4, base=16,    bitRange=10-10
 1437                           ;'GPIOB_BSRR.BS11`                     EQU 0x40020418,        4, base=16,    bitRange=11-11
 1438                           ;'GPIOB_BSRR.BS12`                     EQU 0x40020418,        4, base=16,    bitRange=12-12
 1439                           ;'GPIOB_BSRR.BS13`                     EQU 0x40020418,        4, base=16,    bitRange=13-13
 1440                           ;'GPIOB_BSRR.BS14`                     EQU 0x40020418,        4, base=16,    bitRange=14-14
 1441                           ;'GPIOB_BSRR.BS15`                     EQU 0x40020418,        4, base=16,    bitRange=15-15
 1442                           ;'GPIOB_BSRR.BR0`                      EQU 0x40020418,        4, base=16,    bitRange=16-16
 1443                           ;'GPIOB_BSRR.BR1`                      EQU 0x40020418,        4, base=16,    bitRange=17-17
 1444                           ;'GPIOB_BSRR.BR2`                      EQU 0x40020418,        4, base=16,    bitRange=18-18
 1445                           ;'GPIOB_BSRR.BR3`                      EQU 0x40020418,        4, base=16,    bitRange=19-19
 1446                           ;'GPIOB_BSRR.BR4`                      EQU 0x40020418,        4, base=16,    bitRange=20-20
 1447                           ;'GPIOB_BSRR.BR5`                      EQU 0x40020418,        4, base=16,    bitRange=21-21
 1448                           ;'GPIOB_BSRR.BR6`                      EQU 0x40020418,        4, base=16,    bitRange=22-22
 1449                           ;'GPIOB_BSRR.BR7`                      EQU 0x40020418,        4, base=16,    bitRange=23-23
 1450                           ;'GPIOB_BSRR.BR8`                      EQU 0x40020418,        4, base=16,    bitRange=24-24
 1451                           ;'GPIOB_BSRR.BR9`                      EQU 0x40020418,        4, base=16,    bitRange=25-25
 1452                           ;'GPIOB_BSRR.BR10`                     EQU 0x40020418,        4, base=16,    bitRange=26-26
 1453                           ;'GPIOB_BSRR.BR11`                     EQU 0x40020418,        4, base=16,    bitRange=27-27
 1454                           ;'GPIOB_BSRR.BR12`                     EQU 0x40020418,        4, base=16,    bitRange=28-28
 1455                           ;'GPIOB_BSRR.BR13`                     EQU 0x40020418,        4, base=16,    bitRange=29-29
 1456                           ;'GPIOB_BSRR.BR14`                     EQU 0x40020418,        4, base=16,    bitRange=30-30
 1457                           ;'GPIOB_BSRR.BR15`                     EQU 0x40020418,        4, base=16,    bitRange=31-31
 1458                           
 1459                           GPIOB_LCKR                          EQU 0x4002041C
 1460                           ;'GPIOB_LCKR.LCK0`                     EQU 0x4002041C,        4, base=16,    bitRange=0-0
 1461                           ;'GPIOB_LCKR.LCK1`                     EQU 0x4002041C,        4, base=16,    bitRange=1-1
 1462                           ;'GPIOB_LCKR.LCK2`                     EQU 0x4002041C,        4, base=16,    bitRange=2-2
 1463                           ;'GPIOB_LCKR.LCK3`                     EQU 0x4002041C,        4, base=16,    bitRange=3-3
 1464                           ;'GPIOB_LCKR.LCK4`                     EQU 0x4002041C,        4, base=16,    bitRange=4-4
 1465                           ;'GPIOB_LCKR.LCK5`                     EQU 0x4002041C,        4, base=16,    bitRange=5-5
 1466                           ;'GPIOB_LCKR.LCK6`                     EQU 0x4002041C,        4, base=16,    bitRange=6-6
 1467                           ;'GPIOB_LCKR.LCK7`                     EQU 0x4002041C,        4, base=16,    bitRange=7-7
 1468                           ;'GPIOB_LCKR.LCK8`                     EQU 0x4002041C,        4, base=16,    bitRange=8-8
 1469                           ;'GPIOB_LCKR.LCK9`                     EQU 0x4002041C,        4, base=16,    bitRange=9-9
 1470                           ;'GPIOB_LCKR.LCK10`                    EQU 0x4002041C,        4, base=16,    bitRange=10-10
 1471                           ;'GPIOB_LCKR.LCK11`                    EQU 0x4002041C,        4, base=16,    bitRange=11-11
 1472                           ;'GPIOB_LCKR.LCK12`                    EQU 0x4002041C,        4, base=16,    bitRange=12-12
 1473                           ;'GPIOB_LCKR.LCK13`                    EQU 0x4002041C,        4, base=16,    bitRange=13-13
 1474                           ;'GPIOB_LCKR.LCK14`                    EQU 0x4002041C,        4, base=16,    bitRange=14-14
 1475                           ;'GPIOB_LCKR.LCK15`                    EQU 0x4002041C,        4, base=16,    bitRange=15-15
 1476                           ;'GPIOB_LCKR.LCKK`                     EQU 0x4002041C,        4, base=16,    bitRange=16-16
 1477                           
 1478                           GPIOB_AFRL                          EQU 0x40020420
 1479                           ;'GPIOB_AFRL.AFRL0`                    EQU 0x40020420,        4, base=16,    bitRange=0-3
 1480                           ;'GPIOB_AFRL.AFRL1`                    EQU 0x40020420,        4, base=16,    bitRange=4-7
 1481                           ;'GPIOB_AFRL.AFRL2`                    EQU 0x40020420,        4, base=16,    bitRange=8-11
 1482                           ;'GPIOB_AFRL.AFRL3`                    EQU 0x40020420,        4, base=16,    bitRange=12-15
 1483                           ;'GPIOB_AFRL.AFRL4`                    EQU 0x40020420,        4, base=16,    bitRange=16-19
 1484                           ;'GPIOB_AFRL.AFRL5`                    EQU 0x40020420,        4, base=16,    bitRange=20-23
 1485                           ;'GPIOB_AFRL.AFRL6`                    EQU 0x40020420,        4, base=16,    bitRange=24-27
 1486                           ;'GPIOB_AFRL.AFRL7`                    EQU 0x40020420,        4, base=16,    bitRange=28-31
 1487                           
 1488                           GPIOB_AFRH                          EQU 0x40020424
 1489                           ;'GPIOB_AFRH.AFRL8`                    EQU 0x40020424,        4, base=16,    bitRange=0-3
 1490                           ;'GPIOB_AFRH.AFRL9`                    EQU 0x40020424,        4, base=16,    bitRange=4-7
 1491                           ;'GPIOB_AFRH.AFRL10`                   EQU 0x40020424,        4, base=16,    bitRange=8-11
 1492                           ;'GPIOB_AFRH.AFRL11`                   EQU 0x40020424,        4, base=16,    bitRange=12-15
 1493                           ;'GPIOB_AFRH.AFRL12`                   EQU 0x40020424,        4, base=16,    bitRange=16-19
 1494                           ;'GPIOB_AFRH.AFRL13`                   EQU 0x40020424,        4, base=16,    bitRange=20-23
 1495                           ;'GPIOB_AFRH.AFRL14`                   EQU 0x40020424,        4, base=16,    bitRange=24-27
 1496                           ;'GPIOB_AFRH.AFRL15`                   EQU 0x40020424,        4, base=16,    bitRange=28-31
 1497                           
 1498                           
 1499                           ;
 1500                           ;               GPIOC
 1501                           ;
 1502                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 1503                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 1504                           
 1505                           GPIOC_MODER                         EQU 0x40020800
 1506                           ;'GPIOC_MODER.MODER0`                  EQU 0x40020800,        4, base=16,    bitRange=0-1
 1507                           ;'GPIOC_MODER.MODER1`                  EQU 0x40020800,        4, base=16,    bitRange=2-3
 1508                           ;'GPIOC_MODER.MODER2`                  EQU 0x40020800,        4, base=16,    bitRange=4-5
 1509                           ;'GPIOC_MODER.MODER3`                  EQU 0x40020800,        4, base=16,    bitRange=6-7
 1510                           ;'GPIOC_MODER.MODER4`                  EQU 0x40020800,        4, base=16,    bitRange=8-9
 1511                           ;'GPIOC_MODER.MODER5`                  EQU 0x40020800,        4, base=16,    bitRange=10-11
 1512                           ;'GPIOC_MODER.MODER6`                  EQU 0x40020800,        4, base=16,    bitRange=12-13
 1513                           ;'GPIOC_MODER.MODER7`                  EQU 0x40020800,        4, base=16,    bitRange=14-15
 1514                           ;'GPIOC_MODER.MODER8`                  EQU 0x40020800,        4, base=16,    bitRange=16-17
 1515                           ;'GPIOC_MODER.MODER9`                  EQU 0x40020800,        4, base=16,    bitRange=18-19
 1516                           ;'GPIOC_MODER.MODER10`                 EQU 0x40020800,        4, base=16,    bitRange=20-21
 1517                           ;'GPIOC_MODER.MODER11`                 EQU 0x40020800,        4, base=16,    bitRange=22-23
 1518                           ;'GPIOC_MODER.MODER12`                 EQU 0x40020800,        4, base=16,    bitRange=24-25
 1519                           ;'GPIOC_MODER.MODER13`                 EQU 0x40020800,        4, base=16,    bitRange=26-27
 1520                           ;'GPIOC_MODER.MODER14`                 EQU 0x40020800,        4, base=16,    bitRange=28-29
 1521                           ;'GPIOC_MODER.MODER15`                 EQU 0x40020800,        4, base=16,    bitRange=30-31
 1522                           
 1523                           GPIOC_OTYPER                        EQU 0x40020804
 1524                           ;'GPIOC_OTYPER.OT0`                    EQU 0x40020804,        4, base=16,    bitRange=0-0
 1525                           ;'GPIOC_OTYPER.OT1`                    EQU 0x40020804,        4, base=16,    bitRange=1-1
 1526                           ;'GPIOC_OTYPER.OT2`                    EQU 0x40020804,        4, base=16,    bitRange=2-2
 1527                           ;'GPIOC_OTYPER.OT3`                    EQU 0x40020804,        4, base=16,    bitRange=3-3
 1528                           ;'GPIOC_OTYPER.OT4`                    EQU 0x40020804,        4, base=16,    bitRange=4-4
 1529                           ;'GPIOC_OTYPER.OT5`                    EQU 0x40020804,        4, base=16,    bitRange=5-5
 1530                           ;'GPIOC_OTYPER.OT6`                    EQU 0x40020804,        4, base=16,    bitRange=6-6
 1531                           ;'GPIOC_OTYPER.OT7`                    EQU 0x40020804,        4, base=16,    bitRange=7-7
 1532                           ;'GPIOC_OTYPER.OT8`                    EQU 0x40020804,        4, base=16,    bitRange=8-8
 1533                           ;'GPIOC_OTYPER.OT9`                    EQU 0x40020804,        4, base=16,    bitRange=9-9
 1534                           ;'GPIOC_OTYPER.OT10`                   EQU 0x40020804,        4, base=16,    bitRange=10-10
 1535                           ;'GPIOC_OTYPER.OT11`                   EQU 0x40020804,        4, base=16,    bitRange=11-11
 1536                           ;'GPIOC_OTYPER.OT12`                   EQU 0x40020804,        4, base=16,    bitRange=12-12
 1537                           ;'GPIOC_OTYPER.OT13`                   EQU 0x40020804,        4, base=16,    bitRange=13-13
 1538                           ;'GPIOC_OTYPER.OT14`                   EQU 0x40020804,        4, base=16,    bitRange=14-14
 1539                           ;'GPIOC_OTYPER.OT15`                   EQU 0x40020804,        4, base=16,    bitRange=15-15
 1540                           
 1541                           GPIOC_OSPEEDR                       EQU 0x40020808
 1542                           ;'GPIOC_OSPEEDR.OSPEEDR0`              EQU 0x40020808,        4, base=16,    bitRange=0-1
 1543                           ;'GPIOC_OSPEEDR.OSPEEDR1`              EQU 0x40020808,        4, base=16,    bitRange=2-3
 1544                           ;'GPIOC_OSPEEDR.OSPEEDR2`              EQU 0x40020808,        4, base=16,    bitRange=4-5
 1545                           ;'GPIOC_OSPEEDR.OSPEEDR3`              EQU 0x40020808,        4, base=16,    bitRange=6-7
 1546                           ;'GPIOC_OSPEEDR.OSPEEDR4`              EQU 0x40020808,        4, base=16,    bitRange=8-9
 1547                           ;'GPIOC_OSPEEDR.OSPEEDR5`              EQU 0x40020808,        4, base=16,    bitRange=10-11
 1548                           ;'GPIOC_OSPEEDR.OSPEEDR6`              EQU 0x40020808,        4, base=16,    bitRange=12-13
 1549                           ;'GPIOC_OSPEEDR.OSPEEDR7`              EQU 0x40020808,        4, base=16,    bitRange=14-15
 1550                           ;'GPIOC_OSPEEDR.OSPEEDR8`              EQU 0x40020808,        4, base=16,    bitRange=16-17
 1551                           ;'GPIOC_OSPEEDR.OSPEEDR9`              EQU 0x40020808,        4, base=16,    bitRange=18-19
 1552                           ;'GPIOC_OSPEEDR.OSPEEDR10`             EQU 0x40020808,        4, base=16,    bitRange=20-21
 1553                           ;'GPIOC_OSPEEDR.OSPEEDR11`             EQU 0x40020808,        4, base=16,    bitRange=22-23
 1554                           ;'GPIOC_OSPEEDR.OSPEEDR12`             EQU 0x40020808,        4, base=16,    bitRange=24-25
 1555                           ;'GPIOC_OSPEEDR.OSPEEDR13`             EQU 0x40020808,        4, base=16,    bitRange=26-27
 1556                           ;'GPIOC_OSPEEDR.OSPEEDR14`             EQU 0x40020808,        4, base=16,    bitRange=28-29
 1557                           ;'GPIOC_OSPEEDR.OSPEEDR15`             EQU 0x40020808,        4, base=16,    bitRange=30-31
 1558                           
 1559                           GPIOC_PUPDR                         EQU 0x4002080C
 1560                           ;'GPIOC_PUPDR.PUPDR0`                  EQU 0x4002080C,        4, base=16,    bitRange=0-1
 1561                           ;'GPIOC_PUPDR.PUPDR1`                  EQU 0x4002080C,        4, base=16,    bitRange=2-3
 1562                           ;'GPIOC_PUPDR.PUPDR2`                  EQU 0x4002080C,        4, base=16,    bitRange=4-5
 1563                           ;'GPIOC_PUPDR.PUPDR3`                  EQU 0x4002080C,        4, base=16,    bitRange=6-7
 1564                           ;'GPIOC_PUPDR.PUPDR4`                  EQU 0x4002080C,        4, base=16,    bitRange=8-9
 1565                           ;'GPIOC_PUPDR.PUPDR5`                  EQU 0x4002080C,        4, base=16,    bitRange=10-11
 1566                           ;'GPIOC_PUPDR.PUPDR6`                  EQU 0x4002080C,        4, base=16,    bitRange=12-13
 1567                           ;'GPIOC_PUPDR.PUPDR7`                  EQU 0x4002080C,        4, base=16,    bitRange=14-15
 1568                           ;'GPIOC_PUPDR.PUPDR8`                  EQU 0x4002080C,        4, base=16,    bitRange=16-17
 1569                           ;'GPIOC_PUPDR.PUPDR9`                  EQU 0x4002080C,        4, base=16,    bitRange=18-19
 1570                           ;'GPIOC_PUPDR.PUPDR10`                 EQU 0x4002080C,        4, base=16,    bitRange=20-21
 1571                           ;'GPIOC_PUPDR.PUPDR11`                 EQU 0x4002080C,        4, base=16,    bitRange=22-23
 1572                           ;'GPIOC_PUPDR.PUPDR12`                 EQU 0x4002080C,        4, base=16,    bitRange=24-25
 1573                           ;'GPIOC_PUPDR.PUPDR13`                 EQU 0x4002080C,        4, base=16,    bitRange=26-27
 1574                           ;'GPIOC_PUPDR.PUPDR14`                 EQU 0x4002080C,        4, base=16,    bitRange=28-29
 1575                           ;'GPIOC_PUPDR.PUPDR15`                 EQU 0x4002080C,        4, base=16,    bitRange=30-31
 1576                           
 1577                           GPIOC_IDR                           EQU 0x40020810
 1578                           ;'GPIOC_IDR.IDR0`                      EQU 0x40020810,        4, base=16,    bitRange=0-0
 1579                           ;'GPIOC_IDR.IDR1`                      EQU 0x40020810,        4, base=16,    bitRange=1-1
 1580                           ;'GPIOC_IDR.IDR2`                      EQU 0x40020810,        4, base=16,    bitRange=2-2
 1581                           ;'GPIOC_IDR.IDR3`                      EQU 0x40020810,        4, base=16,    bitRange=3-3
 1582                           ;'GPIOC_IDR.IDR4`                      EQU 0x40020810,        4, base=16,    bitRange=4-4
 1583                           ;'GPIOC_IDR.IDR5`                      EQU 0x40020810,        4, base=16,    bitRange=5-5
 1584                           ;'GPIOC_IDR.IDR6`                      EQU 0x40020810,        4, base=16,    bitRange=6-6
 1585                           ;'GPIOC_IDR.IDR7`                      EQU 0x40020810,        4, base=16,    bitRange=7-7
 1586                           ;'GPIOC_IDR.IDR8`                      EQU 0x40020810,        4, base=16,    bitRange=8-8
 1587                           ;'GPIOC_IDR.IDR9`                      EQU 0x40020810,        4, base=16,    bitRange=9-9
 1588                           ;'GPIOC_IDR.IDR10`                     EQU 0x40020810,        4, base=16,    bitRange=10-10
 1589                           ;'GPIOC_IDR.IDR11`                     EQU 0x40020810,        4, base=16,    bitRange=11-11
 1590                           ;'GPIOC_IDR.IDR12`                     EQU 0x40020810,        4, base=16,    bitRange=12-12
 1591                           ;'GPIOC_IDR.IDR13`                     EQU 0x40020810,        4, base=16,    bitRange=13-13
 1592                           ;'GPIOC_IDR.IDR14`                     EQU 0x40020810,        4, base=16,    bitRange=14-14
 1593                           ;'GPIOC_IDR.IDR15`                     EQU 0x40020810,        4, base=16,    bitRange=15-15
 1594                           
 1595                           GPIOC_ODR                           EQU 0x40020814
 1596                           ;'GPIOC_ODR.ODR0`                      EQU 0x40020814,        4, base=16,    bitRange=0-0
 1597                           ;'GPIOC_ODR.ODR1`                      EQU 0x40020814,        4, base=16,    bitRange=1-1
 1598                           ;'GPIOC_ODR.ODR2`                      EQU 0x40020814,        4, base=16,    bitRange=2-2
 1599                           ;'GPIOC_ODR.ODR3`                      EQU 0x40020814,        4, base=16,    bitRange=3-3
 1600                           ;'GPIOC_ODR.ODR4`                      EQU 0x40020814,        4, base=16,    bitRange=4-4
 1601                           ;'GPIOC_ODR.ODR5`                      EQU 0x40020814,        4, base=16,    bitRange=5-5
 1602                           ;'GPIOC_ODR.ODR6`                      EQU 0x40020814,        4, base=16,    bitRange=6-6
 1603                           ;'GPIOC_ODR.ODR7`                      EQU 0x40020814,        4, base=16,    bitRange=7-7
 1604                           ;'GPIOC_ODR.ODR8`                      EQU 0x40020814,        4, base=16,    bitRange=8-8
 1605                           ;'GPIOC_ODR.ODR9`                      EQU 0x40020814,        4, base=16,    bitRange=9-9
 1606                           ;'GPIOC_ODR.ODR10`                     EQU 0x40020814,        4, base=16,    bitRange=10-10
 1607                           ;'GPIOC_ODR.ODR11`                     EQU 0x40020814,        4, base=16,    bitRange=11-11
 1608                           ;'GPIOC_ODR.ODR12`                     EQU 0x40020814,        4, base=16,    bitRange=12-12
 1609                           ;'GPIOC_ODR.ODR13`                     EQU 0x40020814,        4, base=16,    bitRange=13-13
 1610                           ;'GPIOC_ODR.ODR14`                     EQU 0x40020814,        4, base=16,    bitRange=14-14
 1611                           ;'GPIOC_ODR.ODR15`                     EQU 0x40020814,        4, base=16,    bitRange=15-15
 1612                           
 1613                           GPIOC_BSRR                          EQU 0x40020818
 1614                           ;'GPIOC_BSRR.BS0`                      EQU 0x40020818,        4, base=16,    bitRange=0-0
 1615                           ;'GPIOC_BSRR.BS1`                      EQU 0x40020818,        4, base=16,    bitRange=1-1
 1616                           ;'GPIOC_BSRR.BS2`                      EQU 0x40020818,        4, base=16,    bitRange=2-2
 1617                           ;'GPIOC_BSRR.BS3`                      EQU 0x40020818,        4, base=16,    bitRange=3-3
 1618                           ;'GPIOC_BSRR.BS4`                      EQU 0x40020818,        4, base=16,    bitRange=4-4
 1619                           ;'GPIOC_BSRR.BS5`                      EQU 0x40020818,        4, base=16,    bitRange=5-5
 1620                           ;'GPIOC_BSRR.BS6`                      EQU 0x40020818,        4, base=16,    bitRange=6-6
 1621                           ;'GPIOC_BSRR.BS7`                      EQU 0x40020818,        4, base=16,    bitRange=7-7
 1622                           ;'GPIOC_BSRR.BS8`                      EQU 0x40020818,        4, base=16,    bitRange=8-8
 1623                           ;'GPIOC_BSRR.BS9`                      EQU 0x40020818,        4, base=16,    bitRange=9-9
 1624                           ;'GPIOC_BSRR.BS10`                     EQU 0x40020818,        4, base=16,    bitRange=10-10
 1625                           ;'GPIOC_BSRR.BS11`                     EQU 0x40020818,        4, base=16,    bitRange=11-11
 1626                           ;'GPIOC_BSRR.BS12`                     EQU 0x40020818,        4, base=16,    bitRange=12-12
 1627                           ;'GPIOC_BSRR.BS13`                     EQU 0x40020818,        4, base=16,    bitRange=13-13
 1628                           ;'GPIOC_BSRR.BS14`                     EQU 0x40020818,        4, base=16,    bitRange=14-14
 1629                           ;'GPIOC_BSRR.BS15`                     EQU 0x40020818,        4, base=16,    bitRange=15-15
 1630                           ;'GPIOC_BSRR.BR0`                      EQU 0x40020818,        4, base=16,    bitRange=16-16
 1631                           ;'GPIOC_BSRR.BR1`                      EQU 0x40020818,        4, base=16,    bitRange=17-17
 1632                           ;'GPIOC_BSRR.BR2`                      EQU 0x40020818,        4, base=16,    bitRange=18-18
 1633                           ;'GPIOC_BSRR.BR3`                      EQU 0x40020818,        4, base=16,    bitRange=19-19
 1634                           ;'GPIOC_BSRR.BR4`                      EQU 0x40020818,        4, base=16,    bitRange=20-20
 1635                           ;'GPIOC_BSRR.BR5`                      EQU 0x40020818,        4, base=16,    bitRange=21-21
 1636                           ;'GPIOC_BSRR.BR6`                      EQU 0x40020818,        4, base=16,    bitRange=22-22
 1637                           ;'GPIOC_BSRR.BR7`                      EQU 0x40020818,        4, base=16,    bitRange=23-23
 1638                           ;'GPIOC_BSRR.BR8`                      EQU 0x40020818,        4, base=16,    bitRange=24-24
 1639                           ;'GPIOC_BSRR.BR9`                      EQU 0x40020818,        4, base=16,    bitRange=25-25
 1640                           ;'GPIOC_BSRR.BR10`                     EQU 0x40020818,        4, base=16,    bitRange=26-26
 1641                           ;'GPIOC_BSRR.BR11`                     EQU 0x40020818,        4, base=16,    bitRange=27-27
 1642                           ;'GPIOC_BSRR.BR12`                     EQU 0x40020818,        4, base=16,    bitRange=28-28
 1643                           ;'GPIOC_BSRR.BR13`                     EQU 0x40020818,        4, base=16,    bitRange=29-29
 1644                           ;'GPIOC_BSRR.BR14`                     EQU 0x40020818,        4, base=16,    bitRange=30-30
 1645                           ;'GPIOC_BSRR.BR15`                     EQU 0x40020818,        4, base=16,    bitRange=31-31
 1646                           
 1647                           GPIOC_LCKR                          EQU 0x4002081C
 1648                           ;'GPIOC_LCKR.LCK0`                     EQU 0x4002081C,        4, base=16,    bitRange=0-0
 1649                           ;'GPIOC_LCKR.LCK1`                     EQU 0x4002081C,        4, base=16,    bitRange=1-1
 1650                           ;'GPIOC_LCKR.LCK2`                     EQU 0x4002081C,        4, base=16,    bitRange=2-2
 1651                           ;'GPIOC_LCKR.LCK3`                     EQU 0x4002081C,        4, base=16,    bitRange=3-3
 1652                           ;'GPIOC_LCKR.LCK4`                     EQU 0x4002081C,        4, base=16,    bitRange=4-4
 1653                           ;'GPIOC_LCKR.LCK5`                     EQU 0x4002081C,        4, base=16,    bitRange=5-5
 1654                           ;'GPIOC_LCKR.LCK6`                     EQU 0x4002081C,        4, base=16,    bitRange=6-6
 1655                           ;'GPIOC_LCKR.LCK7`                     EQU 0x4002081C,        4, base=16,    bitRange=7-7
 1656                           ;'GPIOC_LCKR.LCK8`                     EQU 0x4002081C,        4, base=16,    bitRange=8-8
 1657                           ;'GPIOC_LCKR.LCK9`                     EQU 0x4002081C,        4, base=16,    bitRange=9-9
 1658                           ;'GPIOC_LCKR.LCK10`                    EQU 0x4002081C,        4, base=16,    bitRange=10-10
 1659                           ;'GPIOC_LCKR.LCK11`                    EQU 0x4002081C,        4, base=16,    bitRange=11-11
 1660                           ;'GPIOC_LCKR.LCK12`                    EQU 0x4002081C,        4, base=16,    bitRange=12-12
 1661                           ;'GPIOC_LCKR.LCK13`                    EQU 0x4002081C,        4, base=16,    bitRange=13-13
 1662                           ;'GPIOC_LCKR.LCK14`                    EQU 0x4002081C,        4, base=16,    bitRange=14-14
 1663                           ;'GPIOC_LCKR.LCK15`                    EQU 0x4002081C,        4, base=16,    bitRange=15-15
 1664                           ;'GPIOC_LCKR.LCKK`                     EQU 0x4002081C,        4, base=16,    bitRange=16-16
 1665                           
 1666                           GPIOC_AFRL                          EQU 0x40020820
 1667                           ;'GPIOC_AFRL.AFRL0`                    EQU 0x40020820,        4, base=16,    bitRange=0-3
 1668                           ;'GPIOC_AFRL.AFRL1`                    EQU 0x40020820,        4, base=16,    bitRange=4-7
 1669                           ;'GPIOC_AFRL.AFRL2`                    EQU 0x40020820,        4, base=16,    bitRange=8-11
 1670                           ;'GPIOC_AFRL.AFRL3`                    EQU 0x40020820,        4, base=16,    bitRange=12-15
 1671                           ;'GPIOC_AFRL.AFRL4`                    EQU 0x40020820,        4, base=16,    bitRange=16-19
 1672                           ;'GPIOC_AFRL.AFRL5`                    EQU 0x40020820,        4, base=16,    bitRange=20-23
 1673                           ;'GPIOC_AFRL.AFRL6`                    EQU 0x40020820,        4, base=16,    bitRange=24-27
 1674                           ;'GPIOC_AFRL.AFRL7`                    EQU 0x40020820,        4, base=16,    bitRange=28-31
 1675                           
 1676                           GPIOC_AFRH                          EQU 0x40020824
 1677                           ;'GPIOC_AFRH.AFRL8`                    EQU 0x40020824,        4, base=16,    bitRange=0-3
 1678                           ;'GPIOC_AFRH.AFRL9`                    EQU 0x40020824,        4, base=16,    bitRange=4-7
 1679                           ;'GPIOC_AFRH.AFRL10`                   EQU 0x40020824,        4, base=16,    bitRange=8-11
 1680                           ;'GPIOC_AFRH.AFRL11`                   EQU 0x40020824,        4, base=16,    bitRange=12-15
 1681                           ;'GPIOC_AFRH.AFRL12`                   EQU 0x40020824,        4, base=16,    bitRange=16-19
 1682                           ;'GPIOC_AFRH.AFRL13`                   EQU 0x40020824,        4, base=16,    bitRange=20-23
 1683                           ;'GPIOC_AFRH.AFRL14`                   EQU 0x40020824,        4, base=16,    bitRange=24-27
 1684                           ;'GPIOC_AFRH.AFRL15`                   EQU 0x40020824,        4, base=16,    bitRange=28-31
 1685                           
 1686                           
 1687                           ;
 1688                           ;               GPIOD
 1689                           ;
 1690                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 1691                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 1692                           
 1693                           GPIOD_MODER                         EQU 0x40020C00
 1694                           ;'GPIOD_MODER.MODER0`                  EQU 0x40020C00,        4, base=16,    bitRange=0-1
 1695                           ;'GPIOD_MODER.MODER1`                  EQU 0x40020C00,        4, base=16,    bitRange=2-3
 1696                           ;'GPIOD_MODER.MODER2`                  EQU 0x40020C00,        4, base=16,    bitRange=4-5
 1697                           ;'GPIOD_MODER.MODER3`                  EQU 0x40020C00,        4, base=16,    bitRange=6-7
 1698                           ;'GPIOD_MODER.MODER4`                  EQU 0x40020C00,        4, base=16,    bitRange=8-9
 1699                           ;'GPIOD_MODER.MODER5`                  EQU 0x40020C00,        4, base=16,    bitRange=10-11
 1700                           ;'GPIOD_MODER.MODER6`                  EQU 0x40020C00,        4, base=16,    bitRange=12-13
 1701                           ;'GPIOD_MODER.MODER7`                  EQU 0x40020C00,        4, base=16,    bitRange=14-15
 1702                           ;'GPIOD_MODER.MODER8`                  EQU 0x40020C00,        4, base=16,    bitRange=16-17
 1703                           ;'GPIOD_MODER.MODER9`                  EQU 0x40020C00,        4, base=16,    bitRange=18-19
 1704                           ;'GPIOD_MODER.MODER10`                 EQU 0x40020C00,        4, base=16,    bitRange=20-21
 1705                           ;'GPIOD_MODER.MODER11`                 EQU 0x40020C00,        4, base=16,    bitRange=22-23
 1706                           ;'GPIOD_MODER.MODER12`                 EQU 0x40020C00,        4, base=16,    bitRange=24-25
 1707                           ;'GPIOD_MODER.MODER13`                 EQU 0x40020C00,        4, base=16,    bitRange=26-27
 1708                           ;'GPIOD_MODER.MODER14`                 EQU 0x40020C00,        4, base=16,    bitRange=28-29
 1709                           ;'GPIOD_MODER.MODER15`                 EQU 0x40020C00,        4, base=16,    bitRange=30-31
 1710                           
 1711                           GPIOD_OTYPER                        EQU 0x40020C04
 1712                           ;'GPIOD_OTYPER.OT0`                    EQU 0x40020C04,        4, base=16,    bitRange=0-0
 1713                           ;'GPIOD_OTYPER.OT1`                    EQU 0x40020C04,        4, base=16,    bitRange=1-1
 1714                           ;'GPIOD_OTYPER.OT2`                    EQU 0x40020C04,        4, base=16,    bitRange=2-2
 1715                           ;'GPIOD_OTYPER.OT3`                    EQU 0x40020C04,        4, base=16,    bitRange=3-3
 1716                           ;'GPIOD_OTYPER.OT4`                    EQU 0x40020C04,        4, base=16,    bitRange=4-4
 1717                           ;'GPIOD_OTYPER.OT5`                    EQU 0x40020C04,        4, base=16,    bitRange=5-5
 1718                           ;'GPIOD_OTYPER.OT6`                    EQU 0x40020C04,        4, base=16,    bitRange=6-6
 1719                           ;'GPIOD_OTYPER.OT7`                    EQU 0x40020C04,        4, base=16,    bitRange=7-7
 1720                           ;'GPIOD_OTYPER.OT8`                    EQU 0x40020C04,        4, base=16,    bitRange=8-8
 1721                           ;'GPIOD_OTYPER.OT9`                    EQU 0x40020C04,        4, base=16,    bitRange=9-9
 1722                           ;'GPIOD_OTYPER.OT10`                   EQU 0x40020C04,        4, base=16,    bitRange=10-10
 1723                           ;'GPIOD_OTYPER.OT11`                   EQU 0x40020C04,        4, base=16,    bitRange=11-11
 1724                           ;'GPIOD_OTYPER.OT12`                   EQU 0x40020C04,        4, base=16,    bitRange=12-12
 1725                           ;'GPIOD_OTYPER.OT13`                   EQU 0x40020C04,        4, base=16,    bitRange=13-13
 1726                           ;'GPIOD_OTYPER.OT14`                   EQU 0x40020C04,        4, base=16,    bitRange=14-14
 1727                           ;'GPIOD_OTYPER.OT15`                   EQU 0x40020C04,        4, base=16,    bitRange=15-15
 1728                           
 1729                           GPIOD_OSPEEDR                       EQU 0x40020C08
 1730                           ;'GPIOD_OSPEEDR.OSPEEDR0`              EQU 0x40020C08,        4, base=16,    bitRange=0-1
 1731                           ;'GPIOD_OSPEEDR.OSPEEDR1`              EQU 0x40020C08,        4, base=16,    bitRange=2-3
 1732                           ;'GPIOD_OSPEEDR.OSPEEDR2`              EQU 0x40020C08,        4, base=16,    bitRange=4-5
 1733                           ;'GPIOD_OSPEEDR.OSPEEDR3`              EQU 0x40020C08,        4, base=16,    bitRange=6-7
 1734                           ;'GPIOD_OSPEEDR.OSPEEDR4`              EQU 0x40020C08,        4, base=16,    bitRange=8-9
 1735                           ;'GPIOD_OSPEEDR.OSPEEDR5`              EQU 0x40020C08,        4, base=16,    bitRange=10-11
 1736                           ;'GPIOD_OSPEEDR.OSPEEDR6`              EQU 0x40020C08,        4, base=16,    bitRange=12-13
 1737                           ;'GPIOD_OSPEEDR.OSPEEDR7`              EQU 0x40020C08,        4, base=16,    bitRange=14-15
 1738                           ;'GPIOD_OSPEEDR.OSPEEDR8`              EQU 0x40020C08,        4, base=16,    bitRange=16-17
 1739                           ;'GPIOD_OSPEEDR.OSPEEDR9`              EQU 0x40020C08,        4, base=16,    bitRange=18-19
 1740                           ;'GPIOD_OSPEEDR.OSPEEDR10`             EQU 0x40020C08,        4, base=16,    bitRange=20-21
 1741                           ;'GPIOD_OSPEEDR.OSPEEDR11`             EQU 0x40020C08,        4, base=16,    bitRange=22-23
 1742                           ;'GPIOD_OSPEEDR.OSPEEDR12`             EQU 0x40020C08,        4, base=16,    bitRange=24-25
 1743                           ;'GPIOD_OSPEEDR.OSPEEDR13`             EQU 0x40020C08,        4, base=16,    bitRange=26-27
 1744                           ;'GPIOD_OSPEEDR.OSPEEDR14`             EQU 0x40020C08,        4, base=16,    bitRange=28-29
 1745                           ;'GPIOD_OSPEEDR.OSPEEDR15`             EQU 0x40020C08,        4, base=16,    bitRange=30-31
 1746                           
 1747                           GPIOD_PUPDR                         EQU 0x40020C0C
 1748                           ;'GPIOD_PUPDR.PUPDR0`                  EQU 0x40020C0C,        4, base=16,    bitRange=0-1
 1749                           ;'GPIOD_PUPDR.PUPDR1`                  EQU 0x40020C0C,        4, base=16,    bitRange=2-3
 1750                           ;'GPIOD_PUPDR.PUPDR2`                  EQU 0x40020C0C,        4, base=16,    bitRange=4-5
 1751                           ;'GPIOD_PUPDR.PUPDR3`                  EQU 0x40020C0C,        4, base=16,    bitRange=6-7
 1752                           ;'GPIOD_PUPDR.PUPDR4`                  EQU 0x40020C0C,        4, base=16,    bitRange=8-9
 1753                           ;'GPIOD_PUPDR.PUPDR5`                  EQU 0x40020C0C,        4, base=16,    bitRange=10-11
 1754                           ;'GPIOD_PUPDR.PUPDR6`                  EQU 0x40020C0C,        4, base=16,    bitRange=12-13
 1755                           ;'GPIOD_PUPDR.PUPDR7`                  EQU 0x40020C0C,        4, base=16,    bitRange=14-15
 1756                           ;'GPIOD_PUPDR.PUPDR8`                  EQU 0x40020C0C,        4, base=16,    bitRange=16-17
 1757                           ;'GPIOD_PUPDR.PUPDR9`                  EQU 0x40020C0C,        4, base=16,    bitRange=18-19
 1758                           ;'GPIOD_PUPDR.PUPDR10`                 EQU 0x40020C0C,        4, base=16,    bitRange=20-21
 1759                           ;'GPIOD_PUPDR.PUPDR11`                 EQU 0x40020C0C,        4, base=16,    bitRange=22-23
 1760                           ;'GPIOD_PUPDR.PUPDR12`                 EQU 0x40020C0C,        4, base=16,    bitRange=24-25
 1761                           ;'GPIOD_PUPDR.PUPDR13`                 EQU 0x40020C0C,        4, base=16,    bitRange=26-27
 1762                           ;'GPIOD_PUPDR.PUPDR14`                 EQU 0x40020C0C,        4, base=16,    bitRange=28-29
 1763                           ;'GPIOD_PUPDR.PUPDR15`                 EQU 0x40020C0C,        4, base=16,    bitRange=30-31
 1764                           
 1765                           GPIOD_IDR                           EQU 0x40020C10
 1766                           ;'GPIOD_IDR.IDR0`                      EQU 0x40020C10,        4, base=16,    bitRange=0-0
 1767                           ;'GPIOD_IDR.IDR1`                      EQU 0x40020C10,        4, base=16,    bitRange=1-1
 1768                           ;'GPIOD_IDR.IDR2`                      EQU 0x40020C10,        4, base=16,    bitRange=2-2
 1769                           ;'GPIOD_IDR.IDR3`                      EQU 0x40020C10,        4, base=16,    bitRange=3-3
 1770                           ;'GPIOD_IDR.IDR4`                      EQU 0x40020C10,        4, base=16,    bitRange=4-4
 1771                           ;'GPIOD_IDR.IDR5`                      EQU 0x40020C10,        4, base=16,    bitRange=5-5
 1772                           ;'GPIOD_IDR.IDR6`                      EQU 0x40020C10,        4, base=16,    bitRange=6-6
 1773                           ;'GPIOD_IDR.IDR7`                      EQU 0x40020C10,        4, base=16,    bitRange=7-7
 1774                           ;'GPIOD_IDR.IDR8`                      EQU 0x40020C10,        4, base=16,    bitRange=8-8
 1775                           ;'GPIOD_IDR.IDR9`                      EQU 0x40020C10,        4, base=16,    bitRange=9-9
 1776                           ;'GPIOD_IDR.IDR10`                     EQU 0x40020C10,        4, base=16,    bitRange=10-10
 1777                           ;'GPIOD_IDR.IDR11`                     EQU 0x40020C10,        4, base=16,    bitRange=11-11
 1778                           ;'GPIOD_IDR.IDR12`                     EQU 0x40020C10,        4, base=16,    bitRange=12-12
 1779                           ;'GPIOD_IDR.IDR13`                     EQU 0x40020C10,        4, base=16,    bitRange=13-13
 1780                           ;'GPIOD_IDR.IDR14`                     EQU 0x40020C10,        4, base=16,    bitRange=14-14
 1781                           ;'GPIOD_IDR.IDR15`                     EQU 0x40020C10,        4, base=16,    bitRange=15-15
 1782                           
 1783                           GPIOD_ODR                           EQU 0x40020C14
 1784                           ;'GPIOD_ODR.ODR0`                      EQU 0x40020C14,        4, base=16,    bitRange=0-0
 1785                           ;'GPIOD_ODR.ODR1`                      EQU 0x40020C14,        4, base=16,    bitRange=1-1
 1786                           ;'GPIOD_ODR.ODR2`                      EQU 0x40020C14,        4, base=16,    bitRange=2-2
 1787                           ;'GPIOD_ODR.ODR3`                      EQU 0x40020C14,        4, base=16,    bitRange=3-3
 1788                           ;'GPIOD_ODR.ODR4`                      EQU 0x40020C14,        4, base=16,    bitRange=4-4
 1789                           ;'GPIOD_ODR.ODR5`                      EQU 0x40020C14,        4, base=16,    bitRange=5-5
 1790                           ;'GPIOD_ODR.ODR6`                      EQU 0x40020C14,        4, base=16,    bitRange=6-6
 1791                           ;'GPIOD_ODR.ODR7`                      EQU 0x40020C14,        4, base=16,    bitRange=7-7
 1792                           ;'GPIOD_ODR.ODR8`                      EQU 0x40020C14,        4, base=16,    bitRange=8-8
 1793                           ;'GPIOD_ODR.ODR9`                      EQU 0x40020C14,        4, base=16,    bitRange=9-9
 1794                           ;'GPIOD_ODR.ODR10`                     EQU 0x40020C14,        4, base=16,    bitRange=10-10
 1795                           ;'GPIOD_ODR.ODR11`                     EQU 0x40020C14,        4, base=16,    bitRange=11-11
 1796                           ;'GPIOD_ODR.ODR12`                     EQU 0x40020C14,        4, base=16,    bitRange=12-12
 1797                           ;'GPIOD_ODR.ODR13`                     EQU 0x40020C14,        4, base=16,    bitRange=13-13
 1798                           ;'GPIOD_ODR.ODR14`                     EQU 0x40020C14,        4, base=16,    bitRange=14-14
 1799                           ;'GPIOD_ODR.ODR15`                     EQU 0x40020C14,        4, base=16,    bitRange=15-15
 1800                           
 1801                           GPIOD_BSRR                          EQU 0x40020C18
 1802                           ;'GPIOD_BSRR.BS0`                      EQU 0x40020C18,        4, base=16,    bitRange=0-0
 1803                           ;'GPIOD_BSRR.BS1`                      EQU 0x40020C18,        4, base=16,    bitRange=1-1
 1804                           ;'GPIOD_BSRR.BS2`                      EQU 0x40020C18,        4, base=16,    bitRange=2-2
 1805                           ;'GPIOD_BSRR.BS3`                      EQU 0x40020C18,        4, base=16,    bitRange=3-3
 1806                           ;'GPIOD_BSRR.BS4`                      EQU 0x40020C18,        4, base=16,    bitRange=4-4
 1807                           ;'GPIOD_BSRR.BS5`                      EQU 0x40020C18,        4, base=16,    bitRange=5-5
 1808                           ;'GPIOD_BSRR.BS6`                      EQU 0x40020C18,        4, base=16,    bitRange=6-6
 1809                           ;'GPIOD_BSRR.BS7`                      EQU 0x40020C18,        4, base=16,    bitRange=7-7
 1810                           ;'GPIOD_BSRR.BS8`                      EQU 0x40020C18,        4, base=16,    bitRange=8-8
 1811                           ;'GPIOD_BSRR.BS9`                      EQU 0x40020C18,        4, base=16,    bitRange=9-9
 1812                           ;'GPIOD_BSRR.BS10`                     EQU 0x40020C18,        4, base=16,    bitRange=10-10
 1813                           ;'GPIOD_BSRR.BS11`                     EQU 0x40020C18,        4, base=16,    bitRange=11-11
 1814                           ;'GPIOD_BSRR.BS12`                     EQU 0x40020C18,        4, base=16,    bitRange=12-12
 1815                           ;'GPIOD_BSRR.BS13`                     EQU 0x40020C18,        4, base=16,    bitRange=13-13
 1816                           ;'GPIOD_BSRR.BS14`                     EQU 0x40020C18,        4, base=16,    bitRange=14-14
 1817                           ;'GPIOD_BSRR.BS15`                     EQU 0x40020C18,        4, base=16,    bitRange=15-15
 1818                           ;'GPIOD_BSRR.BR0`                      EQU 0x40020C18,        4, base=16,    bitRange=16-16
 1819                           ;'GPIOD_BSRR.BR1`                      EQU 0x40020C18,        4, base=16,    bitRange=17-17
 1820                           ;'GPIOD_BSRR.BR2`                      EQU 0x40020C18,        4, base=16,    bitRange=18-18
 1821                           ;'GPIOD_BSRR.BR3`                      EQU 0x40020C18,        4, base=16,    bitRange=19-19
 1822                           ;'GPIOD_BSRR.BR4`                      EQU 0x40020C18,        4, base=16,    bitRange=20-20
 1823                           ;'GPIOD_BSRR.BR5`                      EQU 0x40020C18,        4, base=16,    bitRange=21-21
 1824                           ;'GPIOD_BSRR.BR6`                      EQU 0x40020C18,        4, base=16,    bitRange=22-22
 1825                           ;'GPIOD_BSRR.BR7`                      EQU 0x40020C18,        4, base=16,    bitRange=23-23
 1826                           ;'GPIOD_BSRR.BR8`                      EQU 0x40020C18,        4, base=16,    bitRange=24-24
 1827                           ;'GPIOD_BSRR.BR9`                      EQU 0x40020C18,        4, base=16,    bitRange=25-25
 1828                           ;'GPIOD_BSRR.BR10`                     EQU 0x40020C18,        4, base=16,    bitRange=26-26
 1829                           ;'GPIOD_BSRR.BR11`                     EQU 0x40020C18,        4, base=16,    bitRange=27-27
 1830                           ;'GPIOD_BSRR.BR12`                     EQU 0x40020C18,        4, base=16,    bitRange=28-28
 1831                           ;'GPIOD_BSRR.BR13`                     EQU 0x40020C18,        4, base=16,    bitRange=29-29
 1832                           ;'GPIOD_BSRR.BR14`                     EQU 0x40020C18,        4, base=16,    bitRange=30-30
 1833                           ;'GPIOD_BSRR.BR15`                     EQU 0x40020C18,        4, base=16,    bitRange=31-31
 1834                           
 1835                           GPIOD_LCKR                          EQU 0x40020C1C
 1836                           ;'GPIOD_LCKR.LCK0`                     EQU 0x40020C1C,        4, base=16,    bitRange=0-0
 1837                           ;'GPIOD_LCKR.LCK1`                     EQU 0x40020C1C,        4, base=16,    bitRange=1-1
 1838                           ;'GPIOD_LCKR.LCK2`                     EQU 0x40020C1C,        4, base=16,    bitRange=2-2
 1839                           ;'GPIOD_LCKR.LCK3`                     EQU 0x40020C1C,        4, base=16,    bitRange=3-3
 1840                           ;'GPIOD_LCKR.LCK4`                     EQU 0x40020C1C,        4, base=16,    bitRange=4-4
 1841                           ;'GPIOD_LCKR.LCK5`                     EQU 0x40020C1C,        4, base=16,    bitRange=5-5
 1842                           ;'GPIOD_LCKR.LCK6`                     EQU 0x40020C1C,        4, base=16,    bitRange=6-6
 1843                           ;'GPIOD_LCKR.LCK7`                     EQU 0x40020C1C,        4, base=16,    bitRange=7-7
 1844                           ;'GPIOD_LCKR.LCK8`                     EQU 0x40020C1C,        4, base=16,    bitRange=8-8
 1845                           ;'GPIOD_LCKR.LCK9`                     EQU 0x40020C1C,        4, base=16,    bitRange=9-9
 1846                           ;'GPIOD_LCKR.LCK10`                    EQU 0x40020C1C,        4, base=16,    bitRange=10-10
 1847                           ;'GPIOD_LCKR.LCK11`                    EQU 0x40020C1C,        4, base=16,    bitRange=11-11
 1848                           ;'GPIOD_LCKR.LCK12`                    EQU 0x40020C1C,        4, base=16,    bitRange=12-12
 1849                           ;'GPIOD_LCKR.LCK13`                    EQU 0x40020C1C,        4, base=16,    bitRange=13-13
 1850                           ;'GPIOD_LCKR.LCK14`                    EQU 0x40020C1C,        4, base=16,    bitRange=14-14
 1851                           ;'GPIOD_LCKR.LCK15`                    EQU 0x40020C1C,        4, base=16,    bitRange=15-15
 1852                           ;'GPIOD_LCKR.LCKK`                     EQU 0x40020C1C,        4, base=16,    bitRange=16-16
 1853                           
 1854                           GPIOD_AFRL                          EQU 0x40020C20
 1855                           ;'GPIOD_AFRL.AFRL0`                    EQU 0x40020C20,        4, base=16,    bitRange=0-3
 1856                           ;'GPIOD_AFRL.AFRL1`                    EQU 0x40020C20,        4, base=16,    bitRange=4-7
 1857                           ;'GPIOD_AFRL.AFRL2`                    EQU 0x40020C20,        4, base=16,    bitRange=8-11
 1858                           ;'GPIOD_AFRL.AFRL3`                    EQU 0x40020C20,        4, base=16,    bitRange=12-15
 1859                           ;'GPIOD_AFRL.AFRL4`                    EQU 0x40020C20,        4, base=16,    bitRange=16-19
 1860                           ;'GPIOD_AFRL.AFRL5`                    EQU 0x40020C20,        4, base=16,    bitRange=20-23
 1861                           ;'GPIOD_AFRL.AFRL6`                    EQU 0x40020C20,        4, base=16,    bitRange=24-27
 1862                           ;'GPIOD_AFRL.AFRL7`                    EQU 0x40020C20,        4, base=16,    bitRange=28-31
 1863                           
 1864                           GPIOD_AFRH                          EQU 0x40020C24
 1865                           ;'GPIOD_AFRH.AFRL8`                    EQU 0x40020C24,        4, base=16,    bitRange=0-3
 1866                           ;'GPIOD_AFRH.AFRL9`                    EQU 0x40020C24,        4, base=16,    bitRange=4-7
 1867                           ;'GPIOD_AFRH.AFRL10`                   EQU 0x40020C24,        4, base=16,    bitRange=8-11
 1868                           ;'GPIOD_AFRH.AFRL11`                   EQU 0x40020C24,        4, base=16,    bitRange=12-15
 1869                           ;'GPIOD_AFRH.AFRL12`                   EQU 0x40020C24,        4, base=16,    bitRange=16-19
 1870                           ;'GPIOD_AFRH.AFRL13`                   EQU 0x40020C24,        4, base=16,    bitRange=20-23
 1871                           ;'GPIOD_AFRH.AFRL14`                   EQU 0x40020C24,        4, base=16,    bitRange=24-27
 1872                           ;'GPIOD_AFRH.AFRL15`                   EQU 0x40020C24,        4, base=16,    bitRange=28-31
 1873                           
 1874                           
 1875                           ;
 1876                           ;               GPIOE
 1877                           ;
 1878                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 1879                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 1880                           
 1881                           GPIOE_MODER                         EQU 0x40021000
 1882                           ;'GPIOE_MODER.MODER0`                  EQU 0x40021000,        4, base=16,    bitRange=0-1
 1883                           ;'GPIOE_MODER.MODER1`                  EQU 0x40021000,        4, base=16,    bitRange=2-3
 1884                           ;'GPIOE_MODER.MODER2`                  EQU 0x40021000,        4, base=16,    bitRange=4-5
 1885                           ;'GPIOE_MODER.MODER3`                  EQU 0x40021000,        4, base=16,    bitRange=6-7
 1886                           ;'GPIOE_MODER.MODER4`                  EQU 0x40021000,        4, base=16,    bitRange=8-9
 1887                           ;'GPIOE_MODER.MODER5`                  EQU 0x40021000,        4, base=16,    bitRange=10-11
 1888                           ;'GPIOE_MODER.MODER6`                  EQU 0x40021000,        4, base=16,    bitRange=12-13
 1889                           ;'GPIOE_MODER.MODER7`                  EQU 0x40021000,        4, base=16,    bitRange=14-15
 1890                           ;'GPIOE_MODER.MODER8`                  EQU 0x40021000,        4, base=16,    bitRange=16-17
 1891                           ;'GPIOE_MODER.MODER9`                  EQU 0x40021000,        4, base=16,    bitRange=18-19
 1892                           ;'GPIOE_MODER.MODER10`                 EQU 0x40021000,        4, base=16,    bitRange=20-21
 1893                           ;'GPIOE_MODER.MODER11`                 EQU 0x40021000,        4, base=16,    bitRange=22-23
 1894                           ;'GPIOE_MODER.MODER12`                 EQU 0x40021000,        4, base=16,    bitRange=24-25
 1895                           ;'GPIOE_MODER.MODER13`                 EQU 0x40021000,        4, base=16,    bitRange=26-27
 1896                           ;'GPIOE_MODER.MODER14`                 EQU 0x40021000,        4, base=16,    bitRange=28-29
 1897                           ;'GPIOE_MODER.MODER15`                 EQU 0x40021000,        4, base=16,    bitRange=30-31
 1898                           
 1899                           GPIOE_OTYPER                        EQU 0x40021004
 1900                           ;'GPIOE_OTYPER.OT0`                    EQU 0x40021004,        4, base=16,    bitRange=0-0
 1901                           ;'GPIOE_OTYPER.OT1`                    EQU 0x40021004,        4, base=16,    bitRange=1-1
 1902                           ;'GPIOE_OTYPER.OT2`                    EQU 0x40021004,        4, base=16,    bitRange=2-2
 1903                           ;'GPIOE_OTYPER.OT3`                    EQU 0x40021004,        4, base=16,    bitRange=3-3
 1904                           ;'GPIOE_OTYPER.OT4`                    EQU 0x40021004,        4, base=16,    bitRange=4-4
 1905                           ;'GPIOE_OTYPER.OT5`                    EQU 0x40021004,        4, base=16,    bitRange=5-5
 1906                           ;'GPIOE_OTYPER.OT6`                    EQU 0x40021004,        4, base=16,    bitRange=6-6
 1907                           ;'GPIOE_OTYPER.OT7`                    EQU 0x40021004,        4, base=16,    bitRange=7-7
 1908                           ;'GPIOE_OTYPER.OT8`                    EQU 0x40021004,        4, base=16,    bitRange=8-8
 1909                           ;'GPIOE_OTYPER.OT9`                    EQU 0x40021004,        4, base=16,    bitRange=9-9
 1910                           ;'GPIOE_OTYPER.OT10`                   EQU 0x40021004,        4, base=16,    bitRange=10-10
 1911                           ;'GPIOE_OTYPER.OT11`                   EQU 0x40021004,        4, base=16,    bitRange=11-11
 1912                           ;'GPIOE_OTYPER.OT12`                   EQU 0x40021004,        4, base=16,    bitRange=12-12
 1913                           ;'GPIOE_OTYPER.OT13`                   EQU 0x40021004,        4, base=16,    bitRange=13-13
 1914                           ;'GPIOE_OTYPER.OT14`                   EQU 0x40021004,        4, base=16,    bitRange=14-14
 1915                           ;'GPIOE_OTYPER.OT15`                   EQU 0x40021004,        4, base=16,    bitRange=15-15
 1916                           
 1917                           GPIOE_OSPEEDR                       EQU 0x40021008
 1918                           ;'GPIOE_OSPEEDR.OSPEEDR0`              EQU 0x40021008,        4, base=16,    bitRange=0-1
 1919                           ;'GPIOE_OSPEEDR.OSPEEDR1`              EQU 0x40021008,        4, base=16,    bitRange=2-3
 1920                           ;'GPIOE_OSPEEDR.OSPEEDR2`              EQU 0x40021008,        4, base=16,    bitRange=4-5
 1921                           ;'GPIOE_OSPEEDR.OSPEEDR3`              EQU 0x40021008,        4, base=16,    bitRange=6-7
 1922                           ;'GPIOE_OSPEEDR.OSPEEDR4`              EQU 0x40021008,        4, base=16,    bitRange=8-9
 1923                           ;'GPIOE_OSPEEDR.OSPEEDR5`              EQU 0x40021008,        4, base=16,    bitRange=10-11
 1924                           ;'GPIOE_OSPEEDR.OSPEEDR6`              EQU 0x40021008,        4, base=16,    bitRange=12-13
 1925                           ;'GPIOE_OSPEEDR.OSPEEDR7`              EQU 0x40021008,        4, base=16,    bitRange=14-15
 1926                           ;'GPIOE_OSPEEDR.OSPEEDR8`              EQU 0x40021008,        4, base=16,    bitRange=16-17
 1927                           ;'GPIOE_OSPEEDR.OSPEEDR9`              EQU 0x40021008,        4, base=16,    bitRange=18-19
 1928                           ;'GPIOE_OSPEEDR.OSPEEDR10`             EQU 0x40021008,        4, base=16,    bitRange=20-21
 1929                           ;'GPIOE_OSPEEDR.OSPEEDR11`             EQU 0x40021008,        4, base=16,    bitRange=22-23
 1930                           ;'GPIOE_OSPEEDR.OSPEEDR12`             EQU 0x40021008,        4, base=16,    bitRange=24-25
 1931                           ;'GPIOE_OSPEEDR.OSPEEDR13`             EQU 0x40021008,        4, base=16,    bitRange=26-27
 1932                           ;'GPIOE_OSPEEDR.OSPEEDR14`             EQU 0x40021008,        4, base=16,    bitRange=28-29
 1933                           ;'GPIOE_OSPEEDR.OSPEEDR15`             EQU 0x40021008,        4, base=16,    bitRange=30-31
 1934                           
 1935                           GPIOE_PUPDR                         EQU 0x4002100C
 1936                           ;'GPIOE_PUPDR.PUPDR0`                  EQU 0x4002100C,        4, base=16,    bitRange=0-1
 1937                           ;'GPIOE_PUPDR.PUPDR1`                  EQU 0x4002100C,        4, base=16,    bitRange=2-3
 1938                           ;'GPIOE_PUPDR.PUPDR2`                  EQU 0x4002100C,        4, base=16,    bitRange=4-5
 1939                           ;'GPIOE_PUPDR.PUPDR3`                  EQU 0x4002100C,        4, base=16,    bitRange=6-7
 1940                           ;'GPIOE_PUPDR.PUPDR4`                  EQU 0x4002100C,        4, base=16,    bitRange=8-9
 1941                           ;'GPIOE_PUPDR.PUPDR5`                  EQU 0x4002100C,        4, base=16,    bitRange=10-11
 1942                           ;'GPIOE_PUPDR.PUPDR6`                  EQU 0x4002100C,        4, base=16,    bitRange=12-13
 1943                           ;'GPIOE_PUPDR.PUPDR7`                  EQU 0x4002100C,        4, base=16,    bitRange=14-15
 1944                           ;'GPIOE_PUPDR.PUPDR8`                  EQU 0x4002100C,        4, base=16,    bitRange=16-17
 1945                           ;'GPIOE_PUPDR.PUPDR9`                  EQU 0x4002100C,        4, base=16,    bitRange=18-19
 1946                           ;'GPIOE_PUPDR.PUPDR10`                 EQU 0x4002100C,        4, base=16,    bitRange=20-21
 1947                           ;'GPIOE_PUPDR.PUPDR11`                 EQU 0x4002100C,        4, base=16,    bitRange=22-23
 1948                           ;'GPIOE_PUPDR.PUPDR12`                 EQU 0x4002100C,        4, base=16,    bitRange=24-25
 1949                           ;'GPIOE_PUPDR.PUPDR13`                 EQU 0x4002100C,        4, base=16,    bitRange=26-27
 1950                           ;'GPIOE_PUPDR.PUPDR14`                 EQU 0x4002100C,        4, base=16,    bitRange=28-29
 1951                           ;'GPIOE_PUPDR.PUPDR15`                 EQU 0x4002100C,        4, base=16,    bitRange=30-31
 1952                           
 1953                           GPIOE_IDR                           EQU 0x40021010
 1954                           ;'GPIOE_IDR.IDR0`                      EQU 0x40021010,        4, base=16,    bitRange=0-0
 1955                           ;'GPIOE_IDR.IDR1`                      EQU 0x40021010,        4, base=16,    bitRange=1-1
 1956                           ;'GPIOE_IDR.IDR2`                      EQU 0x40021010,        4, base=16,    bitRange=2-2
 1957                           ;'GPIOE_IDR.IDR3`                      EQU 0x40021010,        4, base=16,    bitRange=3-3
 1958                           ;'GPIOE_IDR.IDR4`                      EQU 0x40021010,        4, base=16,    bitRange=4-4
 1959                           ;'GPIOE_IDR.IDR5`                      EQU 0x40021010,        4, base=16,    bitRange=5-5
 1960                           ;'GPIOE_IDR.IDR6`                      EQU 0x40021010,        4, base=16,    bitRange=6-6
 1961                           ;'GPIOE_IDR.IDR7`                      EQU 0x40021010,        4, base=16,    bitRange=7-7
 1962                           ;'GPIOE_IDR.IDR8`                      EQU 0x40021010,        4, base=16,    bitRange=8-8
 1963                           ;'GPIOE_IDR.IDR9`                      EQU 0x40021010,        4, base=16,    bitRange=9-9
 1964                           ;'GPIOE_IDR.IDR10`                     EQU 0x40021010,        4, base=16,    bitRange=10-10
 1965                           ;'GPIOE_IDR.IDR11`                     EQU 0x40021010,        4, base=16,    bitRange=11-11
 1966                           ;'GPIOE_IDR.IDR12`                     EQU 0x40021010,        4, base=16,    bitRange=12-12
 1967                           ;'GPIOE_IDR.IDR13`                     EQU 0x40021010,        4, base=16,    bitRange=13-13
 1968                           ;'GPIOE_IDR.IDR14`                     EQU 0x40021010,        4, base=16,    bitRange=14-14
 1969                           ;'GPIOE_IDR.IDR15`                     EQU 0x40021010,        4, base=16,    bitRange=15-15
 1970                           
 1971                           GPIOE_ODR                           EQU 0x40021014
 1972                           ;'GPIOE_ODR.ODR0`                      EQU 0x40021014,        4, base=16,    bitRange=0-0
 1973                           ;'GPIOE_ODR.ODR1`                      EQU 0x40021014,        4, base=16,    bitRange=1-1
 1974                           ;'GPIOE_ODR.ODR2`                      EQU 0x40021014,        4, base=16,    bitRange=2-2
 1975                           ;'GPIOE_ODR.ODR3`                      EQU 0x40021014,        4, base=16,    bitRange=3-3
 1976                           ;'GPIOE_ODR.ODR4`                      EQU 0x40021014,        4, base=16,    bitRange=4-4
 1977                           ;'GPIOE_ODR.ODR5`                      EQU 0x40021014,        4, base=16,    bitRange=5-5
 1978                           ;'GPIOE_ODR.ODR6`                      EQU 0x40021014,        4, base=16,    bitRange=6-6
 1979                           ;'GPIOE_ODR.ODR7`                      EQU 0x40021014,        4, base=16,    bitRange=7-7
 1980                           ;'GPIOE_ODR.ODR8`                      EQU 0x40021014,        4, base=16,    bitRange=8-8
 1981                           ;'GPIOE_ODR.ODR9`                      EQU 0x40021014,        4, base=16,    bitRange=9-9
 1982                           ;'GPIOE_ODR.ODR10`                     EQU 0x40021014,        4, base=16,    bitRange=10-10
 1983                           ;'GPIOE_ODR.ODR11`                     EQU 0x40021014,        4, base=16,    bitRange=11-11
 1984                           ;'GPIOE_ODR.ODR12`                     EQU 0x40021014,        4, base=16,    bitRange=12-12
 1985                           ;'GPIOE_ODR.ODR13`                     EQU 0x40021014,        4, base=16,    bitRange=13-13
 1986                           ;'GPIOE_ODR.ODR14`                     EQU 0x40021014,        4, base=16,    bitRange=14-14
 1987                           ;'GPIOE_ODR.ODR15`                     EQU 0x40021014,        4, base=16,    bitRange=15-15
 1988                           
 1989                           GPIOE_BSRR                          EQU 0x40021018
 1990                           ;'GPIOE_BSRR.BS0`                      EQU 0x40021018,        4, base=16,    bitRange=0-0
 1991                           ;'GPIOE_BSRR.BS1`                      EQU 0x40021018,        4, base=16,    bitRange=1-1
 1992                           ;'GPIOE_BSRR.BS2`                      EQU 0x40021018,        4, base=16,    bitRange=2-2
 1993                           ;'GPIOE_BSRR.BS3`                      EQU 0x40021018,        4, base=16,    bitRange=3-3
 1994                           ;'GPIOE_BSRR.BS4`                      EQU 0x40021018,        4, base=16,    bitRange=4-4
 1995                           ;'GPIOE_BSRR.BS5`                      EQU 0x40021018,        4, base=16,    bitRange=5-5
 1996                           ;'GPIOE_BSRR.BS6`                      EQU 0x40021018,        4, base=16,    bitRange=6-6
 1997                           ;'GPIOE_BSRR.BS7`                      EQU 0x40021018,        4, base=16,    bitRange=7-7
 1998                           ;'GPIOE_BSRR.BS8`                      EQU 0x40021018,        4, base=16,    bitRange=8-8
 1999                           ;'GPIOE_BSRR.BS9`                      EQU 0x40021018,        4, base=16,    bitRange=9-9
 2000                           ;'GPIOE_BSRR.BS10`                     EQU 0x40021018,        4, base=16,    bitRange=10-10
 2001                           ;'GPIOE_BSRR.BS11`                     EQU 0x40021018,        4, base=16,    bitRange=11-11
 2002                           ;'GPIOE_BSRR.BS12`                     EQU 0x40021018,        4, base=16,    bitRange=12-12
 2003                           ;'GPIOE_BSRR.BS13`                     EQU 0x40021018,        4, base=16,    bitRange=13-13
 2004                           ;'GPIOE_BSRR.BS14`                     EQU 0x40021018,        4, base=16,    bitRange=14-14
 2005                           ;'GPIOE_BSRR.BS15`                     EQU 0x40021018,        4, base=16,    bitRange=15-15
 2006                           ;'GPIOE_BSRR.BR0`                      EQU 0x40021018,        4, base=16,    bitRange=16-16
 2007                           ;'GPIOE_BSRR.BR1`                      EQU 0x40021018,        4, base=16,    bitRange=17-17
 2008                           ;'GPIOE_BSRR.BR2`                      EQU 0x40021018,        4, base=16,    bitRange=18-18
 2009                           ;'GPIOE_BSRR.BR3`                      EQU 0x40021018,        4, base=16,    bitRange=19-19
 2010                           ;'GPIOE_BSRR.BR4`                      EQU 0x40021018,        4, base=16,    bitRange=20-20
 2011                           ;'GPIOE_BSRR.BR5`                      EQU 0x40021018,        4, base=16,    bitRange=21-21
 2012                           ;'GPIOE_BSRR.BR6`                      EQU 0x40021018,        4, base=16,    bitRange=22-22
 2013                           ;'GPIOE_BSRR.BR7`                      EQU 0x40021018,        4, base=16,    bitRange=23-23
 2014                           ;'GPIOE_BSRR.BR8`                      EQU 0x40021018,        4, base=16,    bitRange=24-24
 2015                           ;'GPIOE_BSRR.BR9`                      EQU 0x40021018,        4, base=16,    bitRange=25-25
 2016                           ;'GPIOE_BSRR.BR10`                     EQU 0x40021018,        4, base=16,    bitRange=26-26
 2017                           ;'GPIOE_BSRR.BR11`                     EQU 0x40021018,        4, base=16,    bitRange=27-27
 2018                           ;'GPIOE_BSRR.BR12`                     EQU 0x40021018,        4, base=16,    bitRange=28-28
 2019                           ;'GPIOE_BSRR.BR13`                     EQU 0x40021018,        4, base=16,    bitRange=29-29
 2020                           ;'GPIOE_BSRR.BR14`                     EQU 0x40021018,        4, base=16,    bitRange=30-30
 2021                           ;'GPIOE_BSRR.BR15`                     EQU 0x40021018,        4, base=16,    bitRange=31-31
 2022                           
 2023                           GPIOE_LCKR                          EQU 0x4002101C
 2024                           ;'GPIOE_LCKR.LCK0`                     EQU 0x4002101C,        4, base=16,    bitRange=0-0
 2025                           ;'GPIOE_LCKR.LCK1`                     EQU 0x4002101C,        4, base=16,    bitRange=1-1
 2026                           ;'GPIOE_LCKR.LCK2`                     EQU 0x4002101C,        4, base=16,    bitRange=2-2
 2027                           ;'GPIOE_LCKR.LCK3`                     EQU 0x4002101C,        4, base=16,    bitRange=3-3
 2028                           ;'GPIOE_LCKR.LCK4`                     EQU 0x4002101C,        4, base=16,    bitRange=4-4
 2029                           ;'GPIOE_LCKR.LCK5`                     EQU 0x4002101C,        4, base=16,    bitRange=5-5
 2030                           ;'GPIOE_LCKR.LCK6`                     EQU 0x4002101C,        4, base=16,    bitRange=6-6
 2031                           ;'GPIOE_LCKR.LCK7`                     EQU 0x4002101C,        4, base=16,    bitRange=7-7
 2032                           ;'GPIOE_LCKR.LCK8`                     EQU 0x4002101C,        4, base=16,    bitRange=8-8
 2033                           ;'GPIOE_LCKR.LCK9`                     EQU 0x4002101C,        4, base=16,    bitRange=9-9
 2034                           ;'GPIOE_LCKR.LCK10`                    EQU 0x4002101C,        4, base=16,    bitRange=10-10
 2035                           ;'GPIOE_LCKR.LCK11`                    EQU 0x4002101C,        4, base=16,    bitRange=11-11
 2036                           ;'GPIOE_LCKR.LCK12`                    EQU 0x4002101C,        4, base=16,    bitRange=12-12
 2037                           ;'GPIOE_LCKR.LCK13`                    EQU 0x4002101C,        4, base=16,    bitRange=13-13
 2038                           ;'GPIOE_LCKR.LCK14`                    EQU 0x4002101C,        4, base=16,    bitRange=14-14
 2039                           ;'GPIOE_LCKR.LCK15`                    EQU 0x4002101C,        4, base=16,    bitRange=15-15
 2040                           ;'GPIOE_LCKR.LCKK`                     EQU 0x4002101C,        4, base=16,    bitRange=16-16
 2041                           
 2042                           GPIOE_AFRL                          EQU 0x40021020
 2043                           ;'GPIOE_AFRL.AFRL0`                    EQU 0x40021020,        4, base=16,    bitRange=0-3
 2044                           ;'GPIOE_AFRL.AFRL1`                    EQU 0x40021020,        4, base=16,    bitRange=4-7
 2045                           ;'GPIOE_AFRL.AFRL2`                    EQU 0x40021020,        4, base=16,    bitRange=8-11
 2046                           ;'GPIOE_AFRL.AFRL3`                    EQU 0x40021020,        4, base=16,    bitRange=12-15
 2047                           ;'GPIOE_AFRL.AFRL4`                    EQU 0x40021020,        4, base=16,    bitRange=16-19
 2048                           ;'GPIOE_AFRL.AFRL5`                    EQU 0x40021020,        4, base=16,    bitRange=20-23
 2049                           ;'GPIOE_AFRL.AFRL6`                    EQU 0x40021020,        4, base=16,    bitRange=24-27
 2050                           ;'GPIOE_AFRL.AFRL7`                    EQU 0x40021020,        4, base=16,    bitRange=28-31
 2051                           
 2052                           GPIOE_AFRH                          EQU 0x40021024
 2053                           ;'GPIOE_AFRH.AFRL8`                    EQU 0x40021024,        4, base=16,    bitRange=0-3
 2054                           ;'GPIOE_AFRH.AFRL9`                    EQU 0x40021024,        4, base=16,    bitRange=4-7
 2055                           ;'GPIOE_AFRH.AFRL10`                   EQU 0x40021024,        4, base=16,    bitRange=8-11
 2056                           ;'GPIOE_AFRH.AFRL11`                   EQU 0x40021024,        4, base=16,    bitRange=12-15
 2057                           ;'GPIOE_AFRH.AFRL12`                   EQU 0x40021024,        4, base=16,    bitRange=16-19
 2058                           ;'GPIOE_AFRH.AFRL13`                   EQU 0x40021024,        4, base=16,    bitRange=20-23
 2059                           ;'GPIOE_AFRH.AFRL14`                   EQU 0x40021024,        4, base=16,    bitRange=24-27
 2060                           ;'GPIOE_AFRH.AFRL15`                   EQU 0x40021024,        4, base=16,    bitRange=28-31
 2061                           
 2062                           
 2063                           ;
 2064                           ;               GPIOF
 2065                           ;
 2066                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2067                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2068                           
 2069                           GPIOF_MODER                         EQU 0x40021400
 2070                           ;'GPIOF_MODER.MODER0`                  EQU 0x40021400,        4, base=16,    bitRange=0-1
 2071                           ;'GPIOF_MODER.MODER1`                  EQU 0x40021400,        4, base=16,    bitRange=2-3
 2072                           ;'GPIOF_MODER.MODER2`                  EQU 0x40021400,        4, base=16,    bitRange=4-5
 2073                           ;'GPIOF_MODER.MODER3`                  EQU 0x40021400,        4, base=16,    bitRange=6-7
 2074                           ;'GPIOF_MODER.MODER4`                  EQU 0x40021400,        4, base=16,    bitRange=8-9
 2075                           ;'GPIOF_MODER.MODER5`                  EQU 0x40021400,        4, base=16,    bitRange=10-11
 2076                           ;'GPIOF_MODER.MODER6`                  EQU 0x40021400,        4, base=16,    bitRange=12-13
 2077                           ;'GPIOF_MODER.MODER7`                  EQU 0x40021400,        4, base=16,    bitRange=14-15
 2078                           ;'GPIOF_MODER.MODER8`                  EQU 0x40021400,        4, base=16,    bitRange=16-17
 2079                           ;'GPIOF_MODER.MODER9`                  EQU 0x40021400,        4, base=16,    bitRange=18-19
 2080                           ;'GPIOF_MODER.MODER10`                 EQU 0x40021400,        4, base=16,    bitRange=20-21
 2081                           ;'GPIOF_MODER.MODER11`                 EQU 0x40021400,        4, base=16,    bitRange=22-23
 2082                           ;'GPIOF_MODER.MODER12`                 EQU 0x40021400,        4, base=16,    bitRange=24-25
 2083                           ;'GPIOF_MODER.MODER13`                 EQU 0x40021400,        4, base=16,    bitRange=26-27
 2084                           ;'GPIOF_MODER.MODER14`                 EQU 0x40021400,        4, base=16,    bitRange=28-29
 2085                           ;'GPIOF_MODER.MODER15`                 EQU 0x40021400,        4, base=16,    bitRange=30-31
 2086                           
 2087                           GPIOF_OTYPER                        EQU 0x40021404
 2088                           ;'GPIOF_OTYPER.OT0`                    EQU 0x40021404,        4, base=16,    bitRange=0-0
 2089                           ;'GPIOF_OTYPER.OT1`                    EQU 0x40021404,        4, base=16,    bitRange=1-1
 2090                           ;'GPIOF_OTYPER.OT2`                    EQU 0x40021404,        4, base=16,    bitRange=2-2
 2091                           ;'GPIOF_OTYPER.OT3`                    EQU 0x40021404,        4, base=16,    bitRange=3-3
 2092                           ;'GPIOF_OTYPER.OT4`                    EQU 0x40021404,        4, base=16,    bitRange=4-4
 2093                           ;'GPIOF_OTYPER.OT5`                    EQU 0x40021404,        4, base=16,    bitRange=5-5
 2094                           ;'GPIOF_OTYPER.OT6`                    EQU 0x40021404,        4, base=16,    bitRange=6-6
 2095                           ;'GPIOF_OTYPER.OT7`                    EQU 0x40021404,        4, base=16,    bitRange=7-7
 2096                           ;'GPIOF_OTYPER.OT8`                    EQU 0x40021404,        4, base=16,    bitRange=8-8
 2097                           ;'GPIOF_OTYPER.OT9`                    EQU 0x40021404,        4, base=16,    bitRange=9-9
 2098                           ;'GPIOF_OTYPER.OT10`                   EQU 0x40021404,        4, base=16,    bitRange=10-10
 2099                           ;'GPIOF_OTYPER.OT11`                   EQU 0x40021404,        4, base=16,    bitRange=11-11
 2100                           ;'GPIOF_OTYPER.OT12`                   EQU 0x40021404,        4, base=16,    bitRange=12-12
 2101                           ;'GPIOF_OTYPER.OT13`                   EQU 0x40021404,        4, base=16,    bitRange=13-13
 2102                           ;'GPIOF_OTYPER.OT14`                   EQU 0x40021404,        4, base=16,    bitRange=14-14
 2103                           ;'GPIOF_OTYPER.OT15`                   EQU 0x40021404,        4, base=16,    bitRange=15-15
 2104                           
 2105                           GPIOF_OSPEEDR                       EQU 0x40021408
 2106                           ;'GPIOF_OSPEEDR.OSPEEDR0`              EQU 0x40021408,        4, base=16,    bitRange=0-1
 2107                           ;'GPIOF_OSPEEDR.OSPEEDR1`              EQU 0x40021408,        4, base=16,    bitRange=2-3
 2108                           ;'GPIOF_OSPEEDR.OSPEEDR2`              EQU 0x40021408,        4, base=16,    bitRange=4-5
 2109                           ;'GPIOF_OSPEEDR.OSPEEDR3`              EQU 0x40021408,        4, base=16,    bitRange=6-7
 2110                           ;'GPIOF_OSPEEDR.OSPEEDR4`              EQU 0x40021408,        4, base=16,    bitRange=8-9
 2111                           ;'GPIOF_OSPEEDR.OSPEEDR5`              EQU 0x40021408,        4, base=16,    bitRange=10-11
 2112                           ;'GPIOF_OSPEEDR.OSPEEDR6`              EQU 0x40021408,        4, base=16,    bitRange=12-13
 2113                           ;'GPIOF_OSPEEDR.OSPEEDR7`              EQU 0x40021408,        4, base=16,    bitRange=14-15
 2114                           ;'GPIOF_OSPEEDR.OSPEEDR8`              EQU 0x40021408,        4, base=16,    bitRange=16-17
 2115                           ;'GPIOF_OSPEEDR.OSPEEDR9`              EQU 0x40021408,        4, base=16,    bitRange=18-19
 2116                           ;'GPIOF_OSPEEDR.OSPEEDR10`             EQU 0x40021408,        4, base=16,    bitRange=20-21
 2117                           ;'GPIOF_OSPEEDR.OSPEEDR11`             EQU 0x40021408,        4, base=16,    bitRange=22-23
 2118                           ;'GPIOF_OSPEEDR.OSPEEDR12`             EQU 0x40021408,        4, base=16,    bitRange=24-25
 2119                           ;'GPIOF_OSPEEDR.OSPEEDR13`             EQU 0x40021408,        4, base=16,    bitRange=26-27
 2120                           ;'GPIOF_OSPEEDR.OSPEEDR14`             EQU 0x40021408,        4, base=16,    bitRange=28-29
 2121                           ;'GPIOF_OSPEEDR.OSPEEDR15`             EQU 0x40021408,        4, base=16,    bitRange=30-31
 2122                           
 2123                           GPIOF_PUPDR                         EQU 0x4002140C
 2124                           ;'GPIOF_PUPDR.PUPDR0`                  EQU 0x4002140C,        4, base=16,    bitRange=0-1
 2125                           ;'GPIOF_PUPDR.PUPDR1`                  EQU 0x4002140C,        4, base=16,    bitRange=2-3
 2126                           ;'GPIOF_PUPDR.PUPDR2`                  EQU 0x4002140C,        4, base=16,    bitRange=4-5
 2127                           ;'GPIOF_PUPDR.PUPDR3`                  EQU 0x4002140C,        4, base=16,    bitRange=6-7
 2128                           ;'GPIOF_PUPDR.PUPDR4`                  EQU 0x4002140C,        4, base=16,    bitRange=8-9
 2129                           ;'GPIOF_PUPDR.PUPDR5`                  EQU 0x4002140C,        4, base=16,    bitRange=10-11
 2130                           ;'GPIOF_PUPDR.PUPDR6`                  EQU 0x4002140C,        4, base=16,    bitRange=12-13
 2131                           ;'GPIOF_PUPDR.PUPDR7`                  EQU 0x4002140C,        4, base=16,    bitRange=14-15
 2132                           ;'GPIOF_PUPDR.PUPDR8`                  EQU 0x4002140C,        4, base=16,    bitRange=16-17
 2133                           ;'GPIOF_PUPDR.PUPDR9`                  EQU 0x4002140C,        4, base=16,    bitRange=18-19
 2134                           ;'GPIOF_PUPDR.PUPDR10`                 EQU 0x4002140C,        4, base=16,    bitRange=20-21
 2135                           ;'GPIOF_PUPDR.PUPDR11`                 EQU 0x4002140C,        4, base=16,    bitRange=22-23
 2136                           ;'GPIOF_PUPDR.PUPDR12`                 EQU 0x4002140C,        4, base=16,    bitRange=24-25
 2137                           ;'GPIOF_PUPDR.PUPDR13`                 EQU 0x4002140C,        4, base=16,    bitRange=26-27
 2138                           ;'GPIOF_PUPDR.PUPDR14`                 EQU 0x4002140C,        4, base=16,    bitRange=28-29
 2139                           ;'GPIOF_PUPDR.PUPDR15`                 EQU 0x4002140C,        4, base=16,    bitRange=30-31
 2140                           
 2141                           GPIOF_IDR                           EQU 0x40021410
 2142                           ;'GPIOF_IDR.IDR0`                      EQU 0x40021410,        4, base=16,    bitRange=0-0
 2143                           ;'GPIOF_IDR.IDR1`                      EQU 0x40021410,        4, base=16,    bitRange=1-1
 2144                           ;'GPIOF_IDR.IDR2`                      EQU 0x40021410,        4, base=16,    bitRange=2-2
 2145                           ;'GPIOF_IDR.IDR3`                      EQU 0x40021410,        4, base=16,    bitRange=3-3
 2146                           ;'GPIOF_IDR.IDR4`                      EQU 0x40021410,        4, base=16,    bitRange=4-4
 2147                           ;'GPIOF_IDR.IDR5`                      EQU 0x40021410,        4, base=16,    bitRange=5-5
 2148                           ;'GPIOF_IDR.IDR6`                      EQU 0x40021410,        4, base=16,    bitRange=6-6
 2149                           ;'GPIOF_IDR.IDR7`                      EQU 0x40021410,        4, base=16,    bitRange=7-7
 2150                           ;'GPIOF_IDR.IDR8`                      EQU 0x40021410,        4, base=16,    bitRange=8-8
 2151                           ;'GPIOF_IDR.IDR9`                      EQU 0x40021410,        4, base=16,    bitRange=9-9
 2152                           ;'GPIOF_IDR.IDR10`                     EQU 0x40021410,        4, base=16,    bitRange=10-10
 2153                           ;'GPIOF_IDR.IDR11`                     EQU 0x40021410,        4, base=16,    bitRange=11-11
 2154                           ;'GPIOF_IDR.IDR12`                     EQU 0x40021410,        4, base=16,    bitRange=12-12
 2155                           ;'GPIOF_IDR.IDR13`                     EQU 0x40021410,        4, base=16,    bitRange=13-13
 2156                           ;'GPIOF_IDR.IDR14`                     EQU 0x40021410,        4, base=16,    bitRange=14-14
 2157                           ;'GPIOF_IDR.IDR15`                     EQU 0x40021410,        4, base=16,    bitRange=15-15
 2158                           
 2159                           GPIOF_ODR                           EQU 0x40021414
 2160                           ;'GPIOF_ODR.ODR0`                      EQU 0x40021414,        4, base=16,    bitRange=0-0
 2161                           ;'GPIOF_ODR.ODR1`                      EQU 0x40021414,        4, base=16,    bitRange=1-1
 2162                           ;'GPIOF_ODR.ODR2`                      EQU 0x40021414,        4, base=16,    bitRange=2-2
 2163                           ;'GPIOF_ODR.ODR3`                      EQU 0x40021414,        4, base=16,    bitRange=3-3
 2164                           ;'GPIOF_ODR.ODR4`                      EQU 0x40021414,        4, base=16,    bitRange=4-4
 2165                           ;'GPIOF_ODR.ODR5`                      EQU 0x40021414,        4, base=16,    bitRange=5-5
 2166                           ;'GPIOF_ODR.ODR6`                      EQU 0x40021414,        4, base=16,    bitRange=6-6
 2167                           ;'GPIOF_ODR.ODR7`                      EQU 0x40021414,        4, base=16,    bitRange=7-7
 2168                           ;'GPIOF_ODR.ODR8`                      EQU 0x40021414,        4, base=16,    bitRange=8-8
 2169                           ;'GPIOF_ODR.ODR9`                      EQU 0x40021414,        4, base=16,    bitRange=9-9
 2170                           ;'GPIOF_ODR.ODR10`                     EQU 0x40021414,        4, base=16,    bitRange=10-10
 2171                           ;'GPIOF_ODR.ODR11`                     EQU 0x40021414,        4, base=16,    bitRange=11-11
 2172                           ;'GPIOF_ODR.ODR12`                     EQU 0x40021414,        4, base=16,    bitRange=12-12
 2173                           ;'GPIOF_ODR.ODR13`                     EQU 0x40021414,        4, base=16,    bitRange=13-13
 2174                           ;'GPIOF_ODR.ODR14`                     EQU 0x40021414,        4, base=16,    bitRange=14-14
 2175                           ;'GPIOF_ODR.ODR15`                     EQU 0x40021414,        4, base=16,    bitRange=15-15
 2176                           
 2177                           GPIOF_BSRR                          EQU 0x40021418
 2178                           ;'GPIOF_BSRR.BS0`                      EQU 0x40021418,        4, base=16,    bitRange=0-0
 2179                           ;'GPIOF_BSRR.BS1`                      EQU 0x40021418,        4, base=16,    bitRange=1-1
 2180                           ;'GPIOF_BSRR.BS2`                      EQU 0x40021418,        4, base=16,    bitRange=2-2
 2181                           ;'GPIOF_BSRR.BS3`                      EQU 0x40021418,        4, base=16,    bitRange=3-3
 2182                           ;'GPIOF_BSRR.BS4`                      EQU 0x40021418,        4, base=16,    bitRange=4-4
 2183                           ;'GPIOF_BSRR.BS5`                      EQU 0x40021418,        4, base=16,    bitRange=5-5
 2184                           ;'GPIOF_BSRR.BS6`                      EQU 0x40021418,        4, base=16,    bitRange=6-6
 2185                           ;'GPIOF_BSRR.BS7`                      EQU 0x40021418,        4, base=16,    bitRange=7-7
 2186                           ;'GPIOF_BSRR.BS8`                      EQU 0x40021418,        4, base=16,    bitRange=8-8
 2187                           ;'GPIOF_BSRR.BS9`                      EQU 0x40021418,        4, base=16,    bitRange=9-9
 2188                           ;'GPIOF_BSRR.BS10`                     EQU 0x40021418,        4, base=16,    bitRange=10-10
 2189                           ;'GPIOF_BSRR.BS11`                     EQU 0x40021418,        4, base=16,    bitRange=11-11
 2190                           ;'GPIOF_BSRR.BS12`                     EQU 0x40021418,        4, base=16,    bitRange=12-12
 2191                           ;'GPIOF_BSRR.BS13`                     EQU 0x40021418,        4, base=16,    bitRange=13-13
 2192                           ;'GPIOF_BSRR.BS14`                     EQU 0x40021418,        4, base=16,    bitRange=14-14
 2193                           ;'GPIOF_BSRR.BS15`                     EQU 0x40021418,        4, base=16,    bitRange=15-15
 2194                           ;'GPIOF_BSRR.BR0`                      EQU 0x40021418,        4, base=16,    bitRange=16-16
 2195                           ;'GPIOF_BSRR.BR1`                      EQU 0x40021418,        4, base=16,    bitRange=17-17
 2196                           ;'GPIOF_BSRR.BR2`                      EQU 0x40021418,        4, base=16,    bitRange=18-18
 2197                           ;'GPIOF_BSRR.BR3`                      EQU 0x40021418,        4, base=16,    bitRange=19-19
 2198                           ;'GPIOF_BSRR.BR4`                      EQU 0x40021418,        4, base=16,    bitRange=20-20
 2199                           ;'GPIOF_BSRR.BR5`                      EQU 0x40021418,        4, base=16,    bitRange=21-21
 2200                           ;'GPIOF_BSRR.BR6`                      EQU 0x40021418,        4, base=16,    bitRange=22-22
 2201                           ;'GPIOF_BSRR.BR7`                      EQU 0x40021418,        4, base=16,    bitRange=23-23
 2202                           ;'GPIOF_BSRR.BR8`                      EQU 0x40021418,        4, base=16,    bitRange=24-24
 2203                           ;'GPIOF_BSRR.BR9`                      EQU 0x40021418,        4, base=16,    bitRange=25-25
 2204                           ;'GPIOF_BSRR.BR10`                     EQU 0x40021418,        4, base=16,    bitRange=26-26
 2205                           ;'GPIOF_BSRR.BR11`                     EQU 0x40021418,        4, base=16,    bitRange=27-27
 2206                           ;'GPIOF_BSRR.BR12`                     EQU 0x40021418,        4, base=16,    bitRange=28-28
 2207                           ;'GPIOF_BSRR.BR13`                     EQU 0x40021418,        4, base=16,    bitRange=29-29
 2208                           ;'GPIOF_BSRR.BR14`                     EQU 0x40021418,        4, base=16,    bitRange=30-30
 2209                           ;'GPIOF_BSRR.BR15`                     EQU 0x40021418,        4, base=16,    bitRange=31-31
 2210                           
 2211                           GPIOF_LCKR                          EQU 0x4002141C
 2212                           ;'GPIOF_LCKR.LCK0`                     EQU 0x4002141C,        4, base=16,    bitRange=0-0
 2213                           ;'GPIOF_LCKR.LCK1`                     EQU 0x4002141C,        4, base=16,    bitRange=1-1
 2214                           ;'GPIOF_LCKR.LCK2`                     EQU 0x4002141C,        4, base=16,    bitRange=2-2
 2215                           ;'GPIOF_LCKR.LCK3`                     EQU 0x4002141C,        4, base=16,    bitRange=3-3
 2216                           ;'GPIOF_LCKR.LCK4`                     EQU 0x4002141C,        4, base=16,    bitRange=4-4
 2217                           ;'GPIOF_LCKR.LCK5`                     EQU 0x4002141C,        4, base=16,    bitRange=5-5
 2218                           ;'GPIOF_LCKR.LCK6`                     EQU 0x4002141C,        4, base=16,    bitRange=6-6
 2219                           ;'GPIOF_LCKR.LCK7`                     EQU 0x4002141C,        4, base=16,    bitRange=7-7
 2220                           ;'GPIOF_LCKR.LCK8`                     EQU 0x4002141C,        4, base=16,    bitRange=8-8
 2221                           ;'GPIOF_LCKR.LCK9`                     EQU 0x4002141C,        4, base=16,    bitRange=9-9
 2222                           ;'GPIOF_LCKR.LCK10`                    EQU 0x4002141C,        4, base=16,    bitRange=10-10
 2223                           ;'GPIOF_LCKR.LCK11`                    EQU 0x4002141C,        4, base=16,    bitRange=11-11
 2224                           ;'GPIOF_LCKR.LCK12`                    EQU 0x4002141C,        4, base=16,    bitRange=12-12
 2225                           ;'GPIOF_LCKR.LCK13`                    EQU 0x4002141C,        4, base=16,    bitRange=13-13
 2226                           ;'GPIOF_LCKR.LCK14`                    EQU 0x4002141C,        4, base=16,    bitRange=14-14
 2227                           ;'GPIOF_LCKR.LCK15`                    EQU 0x4002141C,        4, base=16,    bitRange=15-15
 2228                           ;'GPIOF_LCKR.LCKK`                     EQU 0x4002141C,        4, base=16,    bitRange=16-16
 2229                           
 2230                           GPIOF_AFRL                          EQU 0x40021420
 2231                           ;'GPIOF_AFRL.AFRL0`                    EQU 0x40021420,        4, base=16,    bitRange=0-3
 2232                           ;'GPIOF_AFRL.AFRL1`                    EQU 0x40021420,        4, base=16,    bitRange=4-7
 2233                           ;'GPIOF_AFRL.AFRL2`                    EQU 0x40021420,        4, base=16,    bitRange=8-11
 2234                           ;'GPIOF_AFRL.AFRL3`                    EQU 0x40021420,        4, base=16,    bitRange=12-15
 2235                           ;'GPIOF_AFRL.AFRL4`                    EQU 0x40021420,        4, base=16,    bitRange=16-19
 2236                           ;'GPIOF_AFRL.AFRL5`                    EQU 0x40021420,        4, base=16,    bitRange=20-23
 2237                           ;'GPIOF_AFRL.AFRL6`                    EQU 0x40021420,        4, base=16,    bitRange=24-27
 2238                           ;'GPIOF_AFRL.AFRL7`                    EQU 0x40021420,        4, base=16,    bitRange=28-31
 2239                           
 2240                           GPIOF_AFRH                          EQU 0x40021424
 2241                           ;'GPIOF_AFRH.AFRL8`                    EQU 0x40021424,        4, base=16,    bitRange=0-3
 2242                           ;'GPIOF_AFRH.AFRL9`                    EQU 0x40021424,        4, base=16,    bitRange=4-7
 2243                           ;'GPIOF_AFRH.AFRL10`                   EQU 0x40021424,        4, base=16,    bitRange=8-11
 2244                           ;'GPIOF_AFRH.AFRL11`                   EQU 0x40021424,        4, base=16,    bitRange=12-15
 2245                           ;'GPIOF_AFRH.AFRL12`                   EQU 0x40021424,        4, base=16,    bitRange=16-19
 2246                           ;'GPIOF_AFRH.AFRL13`                   EQU 0x40021424,        4, base=16,    bitRange=20-23
 2247                           ;'GPIOF_AFRH.AFRL14`                   EQU 0x40021424,        4, base=16,    bitRange=24-27
 2248                           ;'GPIOF_AFRH.AFRL15`                   EQU 0x40021424,        4, base=16,    bitRange=28-31
 2249                           
 2250                           
 2251                           ;
 2252                           ;               GPIOG
 2253                           ;
 2254                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2255                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2256                           
 2257                           GPIOG_MODER                         EQU 0x40021800
 2258                           ;'GPIOG_MODER.MODER0`                  EQU 0x40021800,        4, base=16,    bitRange=0-1
 2259                           ;'GPIOG_MODER.MODER1`                  EQU 0x40021800,        4, base=16,    bitRange=2-3
 2260                           ;'GPIOG_MODER.MODER2`                  EQU 0x40021800,        4, base=16,    bitRange=4-5
 2261                           ;'GPIOG_MODER.MODER3`                  EQU 0x40021800,        4, base=16,    bitRange=6-7
 2262                           ;'GPIOG_MODER.MODER4`                  EQU 0x40021800,        4, base=16,    bitRange=8-9
 2263                           ;'GPIOG_MODER.MODER5`                  EQU 0x40021800,        4, base=16,    bitRange=10-11
 2264                           ;'GPIOG_MODER.MODER6`                  EQU 0x40021800,        4, base=16,    bitRange=12-13
 2265                           ;'GPIOG_MODER.MODER7`                  EQU 0x40021800,        4, base=16,    bitRange=14-15
 2266                           ;'GPIOG_MODER.MODER8`                  EQU 0x40021800,        4, base=16,    bitRange=16-17
 2267                           ;'GPIOG_MODER.MODER9`                  EQU 0x40021800,        4, base=16,    bitRange=18-19
 2268                           ;'GPIOG_MODER.MODER10`                 EQU 0x40021800,        4, base=16,    bitRange=20-21
 2269                           ;'GPIOG_MODER.MODER11`                 EQU 0x40021800,        4, base=16,    bitRange=22-23
 2270                           ;'GPIOG_MODER.MODER12`                 EQU 0x40021800,        4, base=16,    bitRange=24-25
 2271                           ;'GPIOG_MODER.MODER13`                 EQU 0x40021800,        4, base=16,    bitRange=26-27
 2272                           ;'GPIOG_MODER.MODER14`                 EQU 0x40021800,        4, base=16,    bitRange=28-29
 2273                           ;'GPIOG_MODER.MODER15`                 EQU 0x40021800,        4, base=16,    bitRange=30-31
 2274                           
 2275                           GPIOG_OTYPER                        EQU 0x40021804
 2276                           ;'GPIOG_OTYPER.OT0`                    EQU 0x40021804,        4, base=16,    bitRange=0-0
 2277                           ;'GPIOG_OTYPER.OT1`                    EQU 0x40021804,        4, base=16,    bitRange=1-1
 2278                           ;'GPIOG_OTYPER.OT2`                    EQU 0x40021804,        4, base=16,    bitRange=2-2
 2279                           ;'GPIOG_OTYPER.OT3`                    EQU 0x40021804,        4, base=16,    bitRange=3-3
 2280                           ;'GPIOG_OTYPER.OT4`                    EQU 0x40021804,        4, base=16,    bitRange=4-4
 2281                           ;'GPIOG_OTYPER.OT5`                    EQU 0x40021804,        4, base=16,    bitRange=5-5
 2282                           ;'GPIOG_OTYPER.OT6`                    EQU 0x40021804,        4, base=16,    bitRange=6-6
 2283                           ;'GPIOG_OTYPER.OT7`                    EQU 0x40021804,        4, base=16,    bitRange=7-7
 2284                           ;'GPIOG_OTYPER.OT8`                    EQU 0x40021804,        4, base=16,    bitRange=8-8
 2285                           ;'GPIOG_OTYPER.OT9`                    EQU 0x40021804,        4, base=16,    bitRange=9-9
 2286                           ;'GPIOG_OTYPER.OT10`                   EQU 0x40021804,        4, base=16,    bitRange=10-10
 2287                           ;'GPIOG_OTYPER.OT11`                   EQU 0x40021804,        4, base=16,    bitRange=11-11
 2288                           ;'GPIOG_OTYPER.OT12`                   EQU 0x40021804,        4, base=16,    bitRange=12-12
 2289                           ;'GPIOG_OTYPER.OT13`                   EQU 0x40021804,        4, base=16,    bitRange=13-13
 2290                           ;'GPIOG_OTYPER.OT14`                   EQU 0x40021804,        4, base=16,    bitRange=14-14
 2291                           ;'GPIOG_OTYPER.OT15`                   EQU 0x40021804,        4, base=16,    bitRange=15-15
 2292                           
 2293                           GPIOG_OSPEEDR                       EQU 0x40021808
 2294                           ;'GPIOG_OSPEEDR.OSPEEDR0`              EQU 0x40021808,        4, base=16,    bitRange=0-1
 2295                           ;'GPIOG_OSPEEDR.OSPEEDR1`              EQU 0x40021808,        4, base=16,    bitRange=2-3
 2296                           ;'GPIOG_OSPEEDR.OSPEEDR2`              EQU 0x40021808,        4, base=16,    bitRange=4-5
 2297                           ;'GPIOG_OSPEEDR.OSPEEDR3`              EQU 0x40021808,        4, base=16,    bitRange=6-7
 2298                           ;'GPIOG_OSPEEDR.OSPEEDR4`              EQU 0x40021808,        4, base=16,    bitRange=8-9
 2299                           ;'GPIOG_OSPEEDR.OSPEEDR5`              EQU 0x40021808,        4, base=16,    bitRange=10-11
 2300                           ;'GPIOG_OSPEEDR.OSPEEDR6`              EQU 0x40021808,        4, base=16,    bitRange=12-13
 2301                           ;'GPIOG_OSPEEDR.OSPEEDR7`              EQU 0x40021808,        4, base=16,    bitRange=14-15
 2302                           ;'GPIOG_OSPEEDR.OSPEEDR8`              EQU 0x40021808,        4, base=16,    bitRange=16-17
 2303                           ;'GPIOG_OSPEEDR.OSPEEDR9`              EQU 0x40021808,        4, base=16,    bitRange=18-19
 2304                           ;'GPIOG_OSPEEDR.OSPEEDR10`             EQU 0x40021808,        4, base=16,    bitRange=20-21
 2305                           ;'GPIOG_OSPEEDR.OSPEEDR11`             EQU 0x40021808,        4, base=16,    bitRange=22-23
 2306                           ;'GPIOG_OSPEEDR.OSPEEDR12`             EQU 0x40021808,        4, base=16,    bitRange=24-25
 2307                           ;'GPIOG_OSPEEDR.OSPEEDR13`             EQU 0x40021808,        4, base=16,    bitRange=26-27
 2308                           ;'GPIOG_OSPEEDR.OSPEEDR14`             EQU 0x40021808,        4, base=16,    bitRange=28-29
 2309                           ;'GPIOG_OSPEEDR.OSPEEDR15`             EQU 0x40021808,        4, base=16,    bitRange=30-31
 2310                           
 2311                           GPIOG_PUPDR                         EQU 0x4002180C
 2312                           ;'GPIOG_PUPDR.PUPDR0`                  EQU 0x4002180C,        4, base=16,    bitRange=0-1
 2313                           ;'GPIOG_PUPDR.PUPDR1`                  EQU 0x4002180C,        4, base=16,    bitRange=2-3
 2314                           ;'GPIOG_PUPDR.PUPDR2`                  EQU 0x4002180C,        4, base=16,    bitRange=4-5
 2315                           ;'GPIOG_PUPDR.PUPDR3`                  EQU 0x4002180C,        4, base=16,    bitRange=6-7
 2316                           ;'GPIOG_PUPDR.PUPDR4`                  EQU 0x4002180C,        4, base=16,    bitRange=8-9
 2317                           ;'GPIOG_PUPDR.PUPDR5`                  EQU 0x4002180C,        4, base=16,    bitRange=10-11
 2318                           ;'GPIOG_PUPDR.PUPDR6`                  EQU 0x4002180C,        4, base=16,    bitRange=12-13
 2319                           ;'GPIOG_PUPDR.PUPDR7`                  EQU 0x4002180C,        4, base=16,    bitRange=14-15
 2320                           ;'GPIOG_PUPDR.PUPDR8`                  EQU 0x4002180C,        4, base=16,    bitRange=16-17
 2321                           ;'GPIOG_PUPDR.PUPDR9`                  EQU 0x4002180C,        4, base=16,    bitRange=18-19
 2322                           ;'GPIOG_PUPDR.PUPDR10`                 EQU 0x4002180C,        4, base=16,    bitRange=20-21
 2323                           ;'GPIOG_PUPDR.PUPDR11`                 EQU 0x4002180C,        4, base=16,    bitRange=22-23
 2324                           ;'GPIOG_PUPDR.PUPDR12`                 EQU 0x4002180C,        4, base=16,    bitRange=24-25
 2325                           ;'GPIOG_PUPDR.PUPDR13`                 EQU 0x4002180C,        4, base=16,    bitRange=26-27
 2326                           ;'GPIOG_PUPDR.PUPDR14`                 EQU 0x4002180C,        4, base=16,    bitRange=28-29
 2327                           ;'GPIOG_PUPDR.PUPDR15`                 EQU 0x4002180C,        4, base=16,    bitRange=30-31
 2328                           
 2329                           GPIOG_IDR                           EQU 0x40021810
 2330                           ;'GPIOG_IDR.IDR0`                      EQU 0x40021810,        4, base=16,    bitRange=0-0
 2331                           ;'GPIOG_IDR.IDR1`                      EQU 0x40021810,        4, base=16,    bitRange=1-1
 2332                           ;'GPIOG_IDR.IDR2`                      EQU 0x40021810,        4, base=16,    bitRange=2-2
 2333                           ;'GPIOG_IDR.IDR3`                      EQU 0x40021810,        4, base=16,    bitRange=3-3
 2334                           ;'GPIOG_IDR.IDR4`                      EQU 0x40021810,        4, base=16,    bitRange=4-4
 2335                           ;'GPIOG_IDR.IDR5`                      EQU 0x40021810,        4, base=16,    bitRange=5-5
 2336                           ;'GPIOG_IDR.IDR6`                      EQU 0x40021810,        4, base=16,    bitRange=6-6
 2337                           ;'GPIOG_IDR.IDR7`                      EQU 0x40021810,        4, base=16,    bitRange=7-7
 2338                           ;'GPIOG_IDR.IDR8`                      EQU 0x40021810,        4, base=16,    bitRange=8-8
 2339                           ;'GPIOG_IDR.IDR9`                      EQU 0x40021810,        4, base=16,    bitRange=9-9
 2340                           ;'GPIOG_IDR.IDR10`                     EQU 0x40021810,        4, base=16,    bitRange=10-10
 2341                           ;'GPIOG_IDR.IDR11`                     EQU 0x40021810,        4, base=16,    bitRange=11-11
 2342                           ;'GPIOG_IDR.IDR12`                     EQU 0x40021810,        4, base=16,    bitRange=12-12
 2343                           ;'GPIOG_IDR.IDR13`                     EQU 0x40021810,        4, base=16,    bitRange=13-13
 2344                           ;'GPIOG_IDR.IDR14`                     EQU 0x40021810,        4, base=16,    bitRange=14-14
 2345                           ;'GPIOG_IDR.IDR15`                     EQU 0x40021810,        4, base=16,    bitRange=15-15
 2346                           
 2347                           GPIOG_ODR                           EQU 0x40021814
 2348                           ;'GPIOG_ODR.ODR0`                      EQU 0x40021814,        4, base=16,    bitRange=0-0
 2349                           ;'GPIOG_ODR.ODR1`                      EQU 0x40021814,        4, base=16,    bitRange=1-1
 2350                           ;'GPIOG_ODR.ODR2`                      EQU 0x40021814,        4, base=16,    bitRange=2-2
 2351                           ;'GPIOG_ODR.ODR3`                      EQU 0x40021814,        4, base=16,    bitRange=3-3
 2352                           ;'GPIOG_ODR.ODR4`                      EQU 0x40021814,        4, base=16,    bitRange=4-4
 2353                           ;'GPIOG_ODR.ODR5`                      EQU 0x40021814,        4, base=16,    bitRange=5-5
 2354                           ;'GPIOG_ODR.ODR6`                      EQU 0x40021814,        4, base=16,    bitRange=6-6
 2355                           ;'GPIOG_ODR.ODR7`                      EQU 0x40021814,        4, base=16,    bitRange=7-7
 2356                           ;'GPIOG_ODR.ODR8`                      EQU 0x40021814,        4, base=16,    bitRange=8-8
 2357                           ;'GPIOG_ODR.ODR9`                      EQU 0x40021814,        4, base=16,    bitRange=9-9
 2358                           ;'GPIOG_ODR.ODR10`                     EQU 0x40021814,        4, base=16,    bitRange=10-10
 2359                           ;'GPIOG_ODR.ODR11`                     EQU 0x40021814,        4, base=16,    bitRange=11-11
 2360                           ;'GPIOG_ODR.ODR12`                     EQU 0x40021814,        4, base=16,    bitRange=12-12
 2361                           ;'GPIOG_ODR.ODR13`                     EQU 0x40021814,        4, base=16,    bitRange=13-13
 2362                           ;'GPIOG_ODR.ODR14`                     EQU 0x40021814,        4, base=16,    bitRange=14-14
 2363                           ;'GPIOG_ODR.ODR15`                     EQU 0x40021814,        4, base=16,    bitRange=15-15
 2364                           
 2365                           GPIOG_BSRR                          EQU 0x40021818
 2366                           ;'GPIOG_BSRR.BS0`                      EQU 0x40021818,        4, base=16,    bitRange=0-0
 2367                           ;'GPIOG_BSRR.BS1`                      EQU 0x40021818,        4, base=16,    bitRange=1-1
 2368                           ;'GPIOG_BSRR.BS2`                      EQU 0x40021818,        4, base=16,    bitRange=2-2
 2369                           ;'GPIOG_BSRR.BS3`                      EQU 0x40021818,        4, base=16,    bitRange=3-3
 2370                           ;'GPIOG_BSRR.BS4`                      EQU 0x40021818,        4, base=16,    bitRange=4-4
 2371                           ;'GPIOG_BSRR.BS5`                      EQU 0x40021818,        4, base=16,    bitRange=5-5
 2372                           ;'GPIOG_BSRR.BS6`                      EQU 0x40021818,        4, base=16,    bitRange=6-6
 2373                           ;'GPIOG_BSRR.BS7`                      EQU 0x40021818,        4, base=16,    bitRange=7-7
 2374                           ;'GPIOG_BSRR.BS8`                      EQU 0x40021818,        4, base=16,    bitRange=8-8
 2375                           ;'GPIOG_BSRR.BS9`                      EQU 0x40021818,        4, base=16,    bitRange=9-9
 2376                           ;'GPIOG_BSRR.BS10`                     EQU 0x40021818,        4, base=16,    bitRange=10-10
 2377                           ;'GPIOG_BSRR.BS11`                     EQU 0x40021818,        4, base=16,    bitRange=11-11
 2378                           ;'GPIOG_BSRR.BS12`                     EQU 0x40021818,        4, base=16,    bitRange=12-12
 2379                           ;'GPIOG_BSRR.BS13`                     EQU 0x40021818,        4, base=16,    bitRange=13-13
 2380                           ;'GPIOG_BSRR.BS14`                     EQU 0x40021818,        4, base=16,    bitRange=14-14
 2381                           ;'GPIOG_BSRR.BS15`                     EQU 0x40021818,        4, base=16,    bitRange=15-15
 2382                           ;'GPIOG_BSRR.BR0`                      EQU 0x40021818,        4, base=16,    bitRange=16-16
 2383                           ;'GPIOG_BSRR.BR1`                      EQU 0x40021818,        4, base=16,    bitRange=17-17
 2384                           ;'GPIOG_BSRR.BR2`                      EQU 0x40021818,        4, base=16,    bitRange=18-18
 2385                           ;'GPIOG_BSRR.BR3`                      EQU 0x40021818,        4, base=16,    bitRange=19-19
 2386                           ;'GPIOG_BSRR.BR4`                      EQU 0x40021818,        4, base=16,    bitRange=20-20
 2387                           ;'GPIOG_BSRR.BR5`                      EQU 0x40021818,        4, base=16,    bitRange=21-21
 2388                           ;'GPIOG_BSRR.BR6`                      EQU 0x40021818,        4, base=16,    bitRange=22-22
 2389                           ;'GPIOG_BSRR.BR7`                      EQU 0x40021818,        4, base=16,    bitRange=23-23
 2390                           ;'GPIOG_BSRR.BR8`                      EQU 0x40021818,        4, base=16,    bitRange=24-24
 2391                           ;'GPIOG_BSRR.BR9`                      EQU 0x40021818,        4, base=16,    bitRange=25-25
 2392                           ;'GPIOG_BSRR.BR10`                     EQU 0x40021818,        4, base=16,    bitRange=26-26
 2393                           ;'GPIOG_BSRR.BR11`                     EQU 0x40021818,        4, base=16,    bitRange=27-27
 2394                           ;'GPIOG_BSRR.BR12`                     EQU 0x40021818,        4, base=16,    bitRange=28-28
 2395                           ;'GPIOG_BSRR.BR13`                     EQU 0x40021818,        4, base=16,    bitRange=29-29
 2396                           ;'GPIOG_BSRR.BR14`                     EQU 0x40021818,        4, base=16,    bitRange=30-30
 2397                           ;'GPIOG_BSRR.BR15`                     EQU 0x40021818,        4, base=16,    bitRange=31-31
 2398                           
 2399                           GPIOG_LCKR                          EQU 0x4002181C
 2400                           ;'GPIOG_LCKR.LCK0`                     EQU 0x4002181C,        4, base=16,    bitRange=0-0
 2401                           ;'GPIOG_LCKR.LCK1`                     EQU 0x4002181C,        4, base=16,    bitRange=1-1
 2402                           ;'GPIOG_LCKR.LCK2`                     EQU 0x4002181C,        4, base=16,    bitRange=2-2
 2403                           ;'GPIOG_LCKR.LCK3`                     EQU 0x4002181C,        4, base=16,    bitRange=3-3
 2404                           ;'GPIOG_LCKR.LCK4`                     EQU 0x4002181C,        4, base=16,    bitRange=4-4
 2405                           ;'GPIOG_LCKR.LCK5`                     EQU 0x4002181C,        4, base=16,    bitRange=5-5
 2406                           ;'GPIOG_LCKR.LCK6`                     EQU 0x4002181C,        4, base=16,    bitRange=6-6
 2407                           ;'GPIOG_LCKR.LCK7`                     EQU 0x4002181C,        4, base=16,    bitRange=7-7
 2408                           ;'GPIOG_LCKR.LCK8`                     EQU 0x4002181C,        4, base=16,    bitRange=8-8
 2409                           ;'GPIOG_LCKR.LCK9`                     EQU 0x4002181C,        4, base=16,    bitRange=9-9
 2410                           ;'GPIOG_LCKR.LCK10`                    EQU 0x4002181C,        4, base=16,    bitRange=10-10
 2411                           ;'GPIOG_LCKR.LCK11`                    EQU 0x4002181C,        4, base=16,    bitRange=11-11
 2412                           ;'GPIOG_LCKR.LCK12`                    EQU 0x4002181C,        4, base=16,    bitRange=12-12
 2413                           ;'GPIOG_LCKR.LCK13`                    EQU 0x4002181C,        4, base=16,    bitRange=13-13
 2414                           ;'GPIOG_LCKR.LCK14`                    EQU 0x4002181C,        4, base=16,    bitRange=14-14
 2415                           ;'GPIOG_LCKR.LCK15`                    EQU 0x4002181C,        4, base=16,    bitRange=15-15
 2416                           ;'GPIOG_LCKR.LCKK`                     EQU 0x4002181C,        4, base=16,    bitRange=16-16
 2417                           
 2418                           GPIOG_AFRL                          EQU 0x40021820
 2419                           ;'GPIOG_AFRL.AFRL0`                    EQU 0x40021820,        4, base=16,    bitRange=0-3
 2420                           ;'GPIOG_AFRL.AFRL1`                    EQU 0x40021820,        4, base=16,    bitRange=4-7
 2421                           ;'GPIOG_AFRL.AFRL2`                    EQU 0x40021820,        4, base=16,    bitRange=8-11
 2422                           ;'GPIOG_AFRL.AFRL3`                    EQU 0x40021820,        4, base=16,    bitRange=12-15
 2423                           ;'GPIOG_AFRL.AFRL4`                    EQU 0x40021820,        4, base=16,    bitRange=16-19
 2424                           ;'GPIOG_AFRL.AFRL5`                    EQU 0x40021820,        4, base=16,    bitRange=20-23
 2425                           ;'GPIOG_AFRL.AFRL6`                    EQU 0x40021820,        4, base=16,    bitRange=24-27
 2426                           ;'GPIOG_AFRL.AFRL7`                    EQU 0x40021820,        4, base=16,    bitRange=28-31
 2427                           
 2428                           GPIOG_AFRH                          EQU 0x40021824
 2429                           ;'GPIOG_AFRH.AFRL8`                    EQU 0x40021824,        4, base=16,    bitRange=0-3
 2430                           ;'GPIOG_AFRH.AFRL9`                    EQU 0x40021824,        4, base=16,    bitRange=4-7
 2431                           ;'GPIOG_AFRH.AFRL10`                   EQU 0x40021824,        4, base=16,    bitRange=8-11
 2432                           ;'GPIOG_AFRH.AFRL11`                   EQU 0x40021824,        4, base=16,    bitRange=12-15
 2433                           ;'GPIOG_AFRH.AFRL12`                   EQU 0x40021824,        4, base=16,    bitRange=16-19
 2434                           ;'GPIOG_AFRH.AFRL13`                   EQU 0x40021824,        4, base=16,    bitRange=20-23
 2435                           ;'GPIOG_AFRH.AFRL14`                   EQU 0x40021824,        4, base=16,    bitRange=24-27
 2436                           ;'GPIOG_AFRH.AFRL15`                   EQU 0x40021824,        4, base=16,    bitRange=28-31
 2437                           
 2438                           
 2439                           ;
 2440                           ;               GPIOH
 2441                           ;
 2442                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2443                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2444                           
 2445                           GPIOH_MODER                         EQU 0x40021C00
 2446                           ;'GPIOH_MODER.MODER0`                  EQU 0x40021C00,        4, base=16,    bitRange=0-1
 2447                           ;'GPIOH_MODER.MODER1`                  EQU 0x40021C00,        4, base=16,    bitRange=2-3
 2448                           ;'GPIOH_MODER.MODER2`                  EQU 0x40021C00,        4, base=16,    bitRange=4-5
 2449                           ;'GPIOH_MODER.MODER3`                  EQU 0x40021C00,        4, base=16,    bitRange=6-7
 2450                           ;'GPIOH_MODER.MODER4`                  EQU 0x40021C00,        4, base=16,    bitRange=8-9
 2451                           ;'GPIOH_MODER.MODER5`                  EQU 0x40021C00,        4, base=16,    bitRange=10-11
 2452                           ;'GPIOH_MODER.MODER6`                  EQU 0x40021C00,        4, base=16,    bitRange=12-13
 2453                           ;'GPIOH_MODER.MODER7`                  EQU 0x40021C00,        4, base=16,    bitRange=14-15
 2454                           ;'GPIOH_MODER.MODER8`                  EQU 0x40021C00,        4, base=16,    bitRange=16-17
 2455                           ;'GPIOH_MODER.MODER9`                  EQU 0x40021C00,        4, base=16,    bitRange=18-19
 2456                           ;'GPIOH_MODER.MODER10`                 EQU 0x40021C00,        4, base=16,    bitRange=20-21
 2457                           ;'GPIOH_MODER.MODER11`                 EQU 0x40021C00,        4, base=16,    bitRange=22-23
 2458                           ;'GPIOH_MODER.MODER12`                 EQU 0x40021C00,        4, base=16,    bitRange=24-25
 2459                           ;'GPIOH_MODER.MODER13`                 EQU 0x40021C00,        4, base=16,    bitRange=26-27
 2460                           ;'GPIOH_MODER.MODER14`                 EQU 0x40021C00,        4, base=16,    bitRange=28-29
 2461                           ;'GPIOH_MODER.MODER15`                 EQU 0x40021C00,        4, base=16,    bitRange=30-31
 2462                           
 2463                           GPIOH_OTYPER                        EQU 0x40021C04
 2464                           ;'GPIOH_OTYPER.OT0`                    EQU 0x40021C04,        4, base=16,    bitRange=0-0
 2465                           ;'GPIOH_OTYPER.OT1`                    EQU 0x40021C04,        4, base=16,    bitRange=1-1
 2466                           ;'GPIOH_OTYPER.OT2`                    EQU 0x40021C04,        4, base=16,    bitRange=2-2
 2467                           ;'GPIOH_OTYPER.OT3`                    EQU 0x40021C04,        4, base=16,    bitRange=3-3
 2468                           ;'GPIOH_OTYPER.OT4`                    EQU 0x40021C04,        4, base=16,    bitRange=4-4
 2469                           ;'GPIOH_OTYPER.OT5`                    EQU 0x40021C04,        4, base=16,    bitRange=5-5
 2470                           ;'GPIOH_OTYPER.OT6`                    EQU 0x40021C04,        4, base=16,    bitRange=6-6
 2471                           ;'GPIOH_OTYPER.OT7`                    EQU 0x40021C04,        4, base=16,    bitRange=7-7
 2472                           ;'GPIOH_OTYPER.OT8`                    EQU 0x40021C04,        4, base=16,    bitRange=8-8
 2473                           ;'GPIOH_OTYPER.OT9`                    EQU 0x40021C04,        4, base=16,    bitRange=9-9
 2474                           ;'GPIOH_OTYPER.OT10`                   EQU 0x40021C04,        4, base=16,    bitRange=10-10
 2475                           ;'GPIOH_OTYPER.OT11`                   EQU 0x40021C04,        4, base=16,    bitRange=11-11
 2476                           ;'GPIOH_OTYPER.OT12`                   EQU 0x40021C04,        4, base=16,    bitRange=12-12
 2477                           ;'GPIOH_OTYPER.OT13`                   EQU 0x40021C04,        4, base=16,    bitRange=13-13
 2478                           ;'GPIOH_OTYPER.OT14`                   EQU 0x40021C04,        4, base=16,    bitRange=14-14
 2479                           ;'GPIOH_OTYPER.OT15`                   EQU 0x40021C04,        4, base=16,    bitRange=15-15
 2480                           
 2481                           GPIOH_OSPEEDR                       EQU 0x40021C08
 2482                           ;'GPIOH_OSPEEDR.OSPEEDR0`              EQU 0x40021C08,        4, base=16,    bitRange=0-1
 2483                           ;'GPIOH_OSPEEDR.OSPEEDR1`              EQU 0x40021C08,        4, base=16,    bitRange=2-3
 2484                           ;'GPIOH_OSPEEDR.OSPEEDR2`              EQU 0x40021C08,        4, base=16,    bitRange=4-5
 2485                           ;'GPIOH_OSPEEDR.OSPEEDR3`              EQU 0x40021C08,        4, base=16,    bitRange=6-7
 2486                           ;'GPIOH_OSPEEDR.OSPEEDR4`              EQU 0x40021C08,        4, base=16,    bitRange=8-9
 2487                           ;'GPIOH_OSPEEDR.OSPEEDR5`              EQU 0x40021C08,        4, base=16,    bitRange=10-11
 2488                           ;'GPIOH_OSPEEDR.OSPEEDR6`              EQU 0x40021C08,        4, base=16,    bitRange=12-13
 2489                           ;'GPIOH_OSPEEDR.OSPEEDR7`              EQU 0x40021C08,        4, base=16,    bitRange=14-15
 2490                           ;'GPIOH_OSPEEDR.OSPEEDR8`              EQU 0x40021C08,        4, base=16,    bitRange=16-17
 2491                           ;'GPIOH_OSPEEDR.OSPEEDR9`              EQU 0x40021C08,        4, base=16,    bitRange=18-19
 2492                           ;'GPIOH_OSPEEDR.OSPEEDR10`             EQU 0x40021C08,        4, base=16,    bitRange=20-21
 2493                           ;'GPIOH_OSPEEDR.OSPEEDR11`             EQU 0x40021C08,        4, base=16,    bitRange=22-23
 2494                           ;'GPIOH_OSPEEDR.OSPEEDR12`             EQU 0x40021C08,        4, base=16,    bitRange=24-25
 2495                           ;'GPIOH_OSPEEDR.OSPEEDR13`             EQU 0x40021C08,        4, base=16,    bitRange=26-27
 2496                           ;'GPIOH_OSPEEDR.OSPEEDR14`             EQU 0x40021C08,        4, base=16,    bitRange=28-29
 2497                           ;'GPIOH_OSPEEDR.OSPEEDR15`             EQU 0x40021C08,        4, base=16,    bitRange=30-31
 2498                           
 2499                           GPIOH_PUPDR                         EQU 0x40021C0C
 2500                           ;'GPIOH_PUPDR.PUPDR0`                  EQU 0x40021C0C,        4, base=16,    bitRange=0-1
 2501                           ;'GPIOH_PUPDR.PUPDR1`                  EQU 0x40021C0C,        4, base=16,    bitRange=2-3
 2502                           ;'GPIOH_PUPDR.PUPDR2`                  EQU 0x40021C0C,        4, base=16,    bitRange=4-5
 2503                           ;'GPIOH_PUPDR.PUPDR3`                  EQU 0x40021C0C,        4, base=16,    bitRange=6-7
 2504                           ;'GPIOH_PUPDR.PUPDR4`                  EQU 0x40021C0C,        4, base=16,    bitRange=8-9
 2505                           ;'GPIOH_PUPDR.PUPDR5`                  EQU 0x40021C0C,        4, base=16,    bitRange=10-11
 2506                           ;'GPIOH_PUPDR.PUPDR6`                  EQU 0x40021C0C,        4, base=16,    bitRange=12-13
 2507                           ;'GPIOH_PUPDR.PUPDR7`                  EQU 0x40021C0C,        4, base=16,    bitRange=14-15
 2508                           ;'GPIOH_PUPDR.PUPDR8`                  EQU 0x40021C0C,        4, base=16,    bitRange=16-17
 2509                           ;'GPIOH_PUPDR.PUPDR9`                  EQU 0x40021C0C,        4, base=16,    bitRange=18-19
 2510                           ;'GPIOH_PUPDR.PUPDR10`                 EQU 0x40021C0C,        4, base=16,    bitRange=20-21
 2511                           ;'GPIOH_PUPDR.PUPDR11`                 EQU 0x40021C0C,        4, base=16,    bitRange=22-23
 2512                           ;'GPIOH_PUPDR.PUPDR12`                 EQU 0x40021C0C,        4, base=16,    bitRange=24-25
 2513                           ;'GPIOH_PUPDR.PUPDR13`                 EQU 0x40021C0C,        4, base=16,    bitRange=26-27
 2514                           ;'GPIOH_PUPDR.PUPDR14`                 EQU 0x40021C0C,        4, base=16,    bitRange=28-29
 2515                           ;'GPIOH_PUPDR.PUPDR15`                 EQU 0x40021C0C,        4, base=16,    bitRange=30-31
 2516                           
 2517                           GPIOH_IDR                           EQU 0x40021C10
 2518                           ;'GPIOH_IDR.IDR0`                      EQU 0x40021C10,        4, base=16,    bitRange=0-0
 2519                           ;'GPIOH_IDR.IDR1`                      EQU 0x40021C10,        4, base=16,    bitRange=1-1
 2520                           ;'GPIOH_IDR.IDR2`                      EQU 0x40021C10,        4, base=16,    bitRange=2-2
 2521                           ;'GPIOH_IDR.IDR3`                      EQU 0x40021C10,        4, base=16,    bitRange=3-3
 2522                           ;'GPIOH_IDR.IDR4`                      EQU 0x40021C10,        4, base=16,    bitRange=4-4
 2523                           ;'GPIOH_IDR.IDR5`                      EQU 0x40021C10,        4, base=16,    bitRange=5-5
 2524                           ;'GPIOH_IDR.IDR6`                      EQU 0x40021C10,        4, base=16,    bitRange=6-6
 2525                           ;'GPIOH_IDR.IDR7`                      EQU 0x40021C10,        4, base=16,    bitRange=7-7
 2526                           ;'GPIOH_IDR.IDR8`                      EQU 0x40021C10,        4, base=16,    bitRange=8-8
 2527                           ;'GPIOH_IDR.IDR9`                      EQU 0x40021C10,        4, base=16,    bitRange=9-9
 2528                           ;'GPIOH_IDR.IDR10`                     EQU 0x40021C10,        4, base=16,    bitRange=10-10
 2529                           ;'GPIOH_IDR.IDR11`                     EQU 0x40021C10,        4, base=16,    bitRange=11-11
 2530                           ;'GPIOH_IDR.IDR12`                     EQU 0x40021C10,        4, base=16,    bitRange=12-12
 2531                           ;'GPIOH_IDR.IDR13`                     EQU 0x40021C10,        4, base=16,    bitRange=13-13
 2532                           ;'GPIOH_IDR.IDR14`                     EQU 0x40021C10,        4, base=16,    bitRange=14-14
 2533                           ;'GPIOH_IDR.IDR15`                     EQU 0x40021C10,        4, base=16,    bitRange=15-15
 2534                           
 2535                           GPIOH_ODR                           EQU 0x40021C14
 2536                           ;'GPIOH_ODR.ODR0`                      EQU 0x40021C14,        4, base=16,    bitRange=0-0
 2537                           ;'GPIOH_ODR.ODR1`                      EQU 0x40021C14,        4, base=16,    bitRange=1-1
 2538                           ;'GPIOH_ODR.ODR2`                      EQU 0x40021C14,        4, base=16,    bitRange=2-2
 2539                           ;'GPIOH_ODR.ODR3`                      EQU 0x40021C14,        4, base=16,    bitRange=3-3
 2540                           ;'GPIOH_ODR.ODR4`                      EQU 0x40021C14,        4, base=16,    bitRange=4-4
 2541                           ;'GPIOH_ODR.ODR5`                      EQU 0x40021C14,        4, base=16,    bitRange=5-5
 2542                           ;'GPIOH_ODR.ODR6`                      EQU 0x40021C14,        4, base=16,    bitRange=6-6
 2543                           ;'GPIOH_ODR.ODR7`                      EQU 0x40021C14,        4, base=16,    bitRange=7-7
 2544                           ;'GPIOH_ODR.ODR8`                      EQU 0x40021C14,        4, base=16,    bitRange=8-8
 2545                           ;'GPIOH_ODR.ODR9`                      EQU 0x40021C14,        4, base=16,    bitRange=9-9
 2546                           ;'GPIOH_ODR.ODR10`                     EQU 0x40021C14,        4, base=16,    bitRange=10-10
 2547                           ;'GPIOH_ODR.ODR11`                     EQU 0x40021C14,        4, base=16,    bitRange=11-11
 2548                           ;'GPIOH_ODR.ODR12`                     EQU 0x40021C14,        4, base=16,    bitRange=12-12
 2549                           ;'GPIOH_ODR.ODR13`                     EQU 0x40021C14,        4, base=16,    bitRange=13-13
 2550                           ;'GPIOH_ODR.ODR14`                     EQU 0x40021C14,        4, base=16,    bitRange=14-14
 2551                           ;'GPIOH_ODR.ODR15`                     EQU 0x40021C14,        4, base=16,    bitRange=15-15
 2552                           
 2553                           GPIOH_BSRR                          EQU 0x40021C18
 2554                           ;'GPIOH_BSRR.BS0`                      EQU 0x40021C18,        4, base=16,    bitRange=0-0
 2555                           ;'GPIOH_BSRR.BS1`                      EQU 0x40021C18,        4, base=16,    bitRange=1-1
 2556                           ;'GPIOH_BSRR.BS2`                      EQU 0x40021C18,        4, base=16,    bitRange=2-2
 2557                           ;'GPIOH_BSRR.BS3`                      EQU 0x40021C18,        4, base=16,    bitRange=3-3
 2558                           ;'GPIOH_BSRR.BS4`                      EQU 0x40021C18,        4, base=16,    bitRange=4-4
 2559                           ;'GPIOH_BSRR.BS5`                      EQU 0x40021C18,        4, base=16,    bitRange=5-5
 2560                           ;'GPIOH_BSRR.BS6`                      EQU 0x40021C18,        4, base=16,    bitRange=6-6
 2561                           ;'GPIOH_BSRR.BS7`                      EQU 0x40021C18,        4, base=16,    bitRange=7-7
 2562                           ;'GPIOH_BSRR.BS8`                      EQU 0x40021C18,        4, base=16,    bitRange=8-8
 2563                           ;'GPIOH_BSRR.BS9`                      EQU 0x40021C18,        4, base=16,    bitRange=9-9
 2564                           ;'GPIOH_BSRR.BS10`                     EQU 0x40021C18,        4, base=16,    bitRange=10-10
 2565                           ;'GPIOH_BSRR.BS11`                     EQU 0x40021C18,        4, base=16,    bitRange=11-11
 2566                           ;'GPIOH_BSRR.BS12`                     EQU 0x40021C18,        4, base=16,    bitRange=12-12
 2567                           ;'GPIOH_BSRR.BS13`                     EQU 0x40021C18,        4, base=16,    bitRange=13-13
 2568                           ;'GPIOH_BSRR.BS14`                     EQU 0x40021C18,        4, base=16,    bitRange=14-14
 2569                           ;'GPIOH_BSRR.BS15`                     EQU 0x40021C18,        4, base=16,    bitRange=15-15
 2570                           ;'GPIOH_BSRR.BR0`                      EQU 0x40021C18,        4, base=16,    bitRange=16-16
 2571                           ;'GPIOH_BSRR.BR1`                      EQU 0x40021C18,        4, base=16,    bitRange=17-17
 2572                           ;'GPIOH_BSRR.BR2`                      EQU 0x40021C18,        4, base=16,    bitRange=18-18
 2573                           ;'GPIOH_BSRR.BR3`                      EQU 0x40021C18,        4, base=16,    bitRange=19-19
 2574                           ;'GPIOH_BSRR.BR4`                      EQU 0x40021C18,        4, base=16,    bitRange=20-20
 2575                           ;'GPIOH_BSRR.BR5`                      EQU 0x40021C18,        4, base=16,    bitRange=21-21
 2576                           ;'GPIOH_BSRR.BR6`                      EQU 0x40021C18,        4, base=16,    bitRange=22-22
 2577                           ;'GPIOH_BSRR.BR7`                      EQU 0x40021C18,        4, base=16,    bitRange=23-23
 2578                           ;'GPIOH_BSRR.BR8`                      EQU 0x40021C18,        4, base=16,    bitRange=24-24
 2579                           ;'GPIOH_BSRR.BR9`                      EQU 0x40021C18,        4, base=16,    bitRange=25-25
 2580                           ;'GPIOH_BSRR.BR10`                     EQU 0x40021C18,        4, base=16,    bitRange=26-26
 2581                           ;'GPIOH_BSRR.BR11`                     EQU 0x40021C18,        4, base=16,    bitRange=27-27
 2582                           ;'GPIOH_BSRR.BR12`                     EQU 0x40021C18,        4, base=16,    bitRange=28-28
 2583                           ;'GPIOH_BSRR.BR13`                     EQU 0x40021C18,        4, base=16,    bitRange=29-29
 2584                           ;'GPIOH_BSRR.BR14`                     EQU 0x40021C18,        4, base=16,    bitRange=30-30
 2585                           ;'GPIOH_BSRR.BR15`                     EQU 0x40021C18,        4, base=16,    bitRange=31-31
 2586                           
 2587                           GPIOH_LCKR                          EQU 0x40021C1C
 2588                           ;'GPIOH_LCKR.LCK0`                     EQU 0x40021C1C,        4, base=16,    bitRange=0-0
 2589                           ;'GPIOH_LCKR.LCK1`                     EQU 0x40021C1C,        4, base=16,    bitRange=1-1
 2590                           ;'GPIOH_LCKR.LCK2`                     EQU 0x40021C1C,        4, base=16,    bitRange=2-2
 2591                           ;'GPIOH_LCKR.LCK3`                     EQU 0x40021C1C,        4, base=16,    bitRange=3-3
 2592                           ;'GPIOH_LCKR.LCK4`                     EQU 0x40021C1C,        4, base=16,    bitRange=4-4
 2593                           ;'GPIOH_LCKR.LCK5`                     EQU 0x40021C1C,        4, base=16,    bitRange=5-5
 2594                           ;'GPIOH_LCKR.LCK6`                     EQU 0x40021C1C,        4, base=16,    bitRange=6-6
 2595                           ;'GPIOH_LCKR.LCK7`                     EQU 0x40021C1C,        4, base=16,    bitRange=7-7
 2596                           ;'GPIOH_LCKR.LCK8`                     EQU 0x40021C1C,        4, base=16,    bitRange=8-8
 2597                           ;'GPIOH_LCKR.LCK9`                     EQU 0x40021C1C,        4, base=16,    bitRange=9-9
 2598                           ;'GPIOH_LCKR.LCK10`                    EQU 0x40021C1C,        4, base=16,    bitRange=10-10
 2599                           ;'GPIOH_LCKR.LCK11`                    EQU 0x40021C1C,        4, base=16,    bitRange=11-11
 2600                           ;'GPIOH_LCKR.LCK12`                    EQU 0x40021C1C,        4, base=16,    bitRange=12-12
 2601                           ;'GPIOH_LCKR.LCK13`                    EQU 0x40021C1C,        4, base=16,    bitRange=13-13
 2602                           ;'GPIOH_LCKR.LCK14`                    EQU 0x40021C1C,        4, base=16,    bitRange=14-14
 2603                           ;'GPIOH_LCKR.LCK15`                    EQU 0x40021C1C,        4, base=16,    bitRange=15-15
 2604                           ;'GPIOH_LCKR.LCKK`                     EQU 0x40021C1C,        4, base=16,    bitRange=16-16
 2605                           
 2606                           GPIOH_AFRL                          EQU 0x40021C20
 2607                           ;'GPIOH_AFRL.AFRL0`                    EQU 0x40021C20,        4, base=16,    bitRange=0-3
 2608                           ;'GPIOH_AFRL.AFRL1`                    EQU 0x40021C20,        4, base=16,    bitRange=4-7
 2609                           ;'GPIOH_AFRL.AFRL2`                    EQU 0x40021C20,        4, base=16,    bitRange=8-11
 2610                           ;'GPIOH_AFRL.AFRL3`                    EQU 0x40021C20,        4, base=16,    bitRange=12-15
 2611                           ;'GPIOH_AFRL.AFRL4`                    EQU 0x40021C20,        4, base=16,    bitRange=16-19
 2612                           ;'GPIOH_AFRL.AFRL5`                    EQU 0x40021C20,        4, base=16,    bitRange=20-23
 2613                           ;'GPIOH_AFRL.AFRL6`                    EQU 0x40021C20,        4, base=16,    bitRange=24-27
 2614                           ;'GPIOH_AFRL.AFRL7`                    EQU 0x40021C20,        4, base=16,    bitRange=28-31
 2615                           
 2616                           GPIOH_AFRH                          EQU 0x40021C24
 2617                           ;'GPIOH_AFRH.AFRL8`                    EQU 0x40021C24,        4, base=16,    bitRange=0-3
 2618                           ;'GPIOH_AFRH.AFRL9`                    EQU 0x40021C24,        4, base=16,    bitRange=4-7
 2619                           ;'GPIOH_AFRH.AFRL10`                   EQU 0x40021C24,        4, base=16,    bitRange=8-11
 2620                           ;'GPIOH_AFRH.AFRL11`                   EQU 0x40021C24,        4, base=16,    bitRange=12-15
 2621                           ;'GPIOH_AFRH.AFRL12`                   EQU 0x40021C24,        4, base=16,    bitRange=16-19
 2622                           ;'GPIOH_AFRH.AFRL13`                   EQU 0x40021C24,        4, base=16,    bitRange=20-23
 2623                           ;'GPIOH_AFRH.AFRL14`                   EQU 0x40021C24,        4, base=16,    bitRange=24-27
 2624                           ;'GPIOH_AFRH.AFRL15`                   EQU 0x40021C24,        4, base=16,    bitRange=28-31
 2625                           
 2626                           
 2627                           ;
 2628                           ;               GPIOI
 2629                           ;
 2630                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2631                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2632                           
 2633                           GPIOI_MODER                         EQU 0x40022000
 2634                           ;'GPIOI_MODER.MODER0`                  EQU 0x40022000,        4, base=16,    bitRange=0-1
 2635                           ;'GPIOI_MODER.MODER1`                  EQU 0x40022000,        4, base=16,    bitRange=2-3
 2636                           ;'GPIOI_MODER.MODER2`                  EQU 0x40022000,        4, base=16,    bitRange=4-5
 2637                           ;'GPIOI_MODER.MODER3`                  EQU 0x40022000,        4, base=16,    bitRange=6-7
 2638                           ;'GPIOI_MODER.MODER4`                  EQU 0x40022000,        4, base=16,    bitRange=8-9
 2639                           ;'GPIOI_MODER.MODER5`                  EQU 0x40022000,        4, base=16,    bitRange=10-11
 2640                           ;'GPIOI_MODER.MODER6`                  EQU 0x40022000,        4, base=16,    bitRange=12-13
 2641                           ;'GPIOI_MODER.MODER7`                  EQU 0x40022000,        4, base=16,    bitRange=14-15
 2642                           ;'GPIOI_MODER.MODER8`                  EQU 0x40022000,        4, base=16,    bitRange=16-17
 2643                           ;'GPIOI_MODER.MODER9`                  EQU 0x40022000,        4, base=16,    bitRange=18-19
 2644                           ;'GPIOI_MODER.MODER10`                 EQU 0x40022000,        4, base=16,    bitRange=20-21
 2645                           ;'GPIOI_MODER.MODER11`                 EQU 0x40022000,        4, base=16,    bitRange=22-23
 2646                           ;'GPIOI_MODER.MODER12`                 EQU 0x40022000,        4, base=16,    bitRange=24-25
 2647                           ;'GPIOI_MODER.MODER13`                 EQU 0x40022000,        4, base=16,    bitRange=26-27
 2648                           ;'GPIOI_MODER.MODER14`                 EQU 0x40022000,        4, base=16,    bitRange=28-29
 2649                           ;'GPIOI_MODER.MODER15`                 EQU 0x40022000,        4, base=16,    bitRange=30-31
 2650                           
 2651                           GPIOI_OTYPER                        EQU 0x40022004
 2652                           ;'GPIOI_OTYPER.OT0`                    EQU 0x40022004,        4, base=16,    bitRange=0-0
 2653                           ;'GPIOI_OTYPER.OT1`                    EQU 0x40022004,        4, base=16,    bitRange=1-1
 2654                           ;'GPIOI_OTYPER.OT2`                    EQU 0x40022004,        4, base=16,    bitRange=2-2
 2655                           ;'GPIOI_OTYPER.OT3`                    EQU 0x40022004,        4, base=16,    bitRange=3-3
 2656                           ;'GPIOI_OTYPER.OT4`                    EQU 0x40022004,        4, base=16,    bitRange=4-4
 2657                           ;'GPIOI_OTYPER.OT5`                    EQU 0x40022004,        4, base=16,    bitRange=5-5
 2658                           ;'GPIOI_OTYPER.OT6`                    EQU 0x40022004,        4, base=16,    bitRange=6-6
 2659                           ;'GPIOI_OTYPER.OT7`                    EQU 0x40022004,        4, base=16,    bitRange=7-7
 2660                           ;'GPIOI_OTYPER.OT8`                    EQU 0x40022004,        4, base=16,    bitRange=8-8
 2661                           ;'GPIOI_OTYPER.OT9`                    EQU 0x40022004,        4, base=16,    bitRange=9-9
 2662                           ;'GPIOI_OTYPER.OT10`                   EQU 0x40022004,        4, base=16,    bitRange=10-10
 2663                           ;'GPIOI_OTYPER.OT11`                   EQU 0x40022004,        4, base=16,    bitRange=11-11
 2664                           ;'GPIOI_OTYPER.OT12`                   EQU 0x40022004,        4, base=16,    bitRange=12-12
 2665                           ;'GPIOI_OTYPER.OT13`                   EQU 0x40022004,        4, base=16,    bitRange=13-13
 2666                           ;'GPIOI_OTYPER.OT14`                   EQU 0x40022004,        4, base=16,    bitRange=14-14
 2667                           ;'GPIOI_OTYPER.OT15`                   EQU 0x40022004,        4, base=16,    bitRange=15-15
 2668                           
 2669                           GPIOI_OSPEEDR                       EQU 0x40022008
 2670                           ;'GPIOI_OSPEEDR.OSPEEDR0`              EQU 0x40022008,        4, base=16,    bitRange=0-1
 2671                           ;'GPIOI_OSPEEDR.OSPEEDR1`              EQU 0x40022008,        4, base=16,    bitRange=2-3
 2672                           ;'GPIOI_OSPEEDR.OSPEEDR2`              EQU 0x40022008,        4, base=16,    bitRange=4-5
 2673                           ;'GPIOI_OSPEEDR.OSPEEDR3`              EQU 0x40022008,        4, base=16,    bitRange=6-7
 2674                           ;'GPIOI_OSPEEDR.OSPEEDR4`              EQU 0x40022008,        4, base=16,    bitRange=8-9
 2675                           ;'GPIOI_OSPEEDR.OSPEEDR5`              EQU 0x40022008,        4, base=16,    bitRange=10-11
 2676                           ;'GPIOI_OSPEEDR.OSPEEDR6`              EQU 0x40022008,        4, base=16,    bitRange=12-13
 2677                           ;'GPIOI_OSPEEDR.OSPEEDR7`              EQU 0x40022008,        4, base=16,    bitRange=14-15
 2678                           ;'GPIOI_OSPEEDR.OSPEEDR8`              EQU 0x40022008,        4, base=16,    bitRange=16-17
 2679                           ;'GPIOI_OSPEEDR.OSPEEDR9`              EQU 0x40022008,        4, base=16,    bitRange=18-19
 2680                           ;'GPIOI_OSPEEDR.OSPEEDR10`             EQU 0x40022008,        4, base=16,    bitRange=20-21
 2681                           ;'GPIOI_OSPEEDR.OSPEEDR11`             EQU 0x40022008,        4, base=16,    bitRange=22-23
 2682                           ;'GPIOI_OSPEEDR.OSPEEDR12`             EQU 0x40022008,        4, base=16,    bitRange=24-25
 2683                           ;'GPIOI_OSPEEDR.OSPEEDR13`             EQU 0x40022008,        4, base=16,    bitRange=26-27
 2684                           ;'GPIOI_OSPEEDR.OSPEEDR14`             EQU 0x40022008,        4, base=16,    bitRange=28-29
 2685                           ;'GPIOI_OSPEEDR.OSPEEDR15`             EQU 0x40022008,        4, base=16,    bitRange=30-31
 2686                           
 2687                           GPIOI_PUPDR                         EQU 0x4002200C
 2688                           ;'GPIOI_PUPDR.PUPDR0`                  EQU 0x4002200C,        4, base=16,    bitRange=0-1
 2689                           ;'GPIOI_PUPDR.PUPDR1`                  EQU 0x4002200C,        4, base=16,    bitRange=2-3
 2690                           ;'GPIOI_PUPDR.PUPDR2`                  EQU 0x4002200C,        4, base=16,    bitRange=4-5
 2691                           ;'GPIOI_PUPDR.PUPDR3`                  EQU 0x4002200C,        4, base=16,    bitRange=6-7
 2692                           ;'GPIOI_PUPDR.PUPDR4`                  EQU 0x4002200C,        4, base=16,    bitRange=8-9
 2693                           ;'GPIOI_PUPDR.PUPDR5`                  EQU 0x4002200C,        4, base=16,    bitRange=10-11
 2694                           ;'GPIOI_PUPDR.PUPDR6`                  EQU 0x4002200C,        4, base=16,    bitRange=12-13
 2695                           ;'GPIOI_PUPDR.PUPDR7`                  EQU 0x4002200C,        4, base=16,    bitRange=14-15
 2696                           ;'GPIOI_PUPDR.PUPDR8`                  EQU 0x4002200C,        4, base=16,    bitRange=16-17
 2697                           ;'GPIOI_PUPDR.PUPDR9`                  EQU 0x4002200C,        4, base=16,    bitRange=18-19
 2698                           ;'GPIOI_PUPDR.PUPDR10`                 EQU 0x4002200C,        4, base=16,    bitRange=20-21
 2699                           ;'GPIOI_PUPDR.PUPDR11`                 EQU 0x4002200C,        4, base=16,    bitRange=22-23
 2700                           ;'GPIOI_PUPDR.PUPDR12`                 EQU 0x4002200C,        4, base=16,    bitRange=24-25
 2701                           ;'GPIOI_PUPDR.PUPDR13`                 EQU 0x4002200C,        4, base=16,    bitRange=26-27
 2702                           ;'GPIOI_PUPDR.PUPDR14`                 EQU 0x4002200C,        4, base=16,    bitRange=28-29
 2703                           ;'GPIOI_PUPDR.PUPDR15`                 EQU 0x4002200C,        4, base=16,    bitRange=30-31
 2704                           
 2705                           GPIOI_IDR                           EQU 0x40022010
 2706                           ;'GPIOI_IDR.IDR0`                      EQU 0x40022010,        4, base=16,    bitRange=0-0
 2707                           ;'GPIOI_IDR.IDR1`                      EQU 0x40022010,        4, base=16,    bitRange=1-1
 2708                           ;'GPIOI_IDR.IDR2`                      EQU 0x40022010,        4, base=16,    bitRange=2-2
 2709                           ;'GPIOI_IDR.IDR3`                      EQU 0x40022010,        4, base=16,    bitRange=3-3
 2710                           ;'GPIOI_IDR.IDR4`                      EQU 0x40022010,        4, base=16,    bitRange=4-4
 2711                           ;'GPIOI_IDR.IDR5`                      EQU 0x40022010,        4, base=16,    bitRange=5-5
 2712                           ;'GPIOI_IDR.IDR6`                      EQU 0x40022010,        4, base=16,    bitRange=6-6
 2713                           ;'GPIOI_IDR.IDR7`                      EQU 0x40022010,        4, base=16,    bitRange=7-7
 2714                           ;'GPIOI_IDR.IDR8`                      EQU 0x40022010,        4, base=16,    bitRange=8-8
 2715                           ;'GPIOI_IDR.IDR9`                      EQU 0x40022010,        4, base=16,    bitRange=9-9
 2716                           ;'GPIOI_IDR.IDR10`                     EQU 0x40022010,        4, base=16,    bitRange=10-10
 2717                           ;'GPIOI_IDR.IDR11`                     EQU 0x40022010,        4, base=16,    bitRange=11-11
 2718                           ;'GPIOI_IDR.IDR12`                     EQU 0x40022010,        4, base=16,    bitRange=12-12
 2719                           ;'GPIOI_IDR.IDR13`                     EQU 0x40022010,        4, base=16,    bitRange=13-13
 2720                           ;'GPIOI_IDR.IDR14`                     EQU 0x40022010,        4, base=16,    bitRange=14-14
 2721                           ;'GPIOI_IDR.IDR15`                     EQU 0x40022010,        4, base=16,    bitRange=15-15
 2722                           
 2723                           GPIOI_ODR                           EQU 0x40022014
 2724                           ;'GPIOI_ODR.ODR0`                      EQU 0x40022014,        4, base=16,    bitRange=0-0
 2725                           ;'GPIOI_ODR.ODR1`                      EQU 0x40022014,        4, base=16,    bitRange=1-1
 2726                           ;'GPIOI_ODR.ODR2`                      EQU 0x40022014,        4, base=16,    bitRange=2-2
 2727                           ;'GPIOI_ODR.ODR3`                      EQU 0x40022014,        4, base=16,    bitRange=3-3
 2728                           ;'GPIOI_ODR.ODR4`                      EQU 0x40022014,        4, base=16,    bitRange=4-4
 2729                           ;'GPIOI_ODR.ODR5`                      EQU 0x40022014,        4, base=16,    bitRange=5-5
 2730                           ;'GPIOI_ODR.ODR6`                      EQU 0x40022014,        4, base=16,    bitRange=6-6
 2731                           ;'GPIOI_ODR.ODR7`                      EQU 0x40022014,        4, base=16,    bitRange=7-7
 2732                           ;'GPIOI_ODR.ODR8`                      EQU 0x40022014,        4, base=16,    bitRange=8-8
 2733                           ;'GPIOI_ODR.ODR9`                      EQU 0x40022014,        4, base=16,    bitRange=9-9
 2734                           ;'GPIOI_ODR.ODR10`                     EQU 0x40022014,        4, base=16,    bitRange=10-10
 2735                           ;'GPIOI_ODR.ODR11`                     EQU 0x40022014,        4, base=16,    bitRange=11-11
 2736                           ;'GPIOI_ODR.ODR12`                     EQU 0x40022014,        4, base=16,    bitRange=12-12
 2737                           ;'GPIOI_ODR.ODR13`                     EQU 0x40022014,        4, base=16,    bitRange=13-13
 2738                           ;'GPIOI_ODR.ODR14`                     EQU 0x40022014,        4, base=16,    bitRange=14-14
 2739                           ;'GPIOI_ODR.ODR15`                     EQU 0x40022014,        4, base=16,    bitRange=15-15
 2740                           
 2741                           GPIOI_BSRR                          EQU 0x40022018
 2742                           ;'GPIOI_BSRR.BS0`                      EQU 0x40022018,        4, base=16,    bitRange=0-0
 2743                           ;'GPIOI_BSRR.BS1`                      EQU 0x40022018,        4, base=16,    bitRange=1-1
 2744                           ;'GPIOI_BSRR.BS2`                      EQU 0x40022018,        4, base=16,    bitRange=2-2
 2745                           ;'GPIOI_BSRR.BS3`                      EQU 0x40022018,        4, base=16,    bitRange=3-3
 2746                           ;'GPIOI_BSRR.BS4`                      EQU 0x40022018,        4, base=16,    bitRange=4-4
 2747                           ;'GPIOI_BSRR.BS5`                      EQU 0x40022018,        4, base=16,    bitRange=5-5
 2748                           ;'GPIOI_BSRR.BS6`                      EQU 0x40022018,        4, base=16,    bitRange=6-6
 2749                           ;'GPIOI_BSRR.BS7`                      EQU 0x40022018,        4, base=16,    bitRange=7-7
 2750                           ;'GPIOI_BSRR.BS8`                      EQU 0x40022018,        4, base=16,    bitRange=8-8
 2751                           ;'GPIOI_BSRR.BS9`                      EQU 0x40022018,        4, base=16,    bitRange=9-9
 2752                           ;'GPIOI_BSRR.BS10`                     EQU 0x40022018,        4, base=16,    bitRange=10-10
 2753                           ;'GPIOI_BSRR.BS11`                     EQU 0x40022018,        4, base=16,    bitRange=11-11
 2754                           ;'GPIOI_BSRR.BS12`                     EQU 0x40022018,        4, base=16,    bitRange=12-12
 2755                           ;'GPIOI_BSRR.BS13`                     EQU 0x40022018,        4, base=16,    bitRange=13-13
 2756                           ;'GPIOI_BSRR.BS14`                     EQU 0x40022018,        4, base=16,    bitRange=14-14
 2757                           ;'GPIOI_BSRR.BS15`                     EQU 0x40022018,        4, base=16,    bitRange=15-15
 2758                           ;'GPIOI_BSRR.BR0`                      EQU 0x40022018,        4, base=16,    bitRange=16-16
 2759                           ;'GPIOI_BSRR.BR1`                      EQU 0x40022018,        4, base=16,    bitRange=17-17
 2760                           ;'GPIOI_BSRR.BR2`                      EQU 0x40022018,        4, base=16,    bitRange=18-18
 2761                           ;'GPIOI_BSRR.BR3`                      EQU 0x40022018,        4, base=16,    bitRange=19-19
 2762                           ;'GPIOI_BSRR.BR4`                      EQU 0x40022018,        4, base=16,    bitRange=20-20
 2763                           ;'GPIOI_BSRR.BR5`                      EQU 0x40022018,        4, base=16,    bitRange=21-21
 2764                           ;'GPIOI_BSRR.BR6`                      EQU 0x40022018,        4, base=16,    bitRange=22-22
 2765                           ;'GPIOI_BSRR.BR7`                      EQU 0x40022018,        4, base=16,    bitRange=23-23
 2766                           ;'GPIOI_BSRR.BR8`                      EQU 0x40022018,        4, base=16,    bitRange=24-24
 2767                           ;'GPIOI_BSRR.BR9`                      EQU 0x40022018,        4, base=16,    bitRange=25-25
 2768                           ;'GPIOI_BSRR.BR10`                     EQU 0x40022018,        4, base=16,    bitRange=26-26
 2769                           ;'GPIOI_BSRR.BR11`                     EQU 0x40022018,        4, base=16,    bitRange=27-27
 2770                           ;'GPIOI_BSRR.BR12`                     EQU 0x40022018,        4, base=16,    bitRange=28-28
 2771                           ;'GPIOI_BSRR.BR13`                     EQU 0x40022018,        4, base=16,    bitRange=29-29
 2772                           ;'GPIOI_BSRR.BR14`                     EQU 0x40022018,        4, base=16,    bitRange=30-30
 2773                           ;'GPIOI_BSRR.BR15`                     EQU 0x40022018,        4, base=16,    bitRange=31-31
 2774                           
 2775                           GPIOI_LCKR                          EQU 0x4002201C
 2776                           ;'GPIOI_LCKR.LCK0`                     EQU 0x4002201C,        4, base=16,    bitRange=0-0
 2777                           ;'GPIOI_LCKR.LCK1`                     EQU 0x4002201C,        4, base=16,    bitRange=1-1
 2778                           ;'GPIOI_LCKR.LCK2`                     EQU 0x4002201C,        4, base=16,    bitRange=2-2
 2779                           ;'GPIOI_LCKR.LCK3`                     EQU 0x4002201C,        4, base=16,    bitRange=3-3
 2780                           ;'GPIOI_LCKR.LCK4`                     EQU 0x4002201C,        4, base=16,    bitRange=4-4
 2781                           ;'GPIOI_LCKR.LCK5`                     EQU 0x4002201C,        4, base=16,    bitRange=5-5
 2782                           ;'GPIOI_LCKR.LCK6`                     EQU 0x4002201C,        4, base=16,    bitRange=6-6
 2783                           ;'GPIOI_LCKR.LCK7`                     EQU 0x4002201C,        4, base=16,    bitRange=7-7
 2784                           ;'GPIOI_LCKR.LCK8`                     EQU 0x4002201C,        4, base=16,    bitRange=8-8
 2785                           ;'GPIOI_LCKR.LCK9`                     EQU 0x4002201C,        4, base=16,    bitRange=9-9
 2786                           ;'GPIOI_LCKR.LCK10`                    EQU 0x4002201C,        4, base=16,    bitRange=10-10
 2787                           ;'GPIOI_LCKR.LCK11`                    EQU 0x4002201C,        4, base=16,    bitRange=11-11
 2788                           ;'GPIOI_LCKR.LCK12`                    EQU 0x4002201C,        4, base=16,    bitRange=12-12
 2789                           ;'GPIOI_LCKR.LCK13`                    EQU 0x4002201C,        4, base=16,    bitRange=13-13
 2790                           ;'GPIOI_LCKR.LCK14`                    EQU 0x4002201C,        4, base=16,    bitRange=14-14
 2791                           ;'GPIOI_LCKR.LCK15`                    EQU 0x4002201C,        4, base=16,    bitRange=15-15
 2792                           ;'GPIOI_LCKR.LCKK`                     EQU 0x4002201C,        4, base=16,    bitRange=16-16
 2793                           
 2794                           GPIOI_AFRL                          EQU 0x40022020
 2795                           ;'GPIOI_AFRL.AFRL0`                    EQU 0x40022020,        4, base=16,    bitRange=0-3
 2796                           ;'GPIOI_AFRL.AFRL1`                    EQU 0x40022020,        4, base=16,    bitRange=4-7
 2797                           ;'GPIOI_AFRL.AFRL2`                    EQU 0x40022020,        4, base=16,    bitRange=8-11
 2798                           ;'GPIOI_AFRL.AFRL3`                    EQU 0x40022020,        4, base=16,    bitRange=12-15
 2799                           ;'GPIOI_AFRL.AFRL4`                    EQU 0x40022020,        4, base=16,    bitRange=16-19
 2800                           ;'GPIOI_AFRL.AFRL5`                    EQU 0x40022020,        4, base=16,    bitRange=20-23
 2801                           ;'GPIOI_AFRL.AFRL6`                    EQU 0x40022020,        4, base=16,    bitRange=24-27
 2802                           ;'GPIOI_AFRL.AFRL7`                    EQU 0x40022020,        4, base=16,    bitRange=28-31
 2803                           
 2804                           GPIOI_AFRH                          EQU 0x40022024
 2805                           ;'GPIOI_AFRH.AFRL8`                    EQU 0x40022024,        4, base=16,    bitRange=0-3
 2806                           ;'GPIOI_AFRH.AFRL9`                    EQU 0x40022024,        4, base=16,    bitRange=4-7
 2807                           ;'GPIOI_AFRH.AFRL10`                   EQU 0x40022024,        4, base=16,    bitRange=8-11
 2808                           ;'GPIOI_AFRH.AFRL11`                   EQU 0x40022024,        4, base=16,    bitRange=12-15
 2809                           ;'GPIOI_AFRH.AFRL12`                   EQU 0x40022024,        4, base=16,    bitRange=16-19
 2810                           ;'GPIOI_AFRH.AFRL13`                   EQU 0x40022024,        4, base=16,    bitRange=20-23
 2811                           ;'GPIOI_AFRH.AFRL14`                   EQU 0x40022024,        4, base=16,    bitRange=24-27
 2812                           ;'GPIOI_AFRH.AFRL15`                   EQU 0x40022024,        4, base=16,    bitRange=28-31
 2813                           
 2814                           
 2815                           ;
 2816                           ;               SYSCFG
 2817                           ;
 2818                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2819                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2820                           
 2821                           SYSCFG_MEMRMP                       EQU 0x40013800
 2822                           ;'SYSCFG_MEMRMP.MEM_MODE`              EQU 0x40013800,        4, base=16,    bitRange=0-1
 2823                           
 2824                           SYSCFG_PMC                          EQU 0x40013804
 2825                           ;'SYSCFG_PMC.MII_RMII_SEL`             EQU 0x40013804,        4, base=16,    bitRange=23-23
 2826                           
 2827                           SYSCFG_EXTICR1                      EQU 0x40013808
 2828                           ;'SYSCFG_EXTICR1.EXTI0`                EQU 0x40013808,        4, base=16,    bitRange=0-3
 2829                           ;'SYSCFG_EXTICR1.EXTI1`                EQU 0x40013808,        4, base=16,    bitRange=4-7
 2830                           ;'SYSCFG_EXTICR1.EXTI2`                EQU 0x40013808,        4, base=16,    bitRange=8-11
 2831                           ;'SYSCFG_EXTICR1.EXTI3`                EQU 0x40013808,        4, base=16,    bitRange=12-15
 2832                           
 2833                           SYSCFG_EXTICR2                      EQU 0x4001380C
 2834                           ;'SYSCFG_EXTICR2.EXTI0`                EQU 0x4001380C,        4, base=16,    bitRange=0-3
 2835                           ;'SYSCFG_EXTICR2.EXTI1`                EQU 0x4001380C,        4, base=16,    bitRange=4-7
 2836                           ;'SYSCFG_EXTICR2.EXTI2`                EQU 0x4001380C,        4, base=16,    bitRange=8-11
 2837                           ;'SYSCFG_EXTICR2.EXTI3`                EQU 0x4001380C,        4, base=16,    bitRange=12-15
 2838                           
 2839                           SYSCFG_EXTICR3                      EQU 0x40013810
 2840                           ;'SYSCFG_EXTICR3.EXTI0`                EQU 0x40013810,        4, base=16,    bitRange=0-3
 2841                           ;'SYSCFG_EXTICR3.EXTI1`                EQU 0x40013810,        4, base=16,    bitRange=4-7
 2842                           ;'SYSCFG_EXTICR3.EXTI2`                EQU 0x40013810,        4, base=16,    bitRange=8-11
 2843                           ;'SYSCFG_EXTICR3.EXTI3`                EQU 0x40013810,        4, base=16,    bitRange=12-15
 2844                           
 2845                           SYSCFG_EXTICR4                      EQU 0x40013814
 2846                           ;'SYSCFG_EXTICR4.EXTI0`                EQU 0x40013814,        4, base=16,    bitRange=0-3
 2847                           ;'SYSCFG_EXTICR4.EXTI1`                EQU 0x40013814,        4, base=16,    bitRange=4-7
 2848                           ;'SYSCFG_EXTICR4.EXTI2`                EQU 0x40013814,        4, base=16,    bitRange=8-11
 2849                           ;'SYSCFG_EXTICR4.EXTI3`                EQU 0x40013814,        4, base=16,    bitRange=12-15
 2850                           
 2851                           
 2852                           ;
 2853                           ;               DMA1
 2854                           ;
 2855                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 2856                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 2857                           
 2858                           DMA1_LISR                           EQU 0x40026000
 2859                           ;'DMA1_LISR.FEIF0`                     EQU 0x40026000,        4, base=16,    bitRange=0-0
 2860                           ;'DMA1_LISR.DMEIF0`                    EQU 0x40026000,        4, base=16,    bitRange=2-2
 2861                           ;'DMA1_LISR.TEIF0`                     EQU 0x40026000,        4, base=16,    bitRange=3-3
 2862                           ;'DMA1_LISR.HTIF0`                     EQU 0x40026000,        4, base=16,    bitRange=4-4
 2863                           ;'DMA1_LISR.TCIF0`                     EQU 0x40026000,        4, base=16,    bitRange=5-5
 2864                           ;'DMA1_LISR.FEIF1`                     EQU 0x40026000,        4, base=16,    bitRange=6-6
 2865                           ;'DMA1_LISR.DMEIF1`                    EQU 0x40026000,        4, base=16,    bitRange=8-8
 2866                           ;'DMA1_LISR.TEIF1`                     EQU 0x40026000,        4, base=16,    bitRange=9-9
 2867                           ;'DMA1_LISR.HTIF1`                     EQU 0x40026000,        4, base=16,    bitRange=10-10
 2868                           ;'DMA1_LISR.TCIF1`                     EQU 0x40026000,        4, base=16,    bitRange=11-11
 2869                           ;'DMA1_LISR.FEIF2`                     EQU 0x40026000,        4, base=16,    bitRange=16-16
 2870                           ;'DMA1_LISR.DMEIF2`                    EQU 0x40026000,        4, base=16,    bitRange=18-18
 2871                           ;'DMA1_LISR.TEIF2`                     EQU 0x40026000,        4, base=16,    bitRange=19-19
 2872                           ;'DMA1_LISR.HTIF2`                     EQU 0x40026000,        4, base=16,    bitRange=20-20
 2873                           ;'DMA1_LISR.TCIF2`                     EQU 0x40026000,        4, base=16,    bitRange=21-21
 2874                           ;'DMA1_LISR.FEIF3`                     EQU 0x40026000,        4, base=16,    bitRange=22-22
 2875                           ;'DMA1_LISR.DMEIF3`                    EQU 0x40026000,        4, base=16,    bitRange=24-24
 2876                           ;'DMA1_LISR.TEIF3`                     EQU 0x40026000,        4, base=16,    bitRange=25-25
 2877                           ;'DMA1_LISR.HTIF3`                     EQU 0x40026000,        4, base=16,    bitRange=26-26
 2878                           ;'DMA1_LISR.TCIF3`                     EQU 0x40026000,        4, base=16,    bitRange=27-27
 2879                           
 2880                           DMA1_HISR                           EQU 0x40026004
 2881                           ;'DMA1_HISR.FEIF4`                     EQU 0x40026004,        4, base=16,    bitRange=0-0
 2882                           ;'DMA1_HISR.DMEIF4`                    EQU 0x40026004,        4, base=16,    bitRange=2-2
 2883                           ;'DMA1_HISR.TEIF4`                     EQU 0x40026004,        4, base=16,    bitRange=3-3
 2884                           ;'DMA1_HISR.HTIF4`                     EQU 0x40026004,        4, base=16,    bitRange=4-4
 2885                           ;'DMA1_HISR.TCIF4`                     EQU 0x40026004,        4, base=16,    bitRange=5-5
 2886                           ;'DMA1_HISR.FEIF5`                     EQU 0x40026004,        4, base=16,    bitRange=6-6
 2887                           ;'DMA1_HISR.DMEIF5`                    EQU 0x40026004,        4, base=16,    bitRange=8-8
 2888                           ;'DMA1_HISR.TEIF5`                     EQU 0x40026004,        4, base=16,    bitRange=9-9
 2889                           ;'DMA1_HISR.HTIF5`                     EQU 0x40026004,        4, base=16,    bitRange=10-10
 2890                           ;'DMA1_HISR.TCIF5`                     EQU 0x40026004,        4, base=16,    bitRange=11-11
 2891                           ;'DMA1_HISR.FEIF6`                     EQU 0x40026004,        4, base=16,    bitRange=16-16
 2892                           ;'DMA1_HISR.DMEIF6`                    EQU 0x40026004,        4, base=16,    bitRange=18-18
 2893                           ;'DMA1_HISR.TEIF6`                     EQU 0x40026004,        4, base=16,    bitRange=19-19
 2894                           ;'DMA1_HISR.HTIF6`                     EQU 0x40026004,        4, base=16,    bitRange=20-20
 2895                           ;'DMA1_HISR.TCIF6`                     EQU 0x40026004,        4, base=16,    bitRange=21-21
 2896                           ;'DMA1_HISR.FEIF7`                     EQU 0x40026004,        4, base=16,    bitRange=22-22
 2897                           ;'DMA1_HISR.DMEIF7`                    EQU 0x40026004,        4, base=16,    bitRange=24-24
 2898                           ;'DMA1_HISR.TEIF7`                     EQU 0x40026004,        4, base=16,    bitRange=25-25
 2899                           ;'DMA1_HISR.HTIF7`                     EQU 0x40026004,        4, base=16,    bitRange=26-26
 2900                           ;'DMA1_HISR.TCIF7`                     EQU 0x40026004,        4, base=16,    bitRange=27-27
 2901                           
 2902                           DMA1_LIFCR                          EQU 0x40026008
 2903                           ;'DMA1_LIFCR.CFEIF0`                   EQU 0x40026008,        4, base=16,    bitRange=0-0
 2904                           ;'DMA1_LIFCR.CDMEIF0`                  EQU 0x40026008,        4, base=16,    bitRange=2-2
 2905                           ;'DMA1_LIFCR.CTEIF0`                   EQU 0x40026008,        4, base=16,    bitRange=3-3
 2906                           ;'DMA1_LIFCR.CHTIF0`                   EQU 0x40026008,        4, base=16,    bitRange=4-4
 2907                           ;'DMA1_LIFCR.CTCIF0`                   EQU 0x40026008,        4, base=16,    bitRange=5-5
 2908                           ;'DMA1_LIFCR.CFEIF1`                   EQU 0x40026008,        4, base=16,    bitRange=6-6
 2909                           ;'DMA1_LIFCR.CDMEIF1`                  EQU 0x40026008,        4, base=16,    bitRange=8-8
 2910                           ;'DMA1_LIFCR.CTEIF1`                   EQU 0x40026008,        4, base=16,    bitRange=9-9
 2911                           ;'DMA1_LIFCR.CHTIF1`                   EQU 0x40026008,        4, base=16,    bitRange=10-10
 2912                           ;'DMA1_LIFCR.CTCIF1`                   EQU 0x40026008,        4, base=16,    bitRange=11-11
 2913                           ;'DMA1_LIFCR.CFEIF2`                   EQU 0x40026008,        4, base=16,    bitRange=16-16
 2914                           ;'DMA1_LIFCR.CDMEIF2`                  EQU 0x40026008,        4, base=16,    bitRange=18-18
 2915                           ;'DMA1_LIFCR.CTEIF2`                   EQU 0x40026008,        4, base=16,    bitRange=19-19
 2916                           ;'DMA1_LIFCR.CHTIF2`                   EQU 0x40026008,        4, base=16,    bitRange=20-20
 2917                           ;'DMA1_LIFCR.CTCIF2`                   EQU 0x40026008,        4, base=16,    bitRange=21-21
 2918                           ;'DMA1_LIFCR.CFEIF3`                   EQU 0x40026008,        4, base=16,    bitRange=22-22
 2919                           ;'DMA1_LIFCR.CDMEIF3`                  EQU 0x40026008,        4, base=16,    bitRange=24-24
 2920                           ;'DMA1_LIFCR.CTEIF3`                   EQU 0x40026008,        4, base=16,    bitRange=25-25
 2921                           ;'DMA1_LIFCR.CHTIF3`                   EQU 0x40026008,        4, base=16,    bitRange=26-26
 2922                           ;'DMA1_LIFCR.CTCIF3`                   EQU 0x40026008,        4, base=16,    bitRange=27-27
 2923                           
 2924                           DMA1_HIFCR                          EQU 0x4002600C
 2925                           ;'DMA1_HIFCR.CFEIF4`                   EQU 0x4002600C,        4, base=16,    bitRange=0-0
 2926                           ;'DMA1_HIFCR.CDMEIF4`                  EQU 0x4002600C,        4, base=16,    bitRange=2-2
 2927                           ;'DMA1_HIFCR.CTEIF4`                   EQU 0x4002600C,        4, base=16,    bitRange=3-3
 2928                           ;'DMA1_HIFCR.CHTIF4`                   EQU 0x4002600C,        4, base=16,    bitRange=4-4
 2929                           ;'DMA1_HIFCR.CTCIF4`                   EQU 0x4002600C,        4, base=16,    bitRange=5-5
 2930                           ;'DMA1_HIFCR.CFEIF5`                   EQU 0x4002600C,        4, base=16,    bitRange=6-6
 2931                           ;'DMA1_HIFCR.CDMEIF5`                  EQU 0x4002600C,        4, base=16,    bitRange=8-8
 2932                           ;'DMA1_HIFCR.CTEIF5`                   EQU 0x4002600C,        4, base=16,    bitRange=9-9
 2933                           ;'DMA1_HIFCR.CHTIF5`                   EQU 0x4002600C,        4, base=16,    bitRange=10-10
 2934                           ;'DMA1_HIFCR.CTCIF5`                   EQU 0x4002600C,        4, base=16,    bitRange=11-11
 2935                           ;'DMA1_HIFCR.CFEIF6`                   EQU 0x4002600C,        4, base=16,    bitRange=16-16
 2936                           ;'DMA1_HIFCR.CDMEIF6`                  EQU 0x4002600C,        4, base=16,    bitRange=18-18
 2937                           ;'DMA1_HIFCR.CTEIF6`                   EQU 0x4002600C,        4, base=16,    bitRange=19-19
 2938                           ;'DMA1_HIFCR.CHTIF6`                   EQU 0x4002600C,        4, base=16,    bitRange=20-20
 2939                           ;'DMA1_HIFCR.CTCIF6`                   EQU 0x4002600C,        4, base=16,    bitRange=21-21
 2940                           ;'DMA1_HIFCR.CFEIF7`                   EQU 0x4002600C,        4, base=16,    bitRange=22-22
 2941                           ;'DMA1_HIFCR.CDMEIF7`                  EQU 0x4002600C,        4, base=16,    bitRange=24-24
 2942                           ;'DMA1_HIFCR.CTEIF7`                   EQU 0x4002600C,        4, base=16,    bitRange=25-25
 2943                           ;'DMA1_HIFCR.CHTIF7`                   EQU 0x4002600C,        4, base=16,    bitRange=26-26
 2944                           ;'DMA1_HIFCR.CTCIF7`                   EQU 0x4002600C,        4, base=16,    bitRange=27-27
 2945                           
 2946                           DMA1_S0CR                           EQU 0x40026010
 2947                           ;'DMA1_S0CR.EN`                        EQU 0x40026010,        4, base=16,    bitRange=0-0
 2948                           ;'DMA1_S0CR.DMEIE`                     EQU 0x40026010,        4, base=16,    bitRange=1-1
 2949                           ;'DMA1_S0CR.TEIE`                      EQU 0x40026010,        4, base=16,    bitRange=2-2
 2950                           ;'DMA1_S0CR.HTIE`                      EQU 0x40026010,        4, base=16,    bitRange=3-3
 2951                           ;'DMA1_S0CR.TCIE`                      EQU 0x40026010,        4, base=16,    bitRange=4-4
 2952                           ;'DMA1_S0CR.PFCTRL`                    EQU 0x40026010,        4, base=16,    bitRange=5-5
 2953                           ;'DMA1_S0CR.DIR`                       EQU 0x40026010,        4, base=16,    bitRange=6-7
 2954                           ;'DMA1_S0CR.CIRC`                      EQU 0x40026010,        4, base=16,    bitRange=8-8
 2955                           ;'DMA1_S0CR.PINC`                      EQU 0x40026010,        4, base=16,    bitRange=9-9
 2956                           ;'DMA1_S0CR.MINC`                      EQU 0x40026010,        4, base=16,    bitRange=10-10
 2957                           ;'DMA1_S0CR.PSIZE`                     EQU 0x40026010,        4, base=16,    bitRange=11-12
 2958                           ;'DMA1_S0CR.MSIZE`                     EQU 0x40026010,        4, base=16,    bitRange=13-14
 2959                           ;'DMA1_S0CR.PINCOS`                    EQU 0x40026010,        4, base=16,    bitRange=15-15
 2960                           ;'DMA1_S0CR.PL`                        EQU 0x40026010,        4, base=16,    bitRange=16-17
 2961                           ;'DMA1_S0CR.DBM`                       EQU 0x40026010,        4, base=16,    bitRange=18-18
 2962                           ;'DMA1_S0CR.CT`                        EQU 0x40026010,        4, base=16,    bitRange=19-19
 2963                           ;'DMA1_S0CR.PBURST`                    EQU 0x40026010,        4, base=16,    bitRange=21-22
 2964                           ;'DMA1_S0CR.MBURST`                    EQU 0x40026010,        4, base=16,    bitRange=23-24
 2965                           ;'DMA1_S0CR.CHSEL`                     EQU 0x40026010,        4, base=16,    bitRange=25-27
 2966                           
 2967                           DMA1_S0NDTR                         EQU 0x40026014
 2968                           ;'DMA1_S0NDTR.NDT`                     EQU 0x40026014,        4, base=16,    bitRange=0-15
 2969                           
 2970                           DMA1_S0PAR                          EQU 0x40026018
 2971                           
 2972                           DMA1_S0M0AR                         EQU 0x4002601C
 2973                           
 2974                           DMA1_S0M1AR                         EQU 0x40026020
 2975                           
 2976                           DMA1_S0FCR                          EQU 0x40026024
 2977                           ;'DMA1_S0FCR.FTH`                      EQU 0x40026024,        4, base=16,    bitRange=0-1
 2978                           ;'DMA1_S0FCR.DMDIS`                    EQU 0x40026024,        4, base=16,    bitRange=2-2
 2979                           ;'DMA1_S0FCR.FS`                       EQU 0x40026024,        4, base=16,    bitRange=3-5
 2980                           ;'DMA1_S0FCR.FEIE`                     EQU 0x40026024,        4, base=16,    bitRange=7-7
 2981                           
 2982                           DMA1_S1CR                           EQU 0x40026028
 2983                           ;'DMA1_S1CR.EN`                        EQU 0x40026028,        4, base=16,    bitRange=0-0
 2984                           ;'DMA1_S1CR.DMEIE`                     EQU 0x40026028,        4, base=16,    bitRange=1-1
 2985                           ;'DMA1_S1CR.TEIE`                      EQU 0x40026028,        4, base=16,    bitRange=2-2
 2986                           ;'DMA1_S1CR.HTIE`                      EQU 0x40026028,        4, base=16,    bitRange=3-3
 2987                           ;'DMA1_S1CR.TCIE`                      EQU 0x40026028,        4, base=16,    bitRange=4-4
 2988                           ;'DMA1_S1CR.PFCTRL`                    EQU 0x40026028,        4, base=16,    bitRange=5-5
 2989                           ;'DMA1_S1CR.DIR`                       EQU 0x40026028,        4, base=16,    bitRange=6-7
 2990                           ;'DMA1_S1CR.CIRC`                      EQU 0x40026028,        4, base=16,    bitRange=8-8
 2991                           ;'DMA1_S1CR.PINC`                      EQU 0x40026028,        4, base=16,    bitRange=9-9
 2992                           ;'DMA1_S1CR.MINC`                      EQU 0x40026028,        4, base=16,    bitRange=10-10
 2993                           ;'DMA1_S1CR.PSIZE`                     EQU 0x40026028,        4, base=16,    bitRange=11-12
 2994                           ;'DMA1_S1CR.MSIZE`                     EQU 0x40026028,        4, base=16,    bitRange=13-14
 2995                           ;'DMA1_S1CR.PINCOS`                    EQU 0x40026028,        4, base=16,    bitRange=15-15
 2996                           ;'DMA1_S1CR.PL`                        EQU 0x40026028,        4, base=16,    bitRange=16-17
 2997                           ;'DMA1_S1CR.DBM`                       EQU 0x40026028,        4, base=16,    bitRange=18-18
 2998                           ;'DMA1_S1CR.CT`                        EQU 0x40026028,        4, base=16,    bitRange=19-19
 2999                           ;'DMA1_S1CR.PBURST`                    EQU 0x40026028,        4, base=16,    bitRange=21-22
 3000                           ;'DMA1_S1CR.MBURST`                    EQU 0x40026028,        4, base=16,    bitRange=23-24
 3001                           ;'DMA1_S1CR.CHSEL`                     EQU 0x40026028,        4, base=16,    bitRange=25-27
 3002                           
 3003                           DMA1_S1NDTR                         EQU 0x4002602C
 3004                           ;'DMA1_S1NDTR.NDT`                     EQU 0x4002602C,        4, base=16,    bitRange=0-15
 3005                           
 3006                           DMA1_S1PAR                          EQU 0x40026030
 3007                           
 3008                           DMA1_S1M0AR                         EQU 0x40026034
 3009                           
 3010                           DMA1_S1M1AR                         EQU 0x40026038
 3011                           
 3012                           DMA1_S1FCR                          EQU 0x4002603C
 3013                           ;'DMA1_S1FCR.FTH`                      EQU 0x4002603C,        4, base=16,    bitRange=0-1
 3014                           ;'DMA1_S1FCR.DMDIS`                    EQU 0x4002603C,        4, base=16,    bitRange=2-2
 3015                           ;'DMA1_S1FCR.FS`                       EQU 0x4002603C,        4, base=16,    bitRange=3-5
 3016                           ;'DMA1_S1FCR.FEIE`                     EQU 0x4002603C,        4, base=16,    bitRange=7-7
 3017                           
 3018                           DMA1_S2CR                           EQU 0x40026040
 3019                           ;'DMA1_S2CR.EN`                        EQU 0x40026040,        4, base=16,    bitRange=0-0
 3020                           ;'DMA1_S2CR.DMEIE`                     EQU 0x40026040,        4, base=16,    bitRange=1-1
 3021                           ;'DMA1_S2CR.TEIE`                      EQU 0x40026040,        4, base=16,    bitRange=2-2
 3022                           ;'DMA1_S2CR.HTIE`                      EQU 0x40026040,        4, base=16,    bitRange=3-3
 3023                           ;'DMA1_S2CR.TCIE`                      EQU 0x40026040,        4, base=16,    bitRange=4-4
 3024                           ;'DMA1_S2CR.PFCTRL`                    EQU 0x40026040,        4, base=16,    bitRange=5-5
 3025                           ;'DMA1_S2CR.DIR`                       EQU 0x40026040,        4, base=16,    bitRange=6-7
 3026                           ;'DMA1_S2CR.CIRC`                      EQU 0x40026040,        4, base=16,    bitRange=8-8
 3027                           ;'DMA1_S2CR.PINC`                      EQU 0x40026040,        4, base=16,    bitRange=9-9
 3028                           ;'DMA1_S2CR.MINC`                      EQU 0x40026040,        4, base=16,    bitRange=10-10
 3029                           ;'DMA1_S2CR.PSIZE`                     EQU 0x40026040,        4, base=16,    bitRange=11-12
 3030                           ;'DMA1_S2CR.MSIZE`                     EQU 0x40026040,        4, base=16,    bitRange=13-14
 3031                           ;'DMA1_S2CR.PINCOS`                    EQU 0x40026040,        4, base=16,    bitRange=15-15
 3032                           ;'DMA1_S2CR.PL`                        EQU 0x40026040,        4, base=16,    bitRange=16-17
 3033                           ;'DMA1_S2CR.DBM`                       EQU 0x40026040,        4, base=16,    bitRange=18-18
 3034                           ;'DMA1_S2CR.CT`                        EQU 0x40026040,        4, base=16,    bitRange=19-19
 3035                           ;'DMA1_S2CR.PBURST`                    EQU 0x40026040,        4, base=16,    bitRange=21-22
 3036                           ;'DMA1_S2CR.MBURST`                    EQU 0x40026040,        4, base=16,    bitRange=23-24
 3037                           ;'DMA1_S2CR.CHSEL`                     EQU 0x40026040,        4, base=16,    bitRange=25-27
 3038                           
 3039                           DMA1_S2NDTR                         EQU 0x40026044
 3040                           ;'DMA1_S2NDTR.NDT`                     EQU 0x40026044,        4, base=16,    bitRange=0-15
 3041                           
 3042                           DMA1_S2PAR                          EQU 0x40026048
 3043                           
 3044                           DMA1_S2M0AR                         EQU 0x4002604C
 3045                           
 3046                           DMA1_S2M1AR                         EQU 0x40026050
 3047                           
 3048                           DMA1_S2FCR                          EQU 0x40026054
 3049                           ;'DMA1_S2FCR.FTH`                      EQU 0x40026054,        4, base=16,    bitRange=0-1
 3050                           ;'DMA1_S2FCR.DMDIS`                    EQU 0x40026054,        4, base=16,    bitRange=2-2
 3051                           ;'DMA1_S2FCR.FS`                       EQU 0x40026054,        4, base=16,    bitRange=3-5
 3052                           ;'DMA1_S2FCR.FEIE`                     EQU 0x40026054,        4, base=16,    bitRange=7-7
 3053                           
 3054                           DMA1_S3CR                           EQU 0x40026058
 3055                           ;'DMA1_S3CR.EN`                        EQU 0x40026058,        4, base=16,    bitRange=0-0
 3056                           ;'DMA1_S3CR.DMEIE`                     EQU 0x40026058,        4, base=16,    bitRange=1-1
 3057                           ;'DMA1_S3CR.TEIE`                      EQU 0x40026058,        4, base=16,    bitRange=2-2
 3058                           ;'DMA1_S3CR.HTIE`                      EQU 0x40026058,        4, base=16,    bitRange=3-3
 3059                           ;'DMA1_S3CR.TCIE`                      EQU 0x40026058,        4, base=16,    bitRange=4-4
 3060                           ;'DMA1_S3CR.PFCTRL`                    EQU 0x40026058,        4, base=16,    bitRange=5-5
 3061                           ;'DMA1_S3CR.DIR`                       EQU 0x40026058,        4, base=16,    bitRange=6-7
 3062                           ;'DMA1_S3CR.CIRC`                      EQU 0x40026058,        4, base=16,    bitRange=8-8
 3063                           ;'DMA1_S3CR.PINC`                      EQU 0x40026058,        4, base=16,    bitRange=9-9
 3064                           ;'DMA1_S3CR.MINC`                      EQU 0x40026058,        4, base=16,    bitRange=10-10
 3065                           ;'DMA1_S3CR.PSIZE`                     EQU 0x40026058,        4, base=16,    bitRange=11-12
 3066                           ;'DMA1_S3CR.MSIZE`                     EQU 0x40026058,        4, base=16,    bitRange=13-14
 3067                           ;'DMA1_S3CR.PINCOS`                    EQU 0x40026058,        4, base=16,    bitRange=15-15
 3068                           ;'DMA1_S3CR.PL`                        EQU 0x40026058,        4, base=16,    bitRange=16-17
 3069                           ;'DMA1_S3CR.DBM`                       EQU 0x40026058,        4, base=16,    bitRange=18-18
 3070                           ;'DMA1_S3CR.CT`                        EQU 0x40026058,        4, base=16,    bitRange=19-19
 3071                           ;'DMA1_S3CR.PBURST`                    EQU 0x40026058,        4, base=16,    bitRange=21-22
 3072                           ;'DMA1_S3CR.MBURST`                    EQU 0x40026058,        4, base=16,    bitRange=23-24
 3073                           ;'DMA1_S3CR.CHSEL`                     EQU 0x40026058,        4, base=16,    bitRange=25-27
 3074                           
 3075                           DMA1_S3NDTR                         EQU 0x4002605C
 3076                           ;'DMA1_S3NDTR.NDT`                     EQU 0x4002605C,        4, base=16,    bitRange=0-15
 3077                           
 3078                           DMA1_S3PAR                          EQU 0x40026060
 3079                           
 3080                           DMA1_S3M0AR                         EQU 0x40026064
 3081                           
 3082                           DMA1_S3M1AR                         EQU 0x40026068
 3083                           
 3084                           DMA1_S3FCR                          EQU 0x4002606C
 3085                           ;'DMA1_S3FCR.FTH`                      EQU 0x4002606C,        4, base=16,    bitRange=0-1
 3086                           ;'DMA1_S3FCR.DMDIS`                    EQU 0x4002606C,        4, base=16,    bitRange=2-2
 3087                           ;'DMA1_S3FCR.FS`                       EQU 0x4002606C,        4, base=16,    bitRange=3-5
 3088                           ;'DMA1_S3FCR.FEIE`                     EQU 0x4002606C,        4, base=16,    bitRange=7-7
 3089                           
 3090                           DMA1_S4CR                           EQU 0x40026070
 3091                           ;'DMA1_S4CR.EN`                        EQU 0x40026070,        4, base=16,    bitRange=0-0
 3092                           ;'DMA1_S4CR.DMEIE`                     EQU 0x40026070,        4, base=16,    bitRange=1-1
 3093                           ;'DMA1_S4CR.TEIE`                      EQU 0x40026070,        4, base=16,    bitRange=2-2
 3094                           ;'DMA1_S4CR.HTIE`                      EQU 0x40026070,        4, base=16,    bitRange=3-3
 3095                           ;'DMA1_S4CR.TCIE`                      EQU 0x40026070,        4, base=16,    bitRange=4-4
 3096                           ;'DMA1_S4CR.PFCTRL`                    EQU 0x40026070,        4, base=16,    bitRange=5-5
 3097                           ;'DMA1_S4CR.DIR`                       EQU 0x40026070,        4, base=16,    bitRange=6-7
 3098                           ;'DMA1_S4CR.CIRC`                      EQU 0x40026070,        4, base=16,    bitRange=8-8
 3099                           ;'DMA1_S4CR.PINC`                      EQU 0x40026070,        4, base=16,    bitRange=9-9
 3100                           ;'DMA1_S4CR.MINC`                      EQU 0x40026070,        4, base=16,    bitRange=10-10
 3101                           ;'DMA1_S4CR.PSIZE`                     EQU 0x40026070,        4, base=16,    bitRange=11-12
 3102                           ;'DMA1_S4CR.MSIZE`                     EQU 0x40026070,        4, base=16,    bitRange=13-14
 3103                           ;'DMA1_S4CR.PINCOS`                    EQU 0x40026070,        4, base=16,    bitRange=15-15
 3104                           ;'DMA1_S4CR.PL`                        EQU 0x40026070,        4, base=16,    bitRange=16-17
 3105                           ;'DMA1_S4CR.DBM`                       EQU 0x40026070,        4, base=16,    bitRange=18-18
 3106                           ;'DMA1_S4CR.CT`                        EQU 0x40026070,        4, base=16,    bitRange=19-19
 3107                           ;'DMA1_S4CR.PBURST`                    EQU 0x40026070,        4, base=16,    bitRange=21-22
 3108                           ;'DMA1_S4CR.MBURST`                    EQU 0x40026070,        4, base=16,    bitRange=23-24
 3109                           ;'DMA1_S4CR.CHSEL`                     EQU 0x40026070,        4, base=16,    bitRange=25-27
 3110                           
 3111                           DMA1_S4NDTR                         EQU 0x40026074
 3112                           ;'DMA1_S4NDTR.NDT`                     EQU 0x40026074,        4, base=16,    bitRange=0-15
 3113                           
 3114                           DMA1_S4PAR                          EQU 0x40026078
 3115                           
 3116                           DMA1_S4M0AR                         EQU 0x4002607C
 3117                           
 3118                           DMA1_S4M1AR                         EQU 0x40026080
 3119                           
 3120                           DMA1_S4FCR                          EQU 0x40026084
 3121                           ;'DMA1_S4FCR.FTH`                      EQU 0x40026084,        4, base=16,    bitRange=0-1
 3122                           ;'DMA1_S4FCR.DMDIS`                    EQU 0x40026084,        4, base=16,    bitRange=2-2
 3123                           ;'DMA1_S4FCR.FS`                       EQU 0x40026084,        4, base=16,    bitRange=3-5
 3124                           ;'DMA1_S4FCR.FEIE`                     EQU 0x40026084,        4, base=16,    bitRange=7-7
 3125                           
 3126                           DMA1_S5CR                           EQU 0x40026088
 3127                           ;'DMA1_S5CR.EN`                        EQU 0x40026088,        4, base=16,    bitRange=0-0
 3128                           ;'DMA1_S5CR.DMEIE`                     EQU 0x40026088,        4, base=16,    bitRange=1-1
 3129                           ;'DMA1_S5CR.TEIE`                      EQU 0x40026088,        4, base=16,    bitRange=2-2
 3130                           ;'DMA1_S5CR.HTIE`                      EQU 0x40026088,        4, base=16,    bitRange=3-3
 3131                           ;'DMA1_S5CR.TCIE`                      EQU 0x40026088,        4, base=16,    bitRange=4-4
 3132                           ;'DMA1_S5CR.PFCTRL`                    EQU 0x40026088,        4, base=16,    bitRange=5-5
 3133                           ;'DMA1_S5CR.DIR`                       EQU 0x40026088,        4, base=16,    bitRange=6-7
 3134                           ;'DMA1_S5CR.CIRC`                      EQU 0x40026088,        4, base=16,    bitRange=8-8
 3135                           ;'DMA1_S5CR.PINC`                      EQU 0x40026088,        4, base=16,    bitRange=9-9
 3136                           ;'DMA1_S5CR.MINC`                      EQU 0x40026088,        4, base=16,    bitRange=10-10
 3137                           ;'DMA1_S5CR.PSIZE`                     EQU 0x40026088,        4, base=16,    bitRange=11-12
 3138                           ;'DMA1_S5CR.MSIZE`                     EQU 0x40026088,        4, base=16,    bitRange=13-14
 3139                           ;'DMA1_S5CR.PINCOS`                    EQU 0x40026088,        4, base=16,    bitRange=15-15
 3140                           ;'DMA1_S5CR.PL`                        EQU 0x40026088,        4, base=16,    bitRange=16-17
 3141                           ;'DMA1_S5CR.DBM`                       EQU 0x40026088,        4, base=16,    bitRange=18-18
 3142                           ;'DMA1_S5CR.CT`                        EQU 0x40026088,        4, base=16,    bitRange=19-19
 3143                           ;'DMA1_S5CR.PBURST`                    EQU 0x40026088,        4, base=16,    bitRange=21-22
 3144                           ;'DMA1_S5CR.MBURST`                    EQU 0x40026088,        4, base=16,    bitRange=23-24
 3145                           ;'DMA1_S5CR.CHSEL`                     EQU 0x40026088,        4, base=16,    bitRange=25-27
 3146                           
 3147                           DMA1_S5NDTR                         EQU 0x4002608C
 3148                           ;'DMA1_S5NDTR.NDT`                     EQU 0x4002608C,        4, base=16,    bitRange=0-15
 3149                           
 3150                           DMA1_S5PAR                          EQU 0x40026090
 3151                           
 3152                           DMA1_S5M0AR                         EQU 0x40026094
 3153                           
 3154                           DMA1_S5M1AR                         EQU 0x40026098
 3155                           
 3156                           DMA1_S5FCR                          EQU 0x4002609C
 3157                           ;'DMA1_S5FCR.FTH`                      EQU 0x4002609C,        4, base=16,    bitRange=0-1
 3158                           ;'DMA1_S5FCR.DMDIS`                    EQU 0x4002609C,        4, base=16,    bitRange=2-2
 3159                           ;'DMA1_S5FCR.FS`                       EQU 0x4002609C,        4, base=16,    bitRange=3-5
 3160                           ;'DMA1_S5FCR.FEIE`                     EQU 0x4002609C,        4, base=16,    bitRange=7-7
 3161                           
 3162                           DMA1_S6CR                           EQU 0x400260A0
 3163                           ;'DMA1_S6CR.EN`                        EQU 0x400260A0,        4, base=16,    bitRange=0-0
 3164                           ;'DMA1_S6CR.DMEIE`                     EQU 0x400260A0,        4, base=16,    bitRange=1-1
 3165                           ;'DMA1_S6CR.TEIE`                      EQU 0x400260A0,        4, base=16,    bitRange=2-2
 3166                           ;'DMA1_S6CR.HTIE`                      EQU 0x400260A0,        4, base=16,    bitRange=3-3
 3167                           ;'DMA1_S6CR.TCIE`                      EQU 0x400260A0,        4, base=16,    bitRange=4-4
 3168                           ;'DMA1_S6CR.PFCTRL`                    EQU 0x400260A0,        4, base=16,    bitRange=5-5
 3169                           ;'DMA1_S6CR.DIR`                       EQU 0x400260A0,        4, base=16,    bitRange=6-7
 3170                           ;'DMA1_S6CR.CIRC`                      EQU 0x400260A0,        4, base=16,    bitRange=8-8
 3171                           ;'DMA1_S6CR.PINC`                      EQU 0x400260A0,        4, base=16,    bitRange=9-9
 3172                           ;'DMA1_S6CR.MINC`                      EQU 0x400260A0,        4, base=16,    bitRange=10-10
 3173                           ;'DMA1_S6CR.PSIZE`                     EQU 0x400260A0,        4, base=16,    bitRange=11-12
 3174                           ;'DMA1_S6CR.MSIZE`                     EQU 0x400260A0,        4, base=16,    bitRange=13-14
 3175                           ;'DMA1_S6CR.PINCOS`                    EQU 0x400260A0,        4, base=16,    bitRange=15-15
 3176                           ;'DMA1_S6CR.PL`                        EQU 0x400260A0,        4, base=16,    bitRange=16-17
 3177                           ;'DMA1_S6CR.DBM`                       EQU 0x400260A0,        4, base=16,    bitRange=18-18
 3178                           ;'DMA1_S6CR.CT`                        EQU 0x400260A0,        4, base=16,    bitRange=19-19
 3179                           ;'DMA1_S6CR.PBURST`                    EQU 0x400260A0,        4, base=16,    bitRange=21-22
 3180                           ;'DMA1_S6CR.MBURST`                    EQU 0x400260A0,        4, base=16,    bitRange=23-24
 3181                           ;'DMA1_S6CR.CHSEL`                     EQU 0x400260A0,        4, base=16,    bitRange=25-27
 3182                           
 3183                           DMA1_S6NDTR                         EQU 0x400260A4
 3184                           ;'DMA1_S6NDTR.NDT`                     EQU 0x400260A4,        4, base=16,    bitRange=0-15
 3185                           
 3186                           DMA1_S6PAR                          EQU 0x400260A8
 3187                           
 3188                           DMA1_S6M0AR                         EQU 0x400260AC
 3189                           
 3190                           DMA1_S6M1AR                         EQU 0x400260B0
 3191                           
 3192                           DMA1_S6FCR                          EQU 0x400260B4
 3193                           ;'DMA1_S6FCR.FTH`                      EQU 0x400260B4,        4, base=16,    bitRange=0-1
 3194                           ;'DMA1_S6FCR.DMDIS`                    EQU 0x400260B4,        4, base=16,    bitRange=2-2
 3195                           ;'DMA1_S6FCR.FS`                       EQU 0x400260B4,        4, base=16,    bitRange=3-5
 3196                           ;'DMA1_S6FCR.FEIE`                     EQU 0x400260B4,        4, base=16,    bitRange=7-7
 3197                           
 3198                           DMA1_S7CR                           EQU 0x400260B8
 3199                           ;'DMA1_S7CR.EN`                        EQU 0x400260B8,        4, base=16,    bitRange=0-0
 3200                           ;'DMA1_S7CR.DMEIE`                     EQU 0x400260B8,        4, base=16,    bitRange=1-1
 3201                           ;'DMA1_S7CR.TEIE`                      EQU 0x400260B8,        4, base=16,    bitRange=2-2
 3202                           ;'DMA1_S7CR.HTIE`                      EQU 0x400260B8,        4, base=16,    bitRange=3-3
 3203                           ;'DMA1_S7CR.TCIE`                      EQU 0x400260B8,        4, base=16,    bitRange=4-4
 3204                           ;'DMA1_S7CR.PFCTRL`                    EQU 0x400260B8,        4, base=16,    bitRange=5-5
 3205                           ;'DMA1_S7CR.DIR`                       EQU 0x400260B8,        4, base=16,    bitRange=6-7
 3206                           ;'DMA1_S7CR.CIRC`                      EQU 0x400260B8,        4, base=16,    bitRange=8-8
 3207                           ;'DMA1_S7CR.PINC`                      EQU 0x400260B8,        4, base=16,    bitRange=9-9
 3208                           ;'DMA1_S7CR.MINC`                      EQU 0x400260B8,        4, base=16,    bitRange=10-10
 3209                           ;'DMA1_S7CR.PSIZE`                     EQU 0x400260B8,        4, base=16,    bitRange=11-12
 3210                           ;'DMA1_S7CR.MSIZE`                     EQU 0x400260B8,        4, base=16,    bitRange=13-14
 3211                           ;'DMA1_S7CR.PINCOS`                    EQU 0x400260B8,        4, base=16,    bitRange=15-15
 3212                           ;'DMA1_S7CR.PL`                        EQU 0x400260B8,        4, base=16,    bitRange=16-17
 3213                           ;'DMA1_S7CR.DBM`                       EQU 0x400260B8,        4, base=16,    bitRange=18-18
 3214                           ;'DMA1_S7CR.CT`                        EQU 0x400260B8,        4, base=16,    bitRange=19-19
 3215                           ;'DMA1_S7CR.PBURST`                    EQU 0x400260B8,        4, base=16,    bitRange=21-22
 3216                           ;'DMA1_S7CR.MBURST`                    EQU 0x400260B8,        4, base=16,    bitRange=23-24
 3217                           ;'DMA1_S7CR.CHSEL`                     EQU 0x400260B8,        4, base=16,    bitRange=25-27
 3218                           
 3219                           DMA1_S7NDTR                         EQU 0x400260BC
 3220                           ;'DMA1_S7NDTR.NDT`                     EQU 0x400260BC,        4, base=16,    bitRange=0-15
 3221                           
 3222                           DMA1_S7PAR                          EQU 0x400260C0
 3223                           
 3224                           DMA1_S7M0AR                         EQU 0x400260C4
 3225                           
 3226                           DMA1_S7M1AR                         EQU 0x400260C8
 3227                           
 3228                           DMA1_S7FCR                          EQU 0x400260CC
 3229                           ;'DMA1_S7FCR.FTH`                      EQU 0x400260CC,        4, base=16,    bitRange=0-1
 3230                           ;'DMA1_S7FCR.DMDIS`                    EQU 0x400260CC,        4, base=16,    bitRange=2-2
 3231                           ;'DMA1_S7FCR.FS`                       EQU 0x400260CC,        4, base=16,    bitRange=3-5
 3232                           ;'DMA1_S7FCR.FEIE`                     EQU 0x400260CC,        4, base=16,    bitRange=7-7
 3233                           
 3234                           
 3235                           ;
 3236                           ;               DMA2
 3237                           ;
 3238                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3239                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3240                           
 3241                           DMA2_LISR                           EQU 0x40026400
 3242                           ;'DMA2_LISR.FEIF0`                     EQU 0x40026400,        4, base=16,    bitRange=0-0
 3243                           ;'DMA2_LISR.DMEIF0`                    EQU 0x40026400,        4, base=16,    bitRange=2-2
 3244                           ;'DMA2_LISR.TEIF0`                     EQU 0x40026400,        4, base=16,    bitRange=3-3
 3245                           ;'DMA2_LISR.HTIF0`                     EQU 0x40026400,        4, base=16,    bitRange=4-4
 3246                           ;'DMA2_LISR.TCIF0`                     EQU 0x40026400,        4, base=16,    bitRange=5-5
 3247                           ;'DMA2_LISR.FEIF1`                     EQU 0x40026400,        4, base=16,    bitRange=6-6
 3248                           ;'DMA2_LISR.DMEIF1`                    EQU 0x40026400,        4, base=16,    bitRange=8-8
 3249                           ;'DMA2_LISR.TEIF1`                     EQU 0x40026400,        4, base=16,    bitRange=9-9
 3250                           ;'DMA2_LISR.HTIF1`                     EQU 0x40026400,        4, base=16,    bitRange=10-10
 3251                           ;'DMA2_LISR.TCIF1`                     EQU 0x40026400,        4, base=16,    bitRange=11-11
 3252                           ;'DMA2_LISR.FEIF2`                     EQU 0x40026400,        4, base=16,    bitRange=16-16
 3253                           ;'DMA2_LISR.DMEIF2`                    EQU 0x40026400,        4, base=16,    bitRange=18-18
 3254                           ;'DMA2_LISR.TEIF2`                     EQU 0x40026400,        4, base=16,    bitRange=19-19
 3255                           ;'DMA2_LISR.HTIF2`                     EQU 0x40026400,        4, base=16,    bitRange=20-20
 3256                           ;'DMA2_LISR.TCIF2`                     EQU 0x40026400,        4, base=16,    bitRange=21-21
 3257                           ;'DMA2_LISR.FEIF3`                     EQU 0x40026400,        4, base=16,    bitRange=22-22
 3258                           ;'DMA2_LISR.DMEIF3`                    EQU 0x40026400,        4, base=16,    bitRange=24-24
 3259                           ;'DMA2_LISR.TEIF3`                     EQU 0x40026400,        4, base=16,    bitRange=25-25
 3260                           ;'DMA2_LISR.HTIF3`                     EQU 0x40026400,        4, base=16,    bitRange=26-26
 3261                           ;'DMA2_LISR.TCIF3`                     EQU 0x40026400,        4, base=16,    bitRange=27-27
 3262                           
 3263                           DMA2_HISR                           EQU 0x40026404
 3264                           ;'DMA2_HISR.FEIF4`                     EQU 0x40026404,        4, base=16,    bitRange=0-0
 3265                           ;'DMA2_HISR.DMEIF4`                    EQU 0x40026404,        4, base=16,    bitRange=2-2
 3266                           ;'DMA2_HISR.TEIF4`                     EQU 0x40026404,        4, base=16,    bitRange=3-3
 3267                           ;'DMA2_HISR.HTIF4`                     EQU 0x40026404,        4, base=16,    bitRange=4-4
 3268                           ;'DMA2_HISR.TCIF4`                     EQU 0x40026404,        4, base=16,    bitRange=5-5
 3269                           ;'DMA2_HISR.FEIF5`                     EQU 0x40026404,        4, base=16,    bitRange=6-6
 3270                           ;'DMA2_HISR.DMEIF5`                    EQU 0x40026404,        4, base=16,    bitRange=8-8
 3271                           ;'DMA2_HISR.TEIF5`                     EQU 0x40026404,        4, base=16,    bitRange=9-9
 3272                           ;'DMA2_HISR.HTIF5`                     EQU 0x40026404,        4, base=16,    bitRange=10-10
 3273                           ;'DMA2_HISR.TCIF5`                     EQU 0x40026404,        4, base=16,    bitRange=11-11
 3274                           ;'DMA2_HISR.FEIF6`                     EQU 0x40026404,        4, base=16,    bitRange=16-16
 3275                           ;'DMA2_HISR.DMEIF6`                    EQU 0x40026404,        4, base=16,    bitRange=18-18
 3276                           ;'DMA2_HISR.TEIF6`                     EQU 0x40026404,        4, base=16,    bitRange=19-19
 3277                           ;'DMA2_HISR.HTIF6`                     EQU 0x40026404,        4, base=16,    bitRange=20-20
 3278                           ;'DMA2_HISR.TCIF6`                     EQU 0x40026404,        4, base=16,    bitRange=21-21
 3279                           ;'DMA2_HISR.FEIF7`                     EQU 0x40026404,        4, base=16,    bitRange=22-22
 3280                           ;'DMA2_HISR.DMEIF7`                    EQU 0x40026404,        4, base=16,    bitRange=24-24
 3281                           ;'DMA2_HISR.TEIF7`                     EQU 0x40026404,        4, base=16,    bitRange=25-25
 3282                           ;'DMA2_HISR.HTIF7`                     EQU 0x40026404,        4, base=16,    bitRange=26-26
 3283                           ;'DMA2_HISR.TCIF7`                     EQU 0x40026404,        4, base=16,    bitRange=27-27
 3284                           
 3285                           DMA2_LIFCR                          EQU 0x40026408
 3286                           ;'DMA2_LIFCR.CFEIF0`                   EQU 0x40026408,        4, base=16,    bitRange=0-0
 3287                           ;'DMA2_LIFCR.CDMEIF0`                  EQU 0x40026408,        4, base=16,    bitRange=2-2
 3288                           ;'DMA2_LIFCR.CTEIF0`                   EQU 0x40026408,        4, base=16,    bitRange=3-3
 3289                           ;'DMA2_LIFCR.CHTIF0`                   EQU 0x40026408,        4, base=16,    bitRange=4-4
 3290                           ;'DMA2_LIFCR.CTCIF0`                   EQU 0x40026408,        4, base=16,    bitRange=5-5
 3291                           ;'DMA2_LIFCR.CFEIF1`                   EQU 0x40026408,        4, base=16,    bitRange=6-6
 3292                           ;'DMA2_LIFCR.CDMEIF1`                  EQU 0x40026408,        4, base=16,    bitRange=8-8
 3293                           ;'DMA2_LIFCR.CTEIF1`                   EQU 0x40026408,        4, base=16,    bitRange=9-9
 3294                           ;'DMA2_LIFCR.CHTIF1`                   EQU 0x40026408,        4, base=16,    bitRange=10-10
 3295                           ;'DMA2_LIFCR.CTCIF1`                   EQU 0x40026408,        4, base=16,    bitRange=11-11
 3296                           ;'DMA2_LIFCR.CFEIF2`                   EQU 0x40026408,        4, base=16,    bitRange=16-16
 3297                           ;'DMA2_LIFCR.CDMEIF2`                  EQU 0x40026408,        4, base=16,    bitRange=18-18
 3298                           ;'DMA2_LIFCR.CTEIF2`                   EQU 0x40026408,        4, base=16,    bitRange=19-19
 3299                           ;'DMA2_LIFCR.CHTIF2`                   EQU 0x40026408,        4, base=16,    bitRange=20-20
 3300                           ;'DMA2_LIFCR.CTCIF2`                   EQU 0x40026408,        4, base=16,    bitRange=21-21
 3301                           ;'DMA2_LIFCR.CFEIF3`                   EQU 0x40026408,        4, base=16,    bitRange=22-22
 3302                           ;'DMA2_LIFCR.CDMEIF3`                  EQU 0x40026408,        4, base=16,    bitRange=24-24
 3303                           ;'DMA2_LIFCR.CTEIF3`                   EQU 0x40026408,        4, base=16,    bitRange=25-25
 3304                           ;'DMA2_LIFCR.CHTIF3`                   EQU 0x40026408,        4, base=16,    bitRange=26-26
 3305                           ;'DMA2_LIFCR.CTCIF3`                   EQU 0x40026408,        4, base=16,    bitRange=27-27
 3306                           
 3307                           DMA2_HIFCR                          EQU 0x4002640C
 3308                           ;'DMA2_HIFCR.CFEIF4`                   EQU 0x4002640C,        4, base=16,    bitRange=0-0
 3309                           ;'DMA2_HIFCR.CDMEIF4`                  EQU 0x4002640C,        4, base=16,    bitRange=2-2
 3310                           ;'DMA2_HIFCR.CTEIF4`                   EQU 0x4002640C,        4, base=16,    bitRange=3-3
 3311                           ;'DMA2_HIFCR.CHTIF4`                   EQU 0x4002640C,        4, base=16,    bitRange=4-4
 3312                           ;'DMA2_HIFCR.CTCIF4`                   EQU 0x4002640C,        4, base=16,    bitRange=5-5
 3313                           ;'DMA2_HIFCR.CFEIF5`                   EQU 0x4002640C,        4, base=16,    bitRange=6-6
 3314                           ;'DMA2_HIFCR.CDMEIF5`                  EQU 0x4002640C,        4, base=16,    bitRange=8-8
 3315                           ;'DMA2_HIFCR.CTEIF5`                   EQU 0x4002640C,        4, base=16,    bitRange=9-9
 3316                           ;'DMA2_HIFCR.CHTIF5`                   EQU 0x4002640C,        4, base=16,    bitRange=10-10
 3317                           ;'DMA2_HIFCR.CTCIF5`                   EQU 0x4002640C,        4, base=16,    bitRange=11-11
 3318                           ;'DMA2_HIFCR.CFEIF6`                   EQU 0x4002640C,        4, base=16,    bitRange=16-16
 3319                           ;'DMA2_HIFCR.CDMEIF6`                  EQU 0x4002640C,        4, base=16,    bitRange=18-18
 3320                           ;'DMA2_HIFCR.CTEIF6`                   EQU 0x4002640C,        4, base=16,    bitRange=19-19
 3321                           ;'DMA2_HIFCR.CHTIF6`                   EQU 0x4002640C,        4, base=16,    bitRange=20-20
 3322                           ;'DMA2_HIFCR.CTCIF6`                   EQU 0x4002640C,        4, base=16,    bitRange=21-21
 3323                           ;'DMA2_HIFCR.CFEIF7`                   EQU 0x4002640C,        4, base=16,    bitRange=22-22
 3324                           ;'DMA2_HIFCR.CDMEIF7`                  EQU 0x4002640C,        4, base=16,    bitRange=24-24
 3325                           ;'DMA2_HIFCR.CTEIF7`                   EQU 0x4002640C,        4, base=16,    bitRange=25-25
 3326                           ;'DMA2_HIFCR.CHTIF7`                   EQU 0x4002640C,        4, base=16,    bitRange=26-26
 3327                           ;'DMA2_HIFCR.CTCIF7`                   EQU 0x4002640C,        4, base=16,    bitRange=27-27
 3328                           
 3329                           DMA2_S0CR                           EQU 0x40026410
 3330                           ;'DMA2_S0CR.EN`                        EQU 0x40026410,        4, base=16,    bitRange=0-0
 3331                           ;'DMA2_S0CR.DMEIE`                     EQU 0x40026410,        4, base=16,    bitRange=1-1
 3332                           ;'DMA2_S0CR.TEIE`                      EQU 0x40026410,        4, base=16,    bitRange=2-2
 3333                           ;'DMA2_S0CR.HTIE`                      EQU 0x40026410,        4, base=16,    bitRange=3-3
 3334                           ;'DMA2_S0CR.TCIE`                      EQU 0x40026410,        4, base=16,    bitRange=4-4
 3335                           ;'DMA2_S0CR.PFCTRL`                    EQU 0x40026410,        4, base=16,    bitRange=5-5
 3336                           ;'DMA2_S0CR.DIR`                       EQU 0x40026410,        4, base=16,    bitRange=6-7
 3337                           ;'DMA2_S0CR.CIRC`                      EQU 0x40026410,        4, base=16,    bitRange=8-8
 3338                           ;'DMA2_S0CR.PINC`                      EQU 0x40026410,        4, base=16,    bitRange=9-9
 3339                           ;'DMA2_S0CR.MINC`                      EQU 0x40026410,        4, base=16,    bitRange=10-10
 3340                           ;'DMA2_S0CR.PSIZE`                     EQU 0x40026410,        4, base=16,    bitRange=11-12
 3341                           ;'DMA2_S0CR.MSIZE`                     EQU 0x40026410,        4, base=16,    bitRange=13-14
 3342                           ;'DMA2_S0CR.PINCOS`                    EQU 0x40026410,        4, base=16,    bitRange=15-15
 3343                           ;'DMA2_S0CR.PL`                        EQU 0x40026410,        4, base=16,    bitRange=16-17
 3344                           ;'DMA2_S0CR.DBM`                       EQU 0x40026410,        4, base=16,    bitRange=18-18
 3345                           ;'DMA2_S0CR.CT`                        EQU 0x40026410,        4, base=16,    bitRange=19-19
 3346                           ;'DMA2_S0CR.PBURST`                    EQU 0x40026410,        4, base=16,    bitRange=21-22
 3347                           ;'DMA2_S0CR.MBURST`                    EQU 0x40026410,        4, base=16,    bitRange=23-24
 3348                           ;'DMA2_S0CR.CHSEL`                     EQU 0x40026410,        4, base=16,    bitRange=25-27
 3349                           
 3350                           DMA2_S0NDTR                         EQU 0x40026414
 3351                           ;'DMA2_S0NDTR.NDT`                     EQU 0x40026414,        4, base=16,    bitRange=0-15
 3352                           
 3353                           DMA2_S0PAR                          EQU 0x40026418
 3354                           
 3355                           DMA2_S0M0AR                         EQU 0x4002641C
 3356                           
 3357                           DMA2_S0M1AR                         EQU 0x40026420
 3358                           
 3359                           DMA2_S0FCR                          EQU 0x40026424
 3360                           ;'DMA2_S0FCR.FTH`                      EQU 0x40026424,        4, base=16,    bitRange=0-1
 3361                           ;'DMA2_S0FCR.DMDIS`                    EQU 0x40026424,        4, base=16,    bitRange=2-2
 3362                           ;'DMA2_S0FCR.FS`                       EQU 0x40026424,        4, base=16,    bitRange=3-5
 3363                           ;'DMA2_S0FCR.FEIE`                     EQU 0x40026424,        4, base=16,    bitRange=7-7
 3364                           
 3365                           DMA2_S1CR                           EQU 0x40026428
 3366                           ;'DMA2_S1CR.EN`                        EQU 0x40026428,        4, base=16,    bitRange=0-0
 3367                           ;'DMA2_S1CR.DMEIE`                     EQU 0x40026428,        4, base=16,    bitRange=1-1
 3368                           ;'DMA2_S1CR.TEIE`                      EQU 0x40026428,        4, base=16,    bitRange=2-2
 3369                           ;'DMA2_S1CR.HTIE`                      EQU 0x40026428,        4, base=16,    bitRange=3-3
 3370                           ;'DMA2_S1CR.TCIE`                      EQU 0x40026428,        4, base=16,    bitRange=4-4
 3371                           ;'DMA2_S1CR.PFCTRL`                    EQU 0x40026428,        4, base=16,    bitRange=5-5
 3372                           ;'DMA2_S1CR.DIR`                       EQU 0x40026428,        4, base=16,    bitRange=6-7
 3373                           ;'DMA2_S1CR.CIRC`                      EQU 0x40026428,        4, base=16,    bitRange=8-8
 3374                           ;'DMA2_S1CR.PINC`                      EQU 0x40026428,        4, base=16,    bitRange=9-9
 3375                           ;'DMA2_S1CR.MINC`                      EQU 0x40026428,        4, base=16,    bitRange=10-10
 3376                           ;'DMA2_S1CR.PSIZE`                     EQU 0x40026428,        4, base=16,    bitRange=11-12
 3377                           ;'DMA2_S1CR.MSIZE`                     EQU 0x40026428,        4, base=16,    bitRange=13-14
 3378                           ;'DMA2_S1CR.PINCOS`                    EQU 0x40026428,        4, base=16,    bitRange=15-15
 3379                           ;'DMA2_S1CR.PL`                        EQU 0x40026428,        4, base=16,    bitRange=16-17
 3380                           ;'DMA2_S1CR.DBM`                       EQU 0x40026428,        4, base=16,    bitRange=18-18
 3381                           ;'DMA2_S1CR.CT`                        EQU 0x40026428,        4, base=16,    bitRange=19-19
 3382                           ;'DMA2_S1CR.PBURST`                    EQU 0x40026428,        4, base=16,    bitRange=21-22
 3383                           ;'DMA2_S1CR.MBURST`                    EQU 0x40026428,        4, base=16,    bitRange=23-24
 3384                           ;'DMA2_S1CR.CHSEL`                     EQU 0x40026428,        4, base=16,    bitRange=25-27
 3385                           
 3386                           DMA2_S1NDTR                         EQU 0x4002642C
 3387                           ;'DMA2_S1NDTR.NDT`                     EQU 0x4002642C,        4, base=16,    bitRange=0-15
 3388                           
 3389                           DMA2_S1PAR                          EQU 0x40026430
 3390                           
 3391                           DMA2_S1M0AR                         EQU 0x40026434
 3392                           
 3393                           DMA2_S1M1AR                         EQU 0x40026438
 3394                           
 3395                           DMA2_S1FCR                          EQU 0x4002643C
 3396                           ;'DMA2_S1FCR.FTH`                      EQU 0x4002643C,        4, base=16,    bitRange=0-1
 3397                           ;'DMA2_S1FCR.DMDIS`                    EQU 0x4002643C,        4, base=16,    bitRange=2-2
 3398                           ;'DMA2_S1FCR.FS`                       EQU 0x4002643C,        4, base=16,    bitRange=3-5
 3399                           ;'DMA2_S1FCR.FEIE`                     EQU 0x4002643C,        4, base=16,    bitRange=7-7
 3400                           
 3401                           DMA2_S2CR                           EQU 0x40026440
 3402                           ;'DMA2_S2CR.EN`                        EQU 0x40026440,        4, base=16,    bitRange=0-0
 3403                           ;'DMA2_S2CR.DMEIE`                     EQU 0x40026440,        4, base=16,    bitRange=1-1
 3404                           ;'DMA2_S2CR.TEIE`                      EQU 0x40026440,        4, base=16,    bitRange=2-2
 3405                           ;'DMA2_S2CR.HTIE`                      EQU 0x40026440,        4, base=16,    bitRange=3-3
 3406                           ;'DMA2_S2CR.TCIE`                      EQU 0x40026440,        4, base=16,    bitRange=4-4
 3407                           ;'DMA2_S2CR.PFCTRL`                    EQU 0x40026440,        4, base=16,    bitRange=5-5
 3408                           ;'DMA2_S2CR.DIR`                       EQU 0x40026440,        4, base=16,    bitRange=6-7
 3409                           ;'DMA2_S2CR.CIRC`                      EQU 0x40026440,        4, base=16,    bitRange=8-8
 3410                           ;'DMA2_S2CR.PINC`                      EQU 0x40026440,        4, base=16,    bitRange=9-9
 3411                           ;'DMA2_S2CR.MINC`                      EQU 0x40026440,        4, base=16,    bitRange=10-10
 3412                           ;'DMA2_S2CR.PSIZE`                     EQU 0x40026440,        4, base=16,    bitRange=11-12
 3413                           ;'DMA2_S2CR.MSIZE`                     EQU 0x40026440,        4, base=16,    bitRange=13-14
 3414                           ;'DMA2_S2CR.PINCOS`                    EQU 0x40026440,        4, base=16,    bitRange=15-15
 3415                           ;'DMA2_S2CR.PL`                        EQU 0x40026440,        4, base=16,    bitRange=16-17
 3416                           ;'DMA2_S2CR.DBM`                       EQU 0x40026440,        4, base=16,    bitRange=18-18
 3417                           ;'DMA2_S2CR.CT`                        EQU 0x40026440,        4, base=16,    bitRange=19-19
 3418                           ;'DMA2_S2CR.PBURST`                    EQU 0x40026440,        4, base=16,    bitRange=21-22
 3419                           ;'DMA2_S2CR.MBURST`                    EQU 0x40026440,        4, base=16,    bitRange=23-24
 3420                           ;'DMA2_S2CR.CHSEL`                     EQU 0x40026440,        4, base=16,    bitRange=25-27
 3421                           
 3422                           DMA2_S2NDTR                         EQU 0x40026444
 3423                           ;'DMA2_S2NDTR.NDT`                     EQU 0x40026444,        4, base=16,    bitRange=0-15
 3424                           
 3425                           DMA2_S2PAR                          EQU 0x40026448
 3426                           
 3427                           DMA2_S2M0AR                         EQU 0x4002644C
 3428                           
 3429                           DMA2_S2M1AR                         EQU 0x40026450
 3430                           
 3431                           DMA2_S2FCR                          EQU 0x40026454
 3432                           ;'DMA2_S2FCR.FTH`                      EQU 0x40026454,        4, base=16,    bitRange=0-1
 3433                           ;'DMA2_S2FCR.DMDIS`                    EQU 0x40026454,        4, base=16,    bitRange=2-2
 3434                           ;'DMA2_S2FCR.FS`                       EQU 0x40026454,        4, base=16,    bitRange=3-5
 3435                           ;'DMA2_S2FCR.FEIE`                     EQU 0x40026454,        4, base=16,    bitRange=7-7
 3436                           
 3437                           DMA2_S3CR                           EQU 0x40026458
 3438                           ;'DMA2_S3CR.EN`                        EQU 0x40026458,        4, base=16,    bitRange=0-0
 3439                           ;'DMA2_S3CR.DMEIE`                     EQU 0x40026458,        4, base=16,    bitRange=1-1
 3440                           ;'DMA2_S3CR.TEIE`                      EQU 0x40026458,        4, base=16,    bitRange=2-2
 3441                           ;'DMA2_S3CR.HTIE`                      EQU 0x40026458,        4, base=16,    bitRange=3-3
 3442                           ;'DMA2_S3CR.TCIE`                      EQU 0x40026458,        4, base=16,    bitRange=4-4
 3443                           ;'DMA2_S3CR.PFCTRL`                    EQU 0x40026458,        4, base=16,    bitRange=5-5
 3444                           ;'DMA2_S3CR.DIR`                       EQU 0x40026458,        4, base=16,    bitRange=6-7
 3445                           ;'DMA2_S3CR.CIRC`                      EQU 0x40026458,        4, base=16,    bitRange=8-8
 3446                           ;'DMA2_S3CR.PINC`                      EQU 0x40026458,        4, base=16,    bitRange=9-9
 3447                           ;'DMA2_S3CR.MINC`                      EQU 0x40026458,        4, base=16,    bitRange=10-10
 3448                           ;'DMA2_S3CR.PSIZE`                     EQU 0x40026458,        4, base=16,    bitRange=11-12
 3449                           ;'DMA2_S3CR.MSIZE`                     EQU 0x40026458,        4, base=16,    bitRange=13-14
 3450                           ;'DMA2_S3CR.PINCOS`                    EQU 0x40026458,        4, base=16,    bitRange=15-15
 3451                           ;'DMA2_S3CR.PL`                        EQU 0x40026458,        4, base=16,    bitRange=16-17
 3452                           ;'DMA2_S3CR.DBM`                       EQU 0x40026458,        4, base=16,    bitRange=18-18
 3453                           ;'DMA2_S3CR.CT`                        EQU 0x40026458,        4, base=16,    bitRange=19-19
 3454                           ;'DMA2_S3CR.PBURST`                    EQU 0x40026458,        4, base=16,    bitRange=21-22
 3455                           ;'DMA2_S3CR.MBURST`                    EQU 0x40026458,        4, base=16,    bitRange=23-24
 3456                           ;'DMA2_S3CR.CHSEL`                     EQU 0x40026458,        4, base=16,    bitRange=25-27
 3457                           
 3458                           DMA2_S3NDTR                         EQU 0x4002645C
 3459                           ;'DMA2_S3NDTR.NDT`                     EQU 0x4002645C,        4, base=16,    bitRange=0-15
 3460                           
 3461                           DMA2_S3PAR                          EQU 0x40026460
 3462                           
 3463                           DMA2_S3M0AR                         EQU 0x40026464
 3464                           
 3465                           DMA2_S3M1AR                         EQU 0x40026468
 3466                           
 3467                           DMA2_S3FCR                          EQU 0x4002646C
 3468                           ;'DMA2_S3FCR.FTH`                      EQU 0x4002646C,        4, base=16,    bitRange=0-1
 3469                           ;'DMA2_S3FCR.DMDIS`                    EQU 0x4002646C,        4, base=16,    bitRange=2-2
 3470                           ;'DMA2_S3FCR.FS`                       EQU 0x4002646C,        4, base=16,    bitRange=3-5
 3471                           ;'DMA2_S3FCR.FEIE`                     EQU 0x4002646C,        4, base=16,    bitRange=7-7
 3472                           
 3473                           DMA2_S4CR                           EQU 0x40026470
 3474                           ;'DMA2_S4CR.EN`                        EQU 0x40026470,        4, base=16,    bitRange=0-0
 3475                           ;'DMA2_S4CR.DMEIE`                     EQU 0x40026470,        4, base=16,    bitRange=1-1
 3476                           ;'DMA2_S4CR.TEIE`                      EQU 0x40026470,        4, base=16,    bitRange=2-2
 3477                           ;'DMA2_S4CR.HTIE`                      EQU 0x40026470,        4, base=16,    bitRange=3-3
 3478                           ;'DMA2_S4CR.TCIE`                      EQU 0x40026470,        4, base=16,    bitRange=4-4
 3479                           ;'DMA2_S4CR.PFCTRL`                    EQU 0x40026470,        4, base=16,    bitRange=5-5
 3480                           ;'DMA2_S4CR.DIR`                       EQU 0x40026470,        4, base=16,    bitRange=6-7
 3481                           ;'DMA2_S4CR.CIRC`                      EQU 0x40026470,        4, base=16,    bitRange=8-8
 3482                           ;'DMA2_S4CR.PINC`                      EQU 0x40026470,        4, base=16,    bitRange=9-9
 3483                           ;'DMA2_S4CR.MINC`                      EQU 0x40026470,        4, base=16,    bitRange=10-10
 3484                           ;'DMA2_S4CR.PSIZE`                     EQU 0x40026470,        4, base=16,    bitRange=11-12
 3485                           ;'DMA2_S4CR.MSIZE`                     EQU 0x40026470,        4, base=16,    bitRange=13-14
 3486                           ;'DMA2_S4CR.PINCOS`                    EQU 0x40026470,        4, base=16,    bitRange=15-15
 3487                           ;'DMA2_S4CR.PL`                        EQU 0x40026470,        4, base=16,    bitRange=16-17
 3488                           ;'DMA2_S4CR.DBM`                       EQU 0x40026470,        4, base=16,    bitRange=18-18
 3489                           ;'DMA2_S4CR.CT`                        EQU 0x40026470,        4, base=16,    bitRange=19-19
 3490                           ;'DMA2_S4CR.PBURST`                    EQU 0x40026470,        4, base=16,    bitRange=21-22
 3491                           ;'DMA2_S4CR.MBURST`                    EQU 0x40026470,        4, base=16,    bitRange=23-24
 3492                           ;'DMA2_S4CR.CHSEL`                     EQU 0x40026470,        4, base=16,    bitRange=25-27
 3493                           
 3494                           DMA2_S4NDTR                         EQU 0x40026474
 3495                           ;'DMA2_S4NDTR.NDT`                     EQU 0x40026474,        4, base=16,    bitRange=0-15
 3496                           
 3497                           DMA2_S4PAR                          EQU 0x40026478
 3498                           
 3499                           DMA2_S4M0AR                         EQU 0x4002647C
 3500                           
 3501                           DMA2_S4M1AR                         EQU 0x40026480
 3502                           
 3503                           DMA2_S4FCR                          EQU 0x40026484
 3504                           ;'DMA2_S4FCR.FTH`                      EQU 0x40026484,        4, base=16,    bitRange=0-1
 3505                           ;'DMA2_S4FCR.DMDIS`                    EQU 0x40026484,        4, base=16,    bitRange=2-2
 3506                           ;'DMA2_S4FCR.FS`                       EQU 0x40026484,        4, base=16,    bitRange=3-5
 3507                           ;'DMA2_S4FCR.FEIE`                     EQU 0x40026484,        4, base=16,    bitRange=7-7
 3508                           
 3509                           DMA2_S5CR                           EQU 0x40026488
 3510                           ;'DMA2_S5CR.EN`                        EQU 0x40026488,        4, base=16,    bitRange=0-0
 3511                           ;'DMA2_S5CR.DMEIE`                     EQU 0x40026488,        4, base=16,    bitRange=1-1
 3512                           ;'DMA2_S5CR.TEIE`                      EQU 0x40026488,        4, base=16,    bitRange=2-2
 3513                           ;'DMA2_S5CR.HTIE`                      EQU 0x40026488,        4, base=16,    bitRange=3-3
 3514                           ;'DMA2_S5CR.TCIE`                      EQU 0x40026488,        4, base=16,    bitRange=4-4
 3515                           ;'DMA2_S5CR.PFCTRL`                    EQU 0x40026488,        4, base=16,    bitRange=5-5
 3516                           ;'DMA2_S5CR.DIR`                       EQU 0x40026488,        4, base=16,    bitRange=6-7
 3517                           ;'DMA2_S5CR.CIRC`                      EQU 0x40026488,        4, base=16,    bitRange=8-8
 3518                           ;'DMA2_S5CR.PINC`                      EQU 0x40026488,        4, base=16,    bitRange=9-9
 3519                           ;'DMA2_S5CR.MINC`                      EQU 0x40026488,        4, base=16,    bitRange=10-10
 3520                           ;'DMA2_S5CR.PSIZE`                     EQU 0x40026488,        4, base=16,    bitRange=11-12
 3521                           ;'DMA2_S5CR.MSIZE`                     EQU 0x40026488,        4, base=16,    bitRange=13-14
 3522                           ;'DMA2_S5CR.PINCOS`                    EQU 0x40026488,        4, base=16,    bitRange=15-15
 3523                           ;'DMA2_S5CR.PL`                        EQU 0x40026488,        4, base=16,    bitRange=16-17
 3524                           ;'DMA2_S5CR.DBM`                       EQU 0x40026488,        4, base=16,    bitRange=18-18
 3525                           ;'DMA2_S5CR.CT`                        EQU 0x40026488,        4, base=16,    bitRange=19-19
 3526                           ;'DMA2_S5CR.PBURST`                    EQU 0x40026488,        4, base=16,    bitRange=21-22
 3527                           ;'DMA2_S5CR.MBURST`                    EQU 0x40026488,        4, base=16,    bitRange=23-24
 3528                           ;'DMA2_S5CR.CHSEL`                     EQU 0x40026488,        4, base=16,    bitRange=25-27
 3529                           
 3530                           DMA2_S5NDTR                         EQU 0x4002648C
 3531                           ;'DMA2_S5NDTR.NDT`                     EQU 0x4002648C,        4, base=16,    bitRange=0-15
 3532                           
 3533                           DMA2_S5PAR                          EQU 0x40026490
 3534                           
 3535                           DMA2_S5M0AR                         EQU 0x40026494
 3536                           
 3537                           DMA2_S5M1AR                         EQU 0x40026498
 3538                           
 3539                           DMA2_S5FCR                          EQU 0x4002649C
 3540                           ;'DMA2_S5FCR.FTH`                      EQU 0x4002649C,        4, base=16,    bitRange=0-1
 3541                           ;'DMA2_S5FCR.DMDIS`                    EQU 0x4002649C,        4, base=16,    bitRange=2-2
 3542                           ;'DMA2_S5FCR.FS`                       EQU 0x4002649C,        4, base=16,    bitRange=3-5
 3543                           ;'DMA2_S5FCR.FEIE`                     EQU 0x4002649C,        4, base=16,    bitRange=7-7
 3544                           
 3545                           DMA2_S6CR                           EQU 0x400264A0
 3546                           ;'DMA2_S6CR.EN`                        EQU 0x400264A0,        4, base=16,    bitRange=0-0
 3547                           ;'DMA2_S6CR.DMEIE`                     EQU 0x400264A0,        4, base=16,    bitRange=1-1
 3548                           ;'DMA2_S6CR.TEIE`                      EQU 0x400264A0,        4, base=16,    bitRange=2-2
 3549                           ;'DMA2_S6CR.HTIE`                      EQU 0x400264A0,        4, base=16,    bitRange=3-3
 3550                           ;'DMA2_S6CR.TCIE`                      EQU 0x400264A0,        4, base=16,    bitRange=4-4
 3551                           ;'DMA2_S6CR.PFCTRL`                    EQU 0x400264A0,        4, base=16,    bitRange=5-5
 3552                           ;'DMA2_S6CR.DIR`                       EQU 0x400264A0,        4, base=16,    bitRange=6-7
 3553                           ;'DMA2_S6CR.CIRC`                      EQU 0x400264A0,        4, base=16,    bitRange=8-8
 3554                           ;'DMA2_S6CR.PINC`                      EQU 0x400264A0,        4, base=16,    bitRange=9-9
 3555                           ;'DMA2_S6CR.MINC`                      EQU 0x400264A0,        4, base=16,    bitRange=10-10
 3556                           ;'DMA2_S6CR.PSIZE`                     EQU 0x400264A0,        4, base=16,    bitRange=11-12
 3557                           ;'DMA2_S6CR.MSIZE`                     EQU 0x400264A0,        4, base=16,    bitRange=13-14
 3558                           ;'DMA2_S6CR.PINCOS`                    EQU 0x400264A0,        4, base=16,    bitRange=15-15
 3559                           ;'DMA2_S6CR.PL`                        EQU 0x400264A0,        4, base=16,    bitRange=16-17
 3560                           ;'DMA2_S6CR.DBM`                       EQU 0x400264A0,        4, base=16,    bitRange=18-18
 3561                           ;'DMA2_S6CR.CT`                        EQU 0x400264A0,        4, base=16,    bitRange=19-19
 3562                           ;'DMA2_S6CR.PBURST`                    EQU 0x400264A0,        4, base=16,    bitRange=21-22
 3563                           ;'DMA2_S6CR.MBURST`                    EQU 0x400264A0,        4, base=16,    bitRange=23-24
 3564                           ;'DMA2_S6CR.CHSEL`                     EQU 0x400264A0,        4, base=16,    bitRange=25-27
 3565                           
 3566                           DMA2_S6NDTR                         EQU 0x400264A4
 3567                           ;'DMA2_S6NDTR.NDT`                     EQU 0x400264A4,        4, base=16,    bitRange=0-15
 3568                           
 3569                           DMA2_S6PAR                          EQU 0x400264A8
 3570                           
 3571                           DMA2_S6M0AR                         EQU 0x400264AC
 3572                           
 3573                           DMA2_S6M1AR                         EQU 0x400264B0
 3574                           
 3575                           DMA2_S6FCR                          EQU 0x400264B4
 3576                           ;'DMA2_S6FCR.FTH`                      EQU 0x400264B4,        4, base=16,    bitRange=0-1
 3577                           ;'DMA2_S6FCR.DMDIS`                    EQU 0x400264B4,        4, base=16,    bitRange=2-2
 3578                           ;'DMA2_S6FCR.FS`                       EQU 0x400264B4,        4, base=16,    bitRange=3-5
 3579                           ;'DMA2_S6FCR.FEIE`                     EQU 0x400264B4,        4, base=16,    bitRange=7-7
 3580                           
 3581                           DMA2_S7CR                           EQU 0x400264B8
 3582                           ;'DMA2_S7CR.EN`                        EQU 0x400264B8,        4, base=16,    bitRange=0-0
 3583                           ;'DMA2_S7CR.DMEIE`                     EQU 0x400264B8,        4, base=16,    bitRange=1-1
 3584                           ;'DMA2_S7CR.TEIE`                      EQU 0x400264B8,        4, base=16,    bitRange=2-2
 3585                           ;'DMA2_S7CR.HTIE`                      EQU 0x400264B8,        4, base=16,    bitRange=3-3
 3586                           ;'DMA2_S7CR.TCIE`                      EQU 0x400264B8,        4, base=16,    bitRange=4-4
 3587                           ;'DMA2_S7CR.PFCTRL`                    EQU 0x400264B8,        4, base=16,    bitRange=5-5
 3588                           ;'DMA2_S7CR.DIR`                       EQU 0x400264B8,        4, base=16,    bitRange=6-7
 3589                           ;'DMA2_S7CR.CIRC`                      EQU 0x400264B8,        4, base=16,    bitRange=8-8
 3590                           ;'DMA2_S7CR.PINC`                      EQU 0x400264B8,        4, base=16,    bitRange=9-9
 3591                           ;'DMA2_S7CR.MINC`                      EQU 0x400264B8,        4, base=16,    bitRange=10-10
 3592                           ;'DMA2_S7CR.PSIZE`                     EQU 0x400264B8,        4, base=16,    bitRange=11-12
 3593                           ;'DMA2_S7CR.MSIZE`                     EQU 0x400264B8,        4, base=16,    bitRange=13-14
 3594                           ;'DMA2_S7CR.PINCOS`                    EQU 0x400264B8,        4, base=16,    bitRange=15-15
 3595                           ;'DMA2_S7CR.PL`                        EQU 0x400264B8,        4, base=16,    bitRange=16-17
 3596                           ;'DMA2_S7CR.DBM`                       EQU 0x400264B8,        4, base=16,    bitRange=18-18
 3597                           ;'DMA2_S7CR.CT`                        EQU 0x400264B8,        4, base=16,    bitRange=19-19
 3598                           ;'DMA2_S7CR.PBURST`                    EQU 0x400264B8,        4, base=16,    bitRange=21-22
 3599                           ;'DMA2_S7CR.MBURST`                    EQU 0x400264B8,        4, base=16,    bitRange=23-24
 3600                           ;'DMA2_S7CR.CHSEL`                     EQU 0x400264B8,        4, base=16,    bitRange=25-27
 3601                           
 3602                           DMA2_S7NDTR                         EQU 0x400264BC
 3603                           ;'DMA2_S7NDTR.NDT`                     EQU 0x400264BC,        4, base=16,    bitRange=0-15
 3604                           
 3605                           DMA2_S7PAR                          EQU 0x400264C0
 3606                           
 3607                           DMA2_S7M0AR                         EQU 0x400264C4
 3608                           
 3609                           DMA2_S7M1AR                         EQU 0x400264C8
 3610                           
 3611                           DMA2_S7FCR                          EQU 0x400264CC
 3612                           ;'DMA2_S7FCR.FTH`                      EQU 0x400264CC,        4, base=16,    bitRange=0-1
 3613                           ;'DMA2_S7FCR.DMDIS`                    EQU 0x400264CC,        4, base=16,    bitRange=2-2
 3614                           ;'DMA2_S7FCR.FS`                       EQU 0x400264CC,        4, base=16,    bitRange=3-5
 3615                           ;'DMA2_S7FCR.FEIE`                     EQU 0x400264CC,        4, base=16,    bitRange=7-7
 3616                           
 3617                           
 3618                           ;
 3619                           ;               RTC
 3620                           ;
 3621                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3622                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3623                           
 3624                           RTC_TR                              EQU 0x40002800
 3625                           ;'RTC_TR.SU`                           EQU 0x40002800,        4, base=16,    bitRange=0-3
 3626                           ;'RTC_TR.ST`                           EQU 0x40002800,        4, base=16,    bitRange=4-6
 3627                           ;'RTC_TR.MNU`                          EQU 0x40002800,        4, base=16,    bitRange=8-11
 3628                           ;'RTC_TR.MNT`                          EQU 0x40002800,        4, base=16,    bitRange=12-14
 3629                           ;'RTC_TR.HU`                           EQU 0x40002800,        4, base=16,    bitRange=16-19
 3630                           ;'RTC_TR.HT`                           EQU 0x40002800,        4, base=16,    bitRange=20-21
 3631                           ;'RTC_TR.PM`                           EQU 0x40002800,        4, base=16,    bitRange=22-22
 3632                           
 3633                           RTC_DR                              EQU 0x40002804
 3634                           ;'RTC_DR.DU`                           EQU 0x40002804,        4, base=16,    bitRange=0-3
 3635                           ;'RTC_DR.DT`                           EQU 0x40002804,        4, base=16,    bitRange=4-5
 3636                           ;'RTC_DR.MU`                           EQU 0x40002804,        4, base=16,    bitRange=8-11
 3637                           ;'RTC_DR.MT`                           EQU 0x40002804,        4, base=16,    bitRange=12-12
 3638                           ;'RTC_DR.WDU`                          EQU 0x40002804,        4, base=16,    bitRange=13-15
 3639                           ;'RTC_DR.YU`                           EQU 0x40002804,        4, base=16,    bitRange=16-19
 3640                           ;'RTC_DR.YT`                           EQU 0x40002804,        4, base=16,    bitRange=20-23
 3641                           
 3642                           RTC_CR                              EQU 0x40002808
 3643                           ;'RTC_CR.WUCKSEL`                      EQU 0x40002808,        4, base=16,    bitRange=0-2
 3644                           ;'RTC_CR.TSEDGE`                       EQU 0x40002808,        4, base=16,    bitRange=3-3
 3645                           ;'RTC_CR.REFCKON`                      EQU 0x40002808,        4, base=16,    bitRange=4-4
 3646                           ;'RTC_CR.BYPSHAD`                      EQU 0x40002808,        4, base=16,    bitRange=5-5
 3647                           ;'RTC_CR.FMT`                          EQU 0x40002808,        4, base=16,    bitRange=6-6
 3648                           ;'RTC_CR.DCE`                          EQU 0x40002808,        4, base=16,    bitRange=7-7
 3649                           ;'RTC_CR.ALRAE`                        EQU 0x40002808,        4, base=16,    bitRange=8-8
 3650                           ;'RTC_CR.ALRBE`                        EQU 0x40002808,        4, base=16,    bitRange=9-9
 3651                           ;'RTC_CR.WUTE`                         EQU 0x40002808,        4, base=16,    bitRange=10-10
 3652                           ;'RTC_CR.TSE`                          EQU 0x40002808,        4, base=16,    bitRange=11-11
 3653                           ;'RTC_CR.ALRAIE`                       EQU 0x40002808,        4, base=16,    bitRange=12-12
 3654                           ;'RTC_CR.ALRBIE`                       EQU 0x40002808,        4, base=16,    bitRange=13-13
 3655                           ;'RTC_CR.WUTIE`                        EQU 0x40002808,        4, base=16,    bitRange=14-14
 3656                           ;'RTC_CR.TSIE`                         EQU 0x40002808,        4, base=16,    bitRange=15-15
 3657                           ;'RTC_CR.ADD1H`                        EQU 0x40002808,        4, base=16,    bitRange=16-16
 3658                           ;'RTC_CR.SUB1H`                        EQU 0x40002808,        4, base=16,    bitRange=17-17
 3659                           ;'RTC_CR.BKP`                          EQU 0x40002808,        4, base=16,    bitRange=18-18
 3660                           ;'RTC_CR.COSEL`                        EQU 0x40002808,        4, base=16,    bitRange=19-19
 3661                           ;'RTC_CR.POL`                          EQU 0x40002808,        4, base=16,    bitRange=20-20
 3662                           ;'RTC_CR.OSEL`                         EQU 0x40002808,        4, base=16,    bitRange=21-22
 3663                           ;'RTC_CR.COE`                          EQU 0x40002808,        4, base=16,    bitRange=23-23
 3664                           
 3665                           RTC_ISR                             EQU 0x4000280C
 3666                           ;'RTC_ISR.ALRAWF`                      EQU 0x4000280C,        4, base=16,    bitRange=0-0
 3667                           ;'RTC_ISR.ALRBWF`                      EQU 0x4000280C,        4, base=16,    bitRange=1-1
 3668                           ;'RTC_ISR.WUTWF`                       EQU 0x4000280C,        4, base=16,    bitRange=2-2
 3669                           ;'RTC_ISR.SHPF`                        EQU 0x4000280C,        4, base=16,    bitRange=3-3
 3670                           ;'RTC_ISR.INITS`                       EQU 0x4000280C,        4, base=16,    bitRange=4-4
 3671                           ;'RTC_ISR.RSF`                         EQU 0x4000280C,        4, base=16,    bitRange=5-5
 3672                           ;'RTC_ISR.INITF`                       EQU 0x4000280C,        4, base=16,    bitRange=6-6
 3673                           ;'RTC_ISR.INIT`                        EQU 0x4000280C,        4, base=16,    bitRange=7-7
 3674                           ;'RTC_ISR.ALRAF`                       EQU 0x4000280C,        4, base=16,    bitRange=8-8
 3675                           ;'RTC_ISR.ALRBF`                       EQU 0x4000280C,        4, base=16,    bitRange=9-9
 3676                           ;'RTC_ISR.WUTF`                        EQU 0x4000280C,        4, base=16,    bitRange=10-10
 3677                           ;'RTC_ISR.TSF`                         EQU 0x4000280C,        4, base=16,    bitRange=11-11
 3678                           ;'RTC_ISR.TSOVF`                       EQU 0x4000280C,        4, base=16,    bitRange=12-12
 3679                           ;'RTC_ISR.TAMP1F`                      EQU 0x4000280C,        4, base=16,    bitRange=13-13
 3680                           ;'RTC_ISR.TAMP2F`                      EQU 0x4000280C,        4, base=16,    bitRange=14-14
 3681                           ;'RTC_ISR.RECALPF`                     EQU 0x4000280C,        4, base=16,    bitRange=16-16
 3682                           
 3683                           RTC_PRER                            EQU 0x40002810
 3684                           ;'RTC_PRER.PREDIV_S`                   EQU 0x40002810,        4, base=16,    bitRange=0-14
 3685                           ;'RTC_PRER.PREDIV_A`                   EQU 0x40002810,        4, base=16,    bitRange=16-22
 3686                           
 3687                           RTC_WUTR                            EQU 0x40002814
 3688                           ;'RTC_WUTR.WUT`                        EQU 0x40002814,        4, base=16,    bitRange=0-15
 3689                           
 3690                           RTC_CALIBR                          EQU 0x40002818
 3691                           ;'RTC_CALIBR.DC`                       EQU 0x40002818,        4, base=16,    bitRange=0-4
 3692                           ;'RTC_CALIBR.DCS`                      EQU 0x40002818,        4, base=16,    bitRange=7-7
 3693                           
 3694                           RTC_ALRMAR                          EQU 0x4000281C
 3695                           ;'RTC_ALRMAR.SU`                       EQU 0x4000281C,        4, base=16,    bitRange=0-3
 3696                           ;'RTC_ALRMAR.ST`                       EQU 0x4000281C,        4, base=16,    bitRange=4-6
 3697                           ;'RTC_ALRMAR.MSK1`                     EQU 0x4000281C,        4, base=16,    bitRange=7-7
 3698                           ;'RTC_ALRMAR.MNU`                      EQU 0x4000281C,        4, base=16,    bitRange=8-11
 3699                           ;'RTC_ALRMAR.MNT`                      EQU 0x4000281C,        4, base=16,    bitRange=12-14
 3700                           ;'RTC_ALRMAR.MSK2`                     EQU 0x4000281C,        4, base=16,    bitRange=15-15
 3701                           ;'RTC_ALRMAR.HU`                       EQU 0x4000281C,        4, base=16,    bitRange=16-19
 3702                           ;'RTC_ALRMAR.HT`                       EQU 0x4000281C,        4, base=16,    bitRange=20-21
 3703                           ;'RTC_ALRMAR.PM`                       EQU 0x4000281C,        4, base=16,    bitRange=22-22
 3704                           ;'RTC_ALRMAR.MSK3`                     EQU 0x4000281C,        4, base=16,    bitRange=23-23
 3705                           ;'RTC_ALRMAR.DU`                       EQU 0x4000281C,        4, base=16,    bitRange=24-27
 3706                           ;'RTC_ALRMAR.DT`                       EQU 0x4000281C,        4, base=16,    bitRange=28-29
 3707                           ;'RTC_ALRMAR.WDSEL`                    EQU 0x4000281C,        4, base=16,    bitRange=30-30
 3708                           ;'RTC_ALRMAR.MSK4`                     EQU 0x4000281C,        4, base=16,    bitRange=31-31
 3709                           
 3710                           RTC_ALRMBR                          EQU 0x40002820
 3711                           ;'RTC_ALRMBR.SU`                       EQU 0x40002820,        4, base=16,    bitRange=0-3
 3712                           ;'RTC_ALRMBR.ST`                       EQU 0x40002820,        4, base=16,    bitRange=4-6
 3713                           ;'RTC_ALRMBR.MSK1`                     EQU 0x40002820,        4, base=16,    bitRange=7-7
 3714                           ;'RTC_ALRMBR.MNU`                      EQU 0x40002820,        4, base=16,    bitRange=8-11
 3715                           ;'RTC_ALRMBR.MNT`                      EQU 0x40002820,        4, base=16,    bitRange=12-14
 3716                           ;'RTC_ALRMBR.MSK2`                     EQU 0x40002820,        4, base=16,    bitRange=15-15
 3717                           ;'RTC_ALRMBR.HU`                       EQU 0x40002820,        4, base=16,    bitRange=16-19
 3718                           ;'RTC_ALRMBR.HT`                       EQU 0x40002820,        4, base=16,    bitRange=20-21
 3719                           ;'RTC_ALRMBR.PM`                       EQU 0x40002820,        4, base=16,    bitRange=22-22
 3720                           ;'RTC_ALRMBR.MSK3`                     EQU 0x40002820,        4, base=16,    bitRange=23-23
 3721                           ;'RTC_ALRMBR.DU`                       EQU 0x40002820,        4, base=16,    bitRange=24-27
 3722                           ;'RTC_ALRMBR.DT`                       EQU 0x40002820,        4, base=16,    bitRange=28-29
 3723                           ;'RTC_ALRMBR.WDSEL`                    EQU 0x40002820,        4, base=16,    bitRange=30-30
 3724                           ;'RTC_ALRMBR.MSK4`                     EQU 0x40002820,        4, base=16,    bitRange=31-31
 3725                           
 3726                           RTC_WPR                             EQU 0x40002824
 3727                           ;'RTC_WPR.KEY`                         EQU 0x40002824,        4, base=16,    bitRange=0-7
 3728                           
 3729                           RTC_SSR                             EQU 0x40002828
 3730                           ;'RTC_SSR.SS`                          EQU 0x40002828,        4, base=16,    bitRange=0-15
 3731                           
 3732                           RTC_SHIFTR                          EQU 0x4000282C
 3733                           ;'RTC_SHIFTR.SUBFS`                    EQU 0x4000282C,        4, base=16,    bitRange=0-14
 3734                           ;'RTC_SHIFTR.ADD1S`                    EQU 0x4000282C,        4, base=16,    bitRange=31-31
 3735                           
 3736                           RTC_TSTR                            EQU 0x40002830
 3737                           ;'RTC_TSTR.SU`                         EQU 0x40002830,        4, base=16,    bitRange=0-3
 3738                           ;'RTC_TSTR.ST`                         EQU 0x40002830,        4, base=16,    bitRange=4-6
 3739                           ;'RTC_TSTR.MNU`                        EQU 0x40002830,        4, base=16,    bitRange=8-11
 3740                           ;'RTC_TSTR.MNT`                        EQU 0x40002830,        4, base=16,    bitRange=12-14
 3741                           ;'RTC_TSTR.HU`                         EQU 0x40002830,        4, base=16,    bitRange=16-19
 3742                           ;'RTC_TSTR.HT`                         EQU 0x40002830,        4, base=16,    bitRange=20-21
 3743                           ;'RTC_TSTR.PM`                         EQU 0x40002830,        4, base=16,    bitRange=22-22
 3744                           
 3745                           RTC_TSDR                            EQU 0x40002834
 3746                           ;'RTC_TSDR.DU`                         EQU 0x40002834,        4, base=16,    bitRange=0-3
 3747                           ;'RTC_TSDR.DT`                         EQU 0x40002834,        4, base=16,    bitRange=4-5
 3748                           ;'RTC_TSDR.MU`                         EQU 0x40002834,        4, base=16,    bitRange=8-11
 3749                           ;'RTC_TSDR.MT`                         EQU 0x40002834,        4, base=16,    bitRange=12-12
 3750                           ;'RTC_TSDR.WDU`                        EQU 0x40002834,        4, base=16,    bitRange=13-15
 3751                           
 3752                           RTC_TSSSR                           EQU 0x40002838
 3753                           ;'RTC_TSSSR.SS`                        EQU 0x40002838,        4, base=16,    bitRange=0-15
 3754                           
 3755                           RTC_CALR                            EQU 0x4000283C
 3756                           ;'RTC_CALR.CALM`                       EQU 0x4000283C,        4, base=16,    bitRange=0-8
 3757                           ;'RTC_CALR.CALW16`                     EQU 0x4000283C,        4, base=16,    bitRange=13-13
 3758                           ;'RTC_CALR.CALW8`                      EQU 0x4000283C,        4, base=16,    bitRange=14-14
 3759                           ;'RTC_CALR.CALP`                       EQU 0x4000283C,        4, base=16,    bitRange=15-15
 3760                           
 3761                           RTC_TAFCR                           EQU 0x40002840
 3762                           ;'RTC_TAFCR.TAMP1E`                    EQU 0x40002840,        4, base=16,    bitRange=0-0
 3763                           ;'RTC_TAFCR.TAMP1TRG`                  EQU 0x40002840,        4, base=16,    bitRange=1-1
 3764                           ;'RTC_TAFCR.TAMPIE`                    EQU 0x40002840,        4, base=16,    bitRange=2-2
 3765                           ;'RTC_TAFCR.TAMP2E`                    EQU 0x40002840,        4, base=16,    bitRange=3-3
 3766                           ;'RTC_TAFCR.TAMP2TRG`                  EQU 0x40002840,        4, base=16,    bitRange=4-4
 3767                           ;'RTC_TAFCR.TAMPTS`                    EQU 0x40002840,        4, base=16,    bitRange=7-7
 3768                           ;'RTC_TAFCR.TAMPFREQ`                  EQU 0x40002840,        4, base=16,    bitRange=8-10
 3769                           ;'RTC_TAFCR.TAMPFLT`                   EQU 0x40002840,        4, base=16,    bitRange=11-12
 3770                           ;'RTC_TAFCR.TAMPPRCH`                  EQU 0x40002840,        4, base=16,    bitRange=13-14
 3771                           ;'RTC_TAFCR.TAMPPUDIS`                 EQU 0x40002840,        4, base=16,    bitRange=15-15
 3772                           ;'RTC_TAFCR.TAMP1INSEL`                EQU 0x40002840,        4, base=16,    bitRange=16-16
 3773                           ;'RTC_TAFCR.TSINSEL`                   EQU 0x40002840,        4, base=16,    bitRange=17-17
 3774                           ;'RTC_TAFCR.ALARMOUTTYPE`              EQU 0x40002840,        4, base=16,    bitRange=18-18
 3775                           
 3776                           RTC_ALRMASSR                        EQU 0x40002844
 3777                           ;'RTC_ALRMASSR.SS`                     EQU 0x40002844,        4, base=16,    bitRange=0-14
 3778                           ;'RTC_ALRMASSR.MASKSS`                 EQU 0x40002844,        4, base=16,    bitRange=24-27
 3779                           
 3780                           RTC_ALRMBSSR                        EQU 0x40002848
 3781                           ;'RTC_ALRMBSSR.SS`                     EQU 0x40002848,        4, base=16,    bitRange=0-14
 3782                           ;'RTC_ALRMBSSR.MASKSS`                 EQU 0x40002848,        4, base=16,    bitRange=24-27
 3783                           
 3784                           RTC_BK0R                            EQU 0x40002850
 3785                           
 3786                           RTC_BK1R                            EQU 0x40002854
 3787                           
 3788                           RTC_BK2R                            EQU 0x40002858
 3789                           
 3790                           RTC_BK3R                            EQU 0x4000285C
 3791                           
 3792                           RTC_BK4R                            EQU 0x40002860
 3793                           
 3794                           RTC_BK5R                            EQU 0x40002864
 3795                           
 3796                           RTC_BK6R                            EQU 0x40002868
 3797                           
 3798                           RTC_BK7R                            EQU 0x4000286C
 3799                           
 3800                           RTC_BK8R                            EQU 0x40002870
 3801                           
 3802                           RTC_BK9R                            EQU 0x40002874
 3803                           
 3804                           RTC_BK10R                           EQU 0x40002878
 3805                           
 3806                           RTC_BK11R                           EQU 0x4000287C
 3807                           
 3808                           RTC_BK12R                           EQU 0x40002880
 3809                           
 3810                           RTC_BK13R                           EQU 0x40002884
 3811                           
 3812                           RTC_BK14R                           EQU 0x40002888
 3813                           
 3814                           RTC_BK15R                           EQU 0x4000288C
 3815                           
 3816                           RTC_BK16R                           EQU 0x40002890
 3817                           
 3818                           RTC_BK17R                           EQU 0x40002894
 3819                           
 3820                           RTC_BK18R                           EQU 0x40002898
 3821                           
 3822                           RTC_BK19R                           EQU 0x4000289C
 3823                           
 3824                           
 3825                           ;
 3826                           ;               IWDG
 3827                           ;
 3828                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3829                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3830                           
 3831                           IWDG_KR                             EQU 0x40003000
 3832                           
 3833                           IWDG_PR                             EQU 0x40003004
 3834                           ;'IWDG_PR.PR`                          EQU 0x40003004,        2, base=16,    bitRange=0-2
 3835                           
 3836                           IWDG_RLR                            EQU 0x40003008
 3837                           ;'IWDG_RLR.RL`                         EQU 0x40003008,        2, base=16,    bitRange=0-11
 3838                           
 3839                           IWDG_SR                             EQU 0x4000300C
 3840                           ;'IWDG_SR.PVU`                         EQU 0x4000300C,        2, base=16,    bitRange=0-0
 3841                           ;'IWDG_SR.RVU`                         EQU 0x4000300C,        2, base=16,    bitRange=1-1
 3842                           
 3843                           
 3844                           ;
 3845                           ;               WWDG
 3846                           ;
 3847                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3848                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3849                           
 3850                           WWDG_CR                             EQU 0x40002C00
 3851                           ;'WWDG_CR.T`                           EQU 0x40002C00,        2, base=16,    bitRange=0-6
 3852                           ;'WWDG_CR.WDGA`                        EQU 0x40002C00,        2, base=16,    bitRange=7-7
 3853                           
 3854                           WWDG_CFR                            EQU 0x40002C04
 3855                           ;'WWDG_CFR.W`                          EQU 0x40002C04,        2, base=16,    bitRange=0-6
 3856                           ;'WWDG_CFR.WDGTB`                      EQU 0x40002C04,        2, base=16,    bitRange=7-8
 3857                           ;'WWDG_CFR.EWI`                        EQU 0x40002C04,        2, base=16,    bitRange=9-9
 3858                           
 3859                           WWDG_SR                             EQU 0x40002C08
 3860                           ;'WWDG_SR.EWIF`                        EQU 0x40002C08,        2, base=16,    bitRange=0-0
 3861                           
 3862                           
 3863                           ;
 3864                           ;               RNG
 3865                           ;
 3866                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3867                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3868                           
 3869                           RNG_CR                              EQU 0x50060800
 3870                           ;'RNG_CR.RNGEN`                        EQU 0x50060800,        4, base=16,    bitRange=2-2
 3871                           ;'RNG_CR.IM`                           EQU 0x50060800,        4, base=16,    bitRange=3-3
 3872                           
 3873                           RNG_SR                              EQU 0x50060804
 3874                           ;'RNG_SR.DRDY`                         EQU 0x50060804,        4, base=16,    bitRange=0-0
 3875                           ;'RNG_SR.CECS`                         EQU 0x50060804,        4, base=16,    bitRange=1-1
 3876                           ;'RNG_SR.SECS`                         EQU 0x50060804,        4, base=16,    bitRange=2-2
 3877                           ;'RNG_SR.CEIS`                         EQU 0x50060804,        4, base=16,    bitRange=5-5
 3878                           ;'RNG_SR.SEIS`                         EQU 0x50060804,        4, base=16,    bitRange=6-6
 3879                           
 3880                           RNG_DR                              EQU 0x50060808
 3881                           
 3882                           
 3883                           ;
 3884                           ;               TIM1
 3885                           ;
 3886                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 3887                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 3888                           
 3889                           TIM1_CR1                            EQU 0x40010000
 3890                           ;'TIM1_CR1.CEN`                        EQU 0x40010000,        4, base=16,    bitRange=0-0
 3891                           ;'TIM1_CR1.UDIS`                       EQU 0x40010000,        4, base=16,    bitRange=1-1
 3892                           ;'TIM1_CR1.URS`                        EQU 0x40010000,        4, base=16,    bitRange=2-2
 3893                           ;'TIM1_CR1.OPM`                        EQU 0x40010000,        4, base=16,    bitRange=3-3
 3894                           ;'TIM1_CR1.DIR`                        EQU 0x40010000,        4, base=16,    bitRange=4-4
 3895                           ;'TIM1_CR1.CMS`                        EQU 0x40010000,        4, base=16,    bitRange=5-6
 3896                           ;'TIM1_CR1.ARPE`                       EQU 0x40010000,        4, base=16,    bitRange=7-7
 3897                           ;'TIM1_CR1.CKD`                        EQU 0x40010000,        4, base=16,    bitRange=8-9
 3898                           
 3899                           TIM1_CR2                            EQU 0x40010004
 3900                           ;'TIM1_CR2.CCPC`                       EQU 0x40010004,        4, base=16,    bitRange=0-0
 3901                           ;'TIM1_CR2.CCUS`                       EQU 0x40010004,        4, base=16,    bitRange=2-2
 3902                           ;'TIM1_CR2.CCDS`                       EQU 0x40010004,        4, base=16,    bitRange=3-3
 3903                           ;'TIM1_CR2.MMS`                        EQU 0x40010004,        4, base=16,    bitRange=4-6
 3904                           ;'TIM1_CR2.TI1S`                       EQU 0x40010004,        4, base=16,    bitRange=7-7
 3905                           ;'TIM1_CR2.OIS1`                       EQU 0x40010004,        4, base=16,    bitRange=8-8
 3906                           ;'TIM1_CR2.OIS1N`                      EQU 0x40010004,        4, base=16,    bitRange=9-9
 3907                           ;'TIM1_CR2.OIS2`                       EQU 0x40010004,        4, base=16,    bitRange=10-10
 3908                           ;'TIM1_CR2.OIS2N`                      EQU 0x40010004,        4, base=16,    bitRange=11-11
 3909                           ;'TIM1_CR2.OIS3`                       EQU 0x40010004,        4, base=16,    bitRange=12-12
 3910                           ;'TIM1_CR2.OIS3N`                      EQU 0x40010004,        4, base=16,    bitRange=13-13
 3911                           ;'TIM1_CR2.OIS4`                       EQU 0x40010004,        4, base=16,    bitRange=14-14
 3912                           
 3913                           TIM1_SMCR                           EQU 0x40010008
 3914                           ;'TIM1_SMCR.SMS`                       EQU 0x40010008,        4, base=16,    bitRange=0-2
 3915                           ;'TIM1_SMCR.TS`                        EQU 0x40010008,        4, base=16,    bitRange=4-6
 3916                           ;'TIM1_SMCR.MSM`                       EQU 0x40010008,        4, base=16,    bitRange=7-7
 3917                           ;'TIM1_SMCR.ETF`                       EQU 0x40010008,        4, base=16,    bitRange=8-11
 3918                           ;'TIM1_SMCR.ETPS`                      EQU 0x40010008,        4, base=16,    bitRange=12-13
 3919                           ;'TIM1_SMCR.ECE`                       EQU 0x40010008,        4, base=16,    bitRange=14-14
 3920                           ;'TIM1_SMCR.ETP`                       EQU 0x40010008,        4, base=16,    bitRange=15-15
 3921                           
 3922                           TIM1_DIER                           EQU 0x4001000C
 3923                           ;'TIM1_DIER.UIE`                       EQU 0x4001000C,        4, base=16,    bitRange=0-0
 3924                           ;'TIM1_DIER.CC1IE`                     EQU 0x4001000C,        4, base=16,    bitRange=1-1
 3925                           ;'TIM1_DIER.CC2IE`                     EQU 0x4001000C,        4, base=16,    bitRange=2-2
 3926                           ;'TIM1_DIER.CC3IE`                     EQU 0x4001000C,        4, base=16,    bitRange=3-3
 3927                           ;'TIM1_DIER.CC4IE`                     EQU 0x4001000C,        4, base=16,    bitRange=4-4
 3928                           ;'TIM1_DIER.COMIE`                     EQU 0x4001000C,        4, base=16,    bitRange=5-5
 3929                           ;'TIM1_DIER.TIE`                       EQU 0x4001000C,        4, base=16,    bitRange=6-6
 3930                           ;'TIM1_DIER.BIE`                       EQU 0x4001000C,        4, base=16,    bitRange=7-7
 3931                           ;'TIM1_DIER.UDE`                       EQU 0x4001000C,        4, base=16,    bitRange=8-8
 3932                           ;'TIM1_DIER.CC1DE`                     EQU 0x4001000C,        4, base=16,    bitRange=9-9
 3933                           ;'TIM1_DIER.CC2DE`                     EQU 0x4001000C,        4, base=16,    bitRange=10-10
 3934                           ;'TIM1_DIER.CC3DE`                     EQU 0x4001000C,        4, base=16,    bitRange=11-11
 3935                           ;'TIM1_DIER.CC4DE`                     EQU 0x4001000C,        4, base=16,    bitRange=12-12
 3936                           ;'TIM1_DIER.COMDE`                     EQU 0x4001000C,        4, base=16,    bitRange=13-13
 3937                           ;'TIM1_DIER.TDE`                       EQU 0x4001000C,        4, base=16,    bitRange=14-14
 3938                           
 3939                           TIM1_SR                             EQU 0x40010010
 3940                           ;'TIM1_SR.UIF`                         EQU 0x40010010,        4, base=16,    bitRange=0-0
 3941                           ;'TIM1_SR.CC1IF`                       EQU 0x40010010,        4, base=16,    bitRange=1-1
 3942                           ;'TIM1_SR.CC2IF`                       EQU 0x40010010,        4, base=16,    bitRange=2-2
 3943                           ;'TIM1_SR.CC3IF`                       EQU 0x40010010,        4, base=16,    bitRange=3-3
 3944                           ;'TIM1_SR.CC4IF`                       EQU 0x40010010,        4, base=16,    bitRange=4-4
 3945                           ;'TIM1_SR.COMIF`                       EQU 0x40010010,        4, base=16,    bitRange=5-5
 3946                           ;'TIM1_SR.TIF`                         EQU 0x40010010,        4, base=16,    bitRange=6-6
 3947                           ;'TIM1_SR.BIF`                         EQU 0x40010010,        4, base=16,    bitRange=7-7
 3948                           ;'TIM1_SR.CC1OF`                       EQU 0x40010010,        4, base=16,    bitRange=9-9
 3949                           ;'TIM1_SR.CC2OF`                       EQU 0x40010010,        4, base=16,    bitRange=10-10
 3950                           ;'TIM1_SR.CC3OF`                       EQU 0x40010010,        4, base=16,    bitRange=11-11
 3951                           ;'TIM1_SR.CC4OF`                       EQU 0x40010010,        4, base=16,    bitRange=12-12
 3952                           
 3953                           TIM1_EGR                            EQU 0x40010014
 3954                           ;'TIM1_EGR.UG`                         EQU 0x40010014,        4, base=16,    bitRange=0-0
 3955                           ;'TIM1_EGR.CC1G`                       EQU 0x40010014,        4, base=16,    bitRange=1-1
 3956                           ;'TIM1_EGR.CC2G`                       EQU 0x40010014,        4, base=16,    bitRange=2-2
 3957                           ;'TIM1_EGR.CC3G`                       EQU 0x40010014,        4, base=16,    bitRange=3-3
 3958                           ;'TIM1_EGR.CC4G`                       EQU 0x40010014,        4, base=16,    bitRange=4-4
 3959                           ;'TIM1_EGR.COMG`                       EQU 0x40010014,        4, base=16,    bitRange=5-5
 3960                           ;'TIM1_EGR.TG`                         EQU 0x40010014,        4, base=16,    bitRange=6-6
 3961                           ;'TIM1_EGR.BG`                         EQU 0x40010014,        4, base=16,    bitRange=7-7
 3962                           
 3963                           TIM1_CCMR1                          EQU 0x40010018
 3964                           ;'TIM1_CCMR1.IC1S`                     EQU 0x40010018,        4, base=16,    bitRange=0-1
 3965                           ;'TIM1_CCMR1.IC1PSC`                   EQU 0x40010018,        4, base=16,    bitRange=2-3
 3966                           ;'TIM1_CCMR1.IC1F`                     EQU 0x40010018,        4, base=16,    bitRange=4-7
 3967                           ;'TIM1_CCMR1.IC2S`                     EQU 0x40010018,        4, base=16,    bitRange=8-9
 3968                           ;'TIM1_CCMR1.IC2PSC`                   EQU 0x40010018,        4, base=16,    bitRange=10-11
 3969                           ;'TIM1_CCMR1.IC2F`                     EQU 0x40010018,        4, base=16,    bitRange=12-15
 3970                           
 3971                           TIM1_OCMR1                          EQU 0x40010018
 3972                           
 3973                           TIM1_CCMR2                          EQU 0x4001001C
 3974                           ;'TIM1_CCMR2.IC3S`                     EQU 0x4001001C,        4, base=16,    bitRange=0-1
 3975                           ;'TIM1_CCMR2.IC3PSC`                   EQU 0x4001001C,        4, base=16,    bitRange=2-3
 3976                           ;'TIM1_CCMR2.IC3F`                     EQU 0x4001001C,        4, base=16,    bitRange=4-7
 3977                           ;'TIM1_CCMR2.IC4S`                     EQU 0x4001001C,        4, base=16,    bitRange=8-9
 3978                           ;'TIM1_CCMR2.IC4PSC`                   EQU 0x4001001C,        4, base=16,    bitRange=10-11
 3979                           ;'TIM1_CCMR2.IC4F`                     EQU 0x4001001C,        4, base=16,    bitRange=12-15
 3980                           
 3981                           TIM1_OCMR2                          EQU 0x4001001C
 3982                           
 3983                           TIM1_CCER                           EQU 0x40010020
 3984                           ;'TIM1_CCER.CC1E`                      EQU 0x40010020,        4, base=16,    bitRange=0-0
 3985                           ;'TIM1_CCER.CC1P`                      EQU 0x40010020,        4, base=16,    bitRange=1-1
 3986                           ;'TIM1_CCER.CC1NE`                     EQU 0x40010020,        4, base=16,    bitRange=2-2
 3987                           ;'TIM1_CCER.CC1NP`                     EQU 0x40010020,        4, base=16,    bitRange=3-3
 3988                           ;'TIM1_CCER.CC2E`                      EQU 0x40010020,        4, base=16,    bitRange=4-4
 3989                           ;'TIM1_CCER.CC2P`                      EQU 0x40010020,        4, base=16,    bitRange=5-5
 3990                           ;'TIM1_CCER.CC2NE`                     EQU 0x40010020,        4, base=16,    bitRange=6-6
 3991                           ;'TIM1_CCER.CC2NP`                     EQU 0x40010020,        4, base=16,    bitRange=7-7
 3992                           ;'TIM1_CCER.CC3E`                      EQU 0x40010020,        4, base=16,    bitRange=8-8
 3993                           ;'TIM1_CCER.CC3P`                      EQU 0x40010020,        4, base=16,    bitRange=9-9
 3994                           ;'TIM1_CCER.CC3NE`                     EQU 0x40010020,        4, base=16,    bitRange=10-10
 3995                           ;'TIM1_CCER.CC3NP`                     EQU 0x40010020,        4, base=16,    bitRange=11-11
 3996                           ;'TIM1_CCER.CC4E`                      EQU 0x40010020,        4, base=16,    bitRange=12-12
 3997                           ;'TIM1_CCER.CC4P`                      EQU 0x40010020,        4, base=16,    bitRange=13-13
 3998                           
 3999                           TIM1_CNT                            EQU 0x40010024
 4000                           ;'TIM1_CNT.CNT`                        EQU 0x40010024,        4, base=16,    bitRange=0-15
 4001                           
 4002                           TIM1_PSC                            EQU 0x40010028
 4003                           ;'TIM1_PSC.PSC`                        EQU 0x40010028,        4, base=16,    bitRange=0-15
 4004                           
 4005                           TIM1_ARR                            EQU 0x4001002C
 4006                           ;'TIM1_ARR.ARR`                        EQU 0x4001002C,        4, base=16,    bitRange=0-15
 4007                           
 4008                           TIM1_RCR                            EQU 0x40010030
 4009                           ;'TIM1_RCR.REP`                        EQU 0x40010030,        4, base=16,    bitRange=0-7
 4010                           
 4011                           TIM1_CCR1                           EQU 0x40010034
 4012                           ;'TIM1_CCR1.CCR`                       EQU 0x40010034,        4, base=16,    bitRange=0-15
 4013                           
 4014                           TIM1_CCR2                           EQU 0x40010038
 4015                           ;'TIM1_CCR2.CCR`                       EQU 0x40010038,        4, base=16,    bitRange=0-15
 4016                           
 4017                           TIM1_CCR3                           EQU 0x4001003C
 4018                           ;'TIM1_CCR3.CCR`                       EQU 0x4001003C,        4, base=16,    bitRange=0-15
 4019                           
 4020                           TIM1_CCR4                           EQU 0x40010040
 4021                           ;'TIM1_CCR4.CCR`                       EQU 0x40010040,        4, base=16,    bitRange=0-15
 4022                           
 4023                           TIM1_BDTR                           EQU 0x40010044
 4024                           ;'TIM1_BDTR.DTG`                       EQU 0x40010044,        4, base=16,    bitRange=0-7
 4025                           ;'TIM1_BDTR.LOCK`                      EQU 0x40010044,        4, base=16,    bitRange=8-9
 4026                           ;'TIM1_BDTR.OSSI`                      EQU 0x40010044,        4, base=16,    bitRange=10-10
 4027                           ;'TIM1_BDTR.OSSR`                      EQU 0x40010044,        4, base=16,    bitRange=11-11
 4028                           ;'TIM1_BDTR.BKE`                       EQU 0x40010044,        4, base=16,    bitRange=12-12
 4029                           ;'TIM1_BDTR.BKP`                       EQU 0x40010044,        4, base=16,    bitRange=13-13
 4030                           ;'TIM1_BDTR.AOE`                       EQU 0x40010044,        4, base=16,    bitRange=14-14
 4031                           ;'TIM1_BDTR.MOE`                       EQU 0x40010044,        4, base=16,    bitRange=15-15
 4032                           
 4033                           TIM1_DCR                            EQU 0x40010048
 4034                           ;'TIM1_DCR.DBA`                        EQU 0x40010048,        4, base=16,    bitRange=0-4
 4035                           ;'TIM1_DCR.DBL`                        EQU 0x40010048,        4, base=16,    bitRange=8-12
 4036                           
 4037                           TIM1_DMAR                           EQU 0x4001004C
 4038                           ;'TIM1_DMAR.DMAB`                      EQU 0x4001004C,        4, base=16,    bitRange=0-15
 4039                           
 4040                           
 4041                           ;
 4042                           ;               TIM8
 4043                           ;
 4044                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4045                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4046                           
 4047                           TIM8_CR1                            EQU 0x40010400
 4048                           ;'TIM8_CR1.CEN`                        EQU 0x40010400,        4, base=16,    bitRange=0-0
 4049                           ;'TIM8_CR1.UDIS`                       EQU 0x40010400,        4, base=16,    bitRange=1-1
 4050                           ;'TIM8_CR1.URS`                        EQU 0x40010400,        4, base=16,    bitRange=2-2
 4051                           ;'TIM8_CR1.OPM`                        EQU 0x40010400,        4, base=16,    bitRange=3-3
 4052                           ;'TIM8_CR1.DIR`                        EQU 0x40010400,        4, base=16,    bitRange=4-4
 4053                           ;'TIM8_CR1.CMS`                        EQU 0x40010400,        4, base=16,    bitRange=5-6
 4054                           ;'TIM8_CR1.ARPE`                       EQU 0x40010400,        4, base=16,    bitRange=7-7
 4055                           ;'TIM8_CR1.CKD`                        EQU 0x40010400,        4, base=16,    bitRange=8-9
 4056                           
 4057                           TIM8_CR2                            EQU 0x40010404
 4058                           ;'TIM8_CR2.CCPC`                       EQU 0x40010404,        4, base=16,    bitRange=0-0
 4059                           ;'TIM8_CR2.CCUS`                       EQU 0x40010404,        4, base=16,    bitRange=2-2
 4060                           ;'TIM8_CR2.CCDS`                       EQU 0x40010404,        4, base=16,    bitRange=3-3
 4061                           ;'TIM8_CR2.MMS`                        EQU 0x40010404,        4, base=16,    bitRange=4-6
 4062                           ;'TIM8_CR2.TI1S`                       EQU 0x40010404,        4, base=16,    bitRange=7-7
 4063                           ;'TIM8_CR2.OIS1`                       EQU 0x40010404,        4, base=16,    bitRange=8-8
 4064                           ;'TIM8_CR2.OIS1N`                      EQU 0x40010404,        4, base=16,    bitRange=9-9
 4065                           ;'TIM8_CR2.OIS2`                       EQU 0x40010404,        4, base=16,    bitRange=10-10
 4066                           ;'TIM8_CR2.OIS2N`                      EQU 0x40010404,        4, base=16,    bitRange=11-11
 4067                           ;'TIM8_CR2.OIS3`                       EQU 0x40010404,        4, base=16,    bitRange=12-12
 4068                           ;'TIM8_CR2.OIS3N`                      EQU 0x40010404,        4, base=16,    bitRange=13-13
 4069                           ;'TIM8_CR2.OIS4`                       EQU 0x40010404,        4, base=16,    bitRange=14-14
 4070                           
 4071                           TIM8_SMCR                           EQU 0x40010408
 4072                           ;'TIM8_SMCR.SMS`                       EQU 0x40010408,        4, base=16,    bitRange=0-2
 4073                           ;'TIM8_SMCR.TS`                        EQU 0x40010408,        4, base=16,    bitRange=4-6
 4074                           ;'TIM8_SMCR.MSM`                       EQU 0x40010408,        4, base=16,    bitRange=7-7
 4075                           ;'TIM8_SMCR.ETF`                       EQU 0x40010408,        4, base=16,    bitRange=8-11
 4076                           ;'TIM8_SMCR.ETPS`                      EQU 0x40010408,        4, base=16,    bitRange=12-13
 4077                           ;'TIM8_SMCR.ECE`                       EQU 0x40010408,        4, base=16,    bitRange=14-14
 4078                           ;'TIM8_SMCR.ETP`                       EQU 0x40010408,        4, base=16,    bitRange=15-15
 4079                           
 4080                           TIM8_DIER                           EQU 0x4001040C
 4081                           ;'TIM8_DIER.UIE`                       EQU 0x4001040C,        4, base=16,    bitRange=0-0
 4082                           ;'TIM8_DIER.CC1IE`                     EQU 0x4001040C,        4, base=16,    bitRange=1-1
 4083                           ;'TIM8_DIER.CC2IE`                     EQU 0x4001040C,        4, base=16,    bitRange=2-2
 4084                           ;'TIM8_DIER.CC3IE`                     EQU 0x4001040C,        4, base=16,    bitRange=3-3
 4085                           ;'TIM8_DIER.CC4IE`                     EQU 0x4001040C,        4, base=16,    bitRange=4-4
 4086                           ;'TIM8_DIER.COMIE`                     EQU 0x4001040C,        4, base=16,    bitRange=5-5
 4087                           ;'TIM8_DIER.TIE`                       EQU 0x4001040C,        4, base=16,    bitRange=6-6
 4088                           ;'TIM8_DIER.BIE`                       EQU 0x4001040C,        4, base=16,    bitRange=7-7
 4089                           ;'TIM8_DIER.UDE`                       EQU 0x4001040C,        4, base=16,    bitRange=8-8
 4090                           ;'TIM8_DIER.CC1DE`                     EQU 0x4001040C,        4, base=16,    bitRange=9-9
 4091                           ;'TIM8_DIER.CC2DE`                     EQU 0x4001040C,        4, base=16,    bitRange=10-10
 4092                           ;'TIM8_DIER.CC3DE`                     EQU 0x4001040C,        4, base=16,    bitRange=11-11
 4093                           ;'TIM8_DIER.CC4DE`                     EQU 0x4001040C,        4, base=16,    bitRange=12-12
 4094                           ;'TIM8_DIER.COMDE`                     EQU 0x4001040C,        4, base=16,    bitRange=13-13
 4095                           ;'TIM8_DIER.TDE`                       EQU 0x4001040C,        4, base=16,    bitRange=14-14
 4096                           
 4097                           TIM8_SR                             EQU 0x40010410
 4098                           ;'TIM8_SR.UIF`                         EQU 0x40010410,        4, base=16,    bitRange=0-0
 4099                           ;'TIM8_SR.CC1IF`                       EQU 0x40010410,        4, base=16,    bitRange=1-1
 4100                           ;'TIM8_SR.CC2IF`                       EQU 0x40010410,        4, base=16,    bitRange=2-2
 4101                           ;'TIM8_SR.CC3IF`                       EQU 0x40010410,        4, base=16,    bitRange=3-3
 4102                           ;'TIM8_SR.CC4IF`                       EQU 0x40010410,        4, base=16,    bitRange=4-4
 4103                           ;'TIM8_SR.COMIF`                       EQU 0x40010410,        4, base=16,    bitRange=5-5
 4104                           ;'TIM8_SR.TIF`                         EQU 0x40010410,        4, base=16,    bitRange=6-6
 4105                           ;'TIM8_SR.BIF`                         EQU 0x40010410,        4, base=16,    bitRange=7-7
 4106                           ;'TIM8_SR.CC1OF`                       EQU 0x40010410,        4, base=16,    bitRange=9-9
 4107                           ;'TIM8_SR.CC2OF`                       EQU 0x40010410,        4, base=16,    bitRange=10-10
 4108                           ;'TIM8_SR.CC3OF`                       EQU 0x40010410,        4, base=16,    bitRange=11-11
 4109                           ;'TIM8_SR.CC4OF`                       EQU 0x40010410,        4, base=16,    bitRange=12-12
 4110                           
 4111                           TIM8_EGR                            EQU 0x40010414
 4112                           ;'TIM8_EGR.UG`                         EQU 0x40010414,        4, base=16,    bitRange=0-0
 4113                           ;'TIM8_EGR.CC1G`                       EQU 0x40010414,        4, base=16,    bitRange=1-1
 4114                           ;'TIM8_EGR.CC2G`                       EQU 0x40010414,        4, base=16,    bitRange=2-2
 4115                           ;'TIM8_EGR.CC3G`                       EQU 0x40010414,        4, base=16,    bitRange=3-3
 4116                           ;'TIM8_EGR.CC4G`                       EQU 0x40010414,        4, base=16,    bitRange=4-4
 4117                           ;'TIM8_EGR.COMG`                       EQU 0x40010414,        4, base=16,    bitRange=5-5
 4118                           ;'TIM8_EGR.TG`                         EQU 0x40010414,        4, base=16,    bitRange=6-6
 4119                           ;'TIM8_EGR.BG`                         EQU 0x40010414,        4, base=16,    bitRange=7-7
 4120                           
 4121                           TIM8_CCMR1                          EQU 0x40010418
 4122                           ;'TIM8_CCMR1.IC1S`                     EQU 0x40010418,        4, base=16,    bitRange=0-1
 4123                           ;'TIM8_CCMR1.IC1PSC`                   EQU 0x40010418,        4, base=16,    bitRange=2-3
 4124                           ;'TIM8_CCMR1.IC1F`                     EQU 0x40010418,        4, base=16,    bitRange=4-7
 4125                           ;'TIM8_CCMR1.IC2S`                     EQU 0x40010418,        4, base=16,    bitRange=8-9
 4126                           ;'TIM8_CCMR1.IC2PSC`                   EQU 0x40010418,        4, base=16,    bitRange=10-11
 4127                           ;'TIM8_CCMR1.IC2F`                     EQU 0x40010418,        4, base=16,    bitRange=12-15
 4128                           
 4129                           TIM1_OCMR8                          EQU 0x40010418
 4130                           
 4131                           TIM8_CCMR2                          EQU 0x4001041C
 4132                           ;'TIM8_CCMR2.IC3S`                     EQU 0x4001041C,        4, base=16,    bitRange=0-1
 4133                           ;'TIM8_CCMR2.IC3PSC`                   EQU 0x4001041C,        4, base=16,    bitRange=2-3
 4134                           ;'TIM8_CCMR2.IC3F`                     EQU 0x4001041C,        4, base=16,    bitRange=4-7
 4135                           ;'TIM8_CCMR2.IC4S`                     EQU 0x4001041C,        4, base=16,    bitRange=8-9
 4136                           ;'TIM8_CCMR2.IC4PSC`                   EQU 0x4001041C,        4, base=16,    bitRange=10-11
 4137                           ;'TIM8_CCMR2.IC4F`                     EQU 0x4001041C,        4, base=16,    bitRange=12-15
 4138                           
 4139                           TIM8_OCMR2                          EQU 0x4001041C
 4140                           
 4141                           TIM8_CCER                           EQU 0x40010420
 4142                           ;'TIM8_CCER.CC1E`                      EQU 0x40010420,        4, base=16,    bitRange=0-0
 4143                           ;'TIM8_CCER.CC1P`                      EQU 0x40010420,        4, base=16,    bitRange=1-1
 4144                           ;'TIM8_CCER.CC1NE`                     EQU 0x40010420,        4, base=16,    bitRange=2-2
 4145                           ;'TIM8_CCER.CC1NP`                     EQU 0x40010420,        4, base=16,    bitRange=3-3
 4146                           ;'TIM8_CCER.CC2E`                      EQU 0x40010420,        4, base=16,    bitRange=4-4
 4147                           ;'TIM8_CCER.CC2P`                      EQU 0x40010420,        4, base=16,    bitRange=5-5
 4148                           ;'TIM8_CCER.CC2NE`                     EQU 0x40010420,        4, base=16,    bitRange=6-6
 4149                           ;'TIM8_CCER.CC2NP`                     EQU 0x40010420,        4, base=16,    bitRange=7-7
 4150                           ;'TIM8_CCER.CC3E`                      EQU 0x40010420,        4, base=16,    bitRange=8-8
 4151                           ;'TIM8_CCER.CC3P`                      EQU 0x40010420,        4, base=16,    bitRange=9-9
 4152                           ;'TIM8_CCER.CC3NE`                     EQU 0x40010420,        4, base=16,    bitRange=10-10
 4153                           ;'TIM8_CCER.CC3NP`                     EQU 0x40010420,        4, base=16,    bitRange=11-11
 4154                           ;'TIM8_CCER.CC4E`                      EQU 0x40010420,        4, base=16,    bitRange=12-12
 4155                           ;'TIM8_CCER.CC4P`                      EQU 0x40010420,        4, base=16,    bitRange=13-13
 4156                           
 4157                           TIM8_CNT                            EQU 0x40010424
 4158                           ;'TIM8_CNT.CNT`                        EQU 0x40010424,        4, base=16,    bitRange=0-15
 4159                           
 4160                           TIM8_PSC                            EQU 0x40010428
 4161                           ;'TIM8_PSC.PSC`                        EQU 0x40010428,        4, base=16,    bitRange=0-15
 4162                           
 4163                           TIM8_ARR                            EQU 0x4001042C
 4164                           ;'TIM8_ARR.ARR`                        EQU 0x4001042C,        4, base=16,    bitRange=0-15
 4165                           
 4166                           TIM8_RCR                            EQU 0x40010430
 4167                           ;'TIM8_RCR.REP`                        EQU 0x40010430,        4, base=16,    bitRange=0-7
 4168                           
 4169                           TIM8_CCR1                           EQU 0x40010434
 4170                           ;'TIM8_CCR1.CCR`                       EQU 0x40010434,        4, base=16,    bitRange=0-15
 4171                           
 4172                           TIM8_CCR2                           EQU 0x40010438
 4173                           ;'TIM8_CCR2.CCR`                       EQU 0x40010438,        4, base=16,    bitRange=0-15
 4174                           
 4175                           TIM8_CCR3                           EQU 0x4001043C
 4176                           ;'TIM8_CCR3.CCR`                       EQU 0x4001043C,        4, base=16,    bitRange=0-15
 4177                           
 4178                           TIM8_CCR4                           EQU 0x40010440
 4179                           ;'TIM8_CCR4.CCR`                       EQU 0x40010440,        4, base=16,    bitRange=0-15
 4180                           
 4181                           TIM8_BDTR                           EQU 0x40010444
 4182                           ;'TIM8_BDTR.DTG`                       EQU 0x40010444,        4, base=16,    bitRange=0-7
 4183                           ;'TIM8_BDTR.LOCK`                      EQU 0x40010444,        4, base=16,    bitRange=8-9
 4184                           ;'TIM8_BDTR.OSSI`                      EQU 0x40010444,        4, base=16,    bitRange=10-10
 4185                           ;'TIM8_BDTR.OSSR`                      EQU 0x40010444,        4, base=16,    bitRange=11-11
 4186                           ;'TIM8_BDTR.BKE`                       EQU 0x40010444,        4, base=16,    bitRange=12-12
 4187                           ;'TIM8_BDTR.BKP`                       EQU 0x40010444,        4, base=16,    bitRange=13-13
 4188                           ;'TIM8_BDTR.AOE`                       EQU 0x40010444,        4, base=16,    bitRange=14-14
 4189                           ;'TIM8_BDTR.MOE`                       EQU 0x40010444,        4, base=16,    bitRange=15-15
 4190                           
 4191                           TIM8_DCR                            EQU 0x40010448
 4192                           ;'TIM8_DCR.DBA`                        EQU 0x40010448,        4, base=16,    bitRange=0-4
 4193                           ;'TIM8_DCR.DBL`                        EQU 0x40010448,        4, base=16,    bitRange=8-12
 4194                           
 4195                           TIM8_DMAR                           EQU 0x4001044C
 4196                           ;'TIM8_DMAR.DMAB`                      EQU 0x4001044C,        4, base=16,    bitRange=0-15
 4197                           
 4198                           
 4199                           ;
 4200                           ;               TIM2
 4201                           ;
 4202                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4203                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4204                           
 4205                           TIM2_CR1                            EQU 0x40000000
 4206                           ;'TIM2_CR1.CEN`                        EQU 0x40000000,        4, base=16,    bitRange=0-0
 4207                           ;'TIM2_CR1.UDIS`                       EQU 0x40000000,        4, base=16,    bitRange=1-1
 4208                           ;'TIM2_CR1.URS`                        EQU 0x40000000,        4, base=16,    bitRange=2-2
 4209                           ;'TIM2_CR1.OPM`                        EQU 0x40000000,        4, base=16,    bitRange=3-3
 4210                           ;'TIM2_CR1.DIR`                        EQU 0x40000000,        4, base=16,    bitRange=4-4
 4211                           ;'TIM2_CR1.CMS`                        EQU 0x40000000,        4, base=16,    bitRange=5-6
 4212                           ;'TIM2_CR1.ARPE`                       EQU 0x40000000,        4, base=16,    bitRange=7-7
 4213                           ;'TIM2_CR1.CKD`                        EQU 0x40000000,        4, base=16,    bitRange=8-9
 4214                           
 4215                           TIM2_CR2                            EQU 0x40000004
 4216                           ;'TIM2_CR2.CCDS`                       EQU 0x40000004,        4, base=16,    bitRange=3-3
 4217                           ;'TIM2_CR2.MMS`                        EQU 0x40000004,        4, base=16,    bitRange=4-6
 4218                           ;'TIM2_CR2.TI1S`                       EQU 0x40000004,        4, base=16,    bitRange=7-7
 4219                           
 4220                           TIM2_SMCR                           EQU 0x40000008
 4221                           ;'TIM2_SMCR.SMS`                       EQU 0x40000008,        4, base=16,    bitRange=0-2
 4222                           ;'TIM2_SMCR.TS`                        EQU 0x40000008,        4, base=16,    bitRange=4-6
 4223                           ;'TIM2_SMCR.MSM`                       EQU 0x40000008,        4, base=16,    bitRange=7-7
 4224                           ;'TIM2_SMCR.ETF`                       EQU 0x40000008,        4, base=16,    bitRange=8-11
 4225                           ;'TIM2_SMCR.ETPS`                      EQU 0x40000008,        4, base=16,    bitRange=12-13
 4226                           ;'TIM2_SMCR.ECE`                       EQU 0x40000008,        4, base=16,    bitRange=14-14
 4227                           ;'TIM2_SMCR.ETP`                       EQU 0x40000008,        4, base=16,    bitRange=15-15
 4228                           
 4229                           TIM2_DIER                           EQU 0x4000000C
 4230                           ;'TIM2_DIER.UIE`                       EQU 0x4000000C,        4, base=16,    bitRange=0-0
 4231                           ;'TIM2_DIER.CC1IE`                     EQU 0x4000000C,        4, base=16,    bitRange=1-1
 4232                           ;'TIM2_DIER.CC2IE`                     EQU 0x4000000C,        4, base=16,    bitRange=2-2
 4233                           ;'TIM2_DIER.CC3IE`                     EQU 0x4000000C,        4, base=16,    bitRange=3-3
 4234                           ;'TIM2_DIER.CC4IE`                     EQU 0x4000000C,        4, base=16,    bitRange=4-4
 4235                           ;'TIM2_DIER.TIE`                       EQU 0x4000000C,        4, base=16,    bitRange=6-6
 4236                           ;'TIM2_DIER.UDE`                       EQU 0x4000000C,        4, base=16,    bitRange=8-8
 4237                           ;'TIM2_DIER.CC1DE`                     EQU 0x4000000C,        4, base=16,    bitRange=9-9
 4238                           ;'TIM2_DIER.CC2DE`                     EQU 0x4000000C,        4, base=16,    bitRange=10-10
 4239                           ;'TIM2_DIER.CC3DE`                     EQU 0x4000000C,        4, base=16,    bitRange=11-11
 4240                           ;'TIM2_DIER.CC4DE`                     EQU 0x4000000C,        4, base=16,    bitRange=12-12
 4241                           ;'TIM2_DIER.TDE`                       EQU 0x4000000C,        4, base=16,    bitRange=14-14
 4242                           
 4243                           TIM2_SR                             EQU 0x40000010
 4244                           ;'TIM2_SR.UIF`                         EQU 0x40000010,        4, base=16,    bitRange=0-0
 4245                           ;'TIM2_SR.CC1IF`                       EQU 0x40000010,        4, base=16,    bitRange=1-1
 4246                           ;'TIM2_SR.CC2IF`                       EQU 0x40000010,        4, base=16,    bitRange=2-2
 4247                           ;'TIM2_SR.CC3IF`                       EQU 0x40000010,        4, base=16,    bitRange=3-3
 4248                           ;'TIM2_SR.CC4IF`                       EQU 0x40000010,        4, base=16,    bitRange=4-4
 4249                           ;'TIM2_SR.TIF`                         EQU 0x40000010,        4, base=16,    bitRange=6-6
 4250                           ;'TIM2_SR.CC1OF`                       EQU 0x40000010,        4, base=16,    bitRange=9-9
 4251                           ;'TIM2_SR.CC2OF`                       EQU 0x40000010,        4, base=16,    bitRange=10-10
 4252                           ;'TIM2_SR.CC3OF`                       EQU 0x40000010,        4, base=16,    bitRange=11-11
 4253                           ;'TIM2_SR.CC4OF`                       EQU 0x40000010,        4, base=16,    bitRange=12-12
 4254                           
 4255                           TIM2_EGR                            EQU 0x40000014
 4256                           ;'TIM2_EGR.UG`                         EQU 0x40000014,        4, base=16,    bitRange=0-0
 4257                           ;'TIM2_EGR.CC1G`                       EQU 0x40000014,        4, base=16,    bitRange=1-1
 4258                           ;'TIM2_EGR.CC2G`                       EQU 0x40000014,        4, base=16,    bitRange=2-2
 4259                           ;'TIM2_EGR.CC3G`                       EQU 0x40000014,        4, base=16,    bitRange=3-3
 4260                           ;'TIM2_EGR.CC4G`                       EQU 0x40000014,        4, base=16,    bitRange=4-4
 4261                           ;'TIM2_EGR.TG`                         EQU 0x40000014,        4, base=16,    bitRange=6-6
 4262                           
 4263                           TIM2_CCMR1                          EQU 0x40000018
 4264                           ;'TIM2_CCMR1.IC1S`                     EQU 0x40000018,        4, base=16,    bitRange=0-1
 4265                           ;'TIM2_CCMR1.IC1PSC`                   EQU 0x40000018,        4, base=16,    bitRange=2-3
 4266                           ;'TIM2_CCMR1.IC1F`                     EQU 0x40000018,        4, base=16,    bitRange=4-7
 4267                           ;'TIM2_CCMR1.IC2S`                     EQU 0x40000018,        4, base=16,    bitRange=8-9
 4268                           ;'TIM2_CCMR1.IC2PSC`                   EQU 0x40000018,        4, base=16,    bitRange=10-11
 4269                           ;'TIM2_CCMR1.IC2F`                     EQU 0x40000018,        4, base=16,    bitRange=12-15
 4270                           
 4271                           TIM2_OCMR1                          EQU 0x40000018
 4272                           
 4273                           TIM2_CCMR2                          EQU 0x4000001C
 4274                           ;'TIM2_CCMR2.IC3S`                     EQU 0x4000001C,        4, base=16,    bitRange=0-1
 4275                           ;'TIM2_CCMR2.IC3PSC`                   EQU 0x4000001C,        4, base=16,    bitRange=2-3
 4276                           ;'TIM2_CCMR2.IC3F`                     EQU 0x4000001C,        4, base=16,    bitRange=4-7
 4277                           ;'TIM2_CCMR2.IC4S`                     EQU 0x4000001C,        4, base=16,    bitRange=8-9
 4278                           ;'TIM2_CCMR2.IC4PSC`                   EQU 0x4000001C,        4, base=16,    bitRange=10-11
 4279                           ;'TIM2_CCMR2.IC4F`                     EQU 0x4000001C,        4, base=16,    bitRange=12-15
 4280                           
 4281                           TIM2_OCMR2                          EQU 0x4000001C
 4282                           
 4283                           TIM2_CCER                           EQU 0x40000020
 4284                           ;'TIM2_CCER.CC1E`                      EQU 0x40000020,        4, base=16,    bitRange=0-0
 4285                           ;'TIM2_CCER.CC1P`                      EQU 0x40000020,        4, base=16,    bitRange=1-1
 4286                           ;'TIM2_CCER.CC1NP`                     EQU 0x40000020,        4, base=16,    bitRange=3-3
 4287                           ;'TIM2_CCER.CC2E`                      EQU 0x40000020,        4, base=16,    bitRange=4-4
 4288                           ;'TIM2_CCER.CC2P`                      EQU 0x40000020,        4, base=16,    bitRange=5-5
 4289                           ;'TIM2_CCER.CC2NP`                     EQU 0x40000020,        4, base=16,    bitRange=7-7
 4290                           ;'TIM2_CCER.CC3E`                      EQU 0x40000020,        4, base=16,    bitRange=8-8
 4291                           ;'TIM2_CCER.CC3P`                      EQU 0x40000020,        4, base=16,    bitRange=9-9
 4292                           ;'TIM2_CCER.CC3NP`                     EQU 0x40000020,        4, base=16,    bitRange=11-11
 4293                           ;'TIM2_CCER.CC4E`                      EQU 0x40000020,        4, base=16,    bitRange=12-12
 4294                           ;'TIM2_CCER.CC4P`                      EQU 0x40000020,        4, base=16,    bitRange=13-13
 4295                           ;'TIM2_CCER.CC4NP`                     EQU 0x40000020,        4, base=16,    bitRange=15-15
 4296                           
 4297                           TIM2_CNT                            EQU 0x40000024
 4298                           
 4299                           TIM2_PSC                            EQU 0x40000028
 4300                           ;'TIM2_PSC.PSC`                        EQU 0x40000028,        4, base=16,    bitRange=0-15
 4301                           
 4302                           TIM2_ARR                            EQU 0x4000002C
 4303                           
 4304                           TIM2_CCR1                           EQU 0x40000034
 4305                           
 4306                           TIM2_CCR2                           EQU 0x40000038
 4307                           
 4308                           TIM2_CCR3                           EQU 0x4000003C
 4309                           
 4310                           TIM2_CCR4                           EQU 0x40000040
 4311                           
 4312                           TIM2_DCR                            EQU 0x40000048
 4313                           ;'TIM2_DCR.DBA`                        EQU 0x40000048,        4, base=16,    bitRange=0-4
 4314                           ;'TIM2_DCR.DBL`                        EQU 0x40000048,        4, base=16,    bitRange=8-12
 4315                           
 4316                           TIM2_DMAR                           EQU 0x4000004C
 4317                           ;'TIM2_DMAR.DMAB`                      EQU 0x4000004C,        4, base=16,    bitRange=0-15
 4318                           
 4319                           TIM2_OR                             EQU 0x40000050
 4320                           ;'TIM2_OR.ITR1_RMP`                    EQU 0x40000050,        4, base=16,    bitRange=10-11
 4321                           
 4322                           
 4323                           ;
 4324                           ;               TIM3
 4325                           ;
 4326                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4327                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4328                           
 4329                           TIM3_CR1                            EQU 0x40000400
 4330                           ;'TIM3_CR1.CEN`                        EQU 0x40000400,        4, base=16,    bitRange=0-0
 4331                           ;'TIM3_CR1.UDIS`                       EQU 0x40000400,        4, base=16,    bitRange=1-1
 4332                           ;'TIM3_CR1.URS`                        EQU 0x40000400,        4, base=16,    bitRange=2-2
 4333                           ;'TIM3_CR1.OPM`                        EQU 0x40000400,        4, base=16,    bitRange=3-3
 4334                           ;'TIM3_CR1.DIR`                        EQU 0x40000400,        4, base=16,    bitRange=4-4
 4335                           ;'TIM3_CR1.CMS`                        EQU 0x40000400,        4, base=16,    bitRange=5-6
 4336                           ;'TIM3_CR1.ARPE`                       EQU 0x40000400,        4, base=16,    bitRange=7-7
 4337                           ;'TIM3_CR1.CKD`                        EQU 0x40000400,        4, base=16,    bitRange=8-9
 4338                           
 4339                           TIM3_CR2                            EQU 0x40000404
 4340                           ;'TIM3_CR2.CCDS`                       EQU 0x40000404,        4, base=16,    bitRange=3-3
 4341                           ;'TIM3_CR2.MMS`                        EQU 0x40000404,        4, base=16,    bitRange=4-6
 4342                           ;'TIM3_CR2.TI1S`                       EQU 0x40000404,        4, base=16,    bitRange=7-7
 4343                           
 4344                           TIM3_SMCR                           EQU 0x40000408
 4345                           ;'TIM3_SMCR.SMS`                       EQU 0x40000408,        4, base=16,    bitRange=0-2
 4346                           ;'TIM3_SMCR.TS`                        EQU 0x40000408,        4, base=16,    bitRange=4-6
 4347                           ;'TIM3_SMCR.MSM`                       EQU 0x40000408,        4, base=16,    bitRange=7-7
 4348                           ;'TIM3_SMCR.ETF`                       EQU 0x40000408,        4, base=16,    bitRange=8-11
 4349                           ;'TIM3_SMCR.ETPS`                      EQU 0x40000408,        4, base=16,    bitRange=12-13
 4350                           ;'TIM3_SMCR.ECE`                       EQU 0x40000408,        4, base=16,    bitRange=14-14
 4351                           ;'TIM3_SMCR.ETP`                       EQU 0x40000408,        4, base=16,    bitRange=15-15
 4352                           
 4353                           TIM3_DIER                           EQU 0x4000040C
 4354                           ;'TIM3_DIER.UIE`                       EQU 0x4000040C,        4, base=16,    bitRange=0-0
 4355                           ;'TIM3_DIER.CC1IE`                     EQU 0x4000040C,        4, base=16,    bitRange=1-1
 4356                           ;'TIM3_DIER.CC2IE`                     EQU 0x4000040C,        4, base=16,    bitRange=2-2
 4357                           ;'TIM3_DIER.CC3IE`                     EQU 0x4000040C,        4, base=16,    bitRange=3-3
 4358                           ;'TIM3_DIER.CC4IE`                     EQU 0x4000040C,        4, base=16,    bitRange=4-4
 4359                           ;'TIM3_DIER.TIE`                       EQU 0x4000040C,        4, base=16,    bitRange=6-6
 4360                           ;'TIM3_DIER.UDE`                       EQU 0x4000040C,        4, base=16,    bitRange=8-8
 4361                           ;'TIM3_DIER.CC1DE`                     EQU 0x4000040C,        4, base=16,    bitRange=9-9
 4362                           ;'TIM3_DIER.CC2DE`                     EQU 0x4000040C,        4, base=16,    bitRange=10-10
 4363                           ;'TIM3_DIER.CC3DE`                     EQU 0x4000040C,        4, base=16,    bitRange=11-11
 4364                           ;'TIM3_DIER.CC4DE`                     EQU 0x4000040C,        4, base=16,    bitRange=12-12
 4365                           ;'TIM3_DIER.TDE`                       EQU 0x4000040C,        4, base=16,    bitRange=14-14
 4366                           
 4367                           TIM3_SR                             EQU 0x40000410
 4368                           ;'TIM3_SR.UIF`                         EQU 0x40000410,        4, base=16,    bitRange=0-0
 4369                           ;'TIM3_SR.CC1IF`                       EQU 0x40000410,        4, base=16,    bitRange=1-1
 4370                           ;'TIM3_SR.CC2IF`                       EQU 0x40000410,        4, base=16,    bitRange=2-2
 4371                           ;'TIM3_SR.CC3IF`                       EQU 0x40000410,        4, base=16,    bitRange=3-3
 4372                           ;'TIM3_SR.CC4IF`                       EQU 0x40000410,        4, base=16,    bitRange=4-4
 4373                           ;'TIM3_SR.TIF`                         EQU 0x40000410,        4, base=16,    bitRange=6-6
 4374                           ;'TIM3_SR.CC1OF`                       EQU 0x40000410,        4, base=16,    bitRange=9-9
 4375                           ;'TIM3_SR.CC2OF`                       EQU 0x40000410,        4, base=16,    bitRange=10-10
 4376                           ;'TIM3_SR.CC3OF`                       EQU 0x40000410,        4, base=16,    bitRange=11-11
 4377                           ;'TIM3_SR.CC4OF`                       EQU 0x40000410,        4, base=16,    bitRange=12-12
 4378                           
 4379                           TIM3_EGR                            EQU 0x40000414
 4380                           ;'TIM3_EGR.UG`                         EQU 0x40000414,        4, base=16,    bitRange=0-0
 4381                           ;'TIM3_EGR.CC1G`                       EQU 0x40000414,        4, base=16,    bitRange=1-1
 4382                           ;'TIM3_EGR.CC2G`                       EQU 0x40000414,        4, base=16,    bitRange=2-2
 4383                           ;'TIM3_EGR.CC3G`                       EQU 0x40000414,        4, base=16,    bitRange=3-3
 4384                           ;'TIM3_EGR.CC4G`                       EQU 0x40000414,        4, base=16,    bitRange=4-4
 4385                           ;'TIM3_EGR.TG`                         EQU 0x40000414,        4, base=16,    bitRange=6-6
 4386                           
 4387                           TIM3_CCMR1                          EQU 0x40000418
 4388                           ;'TIM3_CCMR1.IC1S`                     EQU 0x40000418,        4, base=16,    bitRange=0-1
 4389                           ;'TIM3_CCMR1.IC1PSC`                   EQU 0x40000418,        4, base=16,    bitRange=2-3
 4390                           ;'TIM3_CCMR1.IC1F`                     EQU 0x40000418,        4, base=16,    bitRange=4-7
 4391                           ;'TIM3_CCMR1.IC2S`                     EQU 0x40000418,        4, base=16,    bitRange=8-9
 4392                           ;'TIM3_CCMR1.IC2PSC`                   EQU 0x40000418,        4, base=16,    bitRange=10-11
 4393                           ;'TIM3_CCMR1.IC2F`                     EQU 0x40000418,        4, base=16,    bitRange=12-15
 4394                           
 4395                           TIM3_OCMR1                          EQU 0x40000418
 4396                           
 4397                           TIM3_CCMR2                          EQU 0x4000041C
 4398                           ;'TIM3_CCMR2.IC3S`                     EQU 0x4000041C,        4, base=16,    bitRange=0-1
 4399                           ;'TIM3_CCMR2.IC3PSC`                   EQU 0x4000041C,        4, base=16,    bitRange=2-3
 4400                           ;'TIM3_CCMR2.IC3F`                     EQU 0x4000041C,        4, base=16,    bitRange=4-7
 4401                           ;'TIM3_CCMR2.IC4S`                     EQU 0x4000041C,        4, base=16,    bitRange=8-9
 4402                           ;'TIM3_CCMR2.IC4PSC`                   EQU 0x4000041C,        4, base=16,    bitRange=10-11
 4403                           ;'TIM3_CCMR2.IC4F`                     EQU 0x4000041C,        4, base=16,    bitRange=12-15
 4404                           
 4405                           TIM3_OCMR2                          EQU 0x4000041C
 4406                           
 4407                           TIM3_CCER                           EQU 0x40000420
 4408                           ;'TIM3_CCER.CC1E`                      EQU 0x40000420,        4, base=16,    bitRange=0-0
 4409                           ;'TIM3_CCER.CC1P`                      EQU 0x40000420,        4, base=16,    bitRange=1-1
 4410                           ;'TIM3_CCER.CC1NP`                     EQU 0x40000420,        4, base=16,    bitRange=3-3
 4411                           ;'TIM3_CCER.CC2E`                      EQU 0x40000420,        4, base=16,    bitRange=4-4
 4412                           ;'TIM3_CCER.CC2P`                      EQU 0x40000420,        4, base=16,    bitRange=5-5
 4413                           ;'TIM3_CCER.CC2NP`                     EQU 0x40000420,        4, base=16,    bitRange=7-7
 4414                           ;'TIM3_CCER.CC3E`                      EQU 0x40000420,        4, base=16,    bitRange=8-8
 4415                           ;'TIM3_CCER.CC3P`                      EQU 0x40000420,        4, base=16,    bitRange=9-9
 4416                           ;'TIM3_CCER.CC3NP`                     EQU 0x40000420,        4, base=16,    bitRange=11-11
 4417                           ;'TIM3_CCER.CC4E`                      EQU 0x40000420,        4, base=16,    bitRange=12-12
 4418                           ;'TIM3_CCER.CC4P`                      EQU 0x40000420,        4, base=16,    bitRange=13-13
 4419                           ;'TIM3_CCER.CC4NP`                     EQU 0x40000420,        4, base=16,    bitRange=15-15
 4420                           
 4421                           TIM3_CNT                            EQU 0x40000424
 4422                           
 4423                           TIM3_PSC                            EQU 0x40000428
 4424                           ;'TIM3_PSC.PSC`                        EQU 0x40000428,        4, base=16,    bitRange=0-15
 4425                           
 4426                           TIM3_ARR                            EQU 0x4000042C
 4427                           
 4428                           TIM3_CCR1                           EQU 0x40000434
 4429                           
 4430                           TIM3_CCR2                           EQU 0x40000438
 4431                           
 4432                           TIM3_CCR3                           EQU 0x4000043C
 4433                           
 4434                           TIM3_CCR4                           EQU 0x40000440
 4435                           
 4436                           TIM3_DCR                            EQU 0x40000448
 4437                           ;'TIM3_DCR.DBA`                        EQU 0x40000448,        4, base=16,    bitRange=0-4
 4438                           ;'TIM3_DCR.DBL`                        EQU 0x40000448,        4, base=16,    bitRange=8-12
 4439                           
 4440                           TIM3_DMAR                           EQU 0x4000044C
 4441                           ;'TIM3_DMAR.DMAB`                      EQU 0x4000044C,        4, base=16,    bitRange=0-15
 4442                           
 4443                           
 4444                           ;
 4445                           ;               TIM4
 4446                           ;
 4447                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4448                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4449                           
 4450                           TIM4_CR1                            EQU 0x40000800
 4451                           ;'TIM4_CR1.CEN`                        EQU 0x40000800,        4, base=16,    bitRange=0-0
 4452                           ;'TIM4_CR1.UDIS`                       EQU 0x40000800,        4, base=16,    bitRange=1-1
 4453                           ;'TIM4_CR1.URS`                        EQU 0x40000800,        4, base=16,    bitRange=2-2
 4454                           ;'TIM4_CR1.OPM`                        EQU 0x40000800,        4, base=16,    bitRange=3-3
 4455                           ;'TIM4_CR1.DIR`                        EQU 0x40000800,        4, base=16,    bitRange=4-4
 4456                           ;'TIM4_CR1.CMS`                        EQU 0x40000800,        4, base=16,    bitRange=5-6
 4457                           ;'TIM4_CR1.ARPE`                       EQU 0x40000800,        4, base=16,    bitRange=7-7
 4458                           ;'TIM4_CR1.CKD`                        EQU 0x40000800,        4, base=16,    bitRange=8-9
 4459                           
 4460                           TIM4_CR2                            EQU 0x40000804
 4461                           ;'TIM4_CR2.CCDS`                       EQU 0x40000804,        4, base=16,    bitRange=3-3
 4462                           ;'TIM4_CR2.MMS`                        EQU 0x40000804,        4, base=16,    bitRange=4-6
 4463                           ;'TIM4_CR2.TI1S`                       EQU 0x40000804,        4, base=16,    bitRange=7-7
 4464                           
 4465                           TIM4_SMCR                           EQU 0x40000808
 4466                           ;'TIM4_SMCR.SMS`                       EQU 0x40000808,        4, base=16,    bitRange=0-2
 4467                           ;'TIM4_SMCR.TS`                        EQU 0x40000808,        4, base=16,    bitRange=4-6
 4468                           ;'TIM4_SMCR.MSM`                       EQU 0x40000808,        4, base=16,    bitRange=7-7
 4469                           ;'TIM4_SMCR.ETF`                       EQU 0x40000808,        4, base=16,    bitRange=8-11
 4470                           ;'TIM4_SMCR.ETPS`                      EQU 0x40000808,        4, base=16,    bitRange=12-13
 4471                           ;'TIM4_SMCR.ECE`                       EQU 0x40000808,        4, base=16,    bitRange=14-14
 4472                           ;'TIM4_SMCR.ETP`                       EQU 0x40000808,        4, base=16,    bitRange=15-15
 4473                           
 4474                           TIM4_DIER                           EQU 0x4000080C
 4475                           ;'TIM4_DIER.UIE`                       EQU 0x4000080C,        4, base=16,    bitRange=0-0
 4476                           ;'TIM4_DIER.CC1IE`                     EQU 0x4000080C,        4, base=16,    bitRange=1-1
 4477                           ;'TIM4_DIER.CC2IE`                     EQU 0x4000080C,        4, base=16,    bitRange=2-2
 4478                           ;'TIM4_DIER.CC3IE`                     EQU 0x4000080C,        4, base=16,    bitRange=3-3
 4479                           ;'TIM4_DIER.CC4IE`                     EQU 0x4000080C,        4, base=16,    bitRange=4-4
 4480                           ;'TIM4_DIER.TIE`                       EQU 0x4000080C,        4, base=16,    bitRange=6-6
 4481                           ;'TIM4_DIER.UDE`                       EQU 0x4000080C,        4, base=16,    bitRange=8-8
 4482                           ;'TIM4_DIER.CC1DE`                     EQU 0x4000080C,        4, base=16,    bitRange=9-9
 4483                           ;'TIM4_DIER.CC2DE`                     EQU 0x4000080C,        4, base=16,    bitRange=10-10
 4484                           ;'TIM4_DIER.CC3DE`                     EQU 0x4000080C,        4, base=16,    bitRange=11-11
 4485                           ;'TIM4_DIER.CC4DE`                     EQU 0x4000080C,        4, base=16,    bitRange=12-12
 4486                           ;'TIM4_DIER.TDE`                       EQU 0x4000080C,        4, base=16,    bitRange=14-14
 4487                           
 4488                           TIM4_SR                             EQU 0x40000810
 4489                           ;'TIM4_SR.UIF`                         EQU 0x40000810,        4, base=16,    bitRange=0-0
 4490                           ;'TIM4_SR.CC1IF`                       EQU 0x40000810,        4, base=16,    bitRange=1-1
 4491                           ;'TIM4_SR.CC2IF`                       EQU 0x40000810,        4, base=16,    bitRange=2-2
 4492                           ;'TIM4_SR.CC3IF`                       EQU 0x40000810,        4, base=16,    bitRange=3-3
 4493                           ;'TIM4_SR.CC4IF`                       EQU 0x40000810,        4, base=16,    bitRange=4-4
 4494                           ;'TIM4_SR.TIF`                         EQU 0x40000810,        4, base=16,    bitRange=6-6
 4495                           ;'TIM4_SR.CC1OF`                       EQU 0x40000810,        4, base=16,    bitRange=9-9
 4496                           ;'TIM4_SR.CC2OF`                       EQU 0x40000810,        4, base=16,    bitRange=10-10
 4497                           ;'TIM4_SR.CC3OF`                       EQU 0x40000810,        4, base=16,    bitRange=11-11
 4498                           ;'TIM4_SR.CC4OF`                       EQU 0x40000810,        4, base=16,    bitRange=12-12
 4499                           
 4500                           TIM4_EGR                            EQU 0x40000814
 4501                           ;'TIM4_EGR.UG`                         EQU 0x40000814,        4, base=16,    bitRange=0-0
 4502                           ;'TIM4_EGR.CC1G`                       EQU 0x40000814,        4, base=16,    bitRange=1-1
 4503                           ;'TIM4_EGR.CC2G`                       EQU 0x40000814,        4, base=16,    bitRange=2-2
 4504                           ;'TIM4_EGR.CC3G`                       EQU 0x40000814,        4, base=16,    bitRange=3-3
 4505                           ;'TIM4_EGR.CC4G`                       EQU 0x40000814,        4, base=16,    bitRange=4-4
 4506                           ;'TIM4_EGR.TG`                         EQU 0x40000814,        4, base=16,    bitRange=6-6
 4507                           
 4508                           TIM4_CCMR1                          EQU 0x40000818
 4509                           ;'TIM4_CCMR1.IC1S`                     EQU 0x40000818,        4, base=16,    bitRange=0-1
 4510                           ;'TIM4_CCMR1.IC1PSC`                   EQU 0x40000818,        4, base=16,    bitRange=2-3
 4511                           ;'TIM4_CCMR1.IC1F`                     EQU 0x40000818,        4, base=16,    bitRange=4-7
 4512                           ;'TIM4_CCMR1.IC2S`                     EQU 0x40000818,        4, base=16,    bitRange=8-9
 4513                           ;'TIM4_CCMR1.IC2PSC`                   EQU 0x40000818,        4, base=16,    bitRange=10-11
 4514                           ;'TIM4_CCMR1.IC2F`                     EQU 0x40000818,        4, base=16,    bitRange=12-15
 4515                           
 4516                           TIM4_OCMR1                          EQU 0x40000818
 4517                           
 4518                           TIM4_CCMR2                          EQU 0x4000081C
 4519                           ;'TIM4_CCMR2.IC3S`                     EQU 0x4000081C,        4, base=16,    bitRange=0-1
 4520                           ;'TIM4_CCMR2.IC3PSC`                   EQU 0x4000081C,        4, base=16,    bitRange=2-3
 4521                           ;'TIM4_CCMR2.IC3F`                     EQU 0x4000081C,        4, base=16,    bitRange=4-7
 4522                           ;'TIM4_CCMR2.IC4S`                     EQU 0x4000081C,        4, base=16,    bitRange=8-9
 4523                           ;'TIM4_CCMR2.IC4PSC`                   EQU 0x4000081C,        4, base=16,    bitRange=10-11
 4524                           ;'TIM4_CCMR2.IC4F`                     EQU 0x4000081C,        4, base=16,    bitRange=12-15
 4525                           
 4526                           TIM4_OCMR2                          EQU 0x4000081C
 4527                           
 4528                           TIM4_CCER                           EQU 0x40000820
 4529                           ;'TIM4_CCER.CC1E`                      EQU 0x40000820,        4, base=16,    bitRange=0-0
 4530                           ;'TIM4_CCER.CC1P`                      EQU 0x40000820,        4, base=16,    bitRange=1-1
 4531                           ;'TIM4_CCER.CC1NP`                     EQU 0x40000820,        4, base=16,    bitRange=3-3
 4532                           ;'TIM4_CCER.CC2E`                      EQU 0x40000820,        4, base=16,    bitRange=4-4
 4533                           ;'TIM4_CCER.CC2P`                      EQU 0x40000820,        4, base=16,    bitRange=5-5
 4534                           ;'TIM4_CCER.CC2NP`                     EQU 0x40000820,        4, base=16,    bitRange=7-7
 4535                           ;'TIM4_CCER.CC3E`                      EQU 0x40000820,        4, base=16,    bitRange=8-8
 4536                           ;'TIM4_CCER.CC3P`                      EQU 0x40000820,        4, base=16,    bitRange=9-9
 4537                           ;'TIM4_CCER.CC3NP`                     EQU 0x40000820,        4, base=16,    bitRange=11-11
 4538                           ;'TIM4_CCER.CC4E`                      EQU 0x40000820,        4, base=16,    bitRange=12-12
 4539                           ;'TIM4_CCER.CC4P`                      EQU 0x40000820,        4, base=16,    bitRange=13-13
 4540                           ;'TIM4_CCER.CC4NP`                     EQU 0x40000820,        4, base=16,    bitRange=15-15
 4541                           
 4542                           TIM4_CNT                            EQU 0x40000824
 4543                           
 4544                           TIM4_PSC                            EQU 0x40000828
 4545                           ;'TIM4_PSC.PSC`                        EQU 0x40000828,        4, base=16,    bitRange=0-15
 4546                           
 4547                           TIM4_ARR                            EQU 0x4000082C
 4548                           
 4549                           TIM4_CCR1                           EQU 0x40000834
 4550                           
 4551                           TIM4_CCR2                           EQU 0x40000838
 4552                           
 4553                           TIM4_CCR3                           EQU 0x4000083C
 4554                           
 4555                           TIM4_CCR4                           EQU 0x40000840
 4556                           
 4557                           TIM4_DCR                            EQU 0x40000848
 4558                           ;'TIM4_DCR.DBA`                        EQU 0x40000848,        4, base=16,    bitRange=0-4
 4559                           ;'TIM4_DCR.DBL`                        EQU 0x40000848,        4, base=16,    bitRange=8-12
 4560                           
 4561                           TIM4_DMAR                           EQU 0x4000084C
 4562                           ;'TIM4_DMAR.DMAB`                      EQU 0x4000084C,        4, base=16,    bitRange=0-15
 4563                           
 4564                           
 4565                           ;
 4566                           ;               TIM5
 4567                           ;
 4568                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4569                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4570                           
 4571                           TIM5_CR1                            EQU 0x40000C00
 4572                           ;'TIM5_CR1.CEN`                        EQU 0x40000C00,        4, base=16,    bitRange=0-0
 4573                           ;'TIM5_CR1.UDIS`                       EQU 0x40000C00,        4, base=16,    bitRange=1-1
 4574                           ;'TIM5_CR1.URS`                        EQU 0x40000C00,        4, base=16,    bitRange=2-2
 4575                           ;'TIM5_CR1.OPM`                        EQU 0x40000C00,        4, base=16,    bitRange=3-3
 4576                           ;'TIM5_CR1.DIR`                        EQU 0x40000C00,        4, base=16,    bitRange=4-4
 4577                           ;'TIM5_CR1.CMS`                        EQU 0x40000C00,        4, base=16,    bitRange=5-6
 4578                           ;'TIM5_CR1.ARPE`                       EQU 0x40000C00,        4, base=16,    bitRange=7-7
 4579                           ;'TIM5_CR1.CKD`                        EQU 0x40000C00,        4, base=16,    bitRange=8-9
 4580                           
 4581                           TIM5_CR2                            EQU 0x40000C04
 4582                           ;'TIM5_CR2.CCDS`                       EQU 0x40000C04,        4, base=16,    bitRange=3-3
 4583                           ;'TIM5_CR2.MMS`                        EQU 0x40000C04,        4, base=16,    bitRange=4-6
 4584                           ;'TIM5_CR2.TI1S`                       EQU 0x40000C04,        4, base=16,    bitRange=7-7
 4585                           
 4586                           TIM5_SMCR                           EQU 0x40000C08
 4587                           ;'TIM5_SMCR.SMS`                       EQU 0x40000C08,        4, base=16,    bitRange=0-2
 4588                           ;'TIM5_SMCR.TS`                        EQU 0x40000C08,        4, base=16,    bitRange=4-6
 4589                           ;'TIM5_SMCR.MSM`                       EQU 0x40000C08,        4, base=16,    bitRange=7-7
 4590                           ;'TIM5_SMCR.ETF`                       EQU 0x40000C08,        4, base=16,    bitRange=8-11
 4591                           ;'TIM5_SMCR.ETPS`                      EQU 0x40000C08,        4, base=16,    bitRange=12-13
 4592                           ;'TIM5_SMCR.ECE`                       EQU 0x40000C08,        4, base=16,    bitRange=14-14
 4593                           ;'TIM5_SMCR.ETP`                       EQU 0x40000C08,        4, base=16,    bitRange=15-15
 4594                           
 4595                           TIM5_DIER                           EQU 0x40000C0C
 4596                           ;'TIM5_DIER.UIE`                       EQU 0x40000C0C,        4, base=16,    bitRange=0-0
 4597                           ;'TIM5_DIER.CC1IE`                     EQU 0x40000C0C,        4, base=16,    bitRange=1-1
 4598                           ;'TIM5_DIER.CC2IE`                     EQU 0x40000C0C,        4, base=16,    bitRange=2-2
 4599                           ;'TIM5_DIER.CC3IE`                     EQU 0x40000C0C,        4, base=16,    bitRange=3-3
 4600                           ;'TIM5_DIER.CC4IE`                     EQU 0x40000C0C,        4, base=16,    bitRange=4-4
 4601                           ;'TIM5_DIER.TIE`                       EQU 0x40000C0C,        4, base=16,    bitRange=6-6
 4602                           ;'TIM5_DIER.UDE`                       EQU 0x40000C0C,        4, base=16,    bitRange=8-8
 4603                           ;'TIM5_DIER.CC1DE`                     EQU 0x40000C0C,        4, base=16,    bitRange=9-9
 4604                           ;'TIM5_DIER.CC2DE`                     EQU 0x40000C0C,        4, base=16,    bitRange=10-10
 4605                           ;'TIM5_DIER.CC3DE`                     EQU 0x40000C0C,        4, base=16,    bitRange=11-11
 4606                           ;'TIM5_DIER.CC4DE`                     EQU 0x40000C0C,        4, base=16,    bitRange=12-12
 4607                           ;'TIM5_DIER.TDE`                       EQU 0x40000C0C,        4, base=16,    bitRange=14-14
 4608                           
 4609                           TIM5_SR                             EQU 0x40000C10
 4610                           ;'TIM5_SR.UIF`                         EQU 0x40000C10,        4, base=16,    bitRange=0-0
 4611                           ;'TIM5_SR.CC1IF`                       EQU 0x40000C10,        4, base=16,    bitRange=1-1
 4612                           ;'TIM5_SR.CC2IF`                       EQU 0x40000C10,        4, base=16,    bitRange=2-2
 4613                           ;'TIM5_SR.CC3IF`                       EQU 0x40000C10,        4, base=16,    bitRange=3-3
 4614                           ;'TIM5_SR.CC4IF`                       EQU 0x40000C10,        4, base=16,    bitRange=4-4
 4615                           ;'TIM5_SR.TIF`                         EQU 0x40000C10,        4, base=16,    bitRange=6-6
 4616                           ;'TIM5_SR.CC1OF`                       EQU 0x40000C10,        4, base=16,    bitRange=9-9
 4617                           ;'TIM5_SR.CC2OF`                       EQU 0x40000C10,        4, base=16,    bitRange=10-10
 4618                           ;'TIM5_SR.CC3OF`                       EQU 0x40000C10,        4, base=16,    bitRange=11-11
 4619                           ;'TIM5_SR.CC4OF`                       EQU 0x40000C10,        4, base=16,    bitRange=12-12
 4620                           
 4621                           TIM5_EGR                            EQU 0x40000C14
 4622                           ;'TIM5_EGR.UG`                         EQU 0x40000C14,        4, base=16,    bitRange=0-0
 4623                           ;'TIM5_EGR.CC1G`                       EQU 0x40000C14,        4, base=16,    bitRange=1-1
 4624                           ;'TIM5_EGR.CC2G`                       EQU 0x40000C14,        4, base=16,    bitRange=2-2
 4625                           ;'TIM5_EGR.CC3G`                       EQU 0x40000C14,        4, base=16,    bitRange=3-3
 4626                           ;'TIM5_EGR.CC4G`                       EQU 0x40000C14,        4, base=16,    bitRange=4-4
 4627                           ;'TIM5_EGR.TG`                         EQU 0x40000C14,        4, base=16,    bitRange=6-6
 4628                           
 4629                           TIM5_CCMR1                          EQU 0x40000C18
 4630                           ;'TIM5_CCMR1.IC1S`                     EQU 0x40000C18,        4, base=16,    bitRange=0-1
 4631                           ;'TIM5_CCMR1.IC1PSC`                   EQU 0x40000C18,        4, base=16,    bitRange=2-3
 4632                           ;'TIM5_CCMR1.IC1F`                     EQU 0x40000C18,        4, base=16,    bitRange=4-7
 4633                           ;'TIM5_CCMR1.IC2S`                     EQU 0x40000C18,        4, base=16,    bitRange=8-9
 4634                           ;'TIM5_CCMR1.IC2PSC`                   EQU 0x40000C18,        4, base=16,    bitRange=10-11
 4635                           ;'TIM5_CCMR1.IC2F`                     EQU 0x40000C18,        4, base=16,    bitRange=12-15
 4636                           
 4637                           TIM5_OCMR1                          EQU 0x40000C18
 4638                           
 4639                           TIM5_CCMR2                          EQU 0x40000C1C
 4640                           ;'TIM5_CCMR2.IC3S`                     EQU 0x40000C1C,        4, base=16,    bitRange=0-1
 4641                           ;'TIM5_CCMR2.IC3PSC`                   EQU 0x40000C1C,        4, base=16,    bitRange=2-3
 4642                           ;'TIM5_CCMR2.IC3F`                     EQU 0x40000C1C,        4, base=16,    bitRange=4-7
 4643                           ;'TIM5_CCMR2.IC4S`                     EQU 0x40000C1C,        4, base=16,    bitRange=8-9
 4644                           ;'TIM5_CCMR2.IC4PSC`                   EQU 0x40000C1C,        4, base=16,    bitRange=10-11
 4645                           ;'TIM5_CCMR2.IC4F`                     EQU 0x40000C1C,        4, base=16,    bitRange=12-15
 4646                           
 4647                           TIM5_OCMR2                          EQU 0x40000C1C
 4648                           
 4649                           TIM5_CCER                           EQU 0x40000C20
 4650                           ;'TIM5_CCER.CC1E`                      EQU 0x40000C20,        4, base=16,    bitRange=0-0
 4651                           ;'TIM5_CCER.CC1P`                      EQU 0x40000C20,        4, base=16,    bitRange=1-1
 4652                           ;'TIM5_CCER.CC1NP`                     EQU 0x40000C20,        4, base=16,    bitRange=3-3
 4653                           ;'TIM5_CCER.CC2E`                      EQU 0x40000C20,        4, base=16,    bitRange=4-4
 4654                           ;'TIM5_CCER.CC2P`                      EQU 0x40000C20,        4, base=16,    bitRange=5-5
 4655                           ;'TIM5_CCER.CC2NP`                     EQU 0x40000C20,        4, base=16,    bitRange=7-7
 4656                           ;'TIM5_CCER.CC3E`                      EQU 0x40000C20,        4, base=16,    bitRange=8-8
 4657                           ;'TIM5_CCER.CC3P`                      EQU 0x40000C20,        4, base=16,    bitRange=9-9
 4658                           ;'TIM5_CCER.CC3NP`                     EQU 0x40000C20,        4, base=16,    bitRange=11-11
 4659                           ;'TIM5_CCER.CC4E`                      EQU 0x40000C20,        4, base=16,    bitRange=12-12
 4660                           ;'TIM5_CCER.CC4P`                      EQU 0x40000C20,        4, base=16,    bitRange=13-13
 4661                           ;'TIM5_CCER.CC4NP`                     EQU 0x40000C20,        4, base=16,    bitRange=15-15
 4662                           
 4663                           TIM5_CNT                            EQU 0x40000C24
 4664                           
 4665                           TIM5_PSC                            EQU 0x40000C28
 4666                           ;'TIM5_PSC.PSC`                        EQU 0x40000C28,        4, base=16,    bitRange=0-15
 4667                           
 4668                           TIM5_ARR                            EQU 0x40000C2C
 4669                           
 4670                           TIM5_CCR1                           EQU 0x40000C34
 4671                           
 4672                           TIM5_CCR2                           EQU 0x40000C38
 4673                           
 4674                           TIM5_CCR3                           EQU 0x40000C3C
 4675                           
 4676                           TIM5_CCR4                           EQU 0x40000C40
 4677                           
 4678                           TIM5_DCR                            EQU 0x40000C48
 4679                           ;'TIM5_DCR.DBA`                        EQU 0x40000C48,        4, base=16,    bitRange=0-4
 4680                           ;'TIM5_DCR.DBL`                        EQU 0x40000C48,        4, base=16,    bitRange=8-12
 4681                           
 4682                           TIM5_DMAR                           EQU 0x40000C4C
 4683                           ;'TIM5_DMAR.DMAB`                      EQU 0x40000C4C,        4, base=16,    bitRange=0-15
 4684                           
 4685                           TIM5_OR                             EQU 0x40000C50
 4686                           ;'TIM5_OR.TI4_RMP`                     EQU 0x40000C50,        4, base=16,    bitRange=6-7
 4687                           
 4688                           
 4689                           ;
 4690                           ;               TIM6
 4691                           ;
 4692                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4693                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4694                           
 4695                           TIM6_CR1                            EQU 0x40001000
 4696                           ;'TIM6_CR1.CEN`                        EQU 0x40001000,        4, base=16,    bitRange=0-0
 4697                           ;'TIM6_CR1.UDIS`                       EQU 0x40001000,        4, base=16,    bitRange=1-1
 4698                           ;'TIM6_CR1.URS`                        EQU 0x40001000,        4, base=16,    bitRange=2-2
 4699                           ;'TIM6_CR1.OPM`                        EQU 0x40001000,        4, base=16,    bitRange=3-3
 4700                           ;'TIM6_CR1.ARPE`                       EQU 0x40001000,        4, base=16,    bitRange=7-7
 4701                           
 4702                           TIM6_CR2                            EQU 0x40001004
 4703                           ;'TIM6_CR2.MMS`                        EQU 0x40001004,        4, base=16,    bitRange=4-6
 4704                           
 4705                           TIM6_DIER                           EQU 0x4000100C
 4706                           ;'TIM6_DIER.UIE`                       EQU 0x4000100C,        4, base=16,    bitRange=0-0
 4707                           ;'TIM6_DIER.UDE`                       EQU 0x4000100C,        4, base=16,    bitRange=8-8
 4708                           
 4709                           TIM6_SR                             EQU 0x40001010
 4710                           ;'TIM6_SR.UIF`                         EQU 0x40001010,        4, base=16,    bitRange=0-0
 4711                           
 4712                           TIM6_EGR                            EQU 0x40001014
 4713                           ;'TIM6_EGR.UG`                         EQU 0x40001014,        4, base=16,    bitRange=0-0
 4714                           
 4715                           TIM6_CNT                            EQU 0x40001024
 4716                           ;'TIM6_CNT.CNT`                        EQU 0x40001024,        4, base=16,    bitRange=0-15
 4717                           
 4718                           TIM6_PSC                            EQU 0x40001028
 4719                           ;'TIM6_PSC.PSC`                        EQU 0x40001028,        4, base=16,    bitRange=0-15
 4720                           
 4721                           TIM6_ARR                            EQU 0x4000102C
 4722                           ;'TIM6_ARR.ARR`                        EQU 0x4000102C,        4, base=16,    bitRange=0-15
 4723                           
 4724                           
 4725                           ;
 4726                           ;               TIM7
 4727                           ;
 4728                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4729                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4730                           
 4731                           TIM7_CR1                            EQU 0x40001400
 4732                           ;'TIM7_CR1.CEN`                        EQU 0x40001400,        4, base=16,    bitRange=0-0
 4733                           ;'TIM7_CR1.UDIS`                       EQU 0x40001400,        4, base=16,    bitRange=1-1
 4734                           ;'TIM7_CR1.URS`                        EQU 0x40001400,        4, base=16,    bitRange=2-2
 4735                           ;'TIM7_CR1.OPM`                        EQU 0x40001400,        4, base=16,    bitRange=3-3
 4736                           ;'TIM7_CR1.ARPE`                       EQU 0x40001400,        4, base=16,    bitRange=7-7
 4737                           
 4738                           TIM7_CR2                            EQU 0x40001404
 4739                           ;'TIM7_CR2.MMS`                        EQU 0x40001404,        4, base=16,    bitRange=4-6
 4740                           
 4741                           TIM7_DIER                           EQU 0x4000140C
 4742                           ;'TIM7_DIER.UIE`                       EQU 0x4000140C,        4, base=16,    bitRange=0-0
 4743                           ;'TIM7_DIER.UDE`                       EQU 0x4000140C,        4, base=16,    bitRange=8-8
 4744                           
 4745                           TIM7_SR                             EQU 0x40001410
 4746                           ;'TIM7_SR.UIF`                         EQU 0x40001410,        4, base=16,    bitRange=0-0
 4747                           
 4748                           TIM7_EGR                            EQU 0x40001414
 4749                           ;'TIM7_EGR.UG`                         EQU 0x40001414,        4, base=16,    bitRange=0-0
 4750                           
 4751                           TIM7_CNT                            EQU 0x40001424
 4752                           ;'TIM7_CNT.CNT`                        EQU 0x40001424,        4, base=16,    bitRange=0-15
 4753                           
 4754                           TIM7_PSC                            EQU 0x40001428
 4755                           ;'TIM7_PSC.PSC`                        EQU 0x40001428,        4, base=16,    bitRange=0-15
 4756                           
 4757                           TIM7_ARR                            EQU 0x4000142C
 4758                           ;'TIM7_ARR.ARR`                        EQU 0x4000142C,        4, base=16,    bitRange=0-15
 4759                           
 4760                           
 4761                           ;
 4762                           ;               TIM9
 4763                           ;
 4764                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4765                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4766                           
 4767                           TIM9_CR1                            EQU 0x40014000
 4768                           ;'TIM9_CR1.CEN`                        EQU 0x40014000,        4, base=16,    bitRange=0-0
 4769                           ;'TIM9_CR1.UDIS`                       EQU 0x40014000,        4, base=16,    bitRange=1-1
 4770                           ;'TIM9_CR1.URS`                        EQU 0x40014000,        4, base=16,    bitRange=2-2
 4771                           ;'TIM9_CR1.OPM`                        EQU 0x40014000,        4, base=16,    bitRange=3-3
 4772                           ;'TIM9_CR1.ARPE`                       EQU 0x40014000,        4, base=16,    bitRange=7-7
 4773                           ;'TIM9_CR1.CKD`                        EQU 0x40014000,        4, base=16,    bitRange=8-9
 4774                           
 4775                           TIM9_CR2                            EQU 0x40014004
 4776                           ;'TIM9_CR2.MMS`                        EQU 0x40014004,        4, base=16,    bitRange=4-6
 4777                           
 4778                           TIM9_SMCR                           EQU 0x40014008
 4779                           ;'TIM9_SMCR.SMS`                       EQU 0x40014008,        4, base=16,    bitRange=0-2
 4780                           ;'TIM9_SMCR.TS`                        EQU 0x40014008,        4, base=16,    bitRange=4-6
 4781                           ;'TIM9_SMCR.MSM`                       EQU 0x40014008,        4, base=16,    bitRange=7-7
 4782                           
 4783                           TIM9_DIER                           EQU 0x4001400C
 4784                           ;'TIM9_DIER.UIE`                       EQU 0x4001400C,        4, base=16,    bitRange=0-0
 4785                           ;'TIM9_DIER.CC1IE`                     EQU 0x4001400C,        4, base=16,    bitRange=1-1
 4786                           ;'TIM9_DIER.CC2IE`                     EQU 0x4001400C,        4, base=16,    bitRange=2-2
 4787                           ;'TIM9_DIER.TIE`                       EQU 0x4001400C,        4, base=16,    bitRange=6-6
 4788                           
 4789                           TIM9_SR                             EQU 0x40014010
 4790                           ;'TIM9_SR.UIF`                         EQU 0x40014010,        4, base=16,    bitRange=0-0
 4791                           ;'TIM9_SR.CC1IF`                       EQU 0x40014010,        4, base=16,    bitRange=1-1
 4792                           ;'TIM9_SR.CC2IF`                       EQU 0x40014010,        4, base=16,    bitRange=2-2
 4793                           ;'TIM9_SR.TIF`                         EQU 0x40014010,        4, base=16,    bitRange=6-6
 4794                           ;'TIM9_SR.CC1OF`                       EQU 0x40014010,        4, base=16,    bitRange=9-9
 4795                           ;'TIM9_SR.CC2OF`                       EQU 0x40014010,        4, base=16,    bitRange=10-10
 4796                           
 4797                           TIM9_EGR                            EQU 0x40014014
 4798                           ;'TIM9_EGR.UG`                         EQU 0x40014014,        4, base=16,    bitRange=0-0
 4799                           ;'TIM9_EGR.CC1G`                       EQU 0x40014014,        4, base=16,    bitRange=1-1
 4800                           ;'TIM9_EGR.CC2G`                       EQU 0x40014014,        4, base=16,    bitRange=2-2
 4801                           ;'TIM9_EGR.TG`                         EQU 0x40014014,        4, base=16,    bitRange=6-6
 4802                           
 4803                           TIM9_CCMR1                          EQU 0x40014018
 4804                           ;'TIM9_CCMR1.IC1S`                     EQU 0x40014018,        4, base=16,    bitRange=0-1
 4805                           ;'TIM9_CCMR1.IC1PSC`                   EQU 0x40014018,        4, base=16,    bitRange=2-3
 4806                           ;'TIM9_CCMR1.IC1F`                     EQU 0x40014018,        4, base=16,    bitRange=4-7
 4807                           ;'TIM9_CCMR1.IC2S`                     EQU 0x40014018,        4, base=16,    bitRange=8-9
 4808                           ;'TIM9_CCMR1.IC2PSC`                   EQU 0x40014018,        4, base=16,    bitRange=10-11
 4809                           ;'TIM9_CCMR1.IC2F`                     EQU 0x40014018,        4, base=16,    bitRange=12-15
 4810                           
 4811                           TIM9_OCMR1                          EQU 0x40014018
 4812                           
 4813                           TIM9_CCER                           EQU 0x40014020
 4814                           ;'TIM9_CCER.CC1E`                      EQU 0x40014020,        4, base=16,    bitRange=0-0
 4815                           ;'TIM9_CCER.CC1P`                      EQU 0x40014020,        4, base=16,    bitRange=1-1
 4816                           ;'TIM9_CCER.CC1NP`                     EQU 0x40014020,        4, base=16,    bitRange=3-3
 4817                           ;'TIM9_CCER.CC2E`                      EQU 0x40014020,        4, base=16,    bitRange=4-4
 4818                           ;'TIM9_CCER.CC2P`                      EQU 0x40014020,        4, base=16,    bitRange=5-5
 4819                           ;'TIM9_CCER.CC2NP`                     EQU 0x40014020,        4, base=16,    bitRange=7-7
 4820                           
 4821                           TIM9_CNT                            EQU 0x40014024
 4822                           ;'TIM9_CNT.CNT`                        EQU 0x40014024,        4, base=16,    bitRange=0-15
 4823                           
 4824                           TIM9_PSC                            EQU 0x40014028
 4825                           ;'TIM9_PSC.PSC`                        EQU 0x40014028,        4, base=16,    bitRange=0-15
 4826                           
 4827                           TIM9_ARR                            EQU 0x4001402C
 4828                           ;'TIM9_ARR.ARR`                        EQU 0x4001402C,        4, base=16,    bitRange=0-15
 4829                           
 4830                           TIM9_CCR1                           EQU 0x40014034
 4831                           ;'TIM9_CCR1.CCR`                       EQU 0x40014034,        4, base=16,    bitRange=0-15
 4832                           
 4833                           TIM9_CCR2                           EQU 0x40014038
 4834                           ;'TIM9_CCR2.CCR`                       EQU 0x40014038,        4, base=16,    bitRange=0-15
 4835                           
 4836                           
 4837                           ;
 4838                           ;               TIM12
 4839                           ;
 4840                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4841                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4842                           
 4843                           TIM12_CR1                           EQU 0x40001800
 4844                           ;'TIM12_CR1.CEN`                       EQU 0x40001800,        4, base=16,    bitRange=0-0
 4845                           ;'TIM12_CR1.UDIS`                      EQU 0x40001800,        4, base=16,    bitRange=1-1
 4846                           ;'TIM12_CR1.URS`                       EQU 0x40001800,        4, base=16,    bitRange=2-2
 4847                           ;'TIM12_CR1.OPM`                       EQU 0x40001800,        4, base=16,    bitRange=3-3
 4848                           ;'TIM12_CR1.ARPE`                      EQU 0x40001800,        4, base=16,    bitRange=7-7
 4849                           ;'TIM12_CR1.CKD`                       EQU 0x40001800,        4, base=16,    bitRange=8-9
 4850                           
 4851                           TIM12_CR2                           EQU 0x40001804
 4852                           ;'TIM12_CR2.MMS`                       EQU 0x40001804,        4, base=16,    bitRange=4-6
 4853                           
 4854                           TIM12_SMCR                          EQU 0x40001808
 4855                           ;'TIM12_SMCR.SMS`                      EQU 0x40001808,        4, base=16,    bitRange=0-2
 4856                           ;'TIM12_SMCR.TS`                       EQU 0x40001808,        4, base=16,    bitRange=4-6
 4857                           ;'TIM12_SMCR.MSM`                      EQU 0x40001808,        4, base=16,    bitRange=7-7
 4858                           
 4859                           TIM12_DIER                          EQU 0x4000180C
 4860                           ;'TIM12_DIER.UIE`                      EQU 0x4000180C,        4, base=16,    bitRange=0-0
 4861                           ;'TIM12_DIER.CC1IE`                    EQU 0x4000180C,        4, base=16,    bitRange=1-1
 4862                           ;'TIM12_DIER.CC2IE`                    EQU 0x4000180C,        4, base=16,    bitRange=2-2
 4863                           ;'TIM12_DIER.TIE`                      EQU 0x4000180C,        4, base=16,    bitRange=6-6
 4864                           
 4865                           TIM12_SR                            EQU 0x40001810
 4866                           ;'TIM12_SR.UIF`                        EQU 0x40001810,        4, base=16,    bitRange=0-0
 4867                           ;'TIM12_SR.CC1IF`                      EQU 0x40001810,        4, base=16,    bitRange=1-1
 4868                           ;'TIM12_SR.CC2IF`                      EQU 0x40001810,        4, base=16,    bitRange=2-2
 4869                           ;'TIM12_SR.TIF`                        EQU 0x40001810,        4, base=16,    bitRange=6-6
 4870                           ;'TIM12_SR.CC1OF`                      EQU 0x40001810,        4, base=16,    bitRange=9-9
 4871                           ;'TIM12_SR.CC2OF`                      EQU 0x40001810,        4, base=16,    bitRange=10-10
 4872                           
 4873                           TIM12_EGR                           EQU 0x40001814
 4874                           ;'TIM12_EGR.UG`                        EQU 0x40001814,        4, base=16,    bitRange=0-0
 4875                           ;'TIM12_EGR.CC1G`                      EQU 0x40001814,        4, base=16,    bitRange=1-1
 4876                           ;'TIM12_EGR.CC2G`                      EQU 0x40001814,        4, base=16,    bitRange=2-2
 4877                           ;'TIM12_EGR.TG`                        EQU 0x40001814,        4, base=16,    bitRange=6-6
 4878                           
 4879                           TIM12_CCMR1                         EQU 0x40001818
 4880                           ;'TIM12_CCMR1.IC1S`                    EQU 0x40001818,        4, base=16,    bitRange=0-1
 4881                           ;'TIM12_CCMR1.IC1PSC`                  EQU 0x40001818,        4, base=16,    bitRange=2-3
 4882                           ;'TIM12_CCMR1.IC1F`                    EQU 0x40001818,        4, base=16,    bitRange=4-7
 4883                           ;'TIM12_CCMR1.IC2S`                    EQU 0x40001818,        4, base=16,    bitRange=8-9
 4884                           ;'TIM12_CCMR1.IC2PSC`                  EQU 0x40001818,        4, base=16,    bitRange=10-11
 4885                           ;'TIM12_CCMR1.IC2F`                    EQU 0x40001818,        4, base=16,    bitRange=12-15
 4886                           
 4887                           TIM12_OCMR1                         EQU 0x40001818
 4888                           
 4889                           TIM12_CCER                          EQU 0x40001820
 4890                           ;'TIM12_CCER.CC1E`                     EQU 0x40001820,        4, base=16,    bitRange=0-0
 4891                           ;'TIM12_CCER.CC1P`                     EQU 0x40001820,        4, base=16,    bitRange=1-1
 4892                           ;'TIM12_CCER.CC1NP`                    EQU 0x40001820,        4, base=16,    bitRange=3-3
 4893                           ;'TIM12_CCER.CC2E`                     EQU 0x40001820,        4, base=16,    bitRange=4-4
 4894                           ;'TIM12_CCER.CC2P`                     EQU 0x40001820,        4, base=16,    bitRange=5-5
 4895                           ;'TIM12_CCER.CC2NP`                    EQU 0x40001820,        4, base=16,    bitRange=7-7
 4896                           
 4897                           TIM12_CNT                           EQU 0x40001824
 4898                           ;'TIM12_CNT.CNT`                       EQU 0x40001824,        4, base=16,    bitRange=0-15
 4899                           
 4900                           TIM12_PSC                           EQU 0x40001828
 4901                           ;'TIM12_PSC.PSC`                       EQU 0x40001828,        4, base=16,    bitRange=0-15
 4902                           
 4903                           TIM12_ARR                           EQU 0x4000182C
 4904                           ;'TIM12_ARR.ARR`                       EQU 0x4000182C,        4, base=16,    bitRange=0-15
 4905                           
 4906                           TIM12_CCR1                          EQU 0x40001834
 4907                           ;'TIM12_CCR1.CCR`                      EQU 0x40001834,        4, base=16,    bitRange=0-15
 4908                           
 4909                           TIM12_CCR2                          EQU 0x40001838
 4910                           ;'TIM12_CCR2.CCR`                      EQU 0x40001838,        4, base=16,    bitRange=0-15
 4911                           
 4912                           
 4913                           ;
 4914                           ;               TIM10
 4915                           ;
 4916                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4917                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4918                           
 4919                           TIM10_CR1                           EQU 0x40014400
 4920                           ;'TIM10_CR1.CEN`                       EQU 0x40014400,        4, base=16,    bitRange=0-0
 4921                           ;'TIM10_CR1.UDIS`                      EQU 0x40014400,        4, base=16,    bitRange=1-1
 4922                           ;'TIM10_CR1.URS`                       EQU 0x40014400,        4, base=16,    bitRange=2-2
 4923                           ;'TIM10_CR1.ARPE`                      EQU 0x40014400,        4, base=16,    bitRange=7-7
 4924                           ;'TIM10_CR1.CKD`                       EQU 0x40014400,        4, base=16,    bitRange=8-9
 4925                           
 4926                           TIM10_DIER                          EQU 0x4001440C
 4927                           ;'TIM10_DIER.UIE`                      EQU 0x4001440C,        4, base=16,    bitRange=0-0
 4928                           ;'TIM10_DIER.CC1IE`                    EQU 0x4001440C,        4, base=16,    bitRange=1-1
 4929                           
 4930                           TIM10_SR                            EQU 0x40014410
 4931                           ;'TIM10_SR.UIF`                        EQU 0x40014410,        4, base=16,    bitRange=0-0
 4932                           ;'TIM10_SR.CC1IF`                      EQU 0x40014410,        4, base=16,    bitRange=1-1
 4933                           ;'TIM10_SR.CC1OF`                      EQU 0x40014410,        4, base=16,    bitRange=9-9
 4934                           
 4935                           TIM10_EGR                           EQU 0x40014414
 4936                           ;'TIM10_EGR.UG`                        EQU 0x40014414,        4, base=16,    bitRange=0-0
 4937                           ;'TIM10_EGR.CC1G`                      EQU 0x40014414,        4, base=16,    bitRange=1-1
 4938                           
 4939                           TIM10_CCMR1                         EQU 0x40014418
 4940                           ;'TIM10_CCMR1.IC1S`                    EQU 0x40014418,        4, base=16,    bitRange=0-1
 4941                           ;'TIM10_CCMR1.IC1PSC`                  EQU 0x40014418,        4, base=16,    bitRange=2-3
 4942                           ;'TIM10_CCMR1.IC1F`                    EQU 0x40014418,        4, base=16,    bitRange=4-7
 4943                           
 4944                           TIM10_OCMR1                         EQU 0x40014418
 4945                           
 4946                           TIM10_CCER                          EQU 0x40014420
 4947                           ;'TIM10_CCER.CC1E`                     EQU 0x40014420,        4, base=16,    bitRange=0-0
 4948                           ;'TIM10_CCER.CC1P`                     EQU 0x40014420,        4, base=16,    bitRange=1-1
 4949                           ;'TIM10_CCER.CC1NP`                    EQU 0x40014420,        4, base=16,    bitRange=3-3
 4950                           
 4951                           TIM10_CNT                           EQU 0x40014424
 4952                           ;'TIM10_CNT.CNT`                       EQU 0x40014424,        4, base=16,    bitRange=0-15
 4953                           
 4954                           TIM10_PSC                           EQU 0x40014428
 4955                           ;'TIM10_PSC.PSC`                       EQU 0x40014428,        4, base=16,    bitRange=0-15
 4956                           
 4957                           TIM10_ARR                           EQU 0x4001442C
 4958                           ;'TIM10_ARR.ARR`                       EQU 0x4001442C,        4, base=16,    bitRange=0-15
 4959                           
 4960                           TIM10_CCR1                          EQU 0x40014434
 4961                           ;'TIM10_CCR1.CCR`                      EQU 0x40014434,        4, base=16,    bitRange=0-15
 4962                           
 4963                           
 4964                           ;
 4965                           ;               TIM11
 4966                           ;
 4967                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 4968                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 4969                           
 4970                           TIM11_CR1                           EQU 0x40014800
 4971                           ;'TIM11_CR1.CEN`                       EQU 0x40014800,        4, base=16,    bitRange=0-0
 4972                           ;'TIM11_CR1.UDIS`                      EQU 0x40014800,        4, base=16,    bitRange=1-1
 4973                           ;'TIM11_CR1.URS`                       EQU 0x40014800,        4, base=16,    bitRange=2-2
 4974                           ;'TIM11_CR1.ARPE`                      EQU 0x40014800,        4, base=16,    bitRange=7-7
 4975                           ;'TIM11_CR1.CKD`                       EQU 0x40014800,        4, base=16,    bitRange=8-9
 4976                           
 4977                           TIM11_DIER                          EQU 0x4001480C
 4978                           ;'TIM11_DIER.UIE`                      EQU 0x4001480C,        4, base=16,    bitRange=0-0
 4979                           ;'TIM11_DIER.CC1IE`                    EQU 0x4001480C,        4, base=16,    bitRange=1-1
 4980                           
 4981                           TIM11_SR                            EQU 0x40014810
 4982                           ;'TIM11_SR.UIF`                        EQU 0x40014810,        4, base=16,    bitRange=0-0
 4983                           ;'TIM11_SR.CC1IF`                      EQU 0x40014810,        4, base=16,    bitRange=1-1
 4984                           ;'TIM11_SR.CC1OF`                      EQU 0x40014810,        4, base=16,    bitRange=9-9
 4985                           
 4986                           TIM11_EGR                           EQU 0x40014814
 4987                           ;'TIM11_EGR.UG`                        EQU 0x40014814,        4, base=16,    bitRange=0-0
 4988                           ;'TIM11_EGR.CC1G`                      EQU 0x40014814,        4, base=16,    bitRange=1-1
 4989                           
 4990                           TIM11_CCMR1                         EQU 0x40014818
 4991                           ;'TIM11_CCMR1.IC1S`                    EQU 0x40014818,        4, base=16,    bitRange=0-1
 4992                           ;'TIM11_CCMR1.IC1PSC`                  EQU 0x40014818,        4, base=16,    bitRange=2-3
 4993                           ;'TIM11_CCMR1.IC1F`                    EQU 0x40014818,        4, base=16,    bitRange=4-7
 4994                           
 4995                           TIM11_OCMR1                         EQU 0x40014818
 4996                           
 4997                           TIM11_CCER                          EQU 0x40014820
 4998                           ;'TIM11_CCER.CC1E`                     EQU 0x40014820,        4, base=16,    bitRange=0-0
 4999                           ;'TIM11_CCER.CC1P`                     EQU 0x40014820,        4, base=16,    bitRange=1-1
 5000                           ;'TIM11_CCER.CC1NP`                    EQU 0x40014820,        4, base=16,    bitRange=3-3
 5001                           
 5002                           TIM11_CNT                           EQU 0x40014824
 5003                           ;'TIM11_CNT.CNT`                       EQU 0x40014824,        4, base=16,    bitRange=0-15
 5004                           
 5005                           TIM11_PSC                           EQU 0x40014828
 5006                           ;'TIM11_PSC.PSC`                       EQU 0x40014828,        4, base=16,    bitRange=0-15
 5007                           
 5008                           TIM11_ARR                           EQU 0x4001482C
 5009                           ;'TIM11_ARR.ARR`                       EQU 0x4001482C,        4, base=16,    bitRange=0-15
 5010                           
 5011                           TIM11_CCR1                          EQU 0x40014834
 5012                           ;'TIM11_CCR1.CCR`                      EQU 0x40014834,        4, base=16,    bitRange=0-15
 5013                           
 5014                           TIM11_OR                            EQU 0x40014850
 5015                           ;'TIM11_OR.TI1_RMP`                    EQU 0x40014850,        4, base=16,    bitRange=0-1
 5016                           
 5017                           
 5018                           ;
 5019                           ;               TIM13
 5020                           ;
 5021                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 5022                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 5023                           
 5024                           TIM13_CR1                           EQU 0x40001C00
 5025                           ;'TIM13_CR1.CEN`                       EQU 0x40001C00,        4, base=16,    bitRange=0-0
 5026                           ;'TIM13_CR1.UDIS`                      EQU 0x40001C00,        4, base=16,    bitRange=1-1
 5027                           ;'TIM13_CR1.URS`                       EQU 0x40001C00,        4, base=16,    bitRange=2-2
 5028                           ;'TIM13_CR1.ARPE`                      EQU 0x40001C00,        4, base=16,    bitRange=7-7
 5029                           ;'TIM13_CR1.CKD`                       EQU 0x40001C00,        4, base=16,    bitRange=8-9
 5030                           
 5031                           TIM13_DIER                          EQU 0x40001C0C
 5032                           ;'TIM13_DIER.UIE`                      EQU 0x40001C0C,        4, base=16,    bitRange=0-0
 5033                           ;'TIM13_DIER.CC1IE`                    EQU 0x40001C0C,        4, base=16,    bitRange=1-1
 5034                           
 5035                           TIM13_SR                            EQU 0x40001C10
 5036                           ;'TIM13_SR.UIF`                        EQU 0x40001C10,        4, base=16,    bitRange=0-0
 5037                           ;'TIM13_SR.CC1IF`                      EQU 0x40001C10,        4, base=16,    bitRange=1-1
 5038                           ;'TIM13_SR.CC1OF`                      EQU 0x40001C10,        4, base=16,    bitRange=9-9
 5039                           
 5040                           TIM13_EGR                           EQU 0x40001C14
 5041                           ;'TIM13_EGR.UG`                        EQU 0x40001C14,        4, base=16,    bitRange=0-0
 5042                           ;'TIM13_EGR.CC1G`                      EQU 0x40001C14,        4, base=16,    bitRange=1-1
 5043                           
 5044                           TIM13_CCMR1                         EQU 0x40001C18
 5045                           ;'TIM13_CCMR1.IC1S`                    EQU 0x40001C18,        4, base=16,    bitRange=0-1
 5046                           ;'TIM13_CCMR1.IC1PSC`                  EQU 0x40001C18,        4, base=16,    bitRange=2-3
 5047                           ;'TIM13_CCMR1.IC1F`                    EQU 0x40001C18,        4, base=16,    bitRange=4-7
 5048                           
 5049                           TIM13_OCMR1                         EQU 0x40001C18
 5050                           
 5051                           TIM13_CCER                          EQU 0x40001C20
 5052                           ;'TIM13_CCER.CC1E`                     EQU 0x40001C20,        4, base=16,    bitRange=0-0
 5053                           ;'TIM13_CCER.CC1P`                     EQU 0x40001C20,        4, base=16,    bitRange=1-1
 5054                           ;'TIM13_CCER.CC1NP`                    EQU 0x40001C20,        4, base=16,    bitRange=3-3
 5055                           
 5056                           TIM13_CNT                           EQU 0x40001C24
 5057                           ;'TIM13_CNT.CNT`                       EQU 0x40001C24,        4, base=16,    bitRange=0-15
 5058                           
 5059                           TIM13_PSC                           EQU 0x40001C28
 5060                           ;'TIM13_PSC.PSC`                       EQU 0x40001C28,        4, base=16,    bitRange=0-15
 5061                           
 5062                           TIM13_ARR                           EQU 0x40001C2C
 5063                           ;'TIM13_ARR.ARR`                       EQU 0x40001C2C,        4, base=16,    bitRange=0-15
 5064                           
 5065                           TIM13_CCR1                          EQU 0x40001C34
 5066                           ;'TIM13_CCR1.CCR`                      EQU 0x40001C34,        4, base=16,    bitRange=0-15
 5067                           
 5068                           
 5069                           ;
 5070                           ;               TIM14
 5071                           ;
 5072                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 5073                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 5074                           
 5075                           TIM14_CR1                           EQU 0x40002000
 5076                           ;'TIM14_CR1.CEN`                       EQU 0x40002000,        4, base=16,    bitRange=0-0
 5077                           ;'TIM14_CR1.UDIS`                      EQU 0x40002000,        4, base=16,    bitRange=1-1
 5078                           ;'TIM14_CR1.URS`                       EQU 0x40002000,        4, base=16,    bitRange=2-2
 5079                           ;'TIM14_CR1.ARPE`                      EQU 0x40002000,        4, base=16,    bitRange=7-7
 5080                           ;'TIM14_CR1.CKD`                       EQU 0x40002000,        4, base=16,    bitRange=8-9
 5081                           
 5082                           TIM14_DIER                          EQU 0x4000200C
 5083                           ;'TIM14_DIER.UIE`                      EQU 0x4000200C,        4, base=16,    bitRange=0-0
 5084                           ;'TIM14_DIER.CC1IE`                    EQU 0x4000200C,        4, base=16,    bitRange=1-1
 5085                           
 5086                           TIM14_SR                            EQU 0x40002010
 5087                           ;'TIM14_SR.UIF`                        EQU 0x40002010,        4, base=16,    bitRange=0-0
 5088                           ;'TIM14_SR.CC1IF`                      EQU 0x40002010,        4, base=16,    bitRange=1-1
 5089                           ;'TIM14_SR.CC1OF`                      EQU 0x40002010,        4, base=16,    bitRange=9-9
 5090                           
 5091                           TIM14_EGR                           EQU 0x40002014
 5092                           ;'TIM14_EGR.UG`                        EQU 0x40002014,        4, base=16,    bitRange=0-0
 5093                           ;'TIM14_EGR.CC1G`                      EQU 0x40002014,        4, base=16,    bitRange=1-1
 5094                           
 5095                           TIM14_CCMR1                         EQU 0x40002018
 5096                           ;'TIM14_CCMR1.IC1S`                    EQU 0x40002018,        4, base=16,    bitRange=0-1
 5097                           ;'TIM14_CCMR1.IC1PSC`                  EQU 0x40002018,        4, base=16,    bitRange=2-3
 5098                           ;'TIM14_CCMR1.IC1F`                    EQU 0x40002018,        4, base=16,    bitRange=4-7
 5099                           
 5100                           TIM14_OCMR1                         EQU 0x40002018
 5101                           
 5102                           TIM14_CCER                          EQU 0x40002020
 5103                           ;'TIM14_CCER.CC1E`                     EQU 0x40002020,        4, base=16,    bitRange=0-0
 5104                           ;'TIM14_CCER.CC1P`                     EQU 0x40002020,        4, base=16,    bitRange=1-1
 5105                           ;'TIM14_CCER.CC1NP`                    EQU 0x40002020,        4, base=16,    bitRange=3-3
 5106                           
 5107                           TIM14_CNT                           EQU 0x40002024
 5108                           ;'TIM14_CNT.CNT`                       EQU 0x40002024,        4, base=16,    bitRange=0-15
 5109                           
 5110                           TIM14_PSC                           EQU 0x40002028
 5111                           ;'TIM14_PSC.PSC`                       EQU 0x40002028,        4, base=16,    bitRange=0-15
 5112                           
 5113                           TIM14_ARR                           EQU 0x4000202C
 5114                           ;'TIM14_ARR.ARR`                       EQU 0x4000202C,        4, base=16,    bitRange=0-15
 5115                           
 5116                           TIM14_CCR1                          EQU 0x40002034
 5117                           ;'TIM14_CCR1.CCR`                      EQU 0x40002034,        4, base=16,    bitRange=0-15
 5118                           
 5119                           
 5120                           ;
 5121                           ;               bxCAN
 5122                           ;
 5123                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 5124                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 5125                           
 5126                           ;CAN1_MCR                            EQU 0x40006400
 5127                           ;'CAN1_MCR.INRQ`                       EQU 0x40006400,        4, base=16,    bitRange=0-0
 5128                           ;'CAN1_MCR.SLEEP`                      EQU 0x40006400,        4, base=16,    bitRange=1-1
 5129                           ;'CAN1_MCR.TXFP`                       EQU 0x40006400,        4, base=16,    bitRange=2-2
 5130                           ;'CAN1_MCR.RFLM`                       EQU 0x40006400,        4, base=16,    bitRange=3-3
 5131                           ;'CAN1_MCR.NART`                       EQU 0x40006400,        4, base=16,    bitRange=4-4
 5132                           ;'CAN1_MCR.AWUM`                       EQU 0x40006400,        4, base=16,    bitRange=5-5
 5133                           ;'CAN1_MCR.ABOM`                       EQU 0x40006400,        4, base=16,    bitRange=6-6
 5134                           ;'CAN1_MCR.TTCM`                       EQU 0x40006400,        4, base=16,    bitRange=7-7
 5135                           ;'CAN1_MCR.RESET`                      EQU 0x40006400,        4, base=16,    bitRange=15-15
 5136                           ;'CAN1_MCR.DBF`                        EQU 0x40006400,        4, base=16,    bitRange=16-16
 5137                           
 5138                           ;CAN1_MSR                            EQU 0x40006404
 5139                           ;'CAN1_MSR.INAK`                       EQU 0x40006404,        4, base=16,    bitRange=0-0
 5140                           ;'CAN1_MSR.SLAK`                       EQU 0x40006404,        4, base=16,    bitRange=1-1
 5141                           ;'CAN1_MSR.ERRI`                       EQU 0x40006404,        4, base=16,    bitRange=2-2
 5142                           ;'CAN1_MSR.WKUI`                       EQU 0x40006404,        4, base=16,    bitRange=3-3
 5143                           ;'CAN1_MSR.SLAKI`                      EQU 0x40006404,        4, base=16,    bitRange=4-4
 5144                           ;'CAN1_MSR.TXM`                        EQU 0x40006404,        4, base=16,    bitRange=8-8
 5145                           ;'CAN1_MSR.RXM`                        EQU 0x40006404,        4, base=16,    bitRange=9-9
 5146                           ;'CAN1_MSR.SAMP`                       EQU 0x40006404,        4, base=16,    bitRange=10-10
 5147                           ;'CAN1_MSR.RX`                         EQU 0x40006404,        4, base=16,    bitRange=11-11
 5148                           
 5149                           ;CAN1_TSR                            EQU 0x40006408
 5150                           ;'CAN1_TSR.RQCP0`                      EQU 0x40006408,        4, base=16,    bitRange=0-0
 5151                           ;'CAN1_TSR.TXOK0`                      EQU 0x40006408,        4, base=16,    bitRange=1-1
 5152                           ;'CAN1_TSR.ALST0`                      EQU 0x40006408,        4, base=16,    bitRange=2-2
 5153                           ;'CAN1_TSR.TERR0`                      EQU 0x40006408,        4, base=16,    bitRange=3-3
 5154                           ;'CAN1_TSR.ABRQ0`                      EQU 0x40006408,        4, base=16,    bitRange=7-7
 5155                           ;'CAN1_TSR.RQCP1`                      EQU 0x40006408,        4, base=16,    bitRange=8-8
 5156                           ;'CAN1_TSR.TXOK1`                      EQU 0x40006408,        4, base=16,    bitRange=9-9
 5157                           ;'CAN1_TSR.ALST1`                      EQU 0x40006408,        4, base=16,    bitRange=10-10
 5158                           ;'CAN1_TSR.TERR1`                      EQU 0x40006408,        4, base=16,    bitRange=11-11
 5159                           ;'CAN1_TSR.ABRQ1`                      EQU 0x40006408,        4, base=16,    bitRange=15-15
 5160                           ;'CAN1_TSR.RQCP2`                      EQU 0x40006408,        4, base=16,    bitRange=16-16
 5161                           ;'CAN1_TSR.TXOK2`                      EQU 0x40006408,        4, base=16,    bitRange=17-17
 5162                           ;'CAN1_TSR.ALST2`                      EQU 0x40006408,        4, base=16,    bitRange=18-18
 5163                           ;'CAN1_TSR.TERR2`                      EQU 0x40006408,        4, base=16,    bitRange=19-19
 5164                           ;'CAN1_TSR.ABRQ2`                      EQU 0x40006408,        4, base=16,    bitRange=23-23
 5165                           ;'CAN1_TSR.CODE`                       EQU 0x40006408,        4, base=16,    bitRange=24-25
 5166                           ;'CAN1_TSR.TME0`                       EQU 0x40006408,        4, base=16,    bitRange=26-26
 5167                           ;'CAN1_TSR.TME1`                       EQU 0x40006408,        4, base=16,    bitRange=27-27
 5168                           ;'CAN1_TSR.TME2`                       EQU 0x40006408,        4, base=16,    bitRange=28-28
 5169                           ;'CAN1_TSR.LOW0`                       EQU 0x40006408,        4, base=16,    bitRange=29-29
 5170                           ;'CAN1_TSR.LOW1`                       EQU 0x40006408,        4, base=16,    bitRange=30-30
 5171                           ;'CAN1_TSR.LOW2`                       EQU 0x40006408,        4, base=16,    bitRange=31-31
 5172                           
 5173                           ;CAN1_RF0R                           EQU 0x4000640C
 5174                           ;'CAN1_RF0R.FMP`                       EQU 0x4000640C,        4, base=16,    bitRange=0-1
 5175                           ;'CAN1_RF0R.FULL`                      EQU 0x4000640C,        4, base=16,    bitRange=3-3
 5176                           ;'CAN1_RF0R.FOVR`                      EQU 0x4000640C,        4, base=16,    bitRange=4-4
 5177                           ;'CAN1_RF0R.RFOM`                      EQU 0x4000640C,        4, base=16,    bitRange=5-5
 5178                           
 5179                           ;CAN1_RF1R                           EQU 0x40006410
 5180                           ;'CAN1_RF1R.FMP`                       EQU 0x40006410,        4, base=16,    bitRange=0-1
 5181                           ;'CAN1_RF1R.FULL`                      EQU 0x40006410,        4, base=16,    bitRange=3-3
 5182                           ;'CAN1_RF1R.FOVR`                      EQU 0x40006410,        4, base=16,    bitRange=4-4
 5183                           ;'CAN1_RF1R.RFOM`                      EQU 0x40006410,        4, base=16,    bitRange=5-5
 5184                           
 5185                           ;CAN1_IER                            EQU 0x40006414
 5186                           ;'CAN1_IER.TMEIE`                      EQU 0x40006414,        4, base=16,    bitRange=0-0
 5187                           ;'CAN1_IER.FMPIE0`                     EQU 0x40006414,        4, base=16,    bitRange=1-1
 5188                           ;'CAN1_IER.FFIE0`                      EQU 0x40006414,        4, base=16,    bitRange=2-2
 5189                           ;'CAN1_IER.FOVIE0`                     EQU 0x40006414,        4, base=16,    bitRange=3-3
 5190                           ;'CAN1_IER.FMPIE1`                     EQU 0x40006414,        4, base=16,    bitRange=4-4
 5191                           ;'CAN1_IER.FFIE1`                      EQU 0x40006414,        4, base=16,    bitRange=5-5
 5192                           ;'CAN1_IER.FOVIE1`                     EQU 0x40006414,        4, base=16,    bitRange=6-6
 5193                           ;'CAN1_IER.EWGIE`                      EQU 0x40006414,        4, base=16,    bitRange=8-8
 5194                           ;'CAN1_IER.EPVIE`                      EQU 0x40006414,        4, base=16,    bitRange=9-9
 5195                           ;'CAN1_IER.BOFIE`                      EQU 0x40006414,        4, base=16,    bitRange=10-10
 5196                           ;'CAN1_IER.LECIE`                      EQU 0x40006414,        4, base=16,    bitRange=11-11
 5197                           ;'CAN1_IER.ERRIE`                      EQU 0x40006414,        4, base=16,    bitRange=15-15
 5198                           ;'CAN1_IER.WKUIE`                      EQU 0x40006414,        4, base=16,    bitRange=16-16
 5199                           ;'CAN1_IER.SLKIE`                      EQU 0x40006414,        4, base=16,    bitRange=17-17
 5200                           
 5201                           ;CAN1_ESR                            EQU 0x40006418
 5202                           ;'CAN1_ESR.EWGF`                       EQU 0x40006418,        4, base=16,    bitRange=0-0
 5203                           ;'CAN1_ESR.EPVF`                       EQU 0x40006418,        4, base=16,    bitRange=1-1
 5204                           ;'CAN1_ESR.BOFF`                       EQU 0x40006418,        4, base=16,    bitRange=2-2
 5205                           ;'CAN1_ESR.LEC`                        EQU 0x40006418,        4, base=16,    bitRange=4-6
 5206                           ;'CAN1_ESR.TEC`                        EQU 0x40006418,        4, base=16,    bitRange=16-23
 5207                           ;'CAN1_ESR.REC`                        EQU 0x40006418,        4, base=16,    bitRange=24-31
 5208                           
 5209                           ;CAN1_BTR                            EQU 0x4000641C
 5210                           ;'CAN1_BTR.BRP`                        EQU 0x4000641C,        4, base=16,    bitRange=0-9
 5211                           ;'CAN1_BTR.TS1`                        EQU 0x4000641C,        4, base=16,    bitRange=16-19
 5212                           ;'CAN1_BTR.TS2`                        EQU 0x4000641C,        4, base=16,    bitRange=20-22
 5213                           ;'CAN1_BTR.SJW`                        EQU 0x4000641C,        4, base=16,    bitRange=24-25
 5214                           ;'CAN1_BTR.LBKM`                       EQU 0x4000641C,        4, base=16,    bitRange=30-30
 5215                           ;'CAN1_BTR.SILM`                       EQU 0x4000641C,        4, base=16,    bitRange=31-31
 5216                           
 5217                           ;CAN1_TI0R                           EQU 0x40006580
 5218                           ;'CAN1_TI0R.TXRQ`                      EQU 0x40006580,        4, base=16,    bitRange=0-0
 5219                           ;'CAN1_TI0R.RTR`                       EQU 0x40006580,        4, base=16,    bitRange=1-1
 5220                           ;'CAN1_TI0R.IDE`                       EQU 0x40006580,        4, base=16,    bitRange=2-2
 5221                           ;'CAN1_TI0R.STID`                      EQU 0x40006580,        4, base=16,    bitRange=21-31
 5222                           
 5223                           ;CAN1_TDT0R                          EQU 0x40006584
 5224                           ;'CAN1_TDT0R.DLC`                      EQU 0x40006584,        4, base=16,    bitRange=0-3
 5225                           ;'CAN1_TDT0R.TGT`                      EQU 0x40006584,        4, base=16,    bitRange=8-8
 5226                           ;'CAN1_TDT0R.TIME`                     EQU 0x40006584,        4, base=16,    bitRange=16-31
 5227                           
 5228                           ;CAN1_TDL0R                          EQU 0x40006588
 5229                           ;'CAN1_TDL0R.DATA0`                    EQU 0x40006588,        4, base=16,    bitRange=0-7
 5230                           ;'CAN1_TDL0R.DATA1`                    EQU 0x40006588,        4, base=16,    bitRange=8-15
 5231                           ;'CAN1_TDL0R.DATA2`                    EQU 0x40006588,        4, base=16,    bitRange=16-23
 5232                           ;'CAN1_TDL0R.DATA3`                    EQU 0x40006588,        4, base=16,    bitRange=24-31
 5233                           
 5234                           ;CAN1_TDH0R                          EQU 0x4000658C
 5235                           ;'CAN1_TDH0R.DATA4`                    EQU 0x4000658C,        4, base=16,    bitRange=0-7
 5236                           ;'CAN1_TDH0R.DATA5`                    EQU 0x4000658C,        4, base=16,    bitRange=8-15
 5237                           ;'CAN1_TDH0R.DATA6`                    EQU 0x4000658C,        4, base=16,    bitRange=16-23
 5238                           ;'CAN1_TDH0R.DATA7`                    EQU 0x4000658C,        4, base=16,    bitRange=24-31
 5239                           
 5240                           ;CAN1_TI1R                           EQU 0x40006590
 5241                           ;'CAN1_TI1R.TXRQ`                      EQU 0x40006590,        4, base=16,    bitRange=0-0
 5242                           ;'CAN1_TI1R.RTR`                       EQU 0x40006590,        4, base=16,    bitRange=1-1
 5243                           ;'CAN1_TI1R.IDE`                       EQU 0x40006590,        4, base=16,    bitRange=2-2
 5244                           ;'CAN1_TI1R.STID`                      EQU 0x40006590,        4, base=16,    bitRange=21-31
 5245                           
 5246                           ;CAN1_TDT1R                          EQU 0x40006594
 5247                           ;'CAN1_TDT1R.DLC`                      EQU 0x40006594,        4, base=16,    bitRange=0-3
 5248                           ;'CAN1_TDT1R.TGT`                      EQU 0x40006594,        4, base=16,    bitRange=8-8
 5249                           ;'CAN1_TDT1R.TIME`                     EQU 0x40006594,        4, base=16,    bitRange=16-31
 5250                           
 5251                           ;CAN1_TDL1R                          EQU 0x40006598
 5252                           ;'CAN1_TDL1R.DATA0`                    EQU 0x40006598,        4, base=16,    bitRange=0-7
 5253                           ;'CAN1_TDL1R.DATA1`                    EQU 0x40006598,        4, base=16,    bitRange=8-15
 5254                           ;'CAN1_TDL1R.DATA2`                    EQU 0x40006598,        4, base=16,    bitRange=16-23
 5255                           ;'CAN1_TDL1R.DATA3`                    EQU 0x40006598,        4, base=16,    bitRange=24-31
 5256                           
 5257                           ;CAN1_TDH1R                          EQU 0x4000659C
 5258                           ;'CAN1_TDH1R.DATA4`                    EQU 0x4000659C,        4, base=16,    bitRange=0-7
 5259                           ;'CAN1_TDH1R.DATA5`                    EQU 0x4000659C,        4, base=16,    bitRange=8-15
 5260                           ;'CAN1_TDH1R.DATA6`                    EQU 0x4000659C,        4, base=16,    bitRange=16-23
 5261                           ;'CAN1_TDH1R.DATA7`                    EQU 0x4000659C,        4, base=16,    bitRange=24-31
 5262                           
 5263                           ;CAN1_TI2R                           EQU 0x400065A0
 5264                           ;'CAN1_TI2R.TXRQ`                      EQU 0x400065A0,        4, base=16,    bitRange=0-0
 5265                           ;'CAN1_TI2R.RTR`                       EQU 0x400065A0,        4, base=16,    bitRange=1-1
 5266                           ;'CAN1_TI2R.IDE`                       EQU 0x400065A0,        4, base=16,    bitRange=2-2
 5267                           ;'CAN1_TI2R.STID`                      EQU 0x400065A0,        4, base=16,    bitRange=21-31
 5268                           
 5269                           ;CAN1_TDT2R                          EQU 0x400065A4
 5270                           ;'CAN1_TDT2R.DLC`                      EQU 0x400065A4,        4, base=16,    bitRange=0-3
 5271                           ;'CAN1_TDT2R.TGT`                      EQU 0x400065A4,        4, base=16,    bitRange=8-8
 5272                           ;'CAN1_TDT2R.TIME`                     EQU 0x400065A4,        4, base=16,    bitRange=16-31
 5273                           
 5274                           ;CAN1_TDL2R                          EQU 0x400065A8
 5275                           ;'CAN1_TDL2R.DATA0`                    EQU 0x400065A8,        4, base=16,    bitRange=0-7
 5276                           ;'CAN1_TDL2R.DATA1`                    EQU 0x400065A8,        4, base=16,    bitRange=8-15
 5277                           ;'CAN1_TDL2R.DATA2`                    EQU 0x400065A8,        4, base=16,    bitRange=16-23
 5278                           ;'CAN1_TDL2R.DATA3`                    EQU 0x400065A8,        4, base=16,    bitRange=24-31
 5279                           
 5280                           ;CAN1_TDH2R                          EQU 0x400065AC
 5281                           ;'CAN1_TDH2R.DATA4`                    EQU 0x400065AC,        4, base=16,    bitRange=0-7
 5282                           ;'CAN1_TDH2R.DATA5`                    EQU 0x400065AC,        4, base=16,    bitRange=8-15
 5283                           ;'CAN1_TDH2R.DATA6`                    EQU 0x400065AC,        4, base=16,    bitRange=16-23
 5284                           ;'CAN1_TDH2R.DATA7`                    EQU 0x400065AC,        4, base=16,    bitRange=24-31
 5285                           
 5286                           ;CAN1_RI0R                           EQU 0x400065B0
 5287                           ;'CAN1_RI0R.RTR`                       EQU 0x400065B0,        4, base=16,    bitRange=1-1
 5288                           ;'CAN1_RI0R.IDE`                       EQU 0x400065B0,        4, base=16,    bitRange=2-2
 5289                           ;'CAN1_RI0R.STID`                      EQU 0x400065B0,        4, base=16,    bitRange=21-31
 5290                           
 5291                           ;CAN1_RDT0R                          EQU 0x400065B4
 5292                           ;'CAN1_RDT0R.DLC`                      EQU 0x400065B4,        4, base=16,    bitRange=0-3
 5293                           ;'CAN1_RDT0R.FMI`                      EQU 0x400065B4,        4, base=16,    bitRange=8-15
 5294                           ;'CAN1_RDT0R.TIME`                     EQU 0x400065B4,        4, base=16,    bitRange=16-31
 5295                           
 5296                           ;CAN1_RDL0R                          EQU 0x400065B8
 5297                           ;'CAN1_RDL0R.DATA0`                    EQU 0x400065B8,        4, base=16,    bitRange=0-7
 5298                           ;'CAN1_RDL0R.DATA1`                    EQU 0x400065B8,        4, base=16,    bitRange=8-15
 5299                           ;'CAN1_RDL0R.DATA2`                    EQU 0x400065B8,        4, base=16,    bitRange=16-23
 5300                           ;'CAN1_RDL0R.DATA3`                    EQU 0x400065B8,        4, base=16,    bitRange=24-31
 5301                           
 5302                           ;CAN1_RDH0R                          EQU 0x400065BC
 5303                           ;'CAN1_RDH0R.DATA4`                    EQU 0x400065BC,        4, base=16,    bitRange=0-7
 5304                           ;'CAN1_RDH0R.DATA5`                    EQU 0x400065BC,        4, base=16,    bitRange=8-15
 5305                           ;'CAN1_RDH0R.DATA6`                    EQU 0x400065BC,        4, base=16,    bitRange=16-23
 5306                           ;'CAN1_RDH0R.DATA7`                    EQU 0x400065BC,        4, base=16,    bitRange=24-31
 5307                           
 5308                           ;CAN1_RI1R                           EQU 0x400065C0
 5309                           ;'CAN1_RI1R.RTR`                       EQU 0x400065C0,        4, base=16,    bitRange=1-1
 5310                           ;'CAN1_RI1R.IDE`                       EQU 0x400065C0,        4, base=16,    bitRange=2-2
 5311                           ;'CAN1_RI1R.STID`                      EQU 0x400065C0,        4, base=16,    bitRange=21-31
 5312                           
 5313                           ;CAN1_RDT1R                          EQU 0x400065C4
 5314                           ;'CAN1_RDT1R.DLC`                      EQU 0x400065C4,        4, base=16,    bitRange=0-3
 5315                           ;'CAN1_RDT1R.FMI`                      EQU 0x400065C4,        4, base=16,    bitRange=8-15
 5316                           ;'CAN1_RDT1R.TIME`                     EQU 0x400065C4,        4, base=16,    bitRange=16-31
 5317                           
 5318                           ;CAN1_RDL1R                          EQU 0x400065C8
 5319                           ;'CAN1_RDL1R.DATA0`                    EQU 0x400065C8,        4, base=16,    bitRange=0-7
 5320                           ;'CAN1_RDL1R.DATA1`                    EQU 0x400065C8,        4, base=16,    bitRange=8-15
 5321                           ;'CAN1_RDL1R.DATA2`                    EQU 0x400065C8,        4, base=16,    bitRange=16-23
 5322                           ;'CAN1_RDL1R.DATA3`                    EQU 0x400065C8,        4, base=16,    bitRange=24-31
 5323                           
 5324                           ;CAN1_RDH1R                          EQU 0x400065CC
 5325                           ;'CAN1_RDH1R.DATA4`                    EQU 0x400065CC,        4, base=16,    bitRange=0-7
 5326                           ;'CAN1_RDH1R.DATA5`                    EQU 0x400065CC,        4, base=16,    bitRange=8-15
 5327                           ;'CAN1_RDH1R.DATA6`                    EQU 0x400065CC,        4, base=16,    bitRange=16-23
 5328                           ;'CAN1_RDH1R.DATA7`                    EQU 0x400065CC,        4, base=16,    bitRange=24-31
 5329                           
 5330                           ;CAN2_MCR                            EQU 0x40006800
 5331                           ;'CAN2_MCR.INRQ`                       EQU 0x40006800,        4, base=16,    bitRange=0-0
 5332                           ;'CAN2_MCR.SLEEP`                      EQU 0x40006800,        4, base=16,    bitRange=1-1
 5333                           ;'CAN2_MCR.TXFP`                       EQU 0x40006800,        4, base=16,    bitRange=2-2
 5334                           ;'CAN2_MCR.RFLM`                       EQU 0x40006800,        4, base=16,    bitRange=3-3
 5335                           ;'CAN2_MCR.NART`                       EQU 0x40006800,        4, base=16,    bitRange=4-4
 5336                           ;'CAN2_MCR.AWUM`                       EQU 0x40006800,        4, base=16,    bitRange=5-5
 5337                           ;'CAN2_MCR.ABOM`                       EQU 0x40006800,        4, base=16,    bitRange=6-6
 5338                           ;'CAN2_MCR.TTCM`                       EQU 0x40006800,        4, base=16,    bitRange=7-7
 5339                           ;'CAN2_MCR.RESET`                      EQU 0x40006800,        4, base=16,    bitRange=15-15
 5340                           ;'CAN2_MCR.DBF`                        EQU 0x40006800,        4, base=16,    bitRange=16-16
 5341                           
 5342                           ;CAN2_MSR                            EQU 0x40006804
 5343                           ;'CAN2_MSR.INAK`                       EQU 0x40006804,        4, base=16,    bitRange=0-0
 5344                           ;'CAN2_MSR.SLAK`                       EQU 0x40006804,        4, base=16,    bitRange=1-1
 5345                           ;'CAN2_MSR.ERRI`                       EQU 0x40006804,        4, base=16,    bitRange=2-2
 5346                           ;'CAN2_MSR.WKUI`                       EQU 0x40006804,        4, base=16,    bitRange=3-3
 5347                           ;'CAN2_MSR.SLAKI`                      EQU 0x40006804,        4, base=16,    bitRange=4-4
 5348                           ;'CAN2_MSR.TXM`                        EQU 0x40006804,        4, base=16,    bitRange=8-8
 5349                           ;'CAN2_MSR.RXM`                        EQU 0x40006804,        4, base=16,    bitRange=9-9
 5350                           ;'CAN2_MSR.SAMP`                       EQU 0x40006804,        4, base=16,    bitRange=10-10
 5351                           ;'CAN2_MSR.RX`                         EQU 0x40006804,        4, base=16,    bitRange=11-11
 5352                           
 5353                           ;CAN2_TSR                            EQU 0x40006808
 5354                           ;'CAN2_TSR.RQCP0`                      EQU 0x40006808,        4, base=16,    bitRange=0-0
 5355                           ;'CAN2_TSR.TXOK0`                      EQU 0x40006808,        4, base=16,    bitRange=1-1
 5356                           ;'CAN2_TSR.ALST0`                      EQU 0x40006808,        4, base=16,    bitRange=2-2
 5357                           ;'CAN2_TSR.TERR0`                      EQU 0x40006808,        4, base=16,    bitRange=3-3
 5358                           ;'CAN2_TSR.ABRQ0`                      EQU 0x40006808,        4, base=16,    bitRange=7-7
 5359                           ;'CAN2_TSR.RQCP1`                      EQU 0x40006808,        4, base=16,    bitRange=8-8
 5360                           ;'CAN2_TSR.TXOK1`                      EQU 0x40006808,        4, base=16,    bitRange=9-9
 5361                           ;'CAN2_TSR.ALST1`                      EQU 0x40006808,        4, base=16,    bitRange=10-10
 5362                           ;'CAN2_TSR.TERR1`                      EQU 0x40006808,        4, base=16,    bitRange=11-11
 5363                           ;'CAN2_TSR.ABRQ1`                      EQU 0x40006808,        4, base=16,    bitRange=15-15
 5364                           ;'CAN2_TSR.RQCP2`                      EQU 0x40006808,        4, base=16,    bitRange=16-16
 5365                           ;'CAN2_TSR.TXOK2`                      EQU 0x40006808,        4, base=16,    bitRange=17-17
 5366                           ;'CAN2_TSR.ALST2`                      EQU 0x40006808,        4, base=16,    bitRange=18-18
 5367                           ;'CAN2_TSR.TERR2`                      EQU 0x40006808,        4, base=16,    bitRange=19-19
 5368                           ;'CAN2_TSR.ABRQ2`                      EQU 0x40006808,        4, base=16,    bitRange=23-23
 5369                           ;'CAN2_TSR.CODE`                       EQU 0x40006808,        4, base=16,    bitRange=24-25
 5370                           ;'CAN2_TSR.TME0`                       EQU 0x40006808,        4, base=16,    bitRange=26-26
 5371                           ;'CAN2_TSR.TME1`                       EQU 0x40006808,        4, base=16,    bitRange=27-27
 5372                           ;'CAN2_TSR.TME2`                       EQU 0x40006808,        4, base=16,    bitRange=28-28
 5373                           ;'CAN2_TSR.LOW0`                       EQU 0x40006808,        4, base=16,    bitRange=29-29
 5374                           ;'CAN2_TSR.LOW1`                       EQU 0x40006808,        4, base=16,    bitRange=30-30
 5375                           ;'CAN2_TSR.LOW2`                       EQU 0x40006808,        4, base=16,    bitRange=31-31
 5376                           
 5377                           ;CAN2_RF0R                           EQU 0x4000680C
 5378                           ;'CAN2_RF0R.FMP`                       EQU 0x4000680C,        4, base=16,    bitRange=0-1
 5379                           ;'CAN2_RF0R.FULL`                      EQU 0x4000680C,        4, base=16,    bitRange=3-3
 5380                           ;'CAN2_RF0R.FOVR`                      EQU 0x4000680C,        4, base=16,    bitRange=4-4
 5381                           ;'CAN2_RF0R.RFOM`                      EQU 0x4000680C,        4, base=16,    bitRange=5-5
 5382                           
 5383                           ;CAN2_RF1R                           EQU 0x40006810
 5384                           ;'CAN2_RF1R.FMP`                       EQU 0x40006810,        4, base=16,    bitRange=0-1
 5385                           ;'CAN2_RF1R.FULL`                      EQU 0x40006810,        4, base=16,    bitRange=3-3
 5386                           ;'CAN2_RF1R.FOVR`                      EQU 0x40006810,        4, base=16,    bitRange=4-4
 5387                           ;'CAN2_RF1R.RFOM`                      EQU 0x40006810,        4, base=16,    bitRange=5-5
 5388                           
 5389                           ;CAN2_IER                            EQU 0x40006814
 5390                           ;'CAN2_IER.TMEIE`                      EQU 0x40006814,        4, base=16,    bitRange=0-0
 5391                           ;'CAN2_IER.FMPIE0`                     EQU 0x40006814,        4, base=16,    bitRange=1-1
 5392                           ;'CAN2_IER.FFIE0`                      EQU 0x40006814,        4, base=16,    bitRange=2-2
 5393                           ;'CAN2_IER.FOVIE0`                     EQU 0x40006814,        4, base=16,    bitRange=3-3
 5394                           ;'CAN2_IER.FMPIE1`                     EQU 0x40006814,        4, base=16,    bitRange=4-4
 5395                           ;'CAN2_IER.FFIE1`                      EQU 0x40006814,        4, base=16,    bitRange=5-5
 5396                           ;'CAN2_IER.FOVIE1`                     EQU 0x40006814,        4, base=16,    bitRange=6-6
 5397                           ;'CAN2_IER.EWGIE`                      EQU 0x40006814,        4, base=16,    bitRange=8-8
 5398                           ;'CAN2_IER.EPVIE`                      EQU 0x40006814,        4, base=16,    bitRange=9-9
 5399                           ;'CAN2_IER.BOFIE`                      EQU 0x40006814,        4, base=16,    bitRange=10-10
 5400                           ;'CAN2_IER.LECIE`                      EQU 0x40006814,        4, base=16,    bitRange=11-11
 5401                           ;'CAN2_IER.ERRIE`                      EQU 0x40006814,        4, base=16,    bitRange=15-15
 5402                           ;'CAN2_IER.WKUIE`                      EQU 0x40006814,        4, base=16,    bitRange=16-16
 5403                           ;'CAN2_IER.SLKIE`                      EQU 0x40006814,        4, base=16,    bitRange=17-17
 5404                           
 5405                           ;CAN2_ESR                            EQU 0x40006818
 5406                           ;'CAN2_ESR.EWGF`                       EQU 0x40006818,        4, base=16,    bitRange=0-0
 5407                           ;'CAN2_ESR.EPVF`                       EQU 0x40006818,        4, base=16,    bitRange=1-1
 5408                           ;'CAN2_ESR.BOFF`                       EQU 0x40006818,        4, base=16,    bitRange=2-2
 5409                           ;'CAN2_ESR.LEC`                        EQU 0x40006818,        4, base=16,    bitRange=4-6
 5410                           ;'CAN2_ESR.TEC`                        EQU 0x40006818,        4, base=16,    bitRange=16-23
 5411                           ;'CAN2_ESR.REC`                        EQU 0x40006818,        4, base=16,    bitRange=24-31
 5412                           
 5413                           ;CAN2_BTR                            EQU 0x4000681C
 5414                           ;'CAN2_BTR.BRP`                        EQU 0x4000681C,        4, base=16,    bitRange=0-9
 5415                           ;'CAN2_BTR.TS1`                        EQU 0x4000681C,        4, base=16,    bitRange=16-19
 5416                           ;'CAN2_BTR.TS2`                        EQU 0x4000681C,        4, base=16,    bitRange=20-22
 5417                           ;'CAN2_BTR.SJW`                        EQU 0x4000681C,        4, base=16,    bitRange=24-25
 5418                           ;'CAN2_BTR.LBKM`                       EQU 0x4000681C,        4, base=16,    bitRange=30-30
 5419                           ;'CAN2_BTR.SILM`                       EQU 0x4000681C,        4, base=16,    bitRange=31-31
 5420                           
 5421                           ;CAN2_TI0R                           EQU 0x40006980
 5422                           ;'CAN2_TI0R.TXRQ`                      EQU 0x40006980,        4, base=16,    bitRange=0-0
 5423                           ;'CAN2_TI0R.RTR`                       EQU 0x40006980,        4, base=16,    bitRange=1-1
 5424                           ;'CAN2_TI0R.IDE`                       EQU 0x40006980,        4, base=16,    bitRange=2-2
 5425                           ;'CAN2_TI0R.STID`                      EQU 0x40006980,        4, base=16,    bitRange=21-31
 5426                           
 5427                           ;CAN2_TDT0R                          EQU 0x40006984
 5428                           ;'CAN2_TDT0R.DLC`                      EQU 0x40006984,        4, base=16,    bitRange=0-3
 5429                           ;'CAN2_TDT0R.TGT`                      EQU 0x40006984,        4, base=16,    bitRange=8-8
 5430                           ;'CAN2_TDT0R.TIME`                     EQU 0x40006984,        4, base=16,    bitRange=16-31
 5431                           
 5432                           ;CAN2_TDL0R                          EQU 0x40006988
 5433                           ;'CAN2_TDL0R.DATA0`                    EQU 0x40006988,        4, base=16,    bitRange=0-7
 5434                           ;'CAN2_TDL0R.DATA1`                    EQU 0x40006988,        4, base=16,    bitRange=8-15
 5435                           ;'CAN2_TDL0R.DATA2`                    EQU 0x40006988,        4, base=16,    bitRange=16-23
 5436                           ;'CAN2_TDL0R.DATA3`                    EQU 0x40006988,        4, base=16,    bitRange=24-31
 5437                           
 5438                           ;CAN2_TDH0R                          EQU 0x4000698C
 5439                           ;'CAN2_TDH0R.DATA4`                    EQU 0x4000698C,        4, base=16,    bitRange=0-7
 5440                           ;'CAN2_TDH0R.DATA5`                    EQU 0x4000698C,        4, base=16,    bitRange=8-15
 5441                           ;'CAN2_TDH0R.DATA6`                    EQU 0x4000698C,        4, base=16,    bitRange=16-23
 5442                           ;'CAN2_TDH0R.DATA7`                    EQU 0x4000698C,        4, base=16,    bitRange=24-31
 5443                           
 5444                           ;CAN2_TI1R                           EQU 0x40006990
 5445                           ;'CAN2_TI1R.TXRQ`                      EQU 0x40006990,        4, base=16,    bitRange=0-0
 5446                           ;'CAN2_TI1R.RTR`                       EQU 0x40006990,        4, base=16,    bitRange=1-1
 5447                           ;'CAN2_TI1R.IDE`                       EQU 0x40006990,        4, base=16,    bitRange=2-2
 5448                           ;'CAN2_TI1R.STID`                      EQU 0x40006990,        4, base=16,    bitRange=21-31
 5449                           
 5450                           ;CAN2_TDT1R                          EQU 0x40006994
 5451                           ;'CAN2_TDT1R.DLC`                      EQU 0x40006994,        4, base=16,    bitRange=0-3
 5452                           ;'CAN2_TDT1R.TGT`                      EQU 0x40006994,        4, base=16,    bitRange=8-8
 5453                           ;'CAN2_TDT1R.TIME`                     EQU 0x40006994,        4, base=16,    bitRange=16-31
 5454                           
 5455                           ;CAN2_TDL1R                          EQU 0x40006998
 5456                           ;'CAN2_TDL1R.DATA0`                    EQU 0x40006998,        4, base=16,    bitRange=0-7
 5457                           ;'CAN2_TDL1R.DATA1`                    EQU 0x40006998,        4, base=16,    bitRange=8-15
 5458                           ;'CAN2_TDL1R.DATA2`                    EQU 0x40006998,        4, base=16,    bitRange=16-23
 5459                           ;'CAN2_TDL1R.DATA3`                    EQU 0x40006998,        4, base=16,    bitRange=24-31
 5460                           
 5461                           ;CAN2_TDH1R                          EQU 0x4000699C
 5462                           ;'CAN2_TDH1R.DATA4`                    EQU 0x4000699C,        4, base=16,    bitRange=0-7
 5463                           ;'CAN2_TDH1R.DATA5`                    EQU 0x4000699C,        4, base=16,    bitRange=8-15
 5464                           ;'CAN2_TDH1R.DATA6`                    EQU 0x4000699C,        4, base=16,    bitRange=16-23
 5465                           ;'CAN2_TDH1R.DATA7`                    EQU 0x4000699C,        4, base=16,    bitRange=24-31
 5466                           
 5467                           ;CAN2_TI2R                           EQU 0x400069A0
 5468                           ;'CAN2_TI2R.TXRQ`                      EQU 0x400069A0,        4, base=16,    bitRange=0-0
 5469                           ;'CAN2_TI2R.RTR`                       EQU 0x400069A0,        4, base=16,    bitRange=1-1
 5470                           ;'CAN2_TI2R.IDE`                       EQU 0x400069A0,        4, base=16,    bitRange=2-2
 5471                           ;'CAN2_TI2R.STID`                      EQU 0x400069A0,        4, base=16,    bitRange=21-31
 5472                           
 5473                           ;CAN2_TDT2R                          EQU 0x400069A4
 5474                           ;'CAN2_TDT2R.DLC`                      EQU 0x400069A4,        4, base=16,    bitRange=0-3
 5475                           ;'CAN2_TDT2R.TGT`                      EQU 0x400069A4,        4, base=16,    bitRange=8-8
 5476                           ;'CAN2_TDT2R.TIME`                     EQU 0x400069A4,        4, base=16,    bitRange=16-31
 5477                           
 5478                           ;CAN2_TDL2R                          EQU 0x400069A8
 5479                           ;'CAN2_TDL2R.DATA0`                    EQU 0x400069A8,        4, base=16,    bitRange=0-7
 5480                           ;'CAN2_TDL2R.DATA1`                    EQU 0x400069A8,        4, base=16,    bitRange=8-15
 5481                           ;'CAN2_TDL2R.DATA2`                    EQU 0x400069A8,        4, base=16,    bitRange=16-23
 5482                           ;'CAN2_TDL2R.DATA3`                    EQU 0x400069A8,        4, base=16,    bitRange=24-31
 5483                           
 5484                           ;CAN2_TDH2R                          EQU 0x400069AC
 5485                           ;'CAN2_TDH2R.DATA4`                    EQU 0x400069AC,        4, base=16,    bitRange=0-7
 5486                           ;'CAN2_TDH2R.DATA5`                    EQU 0x400069AC,        4, base=16,    bitRange=8-15
 5487                           ;'CAN2_TDH2R.DATA6`                    EQU 0x400069AC,        4, base=16,    bitRange=16-23
 5488                           ;'CAN2_TDH2R.DATA7`                    EQU 0x400069AC,        4, base=16,    bitRange=24-31
 5489                           
 5490                           ;CAN2_RI0R                           EQU 0x400069B0
 5491                           ;'CAN2_RI0R.RTR`                       EQU 0x400069B0,        4, base=16,    bitRange=1-1
 5492                           ;'CAN2_RI0R.IDE`                       EQU 0x400069B0,        4, base=16,    bitRange=2-2
 5493                           ;'CAN2_RI0R.STID`                      EQU 0x400069B0,        4, base=16,    bitRange=21-31
 5494                           
 5495                           ;CAN2_RDT0R                          EQU 0x400069B4
 5496                           ;'CAN2_RDT0R.DLC`                      EQU 0x400069B4,        4, base=16,    bitRange=0-3
 5497                           ;'CAN2_RDT0R.FMI`                      EQU 0x400069B4,        4, base=16,    bitRange=8-15
 5498                           ;'CAN2_RDT0R.TIME`                     EQU 0x400069B4,        4, base=16,    bitRange=16-31
 5499                           
 5500                           ;CAN2_RDL0R                          EQU 0x400069B8
 5501                           ;'CAN2_RDL0R.DATA0`                    EQU 0x400069B8,        4, base=16,    bitRange=0-7
 5502                           ;'CAN2_RDL0R.DATA1`                    EQU 0x400069B8,        4, base=16,    bitRange=8-15
 5503                           ;'CAN2_RDL0R.DATA2`                    EQU 0x400069B8,        4, base=16,    bitRange=16-23
 5504                           ;'CAN2_RDL0R.DATA3`                    EQU 0x400069B8,        4, base=16,    bitRange=24-31
 5505                           
 5506                           ;CAN2_RDH0R                          EQU 0x400069BC
 5507                           ;'CAN2_RDH0R.DATA4`                    EQU 0x400069BC,        4, base=16,    bitRange=0-7
 5508                           ;'CAN2_RDH0R.DATA5`                    EQU 0x400069BC,        4, base=16,    bitRange=8-15
 5509                           ;'CAN2_RDH0R.DATA6`                    EQU 0x400069BC,        4, base=16,    bitRange=16-23
 5510                           ;'CAN2_RDH0R.DATA7`                    EQU 0x400069BC,        4, base=16,    bitRange=24-31
 5511                           
 5512                           ;CAN2_RI1R                           EQU 0x400069C0
 5513                           ;'CAN2_RI1R.RTR`                       EQU 0x400069C0,        4, base=16,    bitRange=1-1
 5514                           ;'CAN2_RI1R.IDE`                       EQU 0x400069C0,        4, base=16,    bitRange=2-2
 5515                           ;'CAN2_RI1R.STID`                      EQU 0x400069C0,        4, base=16,    bitRange=21-31
 5516                           
 5517                           ;CAN2_RDT1R                          EQU 0x400069C4
 5518                           ;'CAN2_RDT1R.DLC`                      EQU 0x400069C4,        4, base=16,    bitRange=0-3
 5519                           ;'CAN2_RDT1R.FMI`                      EQU 0x400069C4,        4, base=16,    bitRange=8-15
 5520                           ;'CAN2_RDT1R.TIME`                     EQU 0x400069C4,        4, base=16,    bitRange=16-31
 5521                           
 5522                           ;CAN2_RDL1R                          EQU 0x400069C8
 5523                           ;'CAN2_RDL1R.DATA0`                    EQU 0x400069C8,        4, base=16,    bitRange=0-7
 5524                           ;'CAN2_RDL1R.DATA1`                    EQU 0x400069C8,        4, base=16,    bitRange=8-15
 5525                           ;'CAN2_RDL1R.DATA2`                    EQU 0x400069C8,        4, base=16,    bitRange=16-23
 5526                           ;'CAN2_RDL1R.DATA3`                    EQU 0x400069C8,        4, base=16,    bitRange=24-31
 5527                           
 5528                           ;CAN2_RDH1R                          EQU 0x400069CC
 5529                           ;'CAN2_RDH1R.DATA4`                    EQU 0x400069CC,        4, base=16,    bitRange=0-7
 5530                           ;'CAN2_RDH1R.DATA5`                    EQU 0x400069CC,        4, base=16,    bitRange=8-15
 5531                           ;'CAN2_RDH1R.DATA6`                    EQU 0x400069CC,        4, base=16,    bitRange=16-23
 5532                           ;'CAN2_RDH1R.DATA7`                    EQU 0x400069CC,        4, base=16,    bitRange=24-31
 5533                           
 5534                           ;CAN_FMR                             EQU 0x40006600
 5535                           ;'CAN_FMR.FINIT`                       EQU 0x40006600,        4, base=16,    bitRange=0-0
 5536                           ;'CAN_FMR.CAN2SB`                      EQU 0x40006600,        4, base=16,    bitRange=8-13
 5537                           
 5538                           ;CAN_FM1R                            EQU 0x40006604
 5539                           ;'CAN_FM1R.FBM0`                       EQU 0x40006604,        4, base=16,    bitRange=0-0
 5540                           ;'CAN_FM1R.FBM1`                       EQU 0x40006604,        4, base=16,    bitRange=1-1
 5541                           ;'CAN_FM1R.FBM2`                       EQU 0x40006604,        4, base=16,    bitRange=2-2
 5542                           ;'CAN_FM1R.FBM3`                       EQU 0x40006604,        4, base=16,    bitRange=3-3
 5543                           ;'CAN_FM1R.FBM4`                       EQU 0x40006604,        4, base=16,    bitRange=4-4
 5544                           ;'CAN_FM1R.FBM5`                       EQU 0x40006604,        4, base=16,    bitRange=5-5
 5545                           ;'CAN_FM1R.FBM6`                       EQU 0x40006604,        4, base=16,    bitRange=6-6
 5546                           ;'CAN_FM1R.FBM7`                       EQU 0x40006604,        4, base=16,    bitRange=7-7
 5547                           ;'CAN_FM1R.FBM8`                       EQU 0x40006604,        4, base=16,    bitRange=8-8
 5548                           ;'CAN_FM1R.FBM9`                       EQU 0x40006604,        4, base=16,    bitRange=9-9
 5549                           ;'CAN_FM1R.FBM10`                      EQU 0x40006604,        4, base=16,    bitRange=10-10
 5550                           ;'CAN_FM1R.FBM11`                      EQU 0x40006604,        4, base=16,    bitRange=11-11
 5551                           ;'CAN_FM1R.FBM12`                      EQU 0x40006604,        4, base=16,    bitRange=12-12
 5552                           ;'CAN_FM1R.FBM13`                      EQU 0x40006604,        4, base=16,    bitRange=13-13
 5553                           ;'CAN_FM1R.FBM14`                      EQU 0x40006604,        4, base=16,    bitRange=14-14
 5554                           ;'CAN_FM1R.FBM15`                      EQU 0x40006604,        4, base=16,    bitRange=15-15
 5555                           ;'CAN_FM1R.FBM16`                      EQU 0x40006604,        4, base=16,    bitRange=16-16
 5556                           ;'CAN_FM1R.FBM17`                      EQU 0x40006604,        4, base=16,    bitRange=17-17
 5557                           ;'CAN_FM1R.FBM18`                      EQU 0x40006604,        4, base=16,    bitRange=18-18
 5558                           ;'CAN_FM1R.FBM19`                      EQU 0x40006604,        4, base=16,    bitRange=19-19
 5559                           ;'CAN_FM1R.FBM20`                      EQU 0x40006604,        4, base=16,    bitRange=20-20
 5560                           ;'CAN_FM1R.FBM21`                      EQU 0x40006604,        4, base=16,    bitRange=21-21
 5561                           ;'CAN_FM1R.FBM22`                      EQU 0x40006604,        4, base=16,    bitRange=22-22
 5562                           ;'CAN_FM1R.FBM23`                      EQU 0x40006604,        4, base=16,    bitRange=23-23
 5563                           ;'CAN_FM1R.FBM24`                      EQU 0x40006604,        4, base=16,    bitRange=24-24
 5564                           ;'CAN_FM1R.FBM25`                      EQU 0x40006604,        4, base=16,    bitRange=25-25
 5565                           ;'CAN_FM1R.FBM26`                      EQU 0x40006604,        4, base=16,    bitRange=26-26
 5566                           ;'CAN_FM1R.FBM27`                      EQU 0x40006604,        4, base=16,    bitRange=27-27
 5567                           
 5568                           ;CAN_FS1R                            EQU 0x4000660C
 5569                           ;'CAN_FS1R.FSC0`                       EQU 0x4000660C,        4, base=16,    bitRange=0-0
 5570                           ;'CAN_FS1R.FSC1`                       EQU 0x4000660C,        4, base=16,    bitRange=1-1
 5571                           ;'CAN_FS1R.FSC2`                       EQU 0x4000660C,        4, base=16,    bitRange=2-2
 5572                           ;'CAN_FS1R.FSC3`                       EQU 0x4000660C,        4, base=16,    bitRange=3-3
 5573                           ;'CAN_FS1R.FSC4`                       EQU 0x4000660C,        4, base=16,    bitRange=4-4
 5574                           ;'CAN_FS1R.FSC5`                       EQU 0x4000660C,        4, base=16,    bitRange=5-5
 5575                           ;'CAN_FS1R.FSC6`                       EQU 0x4000660C,        4, base=16,    bitRange=6-6
 5576                           ;'CAN_FS1R.FSC7`                       EQU 0x4000660C,        4, base=16,    bitRange=7-7
 5577                           ;'CAN_FS1R.FSC8`                       EQU 0x4000660C,        4, base=16,    bitRange=8-8
 5578                           ;'CAN_FS1R.FSC9`                       EQU 0x4000660C,        4, base=16,    bitRange=9-9
 5579                           ;'CAN_FS1R.FSC10`                      EQU 0x4000660C,        4, base=16,    bitRange=10-10
 5580                           ;'CAN_FS1R.FSC11`                      EQU 0x4000660C,        4, base=16,    bitRange=11-11
 5581                           ;'CAN_FS1R.FSC12`                      EQU 0x4000660C,        4, base=16,    bitRange=12-12
 5582                           ;'CAN_FS1R.FSC13`                      EQU 0x4000660C,        4, base=16,    bitRange=13-13
 5583                           ;'CAN_FS1R.FSC14`                      EQU 0x4000660C,        4, base=16,    bitRange=14-14
 5584                           ;'CAN_FS1R.FSC15`                      EQU 0x4000660C,        4, base=16,    bitRange=15-15
 5585                           ;'CAN_FS1R.FSC16`                      EQU 0x4000660C,        4, base=16,    bitRange=16-16
 5586                           ;'CAN_FS1R.FSC17`                      EQU 0x4000660C,        4, base=16,    bitRange=17-17
 5587                           ;'CAN_FS1R.FSC18`                      EQU 0x4000660C,        4, base=16,    bitRange=18-18
 5588                           ;'CAN_FS1R.FSC19`                      EQU 0x4000660C,        4, base=16,    bitRange=19-19
 5589                           ;'CAN_FS1R.FSC20`                      EQU 0x4000660C,        4, base=16,    bitRange=20-20
 5590                           ;'CAN_FS1R.FSC21`                      EQU 0x4000660C,        4, base=16,    bitRange=21-21
 5591                           ;'CAN_FS1R.FSC22`                      EQU 0x4000660C,        4, base=16,    bitRange=22-22
 5592                           ;'CAN_FS1R.FSC23`                      EQU 0x4000660C,        4, base=16,    bitRange=23-23
 5593                           ;'CAN_FS1R.FSC24`                      EQU 0x4000660C,        4, base=16,    bitRange=24-24
 5594                           ;'CAN_FS1R.FSC25`                      EQU 0x4000660C,        4, base=16,    bitRange=25-25
 5595                           ;'CAN_FS1R.FSC26`                      EQU 0x4000660C,        4, base=16,    bitRange=26-26
 5596                           ;'CAN_FS1R.FSC27`                      EQU 0x4000660C,        4, base=16,    bitRange=27-27
 5597                           
 5598                           ;CAN_FFA1R                           EQU 0x40006614
 5599                           ;'CAN_FFA1R.FFA0`                      EQU 0x40006614,        4, base=16,    bitRange=0-0
 5600                           ;'CAN_FFA1R.FFA1`                      EQU 0x40006614,        4, base=16,    bitRange=1-1
 5601                           ;'CAN_FFA1R.FFA2`                      EQU 0x40006614,        4, base=16,    bitRange=2-2
 5602                           ;'CAN_FFA1R.FFA3`                      EQU 0x40006614,        4, base=16,    bitRange=3-3
 5603                           ;'CAN_FFA1R.FFA4`                      EQU 0x40006614,        4, base=16,    bitRange=4-4
 5604                           ;'CAN_FFA1R.FFA5`                      EQU 0x40006614,        4, base=16,    bitRange=5-5
 5605                           ;'CAN_FFA1R.FFA6`                      EQU 0x40006614,        4, base=16,    bitRange=6-6
 5606                           ;'CAN_FFA1R.FFA7`                      EQU 0x40006614,        4, base=16,    bitRange=7-7
 5607                           ;'CAN_FFA1R.FFA8`                      EQU 0x40006614,        4, base=16,    bitRange=8-8
 5608                           ;'CAN_FFA1R.FFA9`                      EQU 0x40006614,        4, base=16,    bitRange=9-9
 5609                           ;'CAN_FFA1R.FFA10`                     EQU 0x40006614,        4, base=16,    bitRange=10-10
 5610                           ;'CAN_FFA1R.FFA11`                     EQU 0x40006614,        4, base=16,    bitRange=11-11
 5611                           ;'CAN_FFA1R.FFA12`                     EQU 0x40006614,        4, base=16,    bitRange=12-12
 5612                           ;'CAN_FFA1R.FFA13`                     EQU 0x40006614,        4, base=16,    bitRange=13-13
 5613                           ;'CAN_FFA1R.FFA14`                     EQU 0x40006614,        4, base=16,    bitRange=14-14
 5614                           ;'CAN_FFA1R.FFA15`                     EQU 0x40006614,        4, base=16,    bitRange=15-15
 5615                           ;'CAN_FFA1R.FFA16`                     EQU 0x40006614,        4, base=16,    bitRange=16-16
 5616                           ;'CAN_FFA1R.FFA17`                     EQU 0x40006614,        4, base=16,    bitRange=17-17
 5617                           ;'CAN_FFA1R.FFA18`                     EQU 0x40006614,        4, base=16,    bitRange=18-18
 5618                           ;'CAN_FFA1R.FFA19`                     EQU 0x40006614,        4, base=16,    bitRange=19-19
 5619                           ;'CAN_FFA1R.FFA20`                     EQU 0x40006614,        4, base=16,    bitRange=20-20
 5620                           ;'CAN_FFA1R.FFA21`                     EQU 0x40006614,        4, base=16,    bitRange=21-21
 5621                           ;'CAN_FFA1R.FFA22`                     EQU 0x40006614,        4, base=16,    bitRange=22-22
 5622                           ;'CAN_FFA1R.FFA23`                     EQU 0x40006614,        4, base=16,    bitRange=23-23
 5623                           ;'CAN_FFA1R.FFA24`                     EQU 0x40006614,        4, base=16,    bitRange=24-24
 5624                           ;'CAN_FFA1R.FFA25`                     EQU 0x40006614,        4, base=16,    bitRange=25-25
 5625                           ;'CAN_FFA1R.FFA26`                     EQU 0x40006614,        4, base=16,    bitRange=26-26
 5626                           ;'CAN_FFA1R.FFA27`                     EQU 0x40006614,        4, base=16,    bitRange=27-27
 5627                           
 5628                           ;CAN_FA1R                            EQU 0x4000661C
 5629                           ;'CAN_FA1R.FACT0`                      EQU 0x4000661C,        4, base=16,    bitRange=0-0
 5630                           ;'CAN_FA1R.FACT1`                      EQU 0x4000661C,        4, base=16,    bitRange=1-1
 5631                           ;'CAN_FA1R.FACT2`                      EQU 0x4000661C,        4, base=16,    bitRange=2-2
 5632                           ;'CAN_FA1R.FACT3`                      EQU 0x4000661C,        4, base=16,    bitRange=3-3
 5633                           ;'CAN_FA1R.FACT4`                      EQU 0x4000661C,        4, base=16,    bitRange=4-4
 5634                           ;'CAN_FA1R.FACT5`                      EQU 0x4000661C,        4, base=16,    bitRange=5-5
 5635                           ;'CAN_FA1R.FACT6`                      EQU 0x4000661C,        4, base=16,    bitRange=6-6
 5636                           ;'CAN_FA1R.FACT7`                      EQU 0x4000661C,        4, base=16,    bitRange=7-7
 5637                           ;'CAN_FA1R.FACT8`                      EQU 0x4000661C,        4, base=16,    bitRange=8-8
 5638                           ;'CAN_FA1R.FACT9`                      EQU 0x4000661C,        4, base=16,    bitRange=9-9
 5639                           ;'CAN_FA1R.FACT10`                     EQU 0x4000661C,        4, base=16,    bitRange=10-10
 5640                           ;'CAN_FA1R.FACT11`                     EQU 0x4000661C,        4, base=16,    bitRange=11-11
 5641                           ;'CAN_FA1R.FACT12`                     EQU 0x4000661C,        4, base=16,    bitRange=12-12
 5642                           ;'CAN_FA1R.FACT13`                     EQU 0x4000661C,        4, base=16,    bitRange=13-13
 5643                           ;'CAN_FA1R.FACT14`                     EQU 0x4000661C,        4, base=16,    bitRange=14-14
 5644                           ;'CAN_FA1R.FACT15`                     EQU 0x4000661C,        4, base=16,    bitRange=15-15
 5645                           ;'CAN_FA1R.FACT16`                     EQU 0x4000661C,        4, base=16,    bitRange=16-16
 5646                           ;'CAN_FA1R.FACT17`                     EQU 0x4000661C,        4, base=16,    bitRange=17-17
 5647                           ;'CAN_FA1R.FACT18`                     EQU 0x4000661C,        4, base=16,    bitRange=18-18
 5648                           ;'CAN_FA1R.FACT19`                     EQU 0x4000661C,        4, base=16,    bitRange=19-19
 5649                           ;'CAN_FA1R.FACT20`                     EQU 0x4000661C,        4, base=16,    bitRange=20-20
 5650                           ;'CAN_FA1R.FACT21`                     EQU 0x4000661C,        4, base=16,    bitRange=21-21
 5651                           ;'CAN_FA1R.FACT22`                     EQU 0x4000661C,        4, base=16,    bitRange=22-22
 5652                           ;'CAN_FA1R.FACT23`                     EQU 0x4000661C,        4, base=16,    bitRange=23-23
 5653                           ;'CAN_FA1R.FACT24`                     EQU 0x4000661C,        4, base=16,    bitRange=24-24
 5654                           ;'CAN_FA1R.FACT25`                     EQU 0x4000661C,        4, base=16,    bitRange=25-25
 5655                           ;'CAN_FA1R.FACT26`                     EQU 0x4000661C,        4, base=16,    bitRange=26-26
 5656                           ;'CAN_FA1R.FACT27`                     EQU 0x4000661C,        4, base=16,    bitRange=27-27
 5657                           
 5658                           ;CAN_F0R1                            EQU 0x40006640
 5659                           ;'CAN_F0R1.FB0`                        EQU 0x40006640,        4, base=16,    bitRange=0-0
 5660                           ;'CAN_F0R1.FB1`                        EQU 0x40006640,        4, base=16,    bitRange=1-1
 5661                           ;'CAN_F0R1.FB2`                        EQU 0x40006640,        4, base=16,    bitRange=2-2
 5662                           ;'CAN_F0R1.FB3`                        EQU 0x40006640,        4, base=16,    bitRange=3-3
 5663                           ;'CAN_F0R1.FB4`                        EQU 0x40006640,        4, base=16,    bitRange=4-4
 5664                           ;'CAN_F0R1.FB5`                        EQU 0x40006640,        4, base=16,    bitRange=5-5
 5665                           ;'CAN_F0R1.FB6`                        EQU 0x40006640,        4, base=16,    bitRange=6-6
 5666                           ;'CAN_F0R1.FB7`                        EQU 0x40006640,        4, base=16,    bitRange=7-7
 5667                           ;'CAN_F0R1.FB8`                        EQU 0x40006640,        4, base=16,    bitRange=8-8
 5668                           ;'CAN_F0R1.FB9`                        EQU 0x40006640,        4, base=16,    bitRange=9-9
 5669                           ;'CAN_F0R1.FB10`                       EQU 0x40006640,        4, base=16,    bitRange=10-10
 5670                           ;'CAN_F0R1.FB11`                       EQU 0x40006640,        4, base=16,    bitRange=11-11
 5671                           ;'CAN_F0R1.FB12`                       EQU 0x40006640,        4, base=16,    bitRange=12-12
 5672                           ;'CAN_F0R1.FB13`                       EQU 0x40006640,        4, base=16,    bitRange=13-13
 5673                           ;'CAN_F0R1.FB14`                       EQU 0x40006640,        4, base=16,    bitRange=14-14
 5674                           ;'CAN_F0R1.FB15`                       EQU 0x40006640,        4, base=16,    bitRange=15-15
 5675                           ;'CAN_F0R1.FB16`                       EQU 0x40006640,        4, base=16,    bitRange=16-16
 5676                           ;'CAN_F0R1.FB17`                       EQU 0x40006640,        4, base=16,    bitRange=17-17
 5677                           ;'CAN_F0R1.FB18`                       EQU 0x40006640,        4, base=16,    bitRange=18-18
 5678                           ;'CAN_F0R1.FB19`                       EQU 0x40006640,        4, base=16,    bitRange=19-19
 5679                           ;'CAN_F0R1.FB20`                       EQU 0x40006640,        4, base=16,    bitRange=20-20
 5680                           ;'CAN_F0R1.FB21`                       EQU 0x40006640,        4, base=16,    bitRange=21-21
 5681                           ;'CAN_F0R1.FB22`                       EQU 0x40006640,        4, base=16,    bitRange=22-22
 5682                           ;'CAN_F0R1.FB23`                       EQU 0x40006640,        4, base=16,    bitRange=23-23
 5683                           ;'CAN_F0R1.FB24`                       EQU 0x40006640,        4, base=16,    bitRange=24-24
 5684                           ;'CAN_F0R1.FB25`                       EQU 0x40006640,        4, base=16,    bitRange=25-25
 5685                           ;'CAN_F0R1.FB26`                       EQU 0x40006640,        4, base=16,    bitRange=26-26
 5686                           ;'CAN_F0R1.FB27`                       EQU 0x40006640,        4, base=16,    bitRange=27-27
 5687                           ;'CAN_F0R1.FB28`                       EQU 0x40006640,        4, base=16,    bitRange=28-28
 5688                           ;'CAN_F0R1.FB29`                       EQU 0x40006640,        4, base=16,    bitRange=29-29
 5689                           ;'CAN_F0R1.FB30`                       EQU 0x40006640,        4, base=16,    bitRange=30-30
 5690                           ;'CAN_F0R1.FB31`                       EQU 0x40006640,        4, base=16,    bitRange=31-31
 5691                           
 5692                           ;CAN_F0R2                            EQU 0x40006644
 5693                           ;'CAN_F0R2.FB0`                        EQU 0x40006644,        4, base=16,    bitRange=0-0
 5694                           ;'CAN_F0R2.FB1`                        EQU 0x40006644,        4, base=16,    bitRange=1-1
 5695                           ;'CAN_F0R2.FB2`                        EQU 0x40006644,        4, base=16,    bitRange=2-2
 5696                           ;'CAN_F0R2.FB3`                        EQU 0x40006644,        4, base=16,    bitRange=3-3
 5697                           ;'CAN_F0R2.FB4`                        EQU 0x40006644,        4, base=16,    bitRange=4-4
 5698                           ;'CAN_F0R2.FB5`                        EQU 0x40006644,        4, base=16,    bitRange=5-5
 5699                           ;'CAN_F0R2.FB6`                        EQU 0x40006644,        4, base=16,    bitRange=6-6
 5700                           ;'CAN_F0R2.FB7`                        EQU 0x40006644,        4, base=16,    bitRange=7-7
 5701                           ;'CAN_F0R2.FB8`                        EQU 0x40006644,        4, base=16,    bitRange=8-8
 5702                           ;'CAN_F0R2.FB9`                        EQU 0x40006644,        4, base=16,    bitRange=9-9
 5703                           ;'CAN_F0R2.FB10`                       EQU 0x40006644,        4, base=16,    bitRange=10-10
 5704                           ;'CAN_F0R2.FB11`                       EQU 0x40006644,        4, base=16,    bitRange=11-11
 5705                           ;'CAN_F0R2.FB12`                       EQU 0x40006644,        4, base=16,    bitRange=12-12
 5706                           ;'CAN_F0R2.FB13`                       EQU 0x40006644,        4, base=16,    bitRange=13-13
 5707                           ;'CAN_F0R2.FB14`                       EQU 0x40006644,        4, base=16,    bitRange=14-14
 5708                           ;'CAN_F0R2.FB15`                       EQU 0x40006644,        4, base=16,    bitRange=15-15
 5709                           ;'CAN_F0R2.FB16`                       EQU 0x40006644,        4, base=16,    bitRange=16-16
 5710                           ;'CAN_F0R2.FB17`                       EQU 0x40006644,        4, base=16,    bitRange=17-17
 5711                           ;'CAN_F0R2.FB18`                       EQU 0x40006644,        4, base=16,    bitRange=18-18
 5712                           ;'CAN_F0R2.FB19`                       EQU 0x40006644,        4, base=16,    bitRange=19-19
 5713                           ;'CAN_F0R2.FB20`                       EQU 0x40006644,        4, base=16,    bitRange=20-20
 5714                           ;'CAN_F0R2.FB21`                       EQU 0x40006644,        4, base=16,    bitRange=21-21
 5715                           ;'CAN_F0R2.FB22`                       EQU 0x40006644,        4, base=16,    bitRange=22-22
 5716                           ;'CAN_F0R2.FB23`                       EQU 0x40006644,        4, base=16,    bitRange=23-23
 5717                           ;'CAN_F0R2.FB24`                       EQU 0x40006644,        4, base=16,    bitRange=24-24
 5718                           ;'CAN_F0R2.FB25`                       EQU 0x40006644,        4, base=16,    bitRange=25-25
 5719                           ;'CAN_F0R2.FB26`                       EQU 0x40006644,        4, base=16,    bitRange=26-26
 5720                           ;'CAN_F0R2.FB27`                       EQU 0x40006644,        4, base=16,    bitRange=27-27
 5721                           ;'CAN_F0R2.FB28`                       EQU 0x40006644,        4, base=16,    bitRange=28-28
 5722                           ;'CAN_F0R2.FB29`                       EQU 0x40006644,        4, base=16,    bitRange=29-29
 5723                           ;'CAN_F0R2.FB30`                       EQU 0x40006644,        4, base=16,    bitRange=30-30
 5724                           ;'CAN_F0R2.FB31`                       EQU 0x40006644,        4, base=16,    bitRange=31-31
 5725                           
 5726                           ;CAN_F1R1                            EQU 0x40006648
 5727                           ;'CAN_F1R1.FB0`                        EQU 0x40006648,        4, base=16,    bitRange=0-0
 5728                           ;'CAN_F1R1.FB1`                        EQU 0x40006648,        4, base=16,    bitRange=1-1
 5729                           ;'CAN_F1R1.FB2`                        EQU 0x40006648,        4, base=16,    bitRange=2-2
 5730                           ;'CAN_F1R1.FB3`                        EQU 0x40006648,        4, base=16,    bitRange=3-3
 5731                           ;'CAN_F1R1.FB4`                        EQU 0x40006648,        4, base=16,    bitRange=4-4
 5732                           ;'CAN_F1R1.FB5`                        EQU 0x40006648,        4, base=16,    bitRange=5-5
 5733                           ;'CAN_F1R1.FB6`                        EQU 0x40006648,        4, base=16,    bitRange=6-6
 5734                           ;'CAN_F1R1.FB7`                        EQU 0x40006648,        4, base=16,    bitRange=7-7
 5735                           ;'CAN_F1R1.FB8`                        EQU 0x40006648,        4, base=16,    bitRange=8-8
 5736                           ;'CAN_F1R1.FB9`                        EQU 0x40006648,        4, base=16,    bitRange=9-9
 5737                           ;'CAN_F1R1.FB10`                       EQU 0x40006648,        4, base=16,    bitRange=10-10
 5738                           ;'CAN_F1R1.FB11`                       EQU 0x40006648,        4, base=16,    bitRange=11-11
 5739                           ;'CAN_F1R1.FB12`                       EQU 0x40006648,        4, base=16,    bitRange=12-12
 5740                           ;'CAN_F1R1.FB13`                       EQU 0x40006648,        4, base=16,    bitRange=13-13
 5741                           ;'CAN_F1R1.FB14`                       EQU 0x40006648,        4, base=16,    bitRange=14-14
 5742                           ;'CAN_F1R1.FB15`                       EQU 0x40006648,        4, base=16,    bitRange=15-15
 5743                           ;'CAN_F1R1.FB16`                       EQU 0x40006648,        4, base=16,    bitRange=16-16
 5744                           ;'CAN_F1R1.FB17`                       EQU 0x40006648,        4, base=16,    bitRange=17-17
 5745                           ;'CAN_F1R1.FB18`                       EQU 0x40006648,        4, base=16,    bitRange=18-18
 5746                           ;'CAN_F1R1.FB19`                       EQU 0x40006648,        4, base=16,    bitRange=19-19
 5747                           ;'CAN_F1R1.FB20`                       EQU 0x40006648,        4, base=16,    bitRange=20-20
 5748                           ;'CAN_F1R1.FB21`                       EQU 0x40006648,        4, base=16,    bitRange=21-21
 5749                           ;'CAN_F1R1.FB22`                       EQU 0x40006648,        4, base=16,    bitRange=22-22
 5750                           ;'CAN_F1R1.FB23`                       EQU 0x40006648,        4, base=16,    bitRange=23-23
 5751                           ;'CAN_F1R1.FB24`                       EQU 0x40006648,        4, base=16,    bitRange=24-24
 5752                           ;'CAN_F1R1.FB25`                       EQU 0x40006648,        4, base=16,    bitRange=25-25
 5753                           ;'CAN_F1R1.FB26`                       EQU 0x40006648,        4, base=16,    bitRange=26-26
 5754                           ;'CAN_F1R1.FB27`                       EQU 0x40006648,        4, base=16,    bitRange=27-27
 5755                           ;'CAN_F1R1.FB28`                       EQU 0x40006648,        4, base=16,    bitRange=28-28
 5756                           ;'CAN_F1R1.FB29`                       EQU 0x40006648,        4, base=16,    bitRange=29-29
 5757                           ;'CAN_F1R1.FB30`                       EQU 0x40006648,        4, base=16,    bitRange=30-30
 5758                           ;'CAN_F1R1.FB31`                       EQU 0x40006648,        4, base=16,    bitRange=31-31
 5759                           
 5760                           ;CAN_F1R2                            EQU 0x4000664C
 5761                           ;'CAN_F1R2.FB0`                        EQU 0x4000664C,        4, base=16,    bitRange=0-0
 5762                           ;'CAN_F1R2.FB1`                        EQU 0x4000664C,        4, base=16,    bitRange=1-1
 5763                           ;'CAN_F1R2.FB2`                        EQU 0x4000664C,        4, base=16,    bitRange=2-2
 5764                           ;'CAN_F1R2.FB3`                        EQU 0x4000664C,        4, base=16,    bitRange=3-3
 5765                           ;'CAN_F1R2.FB4`                        EQU 0x4000664C,        4, base=16,    bitRange=4-4
 5766                           ;'CAN_F1R2.FB5`                        EQU 0x4000664C,        4, base=16,    bitRange=5-5
 5767                           ;'CAN_F1R2.FB6`                        EQU 0x4000664C,        4, base=16,    bitRange=6-6
 5768                           ;'CAN_F1R2.FB7`                        EQU 0x4000664C,        4, base=16,    bitRange=7-7
 5769                           ;'CAN_F1R2.FB8`                        EQU 0x4000664C,        4, base=16,    bitRange=8-8
 5770                           ;'CAN_F1R2.FB9`                        EQU 0x4000664C,        4, base=16,    bitRange=9-9
 5771                           ;'CAN_F1R2.FB10`                       EQU 0x4000664C,        4, base=16,    bitRange=10-10
 5772                           ;'CAN_F1R2.FB11`                       EQU 0x4000664C,        4, base=16,    bitRange=11-11
 5773                           ;'CAN_F1R2.FB12`                       EQU 0x4000664C,        4, base=16,    bitRange=12-12
 5774                           ;'CAN_F1R2.FB13`                       EQU 0x4000664C,        4, base=16,    bitRange=13-13
 5775                           ;'CAN_F1R2.FB14`                       EQU 0x4000664C,        4, base=16,    bitRange=14-14
 5776                           ;'CAN_F1R2.FB15`                       EQU 0x4000664C,        4, base=16,    bitRange=15-15
 5777                           ;'CAN_F1R2.FB16`                       EQU 0x4000664C,        4, base=16,    bitRange=16-16
 5778                           ;'CAN_F1R2.FB17`                       EQU 0x4000664C,        4, base=16,    bitRange=17-17
 5779                           ;'CAN_F1R2.FB18`                       EQU 0x4000664C,        4, base=16,    bitRange=18-18
 5780                           ;'CAN_F1R2.FB19`                       EQU 0x4000664C,        4, base=16,    bitRange=19-19
 5781                           ;'CAN_F1R2.FB20`                       EQU 0x4000664C,        4, base=16,    bitRange=20-20
 5782                           ;'CAN_F1R2.FB21`                       EQU 0x4000664C,        4, base=16,    bitRange=21-21
 5783                           ;'CAN_F1R2.FB22`                       EQU 0x4000664C,        4, base=16,    bitRange=22-22
 5784                           ;'CAN_F1R2.FB23`                       EQU 0x4000664C,        4, base=16,    bitRange=23-23
 5785                           ;'CAN_F1R2.FB24`                       EQU 0x4000664C,        4, base=16,    bitRange=24-24
 5786                           ;'CAN_F1R2.FB25`                       EQU 0x4000664C,        4, base=16,    bitRange=25-25
 5787                           ;'CAN_F1R2.FB26`                       EQU 0x4000664C,        4, base=16,    bitRange=26-26
 5788                           ;'CAN_F1R2.FB27`                       EQU 0x4000664C,        4, base=16,    bitRange=27-27
 5789                           ;'CAN_F1R2.FB28`                       EQU 0x4000664C,        4, base=16,    bitRange=28-28
 5790                           ;'CAN_F1R2.FB29`                       EQU 0x4000664C,        4, base=16,    bitRange=29-29
 5791                           ;'CAN_F1R2.FB30`                       EQU 0x4000664C,        4, base=16,    bitRange=30-30
 5792                           ;'CAN_F1R2.FB31`                       EQU 0x4000664C,        4, base=16,    bitRange=31-31
 5793                           
 5794                           ;CAN_F2R1                            EQU 0x40006650
 5795                           ;'CAN_F2R1.FB0`                        EQU 0x40006650,        4, base=16,    bitRange=0-0
 5796                           ;'CAN_F2R1.FB1`                        EQU 0x40006650,        4, base=16,    bitRange=1-1
 5797                           ;'CAN_F2R1.FB2`                        EQU 0x40006650,        4, base=16,    bitRange=2-2
 5798                           ;'CAN_F2R1.FB3`                        EQU 0x40006650,        4, base=16,    bitRange=3-3
 5799                           ;'CAN_F2R1.FB4`                        EQU 0x40006650,        4, base=16,    bitRange=4-4
 5800                           ;'CAN_F2R1.FB5`                        EQU 0x40006650,        4, base=16,    bitRange=5-5
 5801                           ;'CAN_F2R1.FB6`                        EQU 0x40006650,        4, base=16,    bitRange=6-6
 5802                           ;'CAN_F2R1.FB7`                        EQU 0x40006650,        4, base=16,    bitRange=7-7
 5803                           ;'CAN_F2R1.FB8`                        EQU 0x40006650,        4, base=16,    bitRange=8-8
 5804                           ;'CAN_F2R1.FB9`                        EQU 0x40006650,        4, base=16,    bitRange=9-9
 5805                           ;'CAN_F2R1.FB10`                       EQU 0x40006650,        4, base=16,    bitRange=10-10
 5806                           ;'CAN_F2R1.FB11`                       EQU 0x40006650,        4, base=16,    bitRange=11-11
 5807                           ;'CAN_F2R1.FB12`                       EQU 0x40006650,        4, base=16,    bitRange=12-12
 5808                           ;'CAN_F2R1.FB13`                       EQU 0x40006650,        4, base=16,    bitRange=13-13
 5809                           ;'CAN_F2R1.FB14`                       EQU 0x40006650,        4, base=16,    bitRange=14-14
 5810                           ;'CAN_F2R1.FB15`                       EQU 0x40006650,        4, base=16,    bitRange=15-15
 5811                           ;'CAN_F2R1.FB16`                       EQU 0x40006650,        4, base=16,    bitRange=16-16
 5812                           ;'CAN_F2R1.FB17`                       EQU 0x40006650,        4, base=16,    bitRange=17-17
 5813                           ;'CAN_F2R1.FB18`                       EQU 0x40006650,        4, base=16,    bitRange=18-18
 5814                           ;'CAN_F2R1.FB19`                       EQU 0x40006650,        4, base=16,    bitRange=19-19
 5815                           ;'CAN_F2R1.FB20`                       EQU 0x40006650,        4, base=16,    bitRange=20-20
 5816                           ;'CAN_F2R1.FB21`                       EQU 0x40006650,        4, base=16,    bitRange=21-21
 5817                           ;'CAN_F2R1.FB22`                       EQU 0x40006650,        4, base=16,    bitRange=22-22
 5818                           ;'CAN_F2R1.FB23`                       EQU 0x40006650,        4, base=16,    bitRange=23-23
 5819                           ;'CAN_F2R1.FB24`                       EQU 0x40006650,        4, base=16,    bitRange=24-24
 5820                           ;'CAN_F2R1.FB25`                       EQU 0x40006650,        4, base=16,    bitRange=25-25
 5821                           ;'CAN_F2R1.FB26`                       EQU 0x40006650,        4, base=16,    bitRange=26-26
 5822                           ;'CAN_F2R1.FB27`                       EQU 0x40006650,        4, base=16,    bitRange=27-27
 5823                           ;'CAN_F2R1.FB28`                       EQU 0x40006650,        4, base=16,    bitRange=28-28
 5824                           ;'CAN_F2R1.FB29`                       EQU 0x40006650,        4, base=16,    bitRange=29-29
 5825                           ;'CAN_F2R1.FB30`                       EQU 0x40006650,        4, base=16,    bitRange=30-30
 5826                           ;'CAN_F2R1.FB31`                       EQU 0x40006650,        4, base=16,    bitRange=31-31
 5827                           
 5828                           ;CAN_F2R2                            EQU 0x40006654
 5829                           ;'CAN_F2R2.FB0`                        EQU 0x40006654,        4, base=16,    bitRange=0-0
 5830                           ;'CAN_F2R2.FB1`                        EQU 0x40006654,        4, base=16,    bitRange=1-1
 5831                           ;'CAN_F2R2.FB2`                        EQU 0x40006654,        4, base=16,    bitRange=2-2
 5832                           ;'CAN_F2R2.FB3`                        EQU 0x40006654,        4, base=16,    bitRange=3-3
 5833                           ;'CAN_F2R2.FB4`                        EQU 0x40006654,        4, base=16,    bitRange=4-4
 5834                           ;'CAN_F2R2.FB5`                        EQU 0x40006654,        4, base=16,    bitRange=5-5
 5835                           ;'CAN_F2R2.FB6`                        EQU 0x40006654,        4, base=16,    bitRange=6-6
 5836                           ;'CAN_F2R2.FB7`                        EQU 0x40006654,        4, base=16,    bitRange=7-7
 5837                           ;'CAN_F2R2.FB8`                        EQU 0x40006654,        4, base=16,    bitRange=8-8
 5838                           ;'CAN_F2R2.FB9`                        EQU 0x40006654,        4, base=16,    bitRange=9-9
 5839                           ;'CAN_F2R2.FB10`                       EQU 0x40006654,        4, base=16,    bitRange=10-10
 5840                           ;'CAN_F2R2.FB11`                       EQU 0x40006654,        4, base=16,    bitRange=11-11
 5841                           ;'CAN_F2R2.FB12`                       EQU 0x40006654,        4, base=16,    bitRange=12-12
 5842                           ;'CAN_F2R2.FB13`                       EQU 0x40006654,        4, base=16,    bitRange=13-13
 5843                           ;'CAN_F2R2.FB14`                       EQU 0x40006654,        4, base=16,    bitRange=14-14
 5844                           ;'CAN_F2R2.FB15`                       EQU 0x40006654,        4, base=16,    bitRange=15-15
 5845                           ;'CAN_F2R2.FB16`                       EQU 0x40006654,        4, base=16,    bitRange=16-16
 5846                           ;'CAN_F2R2.FB17`                       EQU 0x40006654,        4, base=16,    bitRange=17-17
 5847                           ;'CAN_F2R2.FB18`                       EQU 0x40006654,        4, base=16,    bitRange=18-18
 5848                           ;'CAN_F2R2.FB19`                       EQU 0x40006654,        4, base=16,    bitRange=19-19
 5849                           ;'CAN_F2R2.FB20`                       EQU 0x40006654,        4, base=16,    bitRange=20-20
 5850                           ;'CAN_F2R2.FB21`                       EQU 0x40006654,        4, base=16,    bitRange=21-21
 5851                           ;'CAN_F2R2.FB22`                       EQU 0x40006654,        4, base=16,    bitRange=22-22
 5852                           ;'CAN_F2R2.FB23`                       EQU 0x40006654,        4, base=16,    bitRange=23-23
 5853                           ;'CAN_F2R2.FB24`                       EQU 0x40006654,        4, base=16,    bitRange=24-24
 5854                           ;'CAN_F2R2.FB25`                       EQU 0x40006654,        4, base=16,    bitRange=25-25
 5855                           ;'CAN_F2R2.FB26`                       EQU 0x40006654,        4, base=16,    bitRange=26-26
 5856                           ;'CAN_F2R2.FB27`                       EQU 0x40006654,        4, base=16,    bitRange=27-27
 5857                           ;'CAN_F2R2.FB28`                       EQU 0x40006654,        4, base=16,    bitRange=28-28
 5858                           ;'CAN_F2R2.FB29`                       EQU 0x40006654,        4, base=16,    bitRange=29-29
 5859                           ;'CAN_F2R2.FB30`                       EQU 0x40006654,        4, base=16,    bitRange=30-30
 5860                           ;'CAN_F2R2.FB31`                       EQU 0x40006654,        4, base=16,    bitRange=31-31
 5861                           
 5862                           ;CAN_F3R1                            EQU 0x40006658
 5863                           ;'CAN_F3R1.FB0`                        EQU 0x40006658,        4, base=16,    bitRange=0-0
 5864                           ;'CAN_F3R1.FB1`                        EQU 0x40006658,        4, base=16,    bitRange=1-1
 5865                           ;'CAN_F3R1.FB2`                        EQU 0x40006658,        4, base=16,    bitRange=2-2
 5866                           ;'CAN_F3R1.FB3`                        EQU 0x40006658,        4, base=16,    bitRange=3-3
 5867                           ;'CAN_F3R1.FB4`                        EQU 0x40006658,        4, base=16,    bitRange=4-4
 5868                           ;'CAN_F3R1.FB5`                        EQU 0x40006658,        4, base=16,    bitRange=5-5
 5869                           ;'CAN_F3R1.FB6`                        EQU 0x40006658,        4, base=16,    bitRange=6-6
 5870                           ;'CAN_F3R1.FB7`                        EQU 0x40006658,        4, base=16,    bitRange=7-7
 5871                           ;'CAN_F3R1.FB8`                        EQU 0x40006658,        4, base=16,    bitRange=8-8
 5872                           ;'CAN_F3R1.FB9`                        EQU 0x40006658,        4, base=16,    bitRange=9-9
 5873                           ;'CAN_F3R1.FB10`                       EQU 0x40006658,        4, base=16,    bitRange=10-10
 5874                           ;'CAN_F3R1.FB11`                       EQU 0x40006658,        4, base=16,    bitRange=11-11
 5875                           ;'CAN_F3R1.FB12`                       EQU 0x40006658,        4, base=16,    bitRange=12-12
 5876                           ;'CAN_F3R1.FB13`                       EQU 0x40006658,        4, base=16,    bitRange=13-13
 5877                           ;'CAN_F3R1.FB14`                       EQU 0x40006658,        4, base=16,    bitRange=14-14
 5878                           ;'CAN_F3R1.FB15`                       EQU 0x40006658,        4, base=16,    bitRange=15-15
 5879                           ;'CAN_F3R1.FB16`                       EQU 0x40006658,        4, base=16,    bitRange=16-16
 5880                           ;'CAN_F3R1.FB17`                       EQU 0x40006658,        4, base=16,    bitRange=17-17
 5881                           ;'CAN_F3R1.FB18`                       EQU 0x40006658,        4, base=16,    bitRange=18-18
 5882                           ;'CAN_F3R1.FB19`                       EQU 0x40006658,        4, base=16,    bitRange=19-19
 5883                           ;'CAN_F3R1.FB20`                       EQU 0x40006658,        4, base=16,    bitRange=20-20
 5884                           ;'CAN_F3R1.FB21`                       EQU 0x40006658,        4, base=16,    bitRange=21-21
 5885                           ;'CAN_F3R1.FB22`                       EQU 0x40006658,        4, base=16,    bitRange=22-22
 5886                           ;'CAN_F3R1.FB23`                       EQU 0x40006658,        4, base=16,    bitRange=23-23
 5887                           ;'CAN_F3R1.FB24`                       EQU 0x40006658,        4, base=16,    bitRange=24-24
 5888                           ;'CAN_F3R1.FB25`                       EQU 0x40006658,        4, base=16,    bitRange=25-25
 5889                           ;'CAN_F3R1.FB26`                       EQU 0x40006658,        4, base=16,    bitRange=26-26
 5890                           ;'CAN_F3R1.FB27`                       EQU 0x40006658,        4, base=16,    bitRange=27-27
 5891                           ;'CAN_F3R1.FB28`                       EQU 0x40006658,        4, base=16,    bitRange=28-28
 5892                           ;'CAN_F3R1.FB29`                       EQU 0x40006658,        4, base=16,    bitRange=29-29
 5893                           ;'CAN_F3R1.FB30`                       EQU 0x40006658,        4, base=16,    bitRange=30-30
 5894                           ;'CAN_F3R1.FB31`                       EQU 0x40006658,        4, base=16,    bitRange=31-31
 5895                           
 5896                           ;CAN_F3R2                            EQU 0x4000665C
 5897                           ;'CAN_F3R2.FB0`                        EQU 0x4000665C,        4, base=16,    bitRange=0-0
 5898                           ;'CAN_F3R2.FB1`                        EQU 0x4000665C,        4, base=16,    bitRange=1-1
 5899                           ;'CAN_F3R2.FB2`                        EQU 0x4000665C,        4, base=16,    bitRange=2-2
 5900                           ;'CAN_F3R2.FB3`                        EQU 0x4000665C,        4, base=16,    bitRange=3-3
 5901                           ;'CAN_F3R2.FB4`                        EQU 0x4000665C,        4, base=16,    bitRange=4-4
 5902                           ;'CAN_F3R2.FB5`                        EQU 0x4000665C,        4, base=16,    bitRange=5-5
 5903                           ;'CAN_F3R2.FB6`                        EQU 0x4000665C,        4, base=16,    bitRange=6-6
 5904                           ;'CAN_F3R2.FB7`                        EQU 0x4000665C,        4, base=16,    bitRange=7-7
 5905                           ;'CAN_F3R2.FB8`                        EQU 0x4000665C,        4, base=16,    bitRange=8-8
 5906                           ;'CAN_F3R2.FB9`                        EQU 0x4000665C,        4, base=16,    bitRange=9-9
 5907                           ;'CAN_F3R2.FB10`                       EQU 0x4000665C,        4, base=16,    bitRange=10-10
 5908                           ;'CAN_F3R2.FB11`                       EQU 0x4000665C,        4, base=16,    bitRange=11-11
 5909                           ;'CAN_F3R2.FB12`                       EQU 0x4000665C,        4, base=16,    bitRange=12-12
 5910                           ;'CAN_F3R2.FB13`                       EQU 0x4000665C,        4, base=16,    bitRange=13-13
 5911                           ;'CAN_F3R2.FB14`                       EQU 0x4000665C,        4, base=16,    bitRange=14-14
 5912                           ;'CAN_F3R2.FB15`                       EQU 0x4000665C,        4, base=16,    bitRange=15-15
 5913                           ;'CAN_F3R2.FB16`                       EQU 0x4000665C,        4, base=16,    bitRange=16-16
 5914                           ;'CAN_F3R2.FB17`                       EQU 0x4000665C,        4, base=16,    bitRange=17-17
 5915                           ;'CAN_F3R2.FB18`                       EQU 0x4000665C,        4, base=16,    bitRange=18-18
 5916                           ;'CAN_F3R2.FB19`                       EQU 0x4000665C,        4, base=16,    bitRange=19-19
 5917                           ;'CAN_F3R2.FB20`                       EQU 0x4000665C,        4, base=16,    bitRange=20-20
 5918                           ;'CAN_F3R2.FB21`                       EQU 0x4000665C,        4, base=16,    bitRange=21-21
 5919                           ;'CAN_F3R2.FB22`                       EQU 0x4000665C,        4, base=16,    bitRange=22-22
 5920                           ;'CAN_F3R2.FB23`                       EQU 0x4000665C,        4, base=16,    bitRange=23-23
 5921                           ;'CAN_F3R2.FB24`                       EQU 0x4000665C,        4, base=16,    bitRange=24-24
 5922                           ;'CAN_F3R2.FB25`                       EQU 0x4000665C,        4, base=16,    bitRange=25-25
 5923                           ;'CAN_F3R2.FB26`                       EQU 0x4000665C,        4, base=16,    bitRange=26-26
 5924                           ;'CAN_F3R2.FB27`                       EQU 0x4000665C,        4, base=16,    bitRange=27-27
 5925                           ;'CAN_F3R2.FB28`                       EQU 0x4000665C,        4, base=16,    bitRange=28-28
 5926                           ;'CAN_F3R2.FB29`                       EQU 0x4000665C,        4, base=16,    bitRange=29-29
 5927                           ;'CAN_F3R2.FB30`                       EQU 0x4000665C,        4, base=16,    bitRange=30-30
 5928                           ;'CAN_F3R2.FB31`                       EQU 0x4000665C,        4, base=16,    bitRange=31-31
 5929                           
 5930                           ;CAN_F4R1                            EQU 0x40006660
 5931                           ;'CAN_F4R1.FB0`                        EQU 0x40006660,        4, base=16,    bitRange=0-0
 5932                           ;'CAN_F4R1.FB1`                        EQU 0x40006660,        4, base=16,    bitRange=1-1
 5933                           ;'CAN_F4R1.FB2`                        EQU 0x40006660,        4, base=16,    bitRange=2-2
 5934                           ;'CAN_F4R1.FB3`                        EQU 0x40006660,        4, base=16,    bitRange=3-3
 5935                           ;'CAN_F4R1.FB4`                        EQU 0x40006660,        4, base=16,    bitRange=4-4
 5936                           ;'CAN_F4R1.FB5`                        EQU 0x40006660,        4, base=16,    bitRange=5-5
 5937                           ;'CAN_F4R1.FB6`                        EQU 0x40006660,        4, base=16,    bitRange=6-6
 5938                           ;'CAN_F4R1.FB7`                        EQU 0x40006660,        4, base=16,    bitRange=7-7
 5939                           ;'CAN_F4R1.FB8`                        EQU 0x40006660,        4, base=16,    bitRange=8-8
 5940                           ;'CAN_F4R1.FB9`                        EQU 0x40006660,        4, base=16,    bitRange=9-9
 5941                           ;'CAN_F4R1.FB10`                       EQU 0x40006660,        4, base=16,    bitRange=10-10
 5942                           ;'CAN_F4R1.FB11`                       EQU 0x40006660,        4, base=16,    bitRange=11-11
 5943                           ;'CAN_F4R1.FB12`                       EQU 0x40006660,        4, base=16,    bitRange=12-12
 5944                           ;'CAN_F4R1.FB13`                       EQU 0x40006660,        4, base=16,    bitRange=13-13
 5945                           ;'CAN_F4R1.FB14`                       EQU 0x40006660,        4, base=16,    bitRange=14-14
 5946                           ;'CAN_F4R1.FB15`                       EQU 0x40006660,        4, base=16,    bitRange=15-15
 5947                           ;'CAN_F4R1.FB16`                       EQU 0x40006660,        4, base=16,    bitRange=16-16
 5948                           ;'CAN_F4R1.FB17`                       EQU 0x40006660,        4, base=16,    bitRange=17-17
 5949                           ;'CAN_F4R1.FB18`                       EQU 0x40006660,        4, base=16,    bitRange=18-18
 5950                           ;'CAN_F4R1.FB19`                       EQU 0x40006660,        4, base=16,    bitRange=19-19
 5951                           ;'CAN_F4R1.FB20`                       EQU 0x40006660,        4, base=16,    bitRange=20-20
 5952                           ;'CAN_F4R1.FB21`                       EQU 0x40006660,        4, base=16,    bitRange=21-21
 5953                           ;'CAN_F4R1.FB22`                       EQU 0x40006660,        4, base=16,    bitRange=22-22
 5954                           ;'CAN_F4R1.FB23`                       EQU 0x40006660,        4, base=16,    bitRange=23-23
 5955                           ;'CAN_F4R1.FB24`                       EQU 0x40006660,        4, base=16,    bitRange=24-24
 5956                           ;'CAN_F4R1.FB25`                       EQU 0x40006660,        4, base=16,    bitRange=25-25
 5957                           ;'CAN_F4R1.FB26`                       EQU 0x40006660,        4, base=16,    bitRange=26-26
 5958                           ;'CAN_F4R1.FB27`                       EQU 0x40006660,        4, base=16,    bitRange=27-27
 5959                           ;'CAN_F4R1.FB28`                       EQU 0x40006660,        4, base=16,    bitRange=28-28
 5960                           ;'CAN_F4R1.FB29`                       EQU 0x40006660,        4, base=16,    bitRange=29-29
 5961                           ;'CAN_F4R1.FB30`                       EQU 0x40006660,        4, base=16,    bitRange=30-30
 5962                           ;'CAN_F4R1.FB31`                       EQU 0x40006660,        4, base=16,    bitRange=31-31
 5963                           
 5964                           ;CAN_F4R2                            EQU 0x40006664
 5965                           ;'CAN_F4R2.FB0`                        EQU 0x40006664,        4, base=16,    bitRange=0-0
 5966                           ;'CAN_F4R2.FB1`                        EQU 0x40006664,        4, base=16,    bitRange=1-1
 5967                           ;'CAN_F4R2.FB2`                        EQU 0x40006664,        4, base=16,    bitRange=2-2
 5968                           ;'CAN_F4R2.FB3`                        EQU 0x40006664,        4, base=16,    bitRange=3-3
 5969                           ;'CAN_F4R2.FB4`                        EQU 0x40006664,        4, base=16,    bitRange=4-4
 5970                           ;'CAN_F4R2.FB5`                        EQU 0x40006664,        4, base=16,    bitRange=5-5
 5971                           ;'CAN_F4R2.FB6`                        EQU 0x40006664,        4, base=16,    bitRange=6-6
 5972                           ;'CAN_F4R2.FB7`                        EQU 0x40006664,        4, base=16,    bitRange=7-7
 5973                           ;'CAN_F4R2.FB8`                        EQU 0x40006664,        4, base=16,    bitRange=8-8
 5974                           ;'CAN_F4R2.FB9`                        EQU 0x40006664,        4, base=16,    bitRange=9-9
 5975                           ;'CAN_F4R2.FB10`                       EQU 0x40006664,        4, base=16,    bitRange=10-10
 5976                           ;'CAN_F4R2.FB11`                       EQU 0x40006664,        4, base=16,    bitRange=11-11
 5977                           ;'CAN_F4R2.FB12`                       EQU 0x40006664,        4, base=16,    bitRange=12-12
 5978                           ;'CAN_F4R2.FB13`                       EQU 0x40006664,        4, base=16,    bitRange=13-13
 5979                           ;'CAN_F4R2.FB14`                       EQU 0x40006664,        4, base=16,    bitRange=14-14
 5980                           ;'CAN_F4R2.FB15`                       EQU 0x40006664,        4, base=16,    bitRange=15-15
 5981                           ;'CAN_F4R2.FB16`                       EQU 0x40006664,        4, base=16,    bitRange=16-16
 5982                           ;'CAN_F4R2.FB17`                       EQU 0x40006664,        4, base=16,    bitRange=17-17
 5983                           ;'CAN_F4R2.FB18`                       EQU 0x40006664,        4, base=16,    bitRange=18-18
 5984                           ;'CAN_F4R2.FB19`                       EQU 0x40006664,        4, base=16,    bitRange=19-19
 5985                           ;'CAN_F4R2.FB20`                       EQU 0x40006664,        4, base=16,    bitRange=20-20
 5986                           ;'CAN_F4R2.FB21`                       EQU 0x40006664,        4, base=16,    bitRange=21-21
 5987                           ;'CAN_F4R2.FB22`                       EQU 0x40006664,        4, base=16,    bitRange=22-22
 5988                           ;'CAN_F4R2.FB23`                       EQU 0x40006664,        4, base=16,    bitRange=23-23
 5989                           ;'CAN_F4R2.FB24`                       EQU 0x40006664,        4, base=16,    bitRange=24-24
 5990                           ;'CAN_F4R2.FB25`                       EQU 0x40006664,        4, base=16,    bitRange=25-25
 5991                           ;'CAN_F4R2.FB26`                       EQU 0x40006664,        4, base=16,    bitRange=26-26
 5992                           ;'CAN_F4R2.FB27`                       EQU 0x40006664,        4, base=16,    bitRange=27-27
 5993                           ;'CAN_F4R2.FB28`                       EQU 0x40006664,        4, base=16,    bitRange=28-28
 5994                           ;'CAN_F4R2.FB29`                       EQU 0x40006664,        4, base=16,    bitRange=29-29
 5995                           ;'CAN_F4R2.FB30`                       EQU 0x40006664,        4, base=16,    bitRange=30-30
 5996                           ;'CAN_F4R2.FB31`                       EQU 0x40006664,        4, base=16,    bitRange=31-31
 5997                           
 5998                           ;CAN_F5R1                            EQU 0x40006668
 5999                           ;'CAN_F5R1.FB0`                        EQU 0x40006668,        4, base=16,    bitRange=0-0
 6000                           ;'CAN_F5R1.FB1`                        EQU 0x40006668,        4, base=16,    bitRange=1-1
 6001                           ;'CAN_F5R1.FB2`                        EQU 0x40006668,        4, base=16,    bitRange=2-2
 6002                           ;'CAN_F5R1.FB3`                        EQU 0x40006668,        4, base=16,    bitRange=3-3
 6003                           ;'CAN_F5R1.FB4`                        EQU 0x40006668,        4, base=16,    bitRange=4-4
 6004                           ;'CAN_F5R1.FB5`                        EQU 0x40006668,        4, base=16,    bitRange=5-5
 6005                           ;'CAN_F5R1.FB6`                        EQU 0x40006668,        4, base=16,    bitRange=6-6
 6006                           ;'CAN_F5R1.FB7`                        EQU 0x40006668,        4, base=16,    bitRange=7-7
 6007                           ;'CAN_F5R1.FB8`                        EQU 0x40006668,        4, base=16,    bitRange=8-8
 6008                           ;'CAN_F5R1.FB9`                        EQU 0x40006668,        4, base=16,    bitRange=9-9
 6009                           ;'CAN_F5R1.FB10`                       EQU 0x40006668,        4, base=16,    bitRange=10-10
 6010                           ;'CAN_F5R1.FB11`                       EQU 0x40006668,        4, base=16,    bitRange=11-11
 6011                           ;'CAN_F5R1.FB12`                       EQU 0x40006668,        4, base=16,    bitRange=12-12
 6012                           ;'CAN_F5R1.FB13`                       EQU 0x40006668,        4, base=16,    bitRange=13-13
 6013                           ;'CAN_F5R1.FB14`                       EQU 0x40006668,        4, base=16,    bitRange=14-14
 6014                           ;'CAN_F5R1.FB15`                       EQU 0x40006668,        4, base=16,    bitRange=15-15
 6015                           ;'CAN_F5R1.FB16`                       EQU 0x40006668,        4, base=16,    bitRange=16-16
 6016                           ;'CAN_F5R1.FB17`                       EQU 0x40006668,        4, base=16,    bitRange=17-17
 6017                           ;'CAN_F5R1.FB18`                       EQU 0x40006668,        4, base=16,    bitRange=18-18
 6018                           ;'CAN_F5R1.FB19`                       EQU 0x40006668,        4, base=16,    bitRange=19-19
 6019                           ;'CAN_F5R1.FB20`                       EQU 0x40006668,        4, base=16,    bitRange=20-20
 6020                           ;'CAN_F5R1.FB21`                       EQU 0x40006668,        4, base=16,    bitRange=21-21
 6021                           ;'CAN_F5R1.FB22`                       EQU 0x40006668,        4, base=16,    bitRange=22-22
 6022                           ;'CAN_F5R1.FB23`                       EQU 0x40006668,        4, base=16,    bitRange=23-23
 6023                           ;'CAN_F5R1.FB24`                       EQU 0x40006668,        4, base=16,    bitRange=24-24
 6024                           ;'CAN_F5R1.FB25`                       EQU 0x40006668,        4, base=16,    bitRange=25-25
 6025                           ;'CAN_F5R1.FB26`                       EQU 0x40006668,        4, base=16,    bitRange=26-26
 6026                           ;'CAN_F5R1.FB27`                       EQU 0x40006668,        4, base=16,    bitRange=27-27
 6027                           ;'CAN_F5R1.FB28`                       EQU 0x40006668,        4, base=16,    bitRange=28-28
 6028                           ;'CAN_F5R1.FB29`                       EQU 0x40006668,        4, base=16,    bitRange=29-29
 6029                           ;'CAN_F5R1.FB30`                       EQU 0x40006668,        4, base=16,    bitRange=30-30
 6030                           ;'CAN_F5R1.FB31`                       EQU 0x40006668,        4, base=16,    bitRange=31-31
 6031                           
 6032                           ;CAN_F5R2                            EQU 0x4000666C
 6033                           ;'CAN_F5R2.FB0`                        EQU 0x4000666C,        4, base=16,    bitRange=0-0
 6034                           ;'CAN_F5R2.FB1`                        EQU 0x4000666C,        4, base=16,    bitRange=1-1
 6035                           ;'CAN_F5R2.FB2`                        EQU 0x4000666C,        4, base=16,    bitRange=2-2
 6036                           ;'CAN_F5R2.FB3`                        EQU 0x4000666C,        4, base=16,    bitRange=3-3
 6037                           ;'CAN_F5R2.FB4`                        EQU 0x4000666C,        4, base=16,    bitRange=4-4
 6038                           ;'CAN_F5R2.FB5`                        EQU 0x4000666C,        4, base=16,    bitRange=5-5
 6039                           ;'CAN_F5R2.FB6`                        EQU 0x4000666C,        4, base=16,    bitRange=6-6
 6040                           ;'CAN_F5R2.FB7`                        EQU 0x4000666C,        4, base=16,    bitRange=7-7
 6041                           ;'CAN_F5R2.FB8`                        EQU 0x4000666C,        4, base=16,    bitRange=8-8
 6042                           ;'CAN_F5R2.FB9`                        EQU 0x4000666C,        4, base=16,    bitRange=9-9
 6043                           ;'CAN_F5R2.FB10`                       EQU 0x4000666C,        4, base=16,    bitRange=10-10
 6044                           ;'CAN_F5R2.FB11`                       EQU 0x4000666C,        4, base=16,    bitRange=11-11
 6045                           ;'CAN_F5R2.FB12`                       EQU 0x4000666C,        4, base=16,    bitRange=12-12
 6046                           ;'CAN_F5R2.FB13`                       EQU 0x4000666C,        4, base=16,    bitRange=13-13
 6047                           ;'CAN_F5R2.FB14`                       EQU 0x4000666C,        4, base=16,    bitRange=14-14
 6048                           ;'CAN_F5R2.FB15`                       EQU 0x4000666C,        4, base=16,    bitRange=15-15
 6049                           ;'CAN_F5R2.FB16`                       EQU 0x4000666C,        4, base=16,    bitRange=16-16
 6050                           ;'CAN_F5R2.FB17`                       EQU 0x4000666C,        4, base=16,    bitRange=17-17
 6051                           ;'CAN_F5R2.FB18`                       EQU 0x4000666C,        4, base=16,    bitRange=18-18
 6052                           ;'CAN_F5R2.FB19`                       EQU 0x4000666C,        4, base=16,    bitRange=19-19
 6053                           ;'CAN_F5R2.FB20`                       EQU 0x4000666C,        4, base=16,    bitRange=20-20
 6054                           ;'CAN_F5R2.FB21`                       EQU 0x4000666C,        4, base=16,    bitRange=21-21
 6055                           ;'CAN_F5R2.FB22`                       EQU 0x4000666C,        4, base=16,    bitRange=22-22
 6056                           ;'CAN_F5R2.FB23`                       EQU 0x4000666C,        4, base=16,    bitRange=23-23
 6057                           ;'CAN_F5R2.FB24`                       EQU 0x4000666C,        4, base=16,    bitRange=24-24
 6058                           ;'CAN_F5R2.FB25`                       EQU 0x4000666C,        4, base=16,    bitRange=25-25
 6059                           ;'CAN_F5R2.FB26`                       EQU 0x4000666C,        4, base=16,    bitRange=26-26
 6060                           ;'CAN_F5R2.FB27`                       EQU 0x4000666C,        4, base=16,    bitRange=27-27
 6061                           ;'CAN_F5R2.FB28`                       EQU 0x4000666C,        4, base=16,    bitRange=28-28
 6062                           ;'CAN_F5R2.FB29`                       EQU 0x4000666C,        4, base=16,    bitRange=29-29
 6063                           ;'CAN_F5R2.FB30`                       EQU 0x4000666C,        4, base=16,    bitRange=30-30
 6064                           ;'CAN_F5R2.FB31`                       EQU 0x4000666C,        4, base=16,    bitRange=31-31
 6065                           
 6066                           ;CAN_F6R1                            EQU 0x40006670
 6067                           ;'CAN_F6R1.FB0`                        EQU 0x40006670,        4, base=16,    bitRange=0-0
 6068                           ;'CAN_F6R1.FB1`                        EQU 0x40006670,        4, base=16,    bitRange=1-1
 6069                           ;'CAN_F6R1.FB2`                        EQU 0x40006670,        4, base=16,    bitRange=2-2
 6070                           ;'CAN_F6R1.FB3`                        EQU 0x40006670,        4, base=16,    bitRange=3-3
 6071                           ;'CAN_F6R1.FB4`                        EQU 0x40006670,        4, base=16,    bitRange=4-4
 6072                           ;'CAN_F6R1.FB5`                        EQU 0x40006670,        4, base=16,    bitRange=5-5
 6073                           ;'CAN_F6R1.FB6`                        EQU 0x40006670,        4, base=16,    bitRange=6-6
 6074                           ;'CAN_F6R1.FB7`                        EQU 0x40006670,        4, base=16,    bitRange=7-7
 6075                           ;'CAN_F6R1.FB8`                        EQU 0x40006670,        4, base=16,    bitRange=8-8
 6076                           ;'CAN_F6R1.FB9`                        EQU 0x40006670,        4, base=16,    bitRange=9-9
 6077                           ;'CAN_F6R1.FB10`                       EQU 0x40006670,        4, base=16,    bitRange=10-10
 6078                           ;'CAN_F6R1.FB11`                       EQU 0x40006670,        4, base=16,    bitRange=11-11
 6079                           ;'CAN_F6R1.FB12`                       EQU 0x40006670,        4, base=16,    bitRange=12-12
 6080                           ;'CAN_F6R1.FB13`                       EQU 0x40006670,        4, base=16,    bitRange=13-13
 6081                           ;'CAN_F6R1.FB14`                       EQU 0x40006670,        4, base=16,    bitRange=14-14
 6082                           ;'CAN_F6R1.FB15`                       EQU 0x40006670,        4, base=16,    bitRange=15-15
 6083                           ;'CAN_F6R1.FB16`                       EQU 0x40006670,        4, base=16,    bitRange=16-16
 6084                           ;'CAN_F6R1.FB17`                       EQU 0x40006670,        4, base=16,    bitRange=17-17
 6085                           ;'CAN_F6R1.FB18`                       EQU 0x40006670,        4, base=16,    bitRange=18-18
 6086                           ;'CAN_F6R1.FB19`                       EQU 0x40006670,        4, base=16,    bitRange=19-19
 6087                           ;'CAN_F6R1.FB20`                       EQU 0x40006670,        4, base=16,    bitRange=20-20
 6088                           ;'CAN_F6R1.FB21`                       EQU 0x40006670,        4, base=16,    bitRange=21-21
 6089                           ;'CAN_F6R1.FB22`                       EQU 0x40006670,        4, base=16,    bitRange=22-22
 6090                           ;'CAN_F6R1.FB23`                       EQU 0x40006670,        4, base=16,    bitRange=23-23
 6091                           ;'CAN_F6R1.FB24`                       EQU 0x40006670,        4, base=16,    bitRange=24-24
 6092                           ;'CAN_F6R1.FB25`                       EQU 0x40006670,        4, base=16,    bitRange=25-25
 6093                           ;'CAN_F6R1.FB26`                       EQU 0x40006670,        4, base=16,    bitRange=26-26
 6094                           ;'CAN_F6R1.FB27`                       EQU 0x40006670,        4, base=16,    bitRange=27-27
 6095                           ;'CAN_F6R1.FB28`                       EQU 0x40006670,        4, base=16,    bitRange=28-28
 6096                           ;'CAN_F6R1.FB29`                       EQU 0x40006670,        4, base=16,    bitRange=29-29
 6097                           ;'CAN_F6R1.FB30`                       EQU 0x40006670,        4, base=16,    bitRange=30-30
 6098                           ;'CAN_F6R1.FB31`                       EQU 0x40006670,        4, base=16,    bitRange=31-31
 6099                           
 6100                           ;CAN_F6R2                            EQU 0x40006674
 6101                           ;'CAN_F6R2.FB0`                        EQU 0x40006674,        4, base=16,    bitRange=0-0
 6102                           ;'CAN_F6R2.FB1`                        EQU 0x40006674,        4, base=16,    bitRange=1-1
 6103                           ;'CAN_F6R2.FB2`                        EQU 0x40006674,        4, base=16,    bitRange=2-2
 6104                           ;'CAN_F6R2.FB3`                        EQU 0x40006674,        4, base=16,    bitRange=3-3
 6105                           ;'CAN_F6R2.FB4`                        EQU 0x40006674,        4, base=16,    bitRange=4-4
 6106                           ;'CAN_F6R2.FB5`                        EQU 0x40006674,        4, base=16,    bitRange=5-5
 6107                           ;'CAN_F6R2.FB6`                        EQU 0x40006674,        4, base=16,    bitRange=6-6
 6108                           ;'CAN_F6R2.FB7`                        EQU 0x40006674,        4, base=16,    bitRange=7-7
 6109                           ;'CAN_F6R2.FB8`                        EQU 0x40006674,        4, base=16,    bitRange=8-8
 6110                           ;'CAN_F6R2.FB9`                        EQU 0x40006674,        4, base=16,    bitRange=9-9
 6111                           ;'CAN_F6R2.FB10`                       EQU 0x40006674,        4, base=16,    bitRange=10-10
 6112                           ;'CAN_F6R2.FB11`                       EQU 0x40006674,        4, base=16,    bitRange=11-11
 6113                           ;'CAN_F6R2.FB12`                       EQU 0x40006674,        4, base=16,    bitRange=12-12
 6114                           ;'CAN_F6R2.FB13`                       EQU 0x40006674,        4, base=16,    bitRange=13-13
 6115                           ;'CAN_F6R2.FB14`                       EQU 0x40006674,        4, base=16,    bitRange=14-14
 6116                           ;'CAN_F6R2.FB15`                       EQU 0x40006674,        4, base=16,    bitRange=15-15
 6117                           ;'CAN_F6R2.FB16`                       EQU 0x40006674,        4, base=16,    bitRange=16-16
 6118                           ;'CAN_F6R2.FB17`                       EQU 0x40006674,        4, base=16,    bitRange=17-17
 6119                           ;'CAN_F6R2.FB18`                       EQU 0x40006674,        4, base=16,    bitRange=18-18
 6120                           ;'CAN_F6R2.FB19`                       EQU 0x40006674,        4, base=16,    bitRange=19-19
 6121                           ;'CAN_F6R2.FB20`                       EQU 0x40006674,        4, base=16,    bitRange=20-20
 6122                           ;'CAN_F6R2.FB21`                       EQU 0x40006674,        4, base=16,    bitRange=21-21
 6123                           ;'CAN_F6R2.FB22`                       EQU 0x40006674,        4, base=16,    bitRange=22-22
 6124                           ;'CAN_F6R2.FB23`                       EQU 0x40006674,        4, base=16,    bitRange=23-23
 6125                           ;'CAN_F6R2.FB24`                       EQU 0x40006674,        4, base=16,    bitRange=24-24
 6126                           ;'CAN_F6R2.FB25`                       EQU 0x40006674,        4, base=16,    bitRange=25-25
 6127                           ;'CAN_F6R2.FB26`                       EQU 0x40006674,        4, base=16,    bitRange=26-26
 6128                           ;'CAN_F6R2.FB27`                       EQU 0x40006674,        4, base=16,    bitRange=27-27
 6129                           ;'CAN_F6R2.FB28`                       EQU 0x40006674,        4, base=16,    bitRange=28-28
 6130                           ;'CAN_F6R2.FB29`                       EQU 0x40006674,        4, base=16,    bitRange=29-29
 6131                           ;'CAN_F6R2.FB30`                       EQU 0x40006674,        4, base=16,    bitRange=30-30
 6132                           ;'CAN_F6R2.FB31`                       EQU 0x40006674,        4, base=16,    bitRange=31-31
 6133                           
 6134                           ;CAN_F7R1                            EQU 0x40006678
 6135                           ;'CAN_F7R1.FB0`                        EQU 0x40006678,        4, base=16,    bitRange=0-0
 6136                           ;'CAN_F7R1.FB1`                        EQU 0x40006678,        4, base=16,    bitRange=1-1
 6137                           ;'CAN_F7R1.FB2`                        EQU 0x40006678,        4, base=16,    bitRange=2-2
 6138                           ;'CAN_F7R1.FB3`                        EQU 0x40006678,        4, base=16,    bitRange=3-3
 6139                           ;'CAN_F7R1.FB4`                        EQU 0x40006678,        4, base=16,    bitRange=4-4
 6140                           ;'CAN_F7R1.FB5`                        EQU 0x40006678,        4, base=16,    bitRange=5-5
 6141                           ;'CAN_F7R1.FB6`                        EQU 0x40006678,        4, base=16,    bitRange=6-6
 6142                           ;'CAN_F7R1.FB7`                        EQU 0x40006678,        4, base=16,    bitRange=7-7
 6143                           ;'CAN_F7R1.FB8`                        EQU 0x40006678,        4, base=16,    bitRange=8-8
 6144                           ;'CAN_F7R1.FB9`                        EQU 0x40006678,        4, base=16,    bitRange=9-9
 6145                           ;'CAN_F7R1.FB10`                       EQU 0x40006678,        4, base=16,    bitRange=10-10
 6146                           ;'CAN_F7R1.FB11`                       EQU 0x40006678,        4, base=16,    bitRange=11-11
 6147                           ;'CAN_F7R1.FB12`                       EQU 0x40006678,        4, base=16,    bitRange=12-12
 6148                           ;'CAN_F7R1.FB13`                       EQU 0x40006678,        4, base=16,    bitRange=13-13
 6149                           ;'CAN_F7R1.FB14`                       EQU 0x40006678,        4, base=16,    bitRange=14-14
 6150                           ;'CAN_F7R1.FB15`                       EQU 0x40006678,        4, base=16,    bitRange=15-15
 6151                           ;'CAN_F7R1.FB16`                       EQU 0x40006678,        4, base=16,    bitRange=16-16
 6152                           ;'CAN_F7R1.FB17`                       EQU 0x40006678,        4, base=16,    bitRange=17-17
 6153                           ;'CAN_F7R1.FB18`                       EQU 0x40006678,        4, base=16,    bitRange=18-18
 6154                           ;'CAN_F7R1.FB19`                       EQU 0x40006678,        4, base=16,    bitRange=19-19
 6155                           ;'CAN_F7R1.FB20`                       EQU 0x40006678,        4, base=16,    bitRange=20-20
 6156                           ;'CAN_F7R1.FB21`                       EQU 0x40006678,        4, base=16,    bitRange=21-21
 6157                           ;'CAN_F7R1.FB22`                       EQU 0x40006678,        4, base=16,    bitRange=22-22
 6158                           ;'CAN_F7R1.FB23`                       EQU 0x40006678,        4, base=16,    bitRange=23-23
 6159                           ;'CAN_F7R1.FB24`                       EQU 0x40006678,        4, base=16,    bitRange=24-24
 6160                           ;'CAN_F7R1.FB25`                       EQU 0x40006678,        4, base=16,    bitRange=25-25
 6161                           ;'CAN_F7R1.FB26`                       EQU 0x40006678,        4, base=16,    bitRange=26-26
 6162                           ;'CAN_F7R1.FB27`                       EQU 0x40006678,        4, base=16,    bitRange=27-27
 6163                           ;'CAN_F7R1.FB28`                       EQU 0x40006678,        4, base=16,    bitRange=28-28
 6164                           ;'CAN_F7R1.FB29`                       EQU 0x40006678,        4, base=16,    bitRange=29-29
 6165                           ;'CAN_F7R1.FB30`                       EQU 0x40006678,        4, base=16,    bitRange=30-30
 6166                           ;'CAN_F7R1.FB31`                       EQU 0x40006678,        4, base=16,    bitRange=31-31
 6167                           
 6168                           ;CAN_F7R2                            EQU 0x4000667C
 6169                           ;'CAN_F7R2.FB0`                        EQU 0x4000667C,        4, base=16,    bitRange=0-0
 6170                           ;'CAN_F7R2.FB1`                        EQU 0x4000667C,        4, base=16,    bitRange=1-1
 6171                           ;'CAN_F7R2.FB2`                        EQU 0x4000667C,        4, base=16,    bitRange=2-2
 6172                           ;'CAN_F7R2.FB3`                        EQU 0x4000667C,        4, base=16,    bitRange=3-3
 6173                           ;'CAN_F7R2.FB4`                        EQU 0x4000667C,        4, base=16,    bitRange=4-4
 6174                           ;'CAN_F7R2.FB5`                        EQU 0x4000667C,        4, base=16,    bitRange=5-5
 6175                           ;'CAN_F7R2.FB6`                        EQU 0x4000667C,        4, base=16,    bitRange=6-6
 6176                           ;'CAN_F7R2.FB7`                        EQU 0x4000667C,        4, base=16,    bitRange=7-7
 6177                           ;'CAN_F7R2.FB8`                        EQU 0x4000667C,        4, base=16,    bitRange=8-8
 6178                           ;'CAN_F7R2.FB9`                        EQU 0x4000667C,        4, base=16,    bitRange=9-9
 6179                           ;'CAN_F7R2.FB10`                       EQU 0x4000667C,        4, base=16,    bitRange=10-10
 6180                           ;'CAN_F7R2.FB11`                       EQU 0x4000667C,        4, base=16,    bitRange=11-11
 6181                           ;'CAN_F7R2.FB12`                       EQU 0x4000667C,        4, base=16,    bitRange=12-12
 6182                           ;'CAN_F7R2.FB13`                       EQU 0x4000667C,        4, base=16,    bitRange=13-13
 6183                           ;'CAN_F7R2.FB14`                       EQU 0x4000667C,        4, base=16,    bitRange=14-14
 6184                           ;'CAN_F7R2.FB15`                       EQU 0x4000667C,        4, base=16,    bitRange=15-15
 6185                           ;'CAN_F7R2.FB16`                       EQU 0x4000667C,        4, base=16,    bitRange=16-16
 6186                           ;'CAN_F7R2.FB17`                       EQU 0x4000667C,        4, base=16,    bitRange=17-17
 6187                           ;'CAN_F7R2.FB18`                       EQU 0x4000667C,        4, base=16,    bitRange=18-18
 6188                           ;'CAN_F7R2.FB19`                       EQU 0x4000667C,        4, base=16,    bitRange=19-19
 6189                           ;'CAN_F7R2.FB20`                       EQU 0x4000667C,        4, base=16,    bitRange=20-20
 6190                           ;'CAN_F7R2.FB21`                       EQU 0x4000667C,        4, base=16,    bitRange=21-21
 6191                           ;'CAN_F7R2.FB22`                       EQU 0x4000667C,        4, base=16,    bitRange=22-22
 6192                           ;'CAN_F7R2.FB23`                       EQU 0x4000667C,        4, base=16,    bitRange=23-23
 6193                           ;'CAN_F7R2.FB24`                       EQU 0x4000667C,        4, base=16,    bitRange=24-24
 6194                           ;'CAN_F7R2.FB25`                       EQU 0x4000667C,        4, base=16,    bitRange=25-25
 6195                           ;'CAN_F7R2.FB26`                       EQU 0x4000667C,        4, base=16,    bitRange=26-26
 6196                           ;'CAN_F7R2.FB27`                       EQU 0x4000667C,        4, base=16,    bitRange=27-27
 6197                           ;'CAN_F7R2.FB28`                       EQU 0x4000667C,        4, base=16,    bitRange=28-28
 6198                           ;'CAN_F7R2.FB29`                       EQU 0x4000667C,        4, base=16,    bitRange=29-29
 6199                           ;'CAN_F7R2.FB30`                       EQU 0x4000667C,        4, base=16,    bitRange=30-30
 6200                           ;'CAN_F7R2.FB31`                       EQU 0x4000667C,        4, base=16,    bitRange=31-31
 6201                           
 6202                           ;CAN_F8R1                            EQU 0x40006680
 6203                           ;'CAN_F8R1.FB0`                        EQU 0x40006680,        4, base=16,    bitRange=0-0
 6204                           ;'CAN_F8R1.FB1`                        EQU 0x40006680,        4, base=16,    bitRange=1-1
 6205                           ;'CAN_F8R1.FB2`                        EQU 0x40006680,        4, base=16,    bitRange=2-2
 6206                           ;'CAN_F8R1.FB3`                        EQU 0x40006680,        4, base=16,    bitRange=3-3
 6207                           ;'CAN_F8R1.FB4`                        EQU 0x40006680,        4, base=16,    bitRange=4-4
 6208                           ;'CAN_F8R1.FB5`                        EQU 0x40006680,        4, base=16,    bitRange=5-5
 6209                           ;'CAN_F8R1.FB6`                        EQU 0x40006680,        4, base=16,    bitRange=6-6
 6210                           ;'CAN_F8R1.FB7`                        EQU 0x40006680,        4, base=16,    bitRange=7-7
 6211                           ;'CAN_F8R1.FB8`                        EQU 0x40006680,        4, base=16,    bitRange=8-8
 6212                           ;'CAN_F8R1.FB9`                        EQU 0x40006680,        4, base=16,    bitRange=9-9
 6213                           ;'CAN_F8R1.FB10`                       EQU 0x40006680,        4, base=16,    bitRange=10-10
 6214                           ;'CAN_F8R1.FB11`                       EQU 0x40006680,        4, base=16,    bitRange=11-11
 6215                           ;'CAN_F8R1.FB12`                       EQU 0x40006680,        4, base=16,    bitRange=12-12
 6216                           ;'CAN_F8R1.FB13`                       EQU 0x40006680,        4, base=16,    bitRange=13-13
 6217                           ;'CAN_F8R1.FB14`                       EQU 0x40006680,        4, base=16,    bitRange=14-14
 6218                           ;'CAN_F8R1.FB15`                       EQU 0x40006680,        4, base=16,    bitRange=15-15
 6219                           ;'CAN_F8R1.FB16`                       EQU 0x40006680,        4, base=16,    bitRange=16-16
 6220                           ;'CAN_F8R1.FB17`                       EQU 0x40006680,        4, base=16,    bitRange=17-17
 6221                           ;'CAN_F8R1.FB18`                       EQU 0x40006680,        4, base=16,    bitRange=18-18
 6222                           ;'CAN_F8R1.FB19`                       EQU 0x40006680,        4, base=16,    bitRange=19-19
 6223                           ;'CAN_F8R1.FB20`                       EQU 0x40006680,        4, base=16,    bitRange=20-20
 6224                           ;'CAN_F8R1.FB21`                       EQU 0x40006680,        4, base=16,    bitRange=21-21
 6225                           ;'CAN_F8R1.FB22`                       EQU 0x40006680,        4, base=16,    bitRange=22-22
 6226                           ;'CAN_F8R1.FB23`                       EQU 0x40006680,        4, base=16,    bitRange=23-23
 6227                           ;'CAN_F8R1.FB24`                       EQU 0x40006680,        4, base=16,    bitRange=24-24
 6228                           ;'CAN_F8R1.FB25`                       EQU 0x40006680,        4, base=16,    bitRange=25-25
 6229                           ;'CAN_F8R1.FB26`                       EQU 0x40006680,        4, base=16,    bitRange=26-26
 6230                           ;'CAN_F8R1.FB27`                       EQU 0x40006680,        4, base=16,    bitRange=27-27
 6231                           ;'CAN_F8R1.FB28`                       EQU 0x40006680,        4, base=16,    bitRange=28-28
 6232                           ;'CAN_F8R1.FB29`                       EQU 0x40006680,        4, base=16,    bitRange=29-29
 6233                           ;'CAN_F8R1.FB30`                       EQU 0x40006680,        4, base=16,    bitRange=30-30
 6234                           ;'CAN_F8R1.FB31`                       EQU 0x40006680,        4, base=16,    bitRange=31-31
 6235                           
 6236                           ;CAN_F8R2                            EQU 0x40006684
 6237                           ;'CAN_F8R2.FB0`                        EQU 0x40006684,        4, base=16,    bitRange=0-0
 6238                           ;'CAN_F8R2.FB1`                        EQU 0x40006684,        4, base=16,    bitRange=1-1
 6239                           ;'CAN_F8R2.FB2`                        EQU 0x40006684,        4, base=16,    bitRange=2-2
 6240                           ;'CAN_F8R2.FB3`                        EQU 0x40006684,        4, base=16,    bitRange=3-3
 6241                           ;'CAN_F8R2.FB4`                        EQU 0x40006684,        4, base=16,    bitRange=4-4
 6242                           ;'CAN_F8R2.FB5`                        EQU 0x40006684,        4, base=16,    bitRange=5-5
 6243                           ;'CAN_F8R2.FB6`                        EQU 0x40006684,        4, base=16,    bitRange=6-6
 6244                           ;'CAN_F8R2.FB7`                        EQU 0x40006684,        4, base=16,    bitRange=7-7
 6245                           ;'CAN_F8R2.FB8`                        EQU 0x40006684,        4, base=16,    bitRange=8-8
 6246                           ;'CAN_F8R2.FB9`                        EQU 0x40006684,        4, base=16,    bitRange=9-9
 6247                           ;'CAN_F8R2.FB10`                       EQU 0x40006684,        4, base=16,    bitRange=10-10
 6248                           ;'CAN_F8R2.FB11`                       EQU 0x40006684,        4, base=16,    bitRange=11-11
 6249                           ;'CAN_F8R2.FB12`                       EQU 0x40006684,        4, base=16,    bitRange=12-12
 6250                           ;'CAN_F8R2.FB13`                       EQU 0x40006684,        4, base=16,    bitRange=13-13
 6251                           ;'CAN_F8R2.FB14`                       EQU 0x40006684,        4, base=16,    bitRange=14-14
 6252                           ;'CAN_F8R2.FB15`                       EQU 0x40006684,        4, base=16,    bitRange=15-15
 6253                           ;'CAN_F8R2.FB16`                       EQU 0x40006684,        4, base=16,    bitRange=16-16
 6254                           ;'CAN_F8R2.FB17`                       EQU 0x40006684,        4, base=16,    bitRange=17-17
 6255                           ;'CAN_F8R2.FB18`                       EQU 0x40006684,        4, base=16,    bitRange=18-18
 6256                           ;'CAN_F8R2.FB19`                       EQU 0x40006684,        4, base=16,    bitRange=19-19
 6257                           ;'CAN_F8R2.FB20`                       EQU 0x40006684,        4, base=16,    bitRange=20-20
 6258                           ;'CAN_F8R2.FB21`                       EQU 0x40006684,        4, base=16,    bitRange=21-21
 6259                           ;'CAN_F8R2.FB22`                       EQU 0x40006684,        4, base=16,    bitRange=22-22
 6260                           ;'CAN_F8R2.FB23`                       EQU 0x40006684,        4, base=16,    bitRange=23-23
 6261                           ;'CAN_F8R2.FB24`                       EQU 0x40006684,        4, base=16,    bitRange=24-24
 6262                           ;'CAN_F8R2.FB25`                       EQU 0x40006684,        4, base=16,    bitRange=25-25
 6263                           ;'CAN_F8R2.FB26`                       EQU 0x40006684,        4, base=16,    bitRange=26-26
 6264                           ;'CAN_F8R2.FB27`                       EQU 0x40006684,        4, base=16,    bitRange=27-27
 6265                           ;'CAN_F8R2.FB28`                       EQU 0x40006684,        4, base=16,    bitRange=28-28
 6266                           ;'CAN_F8R2.FB29`                       EQU 0x40006684,        4, base=16,    bitRange=29-29
 6267                           ;'CAN_F8R2.FB30`                       EQU 0x40006684,        4, base=16,    bitRange=30-30
 6268                           ;'CAN_F8R2.FB31`                       EQU 0x40006684,        4, base=16,    bitRange=31-31
 6269                           
 6270                           ;CAN_F9R1                            EQU 0x40006688
 6271                           ;'CAN_F9R1.FB0`                        EQU 0x40006688,        4, base=16,    bitRange=0-0
 6272                           ;'CAN_F9R1.FB1`                        EQU 0x40006688,        4, base=16,    bitRange=1-1
 6273                           ;'CAN_F9R1.FB2`                        EQU 0x40006688,        4, base=16,    bitRange=2-2
 6274                           ;'CAN_F9R1.FB3`                        EQU 0x40006688,        4, base=16,    bitRange=3-3
 6275                           ;'CAN_F9R1.FB4`                        EQU 0x40006688,        4, base=16,    bitRange=4-4
 6276                           ;'CAN_F9R1.FB5`                        EQU 0x40006688,        4, base=16,    bitRange=5-5
 6277                           ;'CAN_F9R1.FB6`                        EQU 0x40006688,        4, base=16,    bitRange=6-6
 6278                           ;'CAN_F9R1.FB7`                        EQU 0x40006688,        4, base=16,    bitRange=7-7
 6279                           ;'CAN_F9R1.FB8`                        EQU 0x40006688,        4, base=16,    bitRange=8-8
 6280                           ;'CAN_F9R1.FB9`                        EQU 0x40006688,        4, base=16,    bitRange=9-9
 6281                           ;'CAN_F9R1.FB10`                       EQU 0x40006688,        4, base=16,    bitRange=10-10
 6282                           ;'CAN_F9R1.FB11`                       EQU 0x40006688,        4, base=16,    bitRange=11-11
 6283                           ;'CAN_F9R1.FB12`                       EQU 0x40006688,        4, base=16,    bitRange=12-12
 6284                           ;'CAN_F9R1.FB13`                       EQU 0x40006688,        4, base=16,    bitRange=13-13
 6285                           ;'CAN_F9R1.FB14`                       EQU 0x40006688,        4, base=16,    bitRange=14-14
 6286                           ;'CAN_F9R1.FB15`                       EQU 0x40006688,        4, base=16,    bitRange=15-15
 6287                           ;'CAN_F9R1.FB16`                       EQU 0x40006688,        4, base=16,    bitRange=16-16
 6288                           ;'CAN_F9R1.FB17`                       EQU 0x40006688,        4, base=16,    bitRange=17-17
 6289                           ;'CAN_F9R1.FB18`                       EQU 0x40006688,        4, base=16,    bitRange=18-18
 6290                           ;'CAN_F9R1.FB19`                       EQU 0x40006688,        4, base=16,    bitRange=19-19
 6291                           ;'CAN_F9R1.FB20`                       EQU 0x40006688,        4, base=16,    bitRange=20-20
 6292                           ;'CAN_F9R1.FB21`                       EQU 0x40006688,        4, base=16,    bitRange=21-21
 6293                           ;'CAN_F9R1.FB22`                       EQU 0x40006688,        4, base=16,    bitRange=22-22
 6294                           ;'CAN_F9R1.FB23`                       EQU 0x40006688,        4, base=16,    bitRange=23-23
 6295                           ;'CAN_F9R1.FB24`                       EQU 0x40006688,        4, base=16,    bitRange=24-24
 6296                           ;'CAN_F9R1.FB25`                       EQU 0x40006688,        4, base=16,    bitRange=25-25
 6297                           ;'CAN_F9R1.FB26`                       EQU 0x40006688,        4, base=16,    bitRange=26-26
 6298                           ;'CAN_F9R1.FB27`                       EQU 0x40006688,        4, base=16,    bitRange=27-27
 6299                           ;'CAN_F9R1.FB28`                       EQU 0x40006688,        4, base=16,    bitRange=28-28
 6300                           ;'CAN_F9R1.FB29`                       EQU 0x40006688,        4, base=16,    bitRange=29-29
 6301                           ;'CAN_F9R1.FB30`                       EQU 0x40006688,        4, base=16,    bitRange=30-30
 6302                           ;'CAN_F9R1.FB31`                       EQU 0x40006688,        4, base=16,    bitRange=31-31
 6303                           
 6304                           ;CAN_F9R2                            EQU 0x4000668C
 6305                           ;'CAN_F9R2.FB0`                        EQU 0x4000668C,        4, base=16,    bitRange=0-0
 6306                           ;'CAN_F9R2.FB1`                        EQU 0x4000668C,        4, base=16,    bitRange=1-1
 6307                           ;'CAN_F9R2.FB2`                        EQU 0x4000668C,        4, base=16,    bitRange=2-2
 6308                           ;'CAN_F9R2.FB3`                        EQU 0x4000668C,        4, base=16,    bitRange=3-3
 6309                           ;'CAN_F9R2.FB4`                        EQU 0x4000668C,        4, base=16,    bitRange=4-4
 6310                           ;'CAN_F9R2.FB5`                        EQU 0x4000668C,        4, base=16,    bitRange=5-5
 6311                           ;'CAN_F9R2.FB6`                        EQU 0x4000668C,        4, base=16,    bitRange=6-6
 6312                           ;'CAN_F9R2.FB7`                        EQU 0x4000668C,        4, base=16,    bitRange=7-7
 6313                           ;'CAN_F9R2.FB8`                        EQU 0x4000668C,        4, base=16,    bitRange=8-8
 6314                           ;'CAN_F9R2.FB9`                        EQU 0x4000668C,        4, base=16,    bitRange=9-9
 6315                           ;'CAN_F9R2.FB10`                       EQU 0x4000668C,        4, base=16,    bitRange=10-10
 6316                           ;'CAN_F9R2.FB11`                       EQU 0x4000668C,        4, base=16,    bitRange=11-11
 6317                           ;'CAN_F9R2.FB12`                       EQU 0x4000668C,        4, base=16,    bitRange=12-12
 6318                           ;'CAN_F9R2.FB13`                       EQU 0x4000668C,        4, base=16,    bitRange=13-13
 6319                           ;'CAN_F9R2.FB14`                       EQU 0x4000668C,        4, base=16,    bitRange=14-14
 6320                           ;'CAN_F9R2.FB15`                       EQU 0x4000668C,        4, base=16,    bitRange=15-15
 6321                           ;'CAN_F9R2.FB16`                       EQU 0x4000668C,        4, base=16,    bitRange=16-16
 6322                           ;'CAN_F9R2.FB17`                       EQU 0x4000668C,        4, base=16,    bitRange=17-17
 6323                           ;'CAN_F9R2.FB18`                       EQU 0x4000668C,        4, base=16,    bitRange=18-18
 6324                           ;'CAN_F9R2.FB19`                       EQU 0x4000668C,        4, base=16,    bitRange=19-19
 6325                           ;'CAN_F9R2.FB20`                       EQU 0x4000668C,        4, base=16,    bitRange=20-20
 6326                           ;'CAN_F9R2.FB21`                       EQU 0x4000668C,        4, base=16,    bitRange=21-21
 6327                           ;'CAN_F9R2.FB22`                       EQU 0x4000668C,        4, base=16,    bitRange=22-22
 6328                           ;'CAN_F9R2.FB23`                       EQU 0x4000668C,        4, base=16,    bitRange=23-23
 6329                           ;'CAN_F9R2.FB24`                       EQU 0x4000668C,        4, base=16,    bitRange=24-24
 6330                           ;'CAN_F9R2.FB25`                       EQU 0x4000668C,        4, base=16,    bitRange=25-25
 6331                           ;'CAN_F9R2.FB26`                       EQU 0x4000668C,        4, base=16,    bitRange=26-26
 6332                           ;'CAN_F9R2.FB27`                       EQU 0x4000668C,        4, base=16,    bitRange=27-27
 6333                           ;'CAN_F9R2.FB28`                       EQU 0x4000668C,        4, base=16,    bitRange=28-28
 6334                           ;'CAN_F9R2.FB29`                       EQU 0x4000668C,        4, base=16,    bitRange=29-29
 6335                           ;'CAN_F9R2.FB30`                       EQU 0x4000668C,        4, base=16,    bitRange=30-30
 6336                           ;'CAN_F9R2.FB31`                       EQU 0x4000668C,        4, base=16,    bitRange=31-31
 6337                           
 6338                           ;CAN_F10R1                           EQU 0x40006690
 6339                           ;'CAN_F10R1.FB0`                       EQU 0x40006690,        4, base=16,    bitRange=0-0
 6340                           ;'CAN_F10R1.FB1`                       EQU 0x40006690,        4, base=16,    bitRange=1-1
 6341                           ;'CAN_F10R1.FB2`                       EQU 0x40006690,        4, base=16,    bitRange=2-2
 6342                           ;'CAN_F10R1.FB3`                       EQU 0x40006690,        4, base=16,    bitRange=3-3
 6343                           ;'CAN_F10R1.FB4`                       EQU 0x40006690,        4, base=16,    bitRange=4-4
 6344                           ;'CAN_F10R1.FB5`                       EQU 0x40006690,        4, base=16,    bitRange=5-5
 6345                           ;'CAN_F10R1.FB6`                       EQU 0x40006690,        4, base=16,    bitRange=6-6
 6346                           ;'CAN_F10R1.FB7`                       EQU 0x40006690,        4, base=16,    bitRange=7-7
 6347                           ;'CAN_F10R1.FB8`                       EQU 0x40006690,        4, base=16,    bitRange=8-8
 6348                           ;'CAN_F10R1.FB9`                       EQU 0x40006690,        4, base=16,    bitRange=9-9
 6349                           ;'CAN_F10R1.FB10`                      EQU 0x40006690,        4, base=16,    bitRange=10-10
 6350                           ;'CAN_F10R1.FB11`                      EQU 0x40006690,        4, base=16,    bitRange=11-11
 6351                           ;'CAN_F10R1.FB12`                      EQU 0x40006690,        4, base=16,    bitRange=12-12
 6352                           ;'CAN_F10R1.FB13`                      EQU 0x40006690,        4, base=16,    bitRange=13-13
 6353                           ;'CAN_F10R1.FB14`                      EQU 0x40006690,        4, base=16,    bitRange=14-14
 6354                           ;'CAN_F10R1.FB15`                      EQU 0x40006690,        4, base=16,    bitRange=15-15
 6355                           ;'CAN_F10R1.FB16`                      EQU 0x40006690,        4, base=16,    bitRange=16-16
 6356                           ;'CAN_F10R1.FB17`                      EQU 0x40006690,        4, base=16,    bitRange=17-17
 6357                           ;'CAN_F10R1.FB18`                      EQU 0x40006690,        4, base=16,    bitRange=18-18
 6358                           ;'CAN_F10R1.FB19`                      EQU 0x40006690,        4, base=16,    bitRange=19-19
 6359                           ;'CAN_F10R1.FB20`                      EQU 0x40006690,        4, base=16,    bitRange=20-20
 6360                           ;'CAN_F10R1.FB21`                      EQU 0x40006690,        4, base=16,    bitRange=21-21
 6361                           ;'CAN_F10R1.FB22`                      EQU 0x40006690,        4, base=16,    bitRange=22-22
 6362                           ;'CAN_F10R1.FB23`                      EQU 0x40006690,        4, base=16,    bitRange=23-23
 6363                           ;'CAN_F10R1.FB24`                      EQU 0x40006690,        4, base=16,    bitRange=24-24
 6364                           ;'CAN_F10R1.FB25`                      EQU 0x40006690,        4, base=16,    bitRange=25-25
 6365                           ;'CAN_F10R1.FB26`                      EQU 0x40006690,        4, base=16,    bitRange=26-26
 6366                           ;'CAN_F10R1.FB27`                      EQU 0x40006690,        4, base=16,    bitRange=27-27
 6367                           ;'CAN_F10R1.FB28`                      EQU 0x40006690,        4, base=16,    bitRange=28-28
 6368                           ;'CAN_F10R1.FB29`                      EQU 0x40006690,        4, base=16,    bitRange=29-29
 6369                           ;'CAN_F10R1.FB30`                      EQU 0x40006690,        4, base=16,    bitRange=30-30
 6370                           ;'CAN_F10R1.FB31`                      EQU 0x40006690,        4, base=16,    bitRange=31-31
 6371                           
 6372                           ;CAN_F10R2                           EQU 0x40006694
 6373                           ;'CAN_F10R2.FB0`                       EQU 0x40006694,        4, base=16,    bitRange=0-0
 6374                           ;'CAN_F10R2.FB1`                       EQU 0x40006694,        4, base=16,    bitRange=1-1
 6375                           ;'CAN_F10R2.FB2`                       EQU 0x40006694,        4, base=16,    bitRange=2-2
 6376                           ;'CAN_F10R2.FB3`                       EQU 0x40006694,        4, base=16,    bitRange=3-3
 6377                           ;'CAN_F10R2.FB4`                       EQU 0x40006694,        4, base=16,    bitRange=4-4
 6378                           ;'CAN_F10R2.FB5`                       EQU 0x40006694,        4, base=16,    bitRange=5-5
 6379                           ;'CAN_F10R2.FB6`                       EQU 0x40006694,        4, base=16,    bitRange=6-6
 6380                           ;'CAN_F10R2.FB7`                       EQU 0x40006694,        4, base=16,    bitRange=7-7
 6381                           ;'CAN_F10R2.FB8`                       EQU 0x40006694,        4, base=16,    bitRange=8-8
 6382                           ;'CAN_F10R2.FB9`                       EQU 0x40006694,        4, base=16,    bitRange=9-9
 6383                           ;'CAN_F10R2.FB10`                      EQU 0x40006694,        4, base=16,    bitRange=10-10
 6384                           ;'CAN_F10R2.FB11`                      EQU 0x40006694,        4, base=16,    bitRange=11-11
 6385                           ;'CAN_F10R2.FB12`                      EQU 0x40006694,        4, base=16,    bitRange=12-12
 6386                           ;'CAN_F10R2.FB13`                      EQU 0x40006694,        4, base=16,    bitRange=13-13
 6387                           ;'CAN_F10R2.FB14`                      EQU 0x40006694,        4, base=16,    bitRange=14-14
 6388                           ;'CAN_F10R2.FB15`                      EQU 0x40006694,        4, base=16,    bitRange=15-15
 6389                           ;'CAN_F10R2.FB16`                      EQU 0x40006694,        4, base=16,    bitRange=16-16
 6390                           ;'CAN_F10R2.FB17`                      EQU 0x40006694,        4, base=16,    bitRange=17-17
 6391                           ;'CAN_F10R2.FB18`                      EQU 0x40006694,        4, base=16,    bitRange=18-18
 6392                           ;'CAN_F10R2.FB19`                      EQU 0x40006694,        4, base=16,    bitRange=19-19
 6393                           ;'CAN_F10R2.FB20`                      EQU 0x40006694,        4, base=16,    bitRange=20-20
 6394                           ;'CAN_F10R2.FB21`                      EQU 0x40006694,        4, base=16,    bitRange=21-21
 6395                           ;'CAN_F10R2.FB22`                      EQU 0x40006694,        4, base=16,    bitRange=22-22
 6396                           ;'CAN_F10R2.FB23`                      EQU 0x40006694,        4, base=16,    bitRange=23-23
 6397                           ;'CAN_F10R2.FB24`                      EQU 0x40006694,        4, base=16,    bitRange=24-24
 6398                           ;'CAN_F10R2.FB25`                      EQU 0x40006694,        4, base=16,    bitRange=25-25
 6399                           ;'CAN_F10R2.FB26`                      EQU 0x40006694,        4, base=16,    bitRange=26-26
 6400                           ;'CAN_F10R2.FB27`                      EQU 0x40006694,        4, base=16,    bitRange=27-27
 6401                           ;'CAN_F10R2.FB28`                      EQU 0x40006694,        4, base=16,    bitRange=28-28
 6402                           ;'CAN_F10R2.FB29`                      EQU 0x40006694,        4, base=16,    bitRange=29-29
 6403                           ;'CAN_F10R2.FB30`                      EQU 0x40006694,        4, base=16,    bitRange=30-30
 6404                           ;'CAN_F10R2.FB31`                      EQU 0x40006694,        4, base=16,    bitRange=31-31
 6405                           
 6406                           ;CAN_F11R1                           EQU 0x40006698
 6407                           ;'CAN_F11R1.FB0`                       EQU 0x40006698,        4, base=16,    bitRange=0-0
 6408                           ;'CAN_F11R1.FB1`                       EQU 0x40006698,        4, base=16,    bitRange=1-1
 6409                           ;'CAN_F11R1.FB2`                       EQU 0x40006698,        4, base=16,    bitRange=2-2
 6410                           ;'CAN_F11R1.FB3`                       EQU 0x40006698,        4, base=16,    bitRange=3-3
 6411                           ;'CAN_F11R1.FB4`                       EQU 0x40006698,        4, base=16,    bitRange=4-4
 6412                           ;'CAN_F11R1.FB5`                       EQU 0x40006698,        4, base=16,    bitRange=5-5
 6413                           ;'CAN_F11R1.FB6`                       EQU 0x40006698,        4, base=16,    bitRange=6-6
 6414                           ;'CAN_F11R1.FB7`                       EQU 0x40006698,        4, base=16,    bitRange=7-7
 6415                           ;'CAN_F11R1.FB8`                       EQU 0x40006698,        4, base=16,    bitRange=8-8
 6416                           ;'CAN_F11R1.FB9`                       EQU 0x40006698,        4, base=16,    bitRange=9-9
 6417                           ;'CAN_F11R1.FB10`                      EQU 0x40006698,        4, base=16,    bitRange=10-10
 6418                           ;'CAN_F11R1.FB11`                      EQU 0x40006698,        4, base=16,    bitRange=11-11
 6419                           ;'CAN_F11R1.FB12`                      EQU 0x40006698,        4, base=16,    bitRange=12-12
 6420                           ;'CAN_F11R1.FB13`                      EQU 0x40006698,        4, base=16,    bitRange=13-13
 6421                           ;'CAN_F11R1.FB14`                      EQU 0x40006698,        4, base=16,    bitRange=14-14
 6422                           ;'CAN_F11R1.FB15`                      EQU 0x40006698,        4, base=16,    bitRange=15-15
 6423                           ;'CAN_F11R1.FB16`                      EQU 0x40006698,        4, base=16,    bitRange=16-16
 6424                           ;'CAN_F11R1.FB17`                      EQU 0x40006698,        4, base=16,    bitRange=17-17
 6425                           ;'CAN_F11R1.FB18`                      EQU 0x40006698,        4, base=16,    bitRange=18-18
 6426                           ;'CAN_F11R1.FB19`                      EQU 0x40006698,        4, base=16,    bitRange=19-19
 6427                           ;'CAN_F11R1.FB20`                      EQU 0x40006698,        4, base=16,    bitRange=20-20
 6428                           ;'CAN_F11R1.FB21`                      EQU 0x40006698,        4, base=16,    bitRange=21-21
 6429                           ;'CAN_F11R1.FB22`                      EQU 0x40006698,        4, base=16,    bitRange=22-22
 6430                           ;'CAN_F11R1.FB23`                      EQU 0x40006698,        4, base=16,    bitRange=23-23
 6431                           ;'CAN_F11R1.FB24`                      EQU 0x40006698,        4, base=16,    bitRange=24-24
 6432                           ;'CAN_F11R1.FB25`                      EQU 0x40006698,        4, base=16,    bitRange=25-25
 6433                           ;'CAN_F11R1.FB26`                      EQU 0x40006698,        4, base=16,    bitRange=26-26
 6434                           ;'CAN_F11R1.FB27`                      EQU 0x40006698,        4, base=16,    bitRange=27-27
 6435                           ;'CAN_F11R1.FB28`                      EQU 0x40006698,        4, base=16,    bitRange=28-28
 6436                           ;'CAN_F11R1.FB29`                      EQU 0x40006698,        4, base=16,    bitRange=29-29
 6437                           ;'CAN_F11R1.FB30`                      EQU 0x40006698,        4, base=16,    bitRange=30-30
 6438                           ;'CAN_F11R1.FB31`                      EQU 0x40006698,        4, base=16,    bitRange=31-31
 6439                           
 6440                           ;CAN_F11R2                           EQU 0x4000669C
 6441                           ;'CAN_F11R2.FB0`                       EQU 0x4000669C,        4, base=16,    bitRange=0-0
 6442                           ;'CAN_F11R2.FB1`                       EQU 0x4000669C,        4, base=16,    bitRange=1-1
 6443                           ;'CAN_F11R2.FB2`                       EQU 0x4000669C,        4, base=16,    bitRange=2-2
 6444                           ;'CAN_F11R2.FB3`                       EQU 0x4000669C,        4, base=16,    bitRange=3-3
 6445                           ;'CAN_F11R2.FB4`                       EQU 0x4000669C,        4, base=16,    bitRange=4-4
 6446                           ;'CAN_F11R2.FB5`                       EQU 0x4000669C,        4, base=16,    bitRange=5-5
 6447                           ;'CAN_F11R2.FB6`                       EQU 0x4000669C,        4, base=16,    bitRange=6-6
 6448                           ;'CAN_F11R2.FB7`                       EQU 0x4000669C,        4, base=16,    bitRange=7-7
 6449                           ;'CAN_F11R2.FB8`                       EQU 0x4000669C,        4, base=16,    bitRange=8-8
 6450                           ;'CAN_F11R2.FB9`                       EQU 0x4000669C,        4, base=16,    bitRange=9-9
 6451                           ;'CAN_F11R2.FB10`                      EQU 0x4000669C,        4, base=16,    bitRange=10-10
 6452                           ;'CAN_F11R2.FB11`                      EQU 0x4000669C,        4, base=16,    bitRange=11-11
 6453                           ;'CAN_F11R2.FB12`                      EQU 0x4000669C,        4, base=16,    bitRange=12-12
 6454                           ;'CAN_F11R2.FB13`                      EQU 0x4000669C,        4, base=16,    bitRange=13-13
 6455                           ;'CAN_F11R2.FB14`                      EQU 0x4000669C,        4, base=16,    bitRange=14-14
 6456                           ;'CAN_F11R2.FB15`                      EQU 0x4000669C,        4, base=16,    bitRange=15-15
 6457                           ;'CAN_F11R2.FB16`                      EQU 0x4000669C,        4, base=16,    bitRange=16-16
 6458                           ;'CAN_F11R2.FB17`                      EQU 0x4000669C,        4, base=16,    bitRange=17-17
 6459                           ;'CAN_F11R2.FB18`                      EQU 0x4000669C,        4, base=16,    bitRange=18-18
 6460                           ;'CAN_F11R2.FB19`                      EQU 0x4000669C,        4, base=16,    bitRange=19-19
 6461                           ;'CAN_F11R2.FB20`                      EQU 0x4000669C,        4, base=16,    bitRange=20-20
 6462                           ;'CAN_F11R2.FB21`                      EQU 0x4000669C,        4, base=16,    bitRange=21-21
 6463                           ;'CAN_F11R2.FB22`                      EQU 0x4000669C,        4, base=16,    bitRange=22-22
 6464                           ;'CAN_F11R2.FB23`                      EQU 0x4000669C,        4, base=16,    bitRange=23-23
 6465                           ;'CAN_F11R2.FB24`                      EQU 0x4000669C,        4, base=16,    bitRange=24-24
 6466                           ;'CAN_F11R2.FB25`                      EQU 0x4000669C,        4, base=16,    bitRange=25-25
 6467                           ;'CAN_F11R2.FB26`                      EQU 0x4000669C,        4, base=16,    bitRange=26-26
 6468                           ;'CAN_F11R2.FB27`                      EQU 0x4000669C,        4, base=16,    bitRange=27-27
 6469                           ;'CAN_F11R2.FB28`                      EQU 0x4000669C,        4, base=16,    bitRange=28-28
 6470                           ;'CAN_F11R2.FB29`                      EQU 0x4000669C,        4, base=16,    bitRange=29-29
 6471                           ;'CAN_F11R2.FB30`                      EQU 0x4000669C,        4, base=16,    bitRange=30-30
 6472                           ;'CAN_F11R2.FB31`                      EQU 0x4000669C,        4, base=16,    bitRange=31-31
 6473                           
 6474                           ;CAN_F12R1                           EQU 0x400066A0
 6475                           ;'CAN_F12R1.FB0`                       EQU 0x400066A0,        4, base=16,    bitRange=0-0
 6476                           ;'CAN_F12R1.FB1`                       EQU 0x400066A0,        4, base=16,    bitRange=1-1
 6477                           ;'CAN_F12R1.FB2`                       EQU 0x400066A0,        4, base=16,    bitRange=2-2
 6478                           ;'CAN_F12R1.FB3`                       EQU 0x400066A0,        4, base=16,    bitRange=3-3
 6479                           ;'CAN_F12R1.FB4`                       EQU 0x400066A0,        4, base=16,    bitRange=4-4
 6480                           ;'CAN_F12R1.FB5`                       EQU 0x400066A0,        4, base=16,    bitRange=5-5
 6481                           ;'CAN_F12R1.FB6`                       EQU 0x400066A0,        4, base=16,    bitRange=6-6
 6482                           ;'CAN_F12R1.FB7`                       EQU 0x400066A0,        4, base=16,    bitRange=7-7
 6483                           ;'CAN_F12R1.FB8`                       EQU 0x400066A0,        4, base=16,    bitRange=8-8
 6484                           ;'CAN_F12R1.FB9`                       EQU 0x400066A0,        4, base=16,    bitRange=9-9
 6485                           ;'CAN_F12R1.FB10`                      EQU 0x400066A0,        4, base=16,    bitRange=10-10
 6486                           ;'CAN_F12R1.FB11`                      EQU 0x400066A0,        4, base=16,    bitRange=11-11
 6487                           ;'CAN_F12R1.FB12`                      EQU 0x400066A0,        4, base=16,    bitRange=12-12
 6488                           ;'CAN_F12R1.FB13`                      EQU 0x400066A0,        4, base=16,    bitRange=13-13
 6489                           ;'CAN_F12R1.FB14`                      EQU 0x400066A0,        4, base=16,    bitRange=14-14
 6490                           ;'CAN_F12R1.FB15`                      EQU 0x400066A0,        4, base=16,    bitRange=15-15
 6491                           ;'CAN_F12R1.FB16`                      EQU 0x400066A0,        4, base=16,    bitRange=16-16
 6492                           ;'CAN_F12R1.FB17`                      EQU 0x400066A0,        4, base=16,    bitRange=17-17
 6493                           ;'CAN_F12R1.FB18`                      EQU 0x400066A0,        4, base=16,    bitRange=18-18
 6494                           ;'CAN_F12R1.FB19`                      EQU 0x400066A0,        4, base=16,    bitRange=19-19
 6495                           ;'CAN_F12R1.FB20`                      EQU 0x400066A0,        4, base=16,    bitRange=20-20
 6496                           ;'CAN_F12R1.FB21`                      EQU 0x400066A0,        4, base=16,    bitRange=21-21
 6497                           ;'CAN_F12R1.FB22`                      EQU 0x400066A0,        4, base=16,    bitRange=22-22
 6498                           ;'CAN_F12R1.FB23`                      EQU 0x400066A0,        4, base=16,    bitRange=23-23
 6499                           ;'CAN_F12R1.FB24`                      EQU 0x400066A0,        4, base=16,    bitRange=24-24
 6500                           ;'CAN_F12R1.FB25`                      EQU 0x400066A0,        4, base=16,    bitRange=25-25
 6501                           ;'CAN_F12R1.FB26`                      EQU 0x400066A0,        4, base=16,    bitRange=26-26
 6502                           ;'CAN_F12R1.FB27`                      EQU 0x400066A0,        4, base=16,    bitRange=27-27
 6503                           ;'CAN_F12R1.FB28`                      EQU 0x400066A0,        4, base=16,    bitRange=28-28
 6504                           ;'CAN_F12R1.FB29`                      EQU 0x400066A0,        4, base=16,    bitRange=29-29
 6505                           ;'CAN_F12R1.FB30`                      EQU 0x400066A0,        4, base=16,    bitRange=30-30
 6506                           ;'CAN_F12R1.FB31`                      EQU 0x400066A0,        4, base=16,    bitRange=31-31
 6507                           
 6508                           ;CAN_F12R2                           EQU 0x400066A4
 6509                           ;'CAN_F12R2.FB0`                       EQU 0x400066A4,        4, base=16,    bitRange=0-0
 6510                           ;'CAN_F12R2.FB1`                       EQU 0x400066A4,        4, base=16,    bitRange=1-1
 6511                           ;'CAN_F12R2.FB2`                       EQU 0x400066A4,        4, base=16,    bitRange=2-2
 6512                           ;'CAN_F12R2.FB3`                       EQU 0x400066A4,        4, base=16,    bitRange=3-3
 6513                           ;'CAN_F12R2.FB4`                       EQU 0x400066A4,        4, base=16,    bitRange=4-4
 6514                           ;'CAN_F12R2.FB5`                       EQU 0x400066A4,        4, base=16,    bitRange=5-5
 6515                           ;'CAN_F12R2.FB6`                       EQU 0x400066A4,        4, base=16,    bitRange=6-6
 6516                           ;'CAN_F12R2.FB7`                       EQU 0x400066A4,        4, base=16,    bitRange=7-7
 6517                           ;'CAN_F12R2.FB8`                       EQU 0x400066A4,        4, base=16,    bitRange=8-8
 6518                           ;'CAN_F12R2.FB9`                       EQU 0x400066A4,        4, base=16,    bitRange=9-9
 6519                           ;'CAN_F12R2.FB10`                      EQU 0x400066A4,        4, base=16,    bitRange=10-10
 6520                           ;'CAN_F12R2.FB11`                      EQU 0x400066A4,        4, base=16,    bitRange=11-11
 6521                           ;'CAN_F12R2.FB12`                      EQU 0x400066A4,        4, base=16,    bitRange=12-12
 6522                           ;'CAN_F12R2.FB13`                      EQU 0x400066A4,        4, base=16,    bitRange=13-13
 6523                           ;'CAN_F12R2.FB14`                      EQU 0x400066A4,        4, base=16,    bitRange=14-14
 6524                           ;'CAN_F12R2.FB15`                      EQU 0x400066A4,        4, base=16,    bitRange=15-15
 6525                           ;'CAN_F12R2.FB16`                      EQU 0x400066A4,        4, base=16,    bitRange=16-16
 6526                           ;'CAN_F12R2.FB17`                      EQU 0x400066A4,        4, base=16,    bitRange=17-17
 6527                           ;'CAN_F12R2.FB18`                      EQU 0x400066A4,        4, base=16,    bitRange=18-18
 6528                           ;'CAN_F12R2.FB19`                      EQU 0x400066A4,        4, base=16,    bitRange=19-19
 6529                           ;'CAN_F12R2.FB20`                      EQU 0x400066A4,        4, base=16,    bitRange=20-20
 6530                           ;'CAN_F12R2.FB21`                      EQU 0x400066A4,        4, base=16,    bitRange=21-21
 6531                           ;'CAN_F12R2.FB22`                      EQU 0x400066A4,        4, base=16,    bitRange=22-22
 6532                           ;'CAN_F12R2.FB23`                      EQU 0x400066A4,        4, base=16,    bitRange=23-23
 6533                           ;'CAN_F12R2.FB24`                      EQU 0x400066A4,        4, base=16,    bitRange=24-24
 6534                           ;'CAN_F12R2.FB25`                      EQU 0x400066A4,        4, base=16,    bitRange=25-25
 6535                           ;'CAN_F12R2.FB26`                      EQU 0x400066A4,        4, base=16,    bitRange=26-26
 6536                           ;'CAN_F12R2.FB27`                      EQU 0x400066A4,        4, base=16,    bitRange=27-27
 6537                           ;'CAN_F12R2.FB28`                      EQU 0x400066A4,        4, base=16,    bitRange=28-28
 6538                           ;'CAN_F12R2.FB29`                      EQU 0x400066A4,        4, base=16,    bitRange=29-29
 6539                           ;'CAN_F12R2.FB30`                      EQU 0x400066A4,        4, base=16,    bitRange=30-30
 6540                           ;'CAN_F12R2.FB31`                      EQU 0x400066A4,        4, base=16,    bitRange=31-31
 6541                           
 6542                           ;CAN_F13R1                           EQU 0x400066A8
 6543                           ;'CAN_F13R1.FB0`                       EQU 0x400066A8,        4, base=16,    bitRange=0-0
 6544                           ;'CAN_F13R1.FB1`                       EQU 0x400066A8,        4, base=16,    bitRange=1-1
 6545                           ;'CAN_F13R1.FB2`                       EQU 0x400066A8,        4, base=16,    bitRange=2-2
 6546                           ;'CAN_F13R1.FB3`                       EQU 0x400066A8,        4, base=16,    bitRange=3-3
 6547                           ;'CAN_F13R1.FB4`                       EQU 0x400066A8,        4, base=16,    bitRange=4-4
 6548                           ;'CAN_F13R1.FB5`                       EQU 0x400066A8,        4, base=16,    bitRange=5-5
 6549                           ;'CAN_F13R1.FB6`                       EQU 0x400066A8,        4, base=16,    bitRange=6-6
 6550                           ;'CAN_F13R1.FB7`                       EQU 0x400066A8,        4, base=16,    bitRange=7-7
 6551                           ;'CAN_F13R1.FB8`                       EQU 0x400066A8,        4, base=16,    bitRange=8-8
 6552                           ;'CAN_F13R1.FB9`                       EQU 0x400066A8,        4, base=16,    bitRange=9-9
 6553                           ;'CAN_F13R1.FB10`                      EQU 0x400066A8,        4, base=16,    bitRange=10-10
 6554                           ;'CAN_F13R1.FB11`                      EQU 0x400066A8,        4, base=16,    bitRange=11-11
 6555                           ;'CAN_F13R1.FB12`                      EQU 0x400066A8,        4, base=16,    bitRange=12-12
 6556                           ;'CAN_F13R1.FB13`                      EQU 0x400066A8,        4, base=16,    bitRange=13-13
 6557                           ;'CAN_F13R1.FB14`                      EQU 0x400066A8,        4, base=16,    bitRange=14-14
 6558                           ;'CAN_F13R1.FB15`                      EQU 0x400066A8,        4, base=16,    bitRange=15-15
 6559                           ;'CAN_F13R1.FB16`                      EQU 0x400066A8,        4, base=16,    bitRange=16-16
 6560                           ;'CAN_F13R1.FB17`                      EQU 0x400066A8,        4, base=16,    bitRange=17-17
 6561                           ;'CAN_F13R1.FB18`                      EQU 0x400066A8,        4, base=16,    bitRange=18-18
 6562                           ;'CAN_F13R1.FB19`                      EQU 0x400066A8,        4, base=16,    bitRange=19-19
 6563                           ;'CAN_F13R1.FB20`                      EQU 0x400066A8,        4, base=16,    bitRange=20-20
 6564                           ;'CAN_F13R1.FB21`                      EQU 0x400066A8,        4, base=16,    bitRange=21-21
 6565                           ;'CAN_F13R1.FB22`                      EQU 0x400066A8,        4, base=16,    bitRange=22-22
 6566                           ;'CAN_F13R1.FB23`                      EQU 0x400066A8,        4, base=16,    bitRange=23-23
 6567                           ;'CAN_F13R1.FB24`                      EQU 0x400066A8,        4, base=16,    bitRange=24-24
 6568                           ;'CAN_F13R1.FB25`                      EQU 0x400066A8,        4, base=16,    bitRange=25-25
 6569                           ;'CAN_F13R1.FB26`                      EQU 0x400066A8,        4, base=16,    bitRange=26-26
 6570                           ;'CAN_F13R1.FB27`                      EQU 0x400066A8,        4, base=16,    bitRange=27-27
 6571                           ;'CAN_F13R1.FB28`                      EQU 0x400066A8,        4, base=16,    bitRange=28-28
 6572                           ;'CAN_F13R1.FB29`                      EQU 0x400066A8,        4, base=16,    bitRange=29-29
 6573                           ;'CAN_F13R1.FB30`                      EQU 0x400066A8,        4, base=16,    bitRange=30-30
 6574                           ;'CAN_F13R1.FB31`                      EQU 0x400066A8,        4, base=16,    bitRange=31-31
 6575                           
 6576                           ;CAN_F13R2                           EQU 0x400066AC
 6577                           ;'CAN_F13R2.FB0`                       EQU 0x400066AC,        4, base=16,    bitRange=0-0
 6578                           ;'CAN_F13R2.FB1`                       EQU 0x400066AC,        4, base=16,    bitRange=1-1
 6579                           ;'CAN_F13R2.FB2`                       EQU 0x400066AC,        4, base=16,    bitRange=2-2
 6580                           ;'CAN_F13R2.FB3`                       EQU 0x400066AC,        4, base=16,    bitRange=3-3
 6581                           ;'CAN_F13R2.FB4`                       EQU 0x400066AC,        4, base=16,    bitRange=4-4
 6582                           ;'CAN_F13R2.FB5`                       EQU 0x400066AC,        4, base=16,    bitRange=5-5
 6583                           ;'CAN_F13R2.FB6`                       EQU 0x400066AC,        4, base=16,    bitRange=6-6
 6584                           ;'CAN_F13R2.FB7`                       EQU 0x400066AC,        4, base=16,    bitRange=7-7
 6585                           ;'CAN_F13R2.FB8`                       EQU 0x400066AC,        4, base=16,    bitRange=8-8
 6586                           ;'CAN_F13R2.FB9`                       EQU 0x400066AC,        4, base=16,    bitRange=9-9
 6587                           ;'CAN_F13R2.FB10`                      EQU 0x400066AC,        4, base=16,    bitRange=10-10
 6588                           ;'CAN_F13R2.FB11`                      EQU 0x400066AC,        4, base=16,    bitRange=11-11
 6589                           ;'CAN_F13R2.FB12`                      EQU 0x400066AC,        4, base=16,    bitRange=12-12
 6590                           ;'CAN_F13R2.FB13`                      EQU 0x400066AC,        4, base=16,    bitRange=13-13
 6591                           ;'CAN_F13R2.FB14`                      EQU 0x400066AC,        4, base=16,    bitRange=14-14
 6592                           ;'CAN_F13R2.FB15`                      EQU 0x400066AC,        4, base=16,    bitRange=15-15
 6593                           ;'CAN_F13R2.FB16`                      EQU 0x400066AC,        4, base=16,    bitRange=16-16
 6594                           ;'CAN_F13R2.FB17`                      EQU 0x400066AC,        4, base=16,    bitRange=17-17
 6595                           ;'CAN_F13R2.FB18`                      EQU 0x400066AC,        4, base=16,    bitRange=18-18
 6596                           ;'CAN_F13R2.FB19`                      EQU 0x400066AC,        4, base=16,    bitRange=19-19
 6597                           ;'CAN_F13R2.FB20`                      EQU 0x400066AC,        4, base=16,    bitRange=20-20
 6598                           ;'CAN_F13R2.FB21`                      EQU 0x400066AC,        4, base=16,    bitRange=21-21
 6599                           ;'CAN_F13R2.FB22`                      EQU 0x400066AC,        4, base=16,    bitRange=22-22
 6600                           ;'CAN_F13R2.FB23`                      EQU 0x400066AC,        4, base=16,    bitRange=23-23
 6601                           ;'CAN_F13R2.FB24`                      EQU 0x400066AC,        4, base=16,    bitRange=24-24
 6602                           ;'CAN_F13R2.FB25`                      EQU 0x400066AC,        4, base=16,    bitRange=25-25
 6603                           ;'CAN_F13R2.FB26`                      EQU 0x400066AC,        4, base=16,    bitRange=26-26
 6604                           ;'CAN_F13R2.FB27`                      EQU 0x400066AC,        4, base=16,    bitRange=27-27
 6605                           ;'CAN_F13R2.FB28`                      EQU 0x400066AC,        4, base=16,    bitRange=28-28
 6606                           ;'CAN_F13R2.FB29`                      EQU 0x400066AC,        4, base=16,    bitRange=29-29
 6607                           ;'CAN_F13R2.FB30`                      EQU 0x400066AC,        4, base=16,    bitRange=30-30
 6608                           ;'CAN_F13R2.FB31`                      EQU 0x400066AC,        4, base=16,    bitRange=31-31
 6609                           
 6610                           ;CAN_F14R1                           EQU 0x400066B0
 6611                           ;'CAN_F14R1.FB0`                       EQU 0x400066B0,        4, base=16,    bitRange=0-0
 6612                           ;'CAN_F14R1.FB1`                       EQU 0x400066B0,        4, base=16,    bitRange=1-1
 6613                           ;'CAN_F14R1.FB2`                       EQU 0x400066B0,        4, base=16,    bitRange=2-2
 6614                           ;'CAN_F14R1.FB3`                       EQU 0x400066B0,        4, base=16,    bitRange=3-3
 6615                           ;'CAN_F14R1.FB4`                       EQU 0x400066B0,        4, base=16,    bitRange=4-4
 6616                           ;'CAN_F14R1.FB5`                       EQU 0x400066B0,        4, base=16,    bitRange=5-5
 6617                           ;'CAN_F14R1.FB6`                       EQU 0x400066B0,        4, base=16,    bitRange=6-6
 6618                           ;'CAN_F14R1.FB7`                       EQU 0x400066B0,        4, base=16,    bitRange=7-7
 6619                           ;'CAN_F14R1.FB8`                       EQU 0x400066B0,        4, base=16,    bitRange=8-8
 6620                           ;'CAN_F14R1.FB9`                       EQU 0x400066B0,        4, base=16,    bitRange=9-9
 6621                           ;'CAN_F14R1.FB10`                      EQU 0x400066B0,        4, base=16,    bitRange=10-10
 6622                           ;'CAN_F14R1.FB11`                      EQU 0x400066B0,        4, base=16,    bitRange=11-11
 6623                           ;'CAN_F14R1.FB12`                      EQU 0x400066B0,        4, base=16,    bitRange=12-12
 6624                           ;'CAN_F14R1.FB13`                      EQU 0x400066B0,        4, base=16,    bitRange=13-13
 6625                           ;'CAN_F14R1.FB14`                      EQU 0x400066B0,        4, base=16,    bitRange=14-14
 6626                           ;'CAN_F14R1.FB15`                      EQU 0x400066B0,        4, base=16,    bitRange=15-15
 6627                           ;'CAN_F14R1.FB16`                      EQU 0x400066B0,        4, base=16,    bitRange=16-16
 6628                           ;'CAN_F14R1.FB17`                      EQU 0x400066B0,        4, base=16,    bitRange=17-17
 6629                           ;'CAN_F14R1.FB18`                      EQU 0x400066B0,        4, base=16,    bitRange=18-18
 6630                           ;'CAN_F14R1.FB19`                      EQU 0x400066B0,        4, base=16,    bitRange=19-19
 6631                           ;'CAN_F14R1.FB20`                      EQU 0x400066B0,        4, base=16,    bitRange=20-20
 6632                           ;'CAN_F14R1.FB21`                      EQU 0x400066B0,        4, base=16,    bitRange=21-21
 6633                           ;'CAN_F14R1.FB22`                      EQU 0x400066B0,        4, base=16,    bitRange=22-22
 6634                           ;'CAN_F14R1.FB23`                      EQU 0x400066B0,        4, base=16,    bitRange=23-23
 6635                           ;'CAN_F14R1.FB24`                      EQU 0x400066B0,        4, base=16,    bitRange=24-24
 6636                           ;'CAN_F14R1.FB25`                      EQU 0x400066B0,        4, base=16,    bitRange=25-25
 6637                           ;'CAN_F14R1.FB26`                      EQU 0x400066B0,        4, base=16,    bitRange=26-26
 6638                           ;'CAN_F14R1.FB27`                      EQU 0x400066B0,        4, base=16,    bitRange=27-27
 6639                           ;'CAN_F14R1.FB28`                      EQU 0x400066B0,        4, base=16,    bitRange=28-28
 6640                           ;'CAN_F14R1.FB29`                      EQU 0x400066B0,        4, base=16,    bitRange=29-29
 6641                           ;'CAN_F14R1.FB30`                      EQU 0x400066B0,        4, base=16,    bitRange=30-30
 6642                           ;'CAN_F14R1.FB31`                      EQU 0x400066B0,        4, base=16,    bitRange=31-31
 6643                           
 6644                           ;CAN_F14R2                           EQU 0x400066B4
 6645                           ;'CAN_F14R2.FB0`                       EQU 0x400066B4,        4, base=16,    bitRange=0-0
 6646                           ;'CAN_F14R2.FB1`                       EQU 0x400066B4,        4, base=16,    bitRange=1-1
 6647                           ;'CAN_F14R2.FB2`                       EQU 0x400066B4,        4, base=16,    bitRange=2-2
 6648                           ;'CAN_F14R2.FB3`                       EQU 0x400066B4,        4, base=16,    bitRange=3-3
 6649                           ;'CAN_F14R2.FB4`                       EQU 0x400066B4,        4, base=16,    bitRange=4-4
 6650                           ;'CAN_F14R2.FB5`                       EQU 0x400066B4,        4, base=16,    bitRange=5-5
 6651                           ;'CAN_F14R2.FB6`                       EQU 0x400066B4,        4, base=16,    bitRange=6-6
 6652                           ;'CAN_F14R2.FB7`                       EQU 0x400066B4,        4, base=16,    bitRange=7-7
 6653                           ;'CAN_F14R2.FB8`                       EQU 0x400066B4,        4, base=16,    bitRange=8-8
 6654                           ;'CAN_F14R2.FB9`                       EQU 0x400066B4,        4, base=16,    bitRange=9-9
 6655                           ;'CAN_F14R2.FB10`                      EQU 0x400066B4,        4, base=16,    bitRange=10-10
 6656                           ;'CAN_F14R2.FB11`                      EQU 0x400066B4,        4, base=16,    bitRange=11-11
 6657                           ;'CAN_F14R2.FB12`                      EQU 0x400066B4,        4, base=16,    bitRange=12-12
 6658                           ;'CAN_F14R2.FB13`                      EQU 0x400066B4,        4, base=16,    bitRange=13-13
 6659                           ;'CAN_F14R2.FB14`                      EQU 0x400066B4,        4, base=16,    bitRange=14-14
 6660                           ;'CAN_F14R2.FB15`                      EQU 0x400066B4,        4, base=16,    bitRange=15-15
 6661                           ;'CAN_F14R2.FB16`                      EQU 0x400066B4,        4, base=16,    bitRange=16-16
 6662                           ;'CAN_F14R2.FB17`                      EQU 0x400066B4,        4, base=16,    bitRange=17-17
 6663                           ;'CAN_F14R2.FB18`                      EQU 0x400066B4,        4, base=16,    bitRange=18-18
 6664                           ;'CAN_F14R2.FB19`                      EQU 0x400066B4,        4, base=16,    bitRange=19-19
 6665                           ;'CAN_F14R2.FB20`                      EQU 0x400066B4,        4, base=16,    bitRange=20-20
 6666                           ;'CAN_F14R2.FB21`                      EQU 0x400066B4,        4, base=16,    bitRange=21-21
 6667                           ;'CAN_F14R2.FB22`                      EQU 0x400066B4,        4, base=16,    bitRange=22-22
 6668                           ;'CAN_F14R2.FB23`                      EQU 0x400066B4,        4, base=16,    bitRange=23-23
 6669                           ;'CAN_F14R2.FB24`                      EQU 0x400066B4,        4, base=16,    bitRange=24-24
 6670                           ;'CAN_F14R2.FB25`                      EQU 0x400066B4,        4, base=16,    bitRange=25-25
 6671                           ;'CAN_F14R2.FB26`                      EQU 0x400066B4,        4, base=16,    bitRange=26-26
 6672                           ;'CAN_F14R2.FB27`                      EQU 0x400066B4,        4, base=16,    bitRange=27-27
 6673                           ;'CAN_F14R2.FB28`                      EQU 0x400066B4,        4, base=16,    bitRange=28-28
 6674                           ;'CAN_F14R2.FB29`                      EQU 0x400066B4,        4, base=16,    bitRange=29-29
 6675                           ;'CAN_F14R2.FB30`                      EQU 0x400066B4,        4, base=16,    bitRange=30-30
 6676                           ;'CAN_F14R2.FB31`                      EQU 0x400066B4,        4, base=16,    bitRange=31-31
 6677                           
 6678                           ;CAN_F15R1                           EQU 0x400066B8
 6679                           ;'CAN_F15R1.FB0`                       EQU 0x400066B8,        4, base=16,    bitRange=0-0
 6680                           ;'CAN_F15R1.FB1`                       EQU 0x400066B8,        4, base=16,    bitRange=1-1
 6681                           ;'CAN_F15R1.FB2`                       EQU 0x400066B8,        4, base=16,    bitRange=2-2
 6682                           ;'CAN_F15R1.FB3`                       EQU 0x400066B8,        4, base=16,    bitRange=3-3
 6683                           ;'CAN_F15R1.FB4`                       EQU 0x400066B8,        4, base=16,    bitRange=4-4
 6684                           ;'CAN_F15R1.FB5`                       EQU 0x400066B8,        4, base=16,    bitRange=5-5
 6685                           ;'CAN_F15R1.FB6`                       EQU 0x400066B8,        4, base=16,    bitRange=6-6
 6686                           ;'CAN_F15R1.FB7`                       EQU 0x400066B8,        4, base=16,    bitRange=7-7
 6687                           ;'CAN_F15R1.FB8`                       EQU 0x400066B8,        4, base=16,    bitRange=8-8
 6688                           ;'CAN_F15R1.FB9`                       EQU 0x400066B8,        4, base=16,    bitRange=9-9
 6689                           ;'CAN_F15R1.FB10`                      EQU 0x400066B8,        4, base=16,    bitRange=10-10
 6690                           ;'CAN_F15R1.FB11`                      EQU 0x400066B8,        4, base=16,    bitRange=11-11
 6691                           ;'CAN_F15R1.FB12`                      EQU 0x400066B8,        4, base=16,    bitRange=12-12
 6692                           ;'CAN_F15R1.FB13`                      EQU 0x400066B8,        4, base=16,    bitRange=13-13
 6693                           ;'CAN_F15R1.FB14`                      EQU 0x400066B8,        4, base=16,    bitRange=14-14
 6694                           ;'CAN_F15R1.FB15`                      EQU 0x400066B8,        4, base=16,    bitRange=15-15
 6695                           ;'CAN_F15R1.FB16`                      EQU 0x400066B8,        4, base=16,    bitRange=16-16
 6696                           ;'CAN_F15R1.FB17`                      EQU 0x400066B8,        4, base=16,    bitRange=17-17
 6697                           ;'CAN_F15R1.FB18`                      EQU 0x400066B8,        4, base=16,    bitRange=18-18
 6698                           ;'CAN_F15R1.FB19`                      EQU 0x400066B8,        4, base=16,    bitRange=19-19
 6699                           ;'CAN_F15R1.FB20`                      EQU 0x400066B8,        4, base=16,    bitRange=20-20
 6700                           ;'CAN_F15R1.FB21`                      EQU 0x400066B8,        4, base=16,    bitRange=21-21
 6701                           ;'CAN_F15R1.FB22`                      EQU 0x400066B8,        4, base=16,    bitRange=22-22
 6702                           ;'CAN_F15R1.FB23`                      EQU 0x400066B8,        4, base=16,    bitRange=23-23
 6703                           ;'CAN_F15R1.FB24`                      EQU 0x400066B8,        4, base=16,    bitRange=24-24
 6704                           ;'CAN_F15R1.FB25`                      EQU 0x400066B8,        4, base=16,    bitRange=25-25
 6705                           ;'CAN_F15R1.FB26`                      EQU 0x400066B8,        4, base=16,    bitRange=26-26
 6706                           ;'CAN_F15R1.FB27`                      EQU 0x400066B8,        4, base=16,    bitRange=27-27
 6707                           ;'CAN_F15R1.FB28`                      EQU 0x400066B8,        4, base=16,    bitRange=28-28
 6708                           ;'CAN_F15R1.FB29`                      EQU 0x400066B8,        4, base=16,    bitRange=29-29
 6709                           ;'CAN_F15R1.FB30`                      EQU 0x400066B8,        4, base=16,    bitRange=30-30
 6710                           ;'CAN_F15R1.FB31`                      EQU 0x400066B8,        4, base=16,    bitRange=31-31
 6711                           
 6712                           ;CAN_F15R2                           EQU 0x400066BC
 6713                           ;'CAN_F15R2.FB0`                       EQU 0x400066BC,        4, base=16,    bitRange=0-0
 6714                           ;'CAN_F15R2.FB1`                       EQU 0x400066BC,        4, base=16,    bitRange=1-1
 6715                           ;'CAN_F15R2.FB2`                       EQU 0x400066BC,        4, base=16,    bitRange=2-2
 6716                           ;'CAN_F15R2.FB3`                       EQU 0x400066BC,        4, base=16,    bitRange=3-3
 6717                           ;'CAN_F15R2.FB4`                       EQU 0x400066BC,        4, base=16,    bitRange=4-4
 6718                           ;'CAN_F15R2.FB5`                       EQU 0x400066BC,        4, base=16,    bitRange=5-5
 6719                           ;'CAN_F15R2.FB6`                       EQU 0x400066BC,        4, base=16,    bitRange=6-6
 6720                           ;'CAN_F15R2.FB7`                       EQU 0x400066BC,        4, base=16,    bitRange=7-7
 6721                           ;'CAN_F15R2.FB8`                       EQU 0x400066BC,        4, base=16,    bitRange=8-8
 6722                           ;'CAN_F15R2.FB9`                       EQU 0x400066BC,        4, base=16,    bitRange=9-9
 6723                           ;'CAN_F15R2.FB10`                      EQU 0x400066BC,        4, base=16,    bitRange=10-10
 6724                           ;'CAN_F15R2.FB11`                      EQU 0x400066BC,        4, base=16,    bitRange=11-11
 6725                           ;'CAN_F15R2.FB12`                      EQU 0x400066BC,        4, base=16,    bitRange=12-12
 6726                           ;'CAN_F15R2.FB13`                      EQU 0x400066BC,        4, base=16,    bitRange=13-13
 6727                           ;'CAN_F15R2.FB14`                      EQU 0x400066BC,        4, base=16,    bitRange=14-14
 6728                           ;'CAN_F15R2.FB15`                      EQU 0x400066BC,        4, base=16,    bitRange=15-15
 6729                           ;'CAN_F15R2.FB16`                      EQU 0x400066BC,        4, base=16,    bitRange=16-16
 6730                           ;'CAN_F15R2.FB17`                      EQU 0x400066BC,        4, base=16,    bitRange=17-17
 6731                           ;'CAN_F15R2.FB18`                      EQU 0x400066BC,        4, base=16,    bitRange=18-18
 6732                           ;'CAN_F15R2.FB19`                      EQU 0x400066BC,        4, base=16,    bitRange=19-19
 6733                           ;'CAN_F15R2.FB20`                      EQU 0x400066BC,        4, base=16,    bitRange=20-20
 6734                           ;'CAN_F15R2.FB21`                      EQU 0x400066BC,        4, base=16,    bitRange=21-21
 6735                           ;'CAN_F15R2.FB22`                      EQU 0x400066BC,        4, base=16,    bitRange=22-22
 6736                           ;'CAN_F15R2.FB23`                      EQU 0x400066BC,        4, base=16,    bitRange=23-23
 6737                           ;'CAN_F15R2.FB24`                      EQU 0x400066BC,        4, base=16,    bitRange=24-24
 6738                           ;'CAN_F15R2.FB25`                      EQU 0x400066BC,        4, base=16,    bitRange=25-25
 6739                           ;'CAN_F15R2.FB26`                      EQU 0x400066BC,        4, base=16,    bitRange=26-26
 6740                           ;'CAN_F15R2.FB27`                      EQU 0x400066BC,        4, base=16,    bitRange=27-27
 6741                           ;'CAN_F15R2.FB28`                      EQU 0x400066BC,        4, base=16,    bitRange=28-28
 6742                           ;'CAN_F15R2.FB29`                      EQU 0x400066BC,        4, base=16,    bitRange=29-29
 6743                           ;'CAN_F15R2.FB30`                      EQU 0x400066BC,        4, base=16,    bitRange=30-30
 6744                           ;'CAN_F15R2.FB31`                      EQU 0x400066BC,        4, base=16,    bitRange=31-31
 6745                           
 6746                           ;CAN_F16R1                           EQU 0x400066C0
 6747                           ;'CAN_F16R1.FB0`                       EQU 0x400066C0,        4, base=16,    bitRange=0-0
 6748                           ;'CAN_F16R1.FB1`                       EQU 0x400066C0,        4, base=16,    bitRange=1-1
 6749                           ;'CAN_F16R1.FB2`                       EQU 0x400066C0,        4, base=16,    bitRange=2-2
 6750                           ;'CAN_F16R1.FB3`                       EQU 0x400066C0,        4, base=16,    bitRange=3-3
 6751                           ;'CAN_F16R1.FB4`                       EQU 0x400066C0,        4, base=16,    bitRange=4-4
 6752                           ;'CAN_F16R1.FB5`                       EQU 0x400066C0,        4, base=16,    bitRange=5-5
 6753                           ;'CAN_F16R1.FB6`                       EQU 0x400066C0,        4, base=16,    bitRange=6-6
 6754                           ;'CAN_F16R1.FB7`                       EQU 0x400066C0,        4, base=16,    bitRange=7-7
 6755                           ;'CAN_F16R1.FB8`                       EQU 0x400066C0,        4, base=16,    bitRange=8-8
 6756                           ;'CAN_F16R1.FB9`                       EQU 0x400066C0,        4, base=16,    bitRange=9-9
 6757                           ;'CAN_F16R1.FB10`                      EQU 0x400066C0,        4, base=16,    bitRange=10-10
 6758                           ;'CAN_F16R1.FB11`                      EQU 0x400066C0,        4, base=16,    bitRange=11-11
 6759                           ;'CAN_F16R1.FB12`                      EQU 0x400066C0,        4, base=16,    bitRange=12-12
 6760                           ;'CAN_F16R1.FB13`                      EQU 0x400066C0,        4, base=16,    bitRange=13-13
 6761                           ;'CAN_F16R1.FB14`                      EQU 0x400066C0,        4, base=16,    bitRange=14-14
 6762                           ;'CAN_F16R1.FB15`                      EQU 0x400066C0,        4, base=16,    bitRange=15-15
 6763                           ;'CAN_F16R1.FB16`                      EQU 0x400066C0,        4, base=16,    bitRange=16-16
 6764                           ;'CAN_F16R1.FB17`                      EQU 0x400066C0,        4, base=16,    bitRange=17-17
 6765                           ;'CAN_F16R1.FB18`                      EQU 0x400066C0,        4, base=16,    bitRange=18-18
 6766                           ;'CAN_F16R1.FB19`                      EQU 0x400066C0,        4, base=16,    bitRange=19-19
 6767                           ;'CAN_F16R1.FB20`                      EQU 0x400066C0,        4, base=16,    bitRange=20-20
 6768                           ;'CAN_F16R1.FB21`                      EQU 0x400066C0,        4, base=16,    bitRange=21-21
 6769                           ;'CAN_F16R1.FB22`                      EQU 0x400066C0,        4, base=16,    bitRange=22-22
 6770                           ;'CAN_F16R1.FB23`                      EQU 0x400066C0,        4, base=16,    bitRange=23-23
 6771                           ;'CAN_F16R1.FB24`                      EQU 0x400066C0,        4, base=16,    bitRange=24-24
 6772                           ;'CAN_F16R1.FB25`                      EQU 0x400066C0,        4, base=16,    bitRange=25-25
 6773                           ;'CAN_F16R1.FB26`                      EQU 0x400066C0,        4, base=16,    bitRange=26-26
 6774                           ;'CAN_F16R1.FB27`                      EQU 0x400066C0,        4, base=16,    bitRange=27-27
 6775                           ;'CAN_F16R1.FB28`                      EQU 0x400066C0,        4, base=16,    bitRange=28-28
 6776                           ;'CAN_F16R1.FB29`                      EQU 0x400066C0,        4, base=16,    bitRange=29-29
 6777                           ;'CAN_F16R1.FB30`                      EQU 0x400066C0,        4, base=16,    bitRange=30-30
 6778                           ;'CAN_F16R1.FB31`                      EQU 0x400066C0,        4, base=16,    bitRange=31-31
 6779                           
 6780                           ;CAN_F16R2                           EQU 0x400066C4
 6781                           ;'CAN_F16R2.FB0`                       EQU 0x400066C4,        4, base=16,    bitRange=0-0
 6782                           ;'CAN_F16R2.FB1`                       EQU 0x400066C4,        4, base=16,    bitRange=1-1
 6783                           ;'CAN_F16R2.FB2`                       EQU 0x400066C4,        4, base=16,    bitRange=2-2
 6784                           ;'CAN_F16R2.FB3`                       EQU 0x400066C4,        4, base=16,    bitRange=3-3
 6785                           ;'CAN_F16R2.FB4`                       EQU 0x400066C4,        4, base=16,    bitRange=4-4
 6786                           ;'CAN_F16R2.FB5`                       EQU 0x400066C4,        4, base=16,    bitRange=5-5
 6787                           ;'CAN_F16R2.FB6`                       EQU 0x400066C4,        4, base=16,    bitRange=6-6
 6788                           ;'CAN_F16R2.FB7`                       EQU 0x400066C4,        4, base=16,    bitRange=7-7
 6789                           ;'CAN_F16R2.FB8`                       EQU 0x400066C4,        4, base=16,    bitRange=8-8
 6790                           ;'CAN_F16R2.FB9`                       EQU 0x400066C4,        4, base=16,    bitRange=9-9
 6791                           ;'CAN_F16R2.FB10`                      EQU 0x400066C4,        4, base=16,    bitRange=10-10
 6792                           ;'CAN_F16R2.FB11`                      EQU 0x400066C4,        4, base=16,    bitRange=11-11
 6793                           ;'CAN_F16R2.FB12`                      EQU 0x400066C4,        4, base=16,    bitRange=12-12
 6794                           ;'CAN_F16R2.FB13`                      EQU 0x400066C4,        4, base=16,    bitRange=13-13
 6795                           ;'CAN_F16R2.FB14`                      EQU 0x400066C4,        4, base=16,    bitRange=14-14
 6796                           ;'CAN_F16R2.FB15`                      EQU 0x400066C4,        4, base=16,    bitRange=15-15
 6797                           ;'CAN_F16R2.FB16`                      EQU 0x400066C4,        4, base=16,    bitRange=16-16
 6798                           ;'CAN_F16R2.FB17`                      EQU 0x400066C4,        4, base=16,    bitRange=17-17
 6799                           ;'CAN_F16R2.FB18`                      EQU 0x400066C4,        4, base=16,    bitRange=18-18
 6800                           ;'CAN_F16R2.FB19`                      EQU 0x400066C4,        4, base=16,    bitRange=19-19
 6801                           ;'CAN_F16R2.FB20`                      EQU 0x400066C4,        4, base=16,    bitRange=20-20
 6802                           ;'CAN_F16R2.FB21`                      EQU 0x400066C4,        4, base=16,    bitRange=21-21
 6803                           ;'CAN_F16R2.FB22`                      EQU 0x400066C4,        4, base=16,    bitRange=22-22
 6804                           ;'CAN_F16R2.FB23`                      EQU 0x400066C4,        4, base=16,    bitRange=23-23
 6805                           ;'CAN_F16R2.FB24`                      EQU 0x400066C4,        4, base=16,    bitRange=24-24
 6806                           ;'CAN_F16R2.FB25`                      EQU 0x400066C4,        4, base=16,    bitRange=25-25
 6807                           ;'CAN_F16R2.FB26`                      EQU 0x400066C4,        4, base=16,    bitRange=26-26
 6808                           ;'CAN_F16R2.FB27`                      EQU 0x400066C4,        4, base=16,    bitRange=27-27
 6809                           ;'CAN_F16R2.FB28`                      EQU 0x400066C4,        4, base=16,    bitRange=28-28
 6810                           ;'CAN_F16R2.FB29`                      EQU 0x400066C4,        4, base=16,    bitRange=29-29
 6811                           ;'CAN_F16R2.FB30`                      EQU 0x400066C4,        4, base=16,    bitRange=30-30
 6812                           ;'CAN_F16R2.FB31`                      EQU 0x400066C4,        4, base=16,    bitRange=31-31
 6813                           
 6814                           ;CAN_F17R1                           EQU 0x400066C8
 6815                           ;'CAN_F17R1.FB0`                       EQU 0x400066C8,        4, base=16,    bitRange=0-0
 6816                           ;'CAN_F17R1.FB1`                       EQU 0x400066C8,        4, base=16,    bitRange=1-1
 6817                           ;'CAN_F17R1.FB2`                       EQU 0x400066C8,        4, base=16,    bitRange=2-2
 6818                           ;'CAN_F17R1.FB3`                       EQU 0x400066C8,        4, base=16,    bitRange=3-3
 6819                           ;'CAN_F17R1.FB4`                       EQU 0x400066C8,        4, base=16,    bitRange=4-4
 6820                           ;'CAN_F17R1.FB5`                       EQU 0x400066C8,        4, base=16,    bitRange=5-5
 6821                           ;'CAN_F17R1.FB6`                       EQU 0x400066C8,        4, base=16,    bitRange=6-6
 6822                           ;'CAN_F17R1.FB7`                       EQU 0x400066C8,        4, base=16,    bitRange=7-7
 6823                           ;'CAN_F17R1.FB8`                       EQU 0x400066C8,        4, base=16,    bitRange=8-8
 6824                           ;'CAN_F17R1.FB9`                       EQU 0x400066C8,        4, base=16,    bitRange=9-9
 6825                           ;'CAN_F17R1.FB10`                      EQU 0x400066C8,        4, base=16,    bitRange=10-10
 6826                           ;'CAN_F17R1.FB11`                      EQU 0x400066C8,        4, base=16,    bitRange=11-11
 6827                           ;'CAN_F17R1.FB12`                      EQU 0x400066C8,        4, base=16,    bitRange=12-12
 6828                           ;'CAN_F17R1.FB13`                      EQU 0x400066C8,        4, base=16,    bitRange=13-13
 6829                           ;'CAN_F17R1.FB14`                      EQU 0x400066C8,        4, base=16,    bitRange=14-14
 6830                           ;'CAN_F17R1.FB15`                      EQU 0x400066C8,        4, base=16,    bitRange=15-15
 6831                           ;'CAN_F17R1.FB16`                      EQU 0x400066C8,        4, base=16,    bitRange=16-16
 6832                           ;'CAN_F17R1.FB17`                      EQU 0x400066C8,        4, base=16,    bitRange=17-17
 6833                           ;'CAN_F17R1.FB18`                      EQU 0x400066C8,        4, base=16,    bitRange=18-18
 6834                           ;'CAN_F17R1.FB19`                      EQU 0x400066C8,        4, base=16,    bitRange=19-19
 6835                           ;'CAN_F17R1.FB20`                      EQU 0x400066C8,        4, base=16,    bitRange=20-20
 6836                           ;'CAN_F17R1.FB21`                      EQU 0x400066C8,        4, base=16,    bitRange=21-21
 6837                           ;'CAN_F17R1.FB22`                      EQU 0x400066C8,        4, base=16,    bitRange=22-22
 6838                           ;'CAN_F17R1.FB23`                      EQU 0x400066C8,        4, base=16,    bitRange=23-23
 6839                           ;'CAN_F17R1.FB24`                      EQU 0x400066C8,        4, base=16,    bitRange=24-24
 6840                           ;'CAN_F17R1.FB25`                      EQU 0x400066C8,        4, base=16,    bitRange=25-25
 6841                           ;'CAN_F17R1.FB26`                      EQU 0x400066C8,        4, base=16,    bitRange=26-26
 6842                           ;'CAN_F17R1.FB27`                      EQU 0x400066C8,        4, base=16,    bitRange=27-27
 6843                           ;'CAN_F17R1.FB28`                      EQU 0x400066C8,        4, base=16,    bitRange=28-28
 6844                           ;'CAN_F17R1.FB29`                      EQU 0x400066C8,        4, base=16,    bitRange=29-29
 6845                           ;'CAN_F17R1.FB30`                      EQU 0x400066C8,        4, base=16,    bitRange=30-30
 6846                           ;'CAN_F17R1.FB31`                      EQU 0x400066C8,        4, base=16,    bitRange=31-31
 6847                           
 6848                           ;CAN_F17R2                           EQU 0x400066CC
 6849                           ;'CAN_F17R2.FB0`                       EQU 0x400066CC,        4, base=16,    bitRange=0-0
 6850                           ;'CAN_F17R2.FB1`                       EQU 0x400066CC,        4, base=16,    bitRange=1-1
 6851                           ;'CAN_F17R2.FB2`                       EQU 0x400066CC,        4, base=16,    bitRange=2-2
 6852                           ;'CAN_F17R2.FB3`                       EQU 0x400066CC,        4, base=16,    bitRange=3-3
 6853                           ;'CAN_F17R2.FB4`                       EQU 0x400066CC,        4, base=16,    bitRange=4-4
 6854                           ;'CAN_F17R2.FB5`                       EQU 0x400066CC,        4, base=16,    bitRange=5-5
 6855                           ;'CAN_F17R2.FB6`                       EQU 0x400066CC,        4, base=16,    bitRange=6-6
 6856                           ;'CAN_F17R2.FB7`                       EQU 0x400066CC,        4, base=16,    bitRange=7-7
 6857                           ;'CAN_F17R2.FB8`                       EQU 0x400066CC,        4, base=16,    bitRange=8-8
 6858                           ;'CAN_F17R2.FB9`                       EQU 0x400066CC,        4, base=16,    bitRange=9-9
 6859                           ;'CAN_F17R2.FB10`                      EQU 0x400066CC,        4, base=16,    bitRange=10-10
 6860                           ;'CAN_F17R2.FB11`                      EQU 0x400066CC,        4, base=16,    bitRange=11-11
 6861                           ;'CAN_F17R2.FB12`                      EQU 0x400066CC,        4, base=16,    bitRange=12-12
 6862                           ;'CAN_F17R2.FB13`                      EQU 0x400066CC,        4, base=16,    bitRange=13-13
 6863                           ;'CAN_F17R2.FB14`                      EQU 0x400066CC,        4, base=16,    bitRange=14-14
 6864                           ;'CAN_F17R2.FB15`                      EQU 0x400066CC,        4, base=16,    bitRange=15-15
 6865                           ;'CAN_F17R2.FB16`                      EQU 0x400066CC,        4, base=16,    bitRange=16-16
 6866                           ;'CAN_F17R2.FB17`                      EQU 0x400066CC,        4, base=16,    bitRange=17-17
 6867                           ;'CAN_F17R2.FB18`                      EQU 0x400066CC,        4, base=16,    bitRange=18-18
 6868                           ;'CAN_F17R2.FB19`                      EQU 0x400066CC,        4, base=16,    bitRange=19-19
 6869                           ;'CAN_F17R2.FB20`                      EQU 0x400066CC,        4, base=16,    bitRange=20-20
 6870                           ;'CAN_F17R2.FB21`                      EQU 0x400066CC,        4, base=16,    bitRange=21-21
 6871                           ;'CAN_F17R2.FB22`                      EQU 0x400066CC,        4, base=16,    bitRange=22-22
 6872                           ;'CAN_F17R2.FB23`                      EQU 0x400066CC,        4, base=16,    bitRange=23-23
 6873                           ;'CAN_F17R2.FB24`                      EQU 0x400066CC,        4, base=16,    bitRange=24-24
 6874                           ;'CAN_F17R2.FB25`                      EQU 0x400066CC,        4, base=16,    bitRange=25-25
 6875                           ;'CAN_F17R2.FB26`                      EQU 0x400066CC,        4, base=16,    bitRange=26-26
 6876                           ;'CAN_F17R2.FB27`                      EQU 0x400066CC,        4, base=16,    bitRange=27-27
 6877                           ;'CAN_F17R2.FB28`                      EQU 0x400066CC,        4, base=16,    bitRange=28-28
 6878                           ;'CAN_F17R2.FB29`                      EQU 0x400066CC,        4, base=16,    bitRange=29-29
 6879                           ;'CAN_F17R2.FB30`                      EQU 0x400066CC,        4, base=16,    bitRange=30-30
 6880                           ;'CAN_F17R2.FB31`                      EQU 0x400066CC,        4, base=16,    bitRange=31-31
 6881                           
 6882                           ;CAN_F18R1                           EQU 0x400066D0
 6883                           ;'CAN_F18R1.FB0`                       EQU 0x400066D0,        4, base=16,    bitRange=0-0
 6884                           ;'CAN_F18R1.FB1`                       EQU 0x400066D0,        4, base=16,    bitRange=1-1
 6885                           ;'CAN_F18R1.FB2`                       EQU 0x400066D0,        4, base=16,    bitRange=2-2
 6886                           ;'CAN_F18R1.FB3`                       EQU 0x400066D0,        4, base=16,    bitRange=3-3
 6887                           ;'CAN_F18R1.FB4`                       EQU 0x400066D0,        4, base=16,    bitRange=4-4
 6888                           ;'CAN_F18R1.FB5`                       EQU 0x400066D0,        4, base=16,    bitRange=5-5
 6889                           ;'CAN_F18R1.FB6`                       EQU 0x400066D0,        4, base=16,    bitRange=6-6
 6890                           ;'CAN_F18R1.FB7`                       EQU 0x400066D0,        4, base=16,    bitRange=7-7
 6891                           ;'CAN_F18R1.FB8`                       EQU 0x400066D0,        4, base=16,    bitRange=8-8
 6892                           ;'CAN_F18R1.FB9`                       EQU 0x400066D0,        4, base=16,    bitRange=9-9
 6893                           ;'CAN_F18R1.FB10`                      EQU 0x400066D0,        4, base=16,    bitRange=10-10
 6894                           ;'CAN_F18R1.FB11`                      EQU 0x400066D0,        4, base=16,    bitRange=11-11
 6895                           ;'CAN_F18R1.FB12`                      EQU 0x400066D0,        4, base=16,    bitRange=12-12
 6896                           ;'CAN_F18R1.FB13`                      EQU 0x400066D0,        4, base=16,    bitRange=13-13
 6897                           ;'CAN_F18R1.FB14`                      EQU 0x400066D0,        4, base=16,    bitRange=14-14
 6898                           ;'CAN_F18R1.FB15`                      EQU 0x400066D0,        4, base=16,    bitRange=15-15
 6899                           ;'CAN_F18R1.FB16`                      EQU 0x400066D0,        4, base=16,    bitRange=16-16
 6900                           ;'CAN_F18R1.FB17`                      EQU 0x400066D0,        4, base=16,    bitRange=17-17
 6901                           ;'CAN_F18R1.FB18`                      EQU 0x400066D0,        4, base=16,    bitRange=18-18
 6902                           ;'CAN_F18R1.FB19`                      EQU 0x400066D0,        4, base=16,    bitRange=19-19
 6903                           ;'CAN_F18R1.FB20`                      EQU 0x400066D0,        4, base=16,    bitRange=20-20
 6904                           ;'CAN_F18R1.FB21`                      EQU 0x400066D0,        4, base=16,    bitRange=21-21
 6905                           ;'CAN_F18R1.FB22`                      EQU 0x400066D0,        4, base=16,    bitRange=22-22
 6906                           ;'CAN_F18R1.FB23`                      EQU 0x400066D0,        4, base=16,    bitRange=23-23
 6907                           ;'CAN_F18R1.FB24`                      EQU 0x400066D0,        4, base=16,    bitRange=24-24
 6908                           ;'CAN_F18R1.FB25`                      EQU 0x400066D0,        4, base=16,    bitRange=25-25
 6909                           ;'CAN_F18R1.FB26`                      EQU 0x400066D0,        4, base=16,    bitRange=26-26
 6910                           ;'CAN_F18R1.FB27`                      EQU 0x400066D0,        4, base=16,    bitRange=27-27
 6911                           ;'CAN_F18R1.FB28`                      EQU 0x400066D0,        4, base=16,    bitRange=28-28
 6912                           ;'CAN_F18R1.FB29`                      EQU 0x400066D0,        4, base=16,    bitRange=29-29
 6913                           ;'CAN_F18R1.FB30`                      EQU 0x400066D0,        4, base=16,    bitRange=30-30
 6914                           ;'CAN_F18R1.FB31`                      EQU 0x400066D0,        4, base=16,    bitRange=31-31
 6915                           
 6916                           ;CAN_F18R2                           EQU 0x400066D4
 6917                           ;'CAN_F18R2.FB0`                       EQU 0x400066D4,        4, base=16,    bitRange=0-0
 6918                           ;'CAN_F18R2.FB1`                       EQU 0x400066D4,        4, base=16,    bitRange=1-1
 6919                           ;'CAN_F18R2.FB2`                       EQU 0x400066D4,        4, base=16,    bitRange=2-2
 6920                           ;'CAN_F18R2.FB3`                       EQU 0x400066D4,        4, base=16,    bitRange=3-3
 6921                           ;'CAN_F18R2.FB4`                       EQU 0x400066D4,        4, base=16,    bitRange=4-4
 6922                           ;'CAN_F18R2.FB5`                       EQU 0x400066D4,        4, base=16,    bitRange=5-5
 6923                           ;'CAN_F18R2.FB6`                       EQU 0x400066D4,        4, base=16,    bitRange=6-6
 6924                           ;'CAN_F18R2.FB7`                       EQU 0x400066D4,        4, base=16,    bitRange=7-7
 6925                           ;'CAN_F18R2.FB8`                       EQU 0x400066D4,        4, base=16,    bitRange=8-8
 6926                           ;'CAN_F18R2.FB9`                       EQU 0x400066D4,        4, base=16,    bitRange=9-9
 6927                           ;'CAN_F18R2.FB10`                      EQU 0x400066D4,        4, base=16,    bitRange=10-10
 6928                           ;'CAN_F18R2.FB11`                      EQU 0x400066D4,        4, base=16,    bitRange=11-11
 6929                           ;'CAN_F18R2.FB12`                      EQU 0x400066D4,        4, base=16,    bitRange=12-12
 6930                           ;'CAN_F18R2.FB13`                      EQU 0x400066D4,        4, base=16,    bitRange=13-13
 6931                           ;'CAN_F18R2.FB14`                      EQU 0x400066D4,        4, base=16,    bitRange=14-14
 6932                           ;'CAN_F18R2.FB15`                      EQU 0x400066D4,        4, base=16,    bitRange=15-15
 6933                           ;'CAN_F18R2.FB16`                      EQU 0x400066D4,        4, base=16,    bitRange=16-16
 6934                           ;'CAN_F18R2.FB17`                      EQU 0x400066D4,        4, base=16,    bitRange=17-17
 6935                           ;'CAN_F18R2.FB18`                      EQU 0x400066D4,        4, base=16,    bitRange=18-18
 6936                           ;'CAN_F18R2.FB19`                      EQU 0x400066D4,        4, base=16,    bitRange=19-19
 6937                           ;'CAN_F18R2.FB20`                      EQU 0x400066D4,        4, base=16,    bitRange=20-20
 6938                           ;'CAN_F18R2.FB21`                      EQU 0x400066D4,        4, base=16,    bitRange=21-21
 6939                           ;'CAN_F18R2.FB22`                      EQU 0x400066D4,        4, base=16,    bitRange=22-22
 6940                           ;'CAN_F18R2.FB23`                      EQU 0x400066D4,        4, base=16,    bitRange=23-23
 6941                           ;'CAN_F18R2.FB24`                      EQU 0x400066D4,        4, base=16,    bitRange=24-24
 6942                           ;'CAN_F18R2.FB25`                      EQU 0x400066D4,        4, base=16,    bitRange=25-25
 6943                           ;'CAN_F18R2.FB26`                      EQU 0x400066D4,        4, base=16,    bitRange=26-26
 6944                           ;'CAN_F18R2.FB27`                      EQU 0x400066D4,        4, base=16,    bitRange=27-27
 6945                           ;'CAN_F18R2.FB28`                      EQU 0x400066D4,        4, base=16,    bitRange=28-28
 6946                           ;'CAN_F18R2.FB29`                      EQU 0x400066D4,        4, base=16,    bitRange=29-29
 6947                           ;'CAN_F18R2.FB30`                      EQU 0x400066D4,        4, base=16,    bitRange=30-30
 6948                           ;'CAN_F18R2.FB31`                      EQU 0x400066D4,        4, base=16,    bitRange=31-31
 6949                           
 6950                           ;CAN_F19R1                           EQU 0x400066D8
 6951                           ;'CAN_F19R1.FB0`                       EQU 0x400066D8,        4, base=16,    bitRange=0-0
 6952                           ;'CAN_F19R1.FB1`                       EQU 0x400066D8,        4, base=16,    bitRange=1-1
 6953                           ;'CAN_F19R1.FB2`                       EQU 0x400066D8,        4, base=16,    bitRange=2-2
 6954                           ;'CAN_F19R1.FB3`                       EQU 0x400066D8,        4, base=16,    bitRange=3-3
 6955                           ;'CAN_F19R1.FB4`                       EQU 0x400066D8,        4, base=16,    bitRange=4-4
 6956                           ;'CAN_F19R1.FB5`                       EQU 0x400066D8,        4, base=16,    bitRange=5-5
 6957                           ;'CAN_F19R1.FB6`                       EQU 0x400066D8,        4, base=16,    bitRange=6-6
 6958                           ;'CAN_F19R1.FB7`                       EQU 0x400066D8,        4, base=16,    bitRange=7-7
 6959                           ;'CAN_F19R1.FB8`                       EQU 0x400066D8,        4, base=16,    bitRange=8-8
 6960                           ;'CAN_F19R1.FB9`                       EQU 0x400066D8,        4, base=16,    bitRange=9-9
 6961                           ;'CAN_F19R1.FB10`                      EQU 0x400066D8,        4, base=16,    bitRange=10-10
 6962                           ;'CAN_F19R1.FB11`                      EQU 0x400066D8,        4, base=16,    bitRange=11-11
 6963                           ;'CAN_F19R1.FB12`                      EQU 0x400066D8,        4, base=16,    bitRange=12-12
 6964                           ;'CAN_F19R1.FB13`                      EQU 0x400066D8,        4, base=16,    bitRange=13-13
 6965                           ;'CAN_F19R1.FB14`                      EQU 0x400066D8,        4, base=16,    bitRange=14-14
 6966                           ;'CAN_F19R1.FB15`                      EQU 0x400066D8,        4, base=16,    bitRange=15-15
 6967                           ;'CAN_F19R1.FB16`                      EQU 0x400066D8,        4, base=16,    bitRange=16-16
 6968                           ;'CAN_F19R1.FB17`                      EQU 0x400066D8,        4, base=16,    bitRange=17-17
 6969                           ;'CAN_F19R1.FB18`                      EQU 0x400066D8,        4, base=16,    bitRange=18-18
 6970                           ;'CAN_F19R1.FB19`                      EQU 0x400066D8,        4, base=16,    bitRange=19-19
 6971                           ;'CAN_F19R1.FB20`                      EQU 0x400066D8,        4, base=16,    bitRange=20-20
 6972                           ;'CAN_F19R1.FB21`                      EQU 0x400066D8,        4, base=16,    bitRange=21-21
 6973                           ;'CAN_F19R1.FB22`                      EQU 0x400066D8,        4, base=16,    bitRange=22-22
 6974                           ;'CAN_F19R1.FB23`                      EQU 0x400066D8,        4, base=16,    bitRange=23-23
 6975                           ;'CAN_F19R1.FB24`                      EQU 0x400066D8,        4, base=16,    bitRange=24-24
 6976                           ;'CAN_F19R1.FB25`                      EQU 0x400066D8,        4, base=16,    bitRange=25-25
 6977                           ;'CAN_F19R1.FB26`                      EQU 0x400066D8,        4, base=16,    bitRange=26-26
 6978                           ;'CAN_F19R1.FB27`                      EQU 0x400066D8,        4, base=16,    bitRange=27-27
 6979                           ;'CAN_F19R1.FB28`                      EQU 0x400066D8,        4, base=16,    bitRange=28-28
 6980                           ;'CAN_F19R1.FB29`                      EQU 0x400066D8,        4, base=16,    bitRange=29-29
 6981                           ;'CAN_F19R1.FB30`                      EQU 0x400066D8,        4, base=16,    bitRange=30-30
 6982                           ;'CAN_F19R1.FB31`                      EQU 0x400066D8,        4, base=16,    bitRange=31-31
 6983                           
 6984                           ;CAN_F19R2                           EQU 0x400066DC
 6985                           ;'CAN_F19R2.FB0`                       EQU 0x400066DC,        4, base=16,    bitRange=0-0
 6986                           ;'CAN_F19R2.FB1`                       EQU 0x400066DC,        4, base=16,    bitRange=1-1
 6987                           ;'CAN_F19R2.FB2`                       EQU 0x400066DC,        4, base=16,    bitRange=2-2
 6988                           ;'CAN_F19R2.FB3`                       EQU 0x400066DC,        4, base=16,    bitRange=3-3
 6989                           ;'CAN_F19R2.FB4`                       EQU 0x400066DC,        4, base=16,    bitRange=4-4
 6990                           ;'CAN_F19R2.FB5`                       EQU 0x400066DC,        4, base=16,    bitRange=5-5
 6991                           ;'CAN_F19R2.FB6`                       EQU 0x400066DC,        4, base=16,    bitRange=6-6
 6992                           ;'CAN_F19R2.FB7`                       EQU 0x400066DC,        4, base=16,    bitRange=7-7
 6993                           ;'CAN_F19R2.FB8`                       EQU 0x400066DC,        4, base=16,    bitRange=8-8
 6994                           ;'CAN_F19R2.FB9`                       EQU 0x400066DC,        4, base=16,    bitRange=9-9
 6995                           ;'CAN_F19R2.FB10`                      EQU 0x400066DC,        4, base=16,    bitRange=10-10
 6996                           ;'CAN_F19R2.FB11`                      EQU 0x400066DC,        4, base=16,    bitRange=11-11
 6997                           ;'CAN_F19R2.FB12`                      EQU 0x400066DC,        4, base=16,    bitRange=12-12
 6998                           ;'CAN_F19R2.FB13`                      EQU 0x400066DC,        4, base=16,    bitRange=13-13
 6999                           ;'CAN_F19R2.FB14`                      EQU 0x400066DC,        4, base=16,    bitRange=14-14
 7000                           ;'CAN_F19R2.FB15`                      EQU 0x400066DC,        4, base=16,    bitRange=15-15
 7001                           ;'CAN_F19R2.FB16`                      EQU 0x400066DC,        4, base=16,    bitRange=16-16
 7002                           ;'CAN_F19R2.FB17`                      EQU 0x400066DC,        4, base=16,    bitRange=17-17
 7003                           ;'CAN_F19R2.FB18`                      EQU 0x400066DC,        4, base=16,    bitRange=18-18
 7004                           ;'CAN_F19R2.FB19`                      EQU 0x400066DC,        4, base=16,    bitRange=19-19
 7005                           ;'CAN_F19R2.FB20`                      EQU 0x400066DC,        4, base=16,    bitRange=20-20
 7006                           ;'CAN_F19R2.FB21`                      EQU 0x400066DC,        4, base=16,    bitRange=21-21
 7007                           ;'CAN_F19R2.FB22`                      EQU 0x400066DC,        4, base=16,    bitRange=22-22
 7008                           ;'CAN_F19R2.FB23`                      EQU 0x400066DC,        4, base=16,    bitRange=23-23
 7009                           ;'CAN_F19R2.FB24`                      EQU 0x400066DC,        4, base=16,    bitRange=24-24
 7010                           ;'CAN_F19R2.FB25`                      EQU 0x400066DC,        4, base=16,    bitRange=25-25
 7011                           ;'CAN_F19R2.FB26`                      EQU 0x400066DC,        4, base=16,    bitRange=26-26
 7012                           ;'CAN_F19R2.FB27`                      EQU 0x400066DC,        4, base=16,    bitRange=27-27
 7013                           ;'CAN_F19R2.FB28`                      EQU 0x400066DC,        4, base=16,    bitRange=28-28
 7014                           ;'CAN_F19R2.FB29`                      EQU 0x400066DC,        4, base=16,    bitRange=29-29
 7015                           ;'CAN_F19R2.FB30`                      EQU 0x400066DC,        4, base=16,    bitRange=30-30
 7016                           ;'CAN_F19R2.FB31`                      EQU 0x400066DC,        4, base=16,    bitRange=31-31
 7017                           
 7018                           ;CAN_F20R1                           EQU 0x400066E0
 7019                           ;'CAN_F20R1.FB0`                       EQU 0x400066E0,        4, base=16,    bitRange=0-0
 7020                           ;'CAN_F20R1.FB1`                       EQU 0x400066E0,        4, base=16,    bitRange=1-1
 7021                           ;'CAN_F20R1.FB2`                       EQU 0x400066E0,        4, base=16,    bitRange=2-2
 7022                           ;'CAN_F20R1.FB3`                       EQU 0x400066E0,        4, base=16,    bitRange=3-3
 7023                           ;'CAN_F20R1.FB4`                       EQU 0x400066E0,        4, base=16,    bitRange=4-4
 7024                           ;'CAN_F20R1.FB5`                       EQU 0x400066E0,        4, base=16,    bitRange=5-5
 7025                           ;'CAN_F20R1.FB6`                       EQU 0x400066E0,        4, base=16,    bitRange=6-6
 7026                           ;'CAN_F20R1.FB7`                       EQU 0x400066E0,        4, base=16,    bitRange=7-7
 7027                           ;'CAN_F20R1.FB8`                       EQU 0x400066E0,        4, base=16,    bitRange=8-8
 7028                           ;'CAN_F20R1.FB9`                       EQU 0x400066E0,        4, base=16,    bitRange=9-9
 7029                           ;'CAN_F20R1.FB10`                      EQU 0x400066E0,        4, base=16,    bitRange=10-10
 7030                           ;'CAN_F20R1.FB11`                      EQU 0x400066E0,        4, base=16,    bitRange=11-11
 7031                           ;'CAN_F20R1.FB12`                      EQU 0x400066E0,        4, base=16,    bitRange=12-12
 7032                           ;'CAN_F20R1.FB13`                      EQU 0x400066E0,        4, base=16,    bitRange=13-13
 7033                           ;'CAN_F20R1.FB14`                      EQU 0x400066E0,        4, base=16,    bitRange=14-14
 7034                           ;'CAN_F20R1.FB15`                      EQU 0x400066E0,        4, base=16,    bitRange=15-15
 7035                           ;'CAN_F20R1.FB16`                      EQU 0x400066E0,        4, base=16,    bitRange=16-16
 7036                           ;'CAN_F20R1.FB17`                      EQU 0x400066E0,        4, base=16,    bitRange=17-17
 7037                           ;'CAN_F20R1.FB18`                      EQU 0x400066E0,        4, base=16,    bitRange=18-18
 7038                           ;'CAN_F20R1.FB19`                      EQU 0x400066E0,        4, base=16,    bitRange=19-19
 7039                           ;'CAN_F20R1.FB20`                      EQU 0x400066E0,        4, base=16,    bitRange=20-20
 7040                           ;'CAN_F20R1.FB21`                      EQU 0x400066E0,        4, base=16,    bitRange=21-21
 7041                           ;'CAN_F20R1.FB22`                      EQU 0x400066E0,        4, base=16,    bitRange=22-22
 7042                           ;'CAN_F20R1.FB23`                      EQU 0x400066E0,        4, base=16,    bitRange=23-23
 7043                           ;'CAN_F20R1.FB24`                      EQU 0x400066E0,        4, base=16,    bitRange=24-24
 7044                           ;'CAN_F20R1.FB25`                      EQU 0x400066E0,        4, base=16,    bitRange=25-25
 7045                           ;'CAN_F20R1.FB26`                      EQU 0x400066E0,        4, base=16,    bitRange=26-26
 7046                           ;'CAN_F20R1.FB27`                      EQU 0x400066E0,        4, base=16,    bitRange=27-27
 7047                           ;'CAN_F20R1.FB28`                      EQU 0x400066E0,        4, base=16,    bitRange=28-28
 7048                           ;'CAN_F20R1.FB29`                      EQU 0x400066E0,        4, base=16,    bitRange=29-29
 7049                           ;'CAN_F20R1.FB30`                      EQU 0x400066E0,        4, base=16,    bitRange=30-30
 7050                           ;'CAN_F20R1.FB31`                      EQU 0x400066E0,        4, base=16,    bitRange=31-31
 7051                           
 7052                           ;CAN_F20R2                           EQU 0x400066E4
 7053                           ;'CAN_F20R2.FB0`                       EQU 0x400066E4,        4, base=16,    bitRange=0-0
 7054                           ;'CAN_F20R2.FB1`                       EQU 0x400066E4,        4, base=16,    bitRange=1-1
 7055                           ;'CAN_F20R2.FB2`                       EQU 0x400066E4,        4, base=16,    bitRange=2-2
 7056                           ;'CAN_F20R2.FB3`                       EQU 0x400066E4,        4, base=16,    bitRange=3-3
 7057                           ;'CAN_F20R2.FB4`                       EQU 0x400066E4,        4, base=16,    bitRange=4-4
 7058                           ;'CAN_F20R2.FB5`                       EQU 0x400066E4,        4, base=16,    bitRange=5-5
 7059                           ;'CAN_F20R2.FB6`                       EQU 0x400066E4,        4, base=16,    bitRange=6-6
 7060                           ;'CAN_F20R2.FB7`                       EQU 0x400066E4,        4, base=16,    bitRange=7-7
 7061                           ;'CAN_F20R2.FB8`                       EQU 0x400066E4,        4, base=16,    bitRange=8-8
 7062                           ;'CAN_F20R2.FB9`                       EQU 0x400066E4,        4, base=16,    bitRange=9-9
 7063                           ;'CAN_F20R2.FB10`                      EQU 0x400066E4,        4, base=16,    bitRange=10-10
 7064                           ;'CAN_F20R2.FB11`                      EQU 0x400066E4,        4, base=16,    bitRange=11-11
 7065                           ;'CAN_F20R2.FB12`                      EQU 0x400066E4,        4, base=16,    bitRange=12-12
 7066                           ;'CAN_F20R2.FB13`                      EQU 0x400066E4,        4, base=16,    bitRange=13-13
 7067                           ;'CAN_F20R2.FB14`                      EQU 0x400066E4,        4, base=16,    bitRange=14-14
 7068                           ;'CAN_F20R2.FB15`                      EQU 0x400066E4,        4, base=16,    bitRange=15-15
 7069                           ;'CAN_F20R2.FB16`                      EQU 0x400066E4,        4, base=16,    bitRange=16-16
 7070                           ;'CAN_F20R2.FB17`                      EQU 0x400066E4,        4, base=16,    bitRange=17-17
 7071                           ;'CAN_F20R2.FB18`                      EQU 0x400066E4,        4, base=16,    bitRange=18-18
 7072                           ;'CAN_F20R2.FB19`                      EQU 0x400066E4,        4, base=16,    bitRange=19-19
 7073                           ;'CAN_F20R2.FB20`                      EQU 0x400066E4,        4, base=16,    bitRange=20-20
 7074                           ;'CAN_F20R2.FB21`                      EQU 0x400066E4,        4, base=16,    bitRange=21-21
 7075                           ;'CAN_F20R2.FB22`                      EQU 0x400066E4,        4, base=16,    bitRange=22-22
 7076                           ;'CAN_F20R2.FB23`                      EQU 0x400066E4,        4, base=16,    bitRange=23-23
 7077                           ;'CAN_F20R2.FB24`                      EQU 0x400066E4,        4, base=16,    bitRange=24-24
 7078                           ;'CAN_F20R2.FB25`                      EQU 0x400066E4,        4, base=16,    bitRange=25-25
 7079                           ;'CAN_F20R2.FB26`                      EQU 0x400066E4,        4, base=16,    bitRange=26-26
 7080                           ;'CAN_F20R2.FB27`                      EQU 0x400066E4,        4, base=16,    bitRange=27-27
 7081                           ;'CAN_F20R2.FB28`                      EQU 0x400066E4,        4, base=16,    bitRange=28-28
 7082                           ;'CAN_F20R2.FB29`                      EQU 0x400066E4,        4, base=16,    bitRange=29-29
 7083                           ;'CAN_F20R2.FB30`                      EQU 0x400066E4,        4, base=16,    bitRange=30-30
 7084                           ;'CAN_F20R2.FB31`                      EQU 0x400066E4,        4, base=16,    bitRange=31-31
 7085                           
 7086                           ;CAN_F21R1                           EQU 0x400066E8
 7087                           ;'CAN_F21R1.FB0`                       EQU 0x400066E8,        4, base=16,    bitRange=0-0
 7088                           ;'CAN_F21R1.FB1`                       EQU 0x400066E8,        4, base=16,    bitRange=1-1
 7089                           ;'CAN_F21R1.FB2`                       EQU 0x400066E8,        4, base=16,    bitRange=2-2
 7090                           ;'CAN_F21R1.FB3`                       EQU 0x400066E8,        4, base=16,    bitRange=3-3
 7091                           ;'CAN_F21R1.FB4`                       EQU 0x400066E8,        4, base=16,    bitRange=4-4
 7092                           ;'CAN_F21R1.FB5`                       EQU 0x400066E8,        4, base=16,    bitRange=5-5
 7093                           ;'CAN_F21R1.FB6`                       EQU 0x400066E8,        4, base=16,    bitRange=6-6
 7094                           ;'CAN_F21R1.FB7`                       EQU 0x400066E8,        4, base=16,    bitRange=7-7
 7095                           ;'CAN_F21R1.FB8`                       EQU 0x400066E8,        4, base=16,    bitRange=8-8
 7096                           ;'CAN_F21R1.FB9`                       EQU 0x400066E8,        4, base=16,    bitRange=9-9
 7097                           ;'CAN_F21R1.FB10`                      EQU 0x400066E8,        4, base=16,    bitRange=10-10
 7098                           ;'CAN_F21R1.FB11`                      EQU 0x400066E8,        4, base=16,    bitRange=11-11
 7099                           ;'CAN_F21R1.FB12`                      EQU 0x400066E8,        4, base=16,    bitRange=12-12
 7100                           ;'CAN_F21R1.FB13`                      EQU 0x400066E8,        4, base=16,    bitRange=13-13
 7101                           ;'CAN_F21R1.FB14`                      EQU 0x400066E8,        4, base=16,    bitRange=14-14
 7102                           ;'CAN_F21R1.FB15`                      EQU 0x400066E8,        4, base=16,    bitRange=15-15
 7103                           ;'CAN_F21R1.FB16`                      EQU 0x400066E8,        4, base=16,    bitRange=16-16
 7104                           ;'CAN_F21R1.FB17`                      EQU 0x400066E8,        4, base=16,    bitRange=17-17
 7105                           ;'CAN_F21R1.FB18`                      EQU 0x400066E8,        4, base=16,    bitRange=18-18
 7106                           ;'CAN_F21R1.FB19`                      EQU 0x400066E8,        4, base=16,    bitRange=19-19
 7107                           ;'CAN_F21R1.FB20`                      EQU 0x400066E8,        4, base=16,    bitRange=20-20
 7108                           ;'CAN_F21R1.FB21`                      EQU 0x400066E8,        4, base=16,    bitRange=21-21
 7109                           ;'CAN_F21R1.FB22`                      EQU 0x400066E8,        4, base=16,    bitRange=22-22
 7110                           ;'CAN_F21R1.FB23`                      EQU 0x400066E8,        4, base=16,    bitRange=23-23
 7111                           ;'CAN_F21R1.FB24`                      EQU 0x400066E8,        4, base=16,    bitRange=24-24
 7112                           ;'CAN_F21R1.FB25`                      EQU 0x400066E8,        4, base=16,    bitRange=25-25
 7113                           ;'CAN_F21R1.FB26`                      EQU 0x400066E8,        4, base=16,    bitRange=26-26
 7114                           ;'CAN_F21R1.FB27`                      EQU 0x400066E8,        4, base=16,    bitRange=27-27
 7115                           ;'CAN_F21R1.FB28`                      EQU 0x400066E8,        4, base=16,    bitRange=28-28
 7116                           ;'CAN_F21R1.FB29`                      EQU 0x400066E8,        4, base=16,    bitRange=29-29
 7117                           ;'CAN_F21R1.FB30`                      EQU 0x400066E8,        4, base=16,    bitRange=30-30
 7118                           ;'CAN_F21R1.FB31`                      EQU 0x400066E8,        4, base=16,    bitRange=31-31
 7119                           
 7120                           ;CAN_F21R2                           EQU 0x400066EC
 7121                           ;'CAN_F21R2.FB0`                       EQU 0x400066EC,        4, base=16,    bitRange=0-0
 7122                           ;'CAN_F21R2.FB1`                       EQU 0x400066EC,        4, base=16,    bitRange=1-1
 7123                           ;'CAN_F21R2.FB2`                       EQU 0x400066EC,        4, base=16,    bitRange=2-2
 7124                           ;'CAN_F21R2.FB3`                       EQU 0x400066EC,        4, base=16,    bitRange=3-3
 7125                           ;'CAN_F21R2.FB4`                       EQU 0x400066EC,        4, base=16,    bitRange=4-4
 7126                           ;'CAN_F21R2.FB5`                       EQU 0x400066EC,        4, base=16,    bitRange=5-5
 7127                           ;'CAN_F21R2.FB6`                       EQU 0x400066EC,        4, base=16,    bitRange=6-6
 7128                           ;'CAN_F21R2.FB7`                       EQU 0x400066EC,        4, base=16,    bitRange=7-7
 7129                           ;'CAN_F21R2.FB8`                       EQU 0x400066EC,        4, base=16,    bitRange=8-8
 7130                           ;'CAN_F21R2.FB9`                       EQU 0x400066EC,        4, base=16,    bitRange=9-9
 7131                           ;'CAN_F21R2.FB10`                      EQU 0x400066EC,        4, base=16,    bitRange=10-10
 7132                           ;'CAN_F21R2.FB11`                      EQU 0x400066EC,        4, base=16,    bitRange=11-11
 7133                           ;'CAN_F21R2.FB12`                      EQU 0x400066EC,        4, base=16,    bitRange=12-12
 7134                           ;'CAN_F21R2.FB13`                      EQU 0x400066EC,        4, base=16,    bitRange=13-13
 7135                           ;'CAN_F21R2.FB14`                      EQU 0x400066EC,        4, base=16,    bitRange=14-14
 7136                           ;'CAN_F21R2.FB15`                      EQU 0x400066EC,        4, base=16,    bitRange=15-15
 7137                           ;'CAN_F21R2.FB16`                      EQU 0x400066EC,        4, base=16,    bitRange=16-16
 7138                           ;'CAN_F21R2.FB17`                      EQU 0x400066EC,        4, base=16,    bitRange=17-17
 7139                           ;'CAN_F21R2.FB18`                      EQU 0x400066EC,        4, base=16,    bitRange=18-18
 7140                           ;'CAN_F21R2.FB19`                      EQU 0x400066EC,        4, base=16,    bitRange=19-19
 7141                           ;'CAN_F21R2.FB20`                      EQU 0x400066EC,        4, base=16,    bitRange=20-20
 7142                           ;'CAN_F21R2.FB21`                      EQU 0x400066EC,        4, base=16,    bitRange=21-21
 7143                           ;'CAN_F21R2.FB22`                      EQU 0x400066EC,        4, base=16,    bitRange=22-22
 7144                           ;'CAN_F21R2.FB23`                      EQU 0x400066EC,        4, base=16,    bitRange=23-23
 7145                           ;'CAN_F21R2.FB24`                      EQU 0x400066EC,        4, base=16,    bitRange=24-24
 7146                           ;'CAN_F21R2.FB25`                      EQU 0x400066EC,        4, base=16,    bitRange=25-25
 7147                           ;'CAN_F21R2.FB26`                      EQU 0x400066EC,        4, base=16,    bitRange=26-26
 7148                           ;'CAN_F21R2.FB27`                      EQU 0x400066EC,        4, base=16,    bitRange=27-27
 7149                           ;'CAN_F21R2.FB28`                      EQU 0x400066EC,        4, base=16,    bitRange=28-28
 7150                           ;'CAN_F21R2.FB29`                      EQU 0x400066EC,        4, base=16,    bitRange=29-29
 7151                           ;'CAN_F21R2.FB30`                      EQU 0x400066EC,        4, base=16,    bitRange=30-30
 7152                           ;'CAN_F21R2.FB31`                      EQU 0x400066EC,        4, base=16,    bitRange=31-31
 7153                           
 7154                           ;CAN_F22R1                           EQU 0x400066F0
 7155                           ;'CAN_F22R1.FB0`                       EQU 0x400066F0,        4, base=16,    bitRange=0-0
 7156                           ;'CAN_F22R1.FB1`                       EQU 0x400066F0,        4, base=16,    bitRange=1-1
 7157                           ;'CAN_F22R1.FB2`                       EQU 0x400066F0,        4, base=16,    bitRange=2-2
 7158                           ;'CAN_F22R1.FB3`                       EQU 0x400066F0,        4, base=16,    bitRange=3-3
 7159                           ;'CAN_F22R1.FB4`                       EQU 0x400066F0,        4, base=16,    bitRange=4-4
 7160                           ;'CAN_F22R1.FB5`                       EQU 0x400066F0,        4, base=16,    bitRange=5-5
 7161                           ;'CAN_F22R1.FB6`                       EQU 0x400066F0,        4, base=16,    bitRange=6-6
 7162                           ;'CAN_F22R1.FB7`                       EQU 0x400066F0,        4, base=16,    bitRange=7-7
 7163                           ;'CAN_F22R1.FB8`                       EQU 0x400066F0,        4, base=16,    bitRange=8-8
 7164                           ;'CAN_F22R1.FB9`                       EQU 0x400066F0,        4, base=16,    bitRange=9-9
 7165                           ;'CAN_F22R1.FB10`                      EQU 0x400066F0,        4, base=16,    bitRange=10-10
 7166                           ;'CAN_F22R1.FB11`                      EQU 0x400066F0,        4, base=16,    bitRange=11-11
 7167                           ;'CAN_F22R1.FB12`                      EQU 0x400066F0,        4, base=16,    bitRange=12-12
 7168                           ;'CAN_F22R1.FB13`                      EQU 0x400066F0,        4, base=16,    bitRange=13-13
 7169                           ;'CAN_F22R1.FB14`                      EQU 0x400066F0,        4, base=16,    bitRange=14-14
 7170                           ;'CAN_F22R1.FB15`                      EQU 0x400066F0,        4, base=16,    bitRange=15-15
 7171                           ;'CAN_F22R1.FB16`                      EQU 0x400066F0,        4, base=16,    bitRange=16-16
 7172                           ;'CAN_F22R1.FB17`                      EQU 0x400066F0,        4, base=16,    bitRange=17-17
 7173                           ;'CAN_F22R1.FB18`                      EQU 0x400066F0,        4, base=16,    bitRange=18-18
 7174                           ;'CAN_F22R1.FB19`                      EQU 0x400066F0,        4, base=16,    bitRange=19-19
 7175                           ;'CAN_F22R1.FB20`                      EQU 0x400066F0,        4, base=16,    bitRange=20-20
 7176                           ;'CAN_F22R1.FB21`                      EQU 0x400066F0,        4, base=16,    bitRange=21-21
 7177                           ;'CAN_F22R1.FB22`                      EQU 0x400066F0,        4, base=16,    bitRange=22-22
 7178                           ;'CAN_F22R1.FB23`                      EQU 0x400066F0,        4, base=16,    bitRange=23-23
 7179                           ;'CAN_F22R1.FB24`                      EQU 0x400066F0,        4, base=16,    bitRange=24-24
 7180                           ;'CAN_F22R1.FB25`                      EQU 0x400066F0,        4, base=16,    bitRange=25-25
 7181                           ;'CAN_F22R1.FB26`                      EQU 0x400066F0,        4, base=16,    bitRange=26-26
 7182                           ;'CAN_F22R1.FB27`                      EQU 0x400066F0,        4, base=16,    bitRange=27-27
 7183                           ;'CAN_F22R1.FB28`                      EQU 0x400066F0,        4, base=16,    bitRange=28-28
 7184                           ;'CAN_F22R1.FB29`                      EQU 0x400066F0,        4, base=16,    bitRange=29-29
 7185                           ;'CAN_F22R1.FB30`                      EQU 0x400066F0,        4, base=16,    bitRange=30-30
 7186                           ;'CAN_F22R1.FB31`                      EQU 0x400066F0,        4, base=16,    bitRange=31-31
 7187                           
 7188                           ;CAN_F22R2                           EQU 0x400066F4
 7189                           ;'CAN_F22R2.FB0`                       EQU 0x400066F4,        4, base=16,    bitRange=0-0
 7190                           ;'CAN_F22R2.FB1`                       EQU 0x400066F4,        4, base=16,    bitRange=1-1
 7191                           ;'CAN_F22R2.FB2`                       EQU 0x400066F4,        4, base=16,    bitRange=2-2
 7192                           ;'CAN_F22R2.FB3`                       EQU 0x400066F4,        4, base=16,    bitRange=3-3
 7193                           ;'CAN_F22R2.FB4`                       EQU 0x400066F4,        4, base=16,    bitRange=4-4
 7194                           ;'CAN_F22R2.FB5`                       EQU 0x400066F4,        4, base=16,    bitRange=5-5
 7195                           ;'CAN_F22R2.FB6`                       EQU 0x400066F4,        4, base=16,    bitRange=6-6
 7196                           ;'CAN_F22R2.FB7`                       EQU 0x400066F4,        4, base=16,    bitRange=7-7
 7197                           ;'CAN_F22R2.FB8`                       EQU 0x400066F4,        4, base=16,    bitRange=8-8
 7198                           ;'CAN_F22R2.FB9`                       EQU 0x400066F4,        4, base=16,    bitRange=9-9
 7199                           ;'CAN_F22R2.FB10`                      EQU 0x400066F4,        4, base=16,    bitRange=10-10
 7200                           ;'CAN_F22R2.FB11`                      EQU 0x400066F4,        4, base=16,    bitRange=11-11
 7201                           ;'CAN_F22R2.FB12`                      EQU 0x400066F4,        4, base=16,    bitRange=12-12
 7202                           ;'CAN_F22R2.FB13`                      EQU 0x400066F4,        4, base=16,    bitRange=13-13
 7203                           ;'CAN_F22R2.FB14`                      EQU 0x400066F4,        4, base=16,    bitRange=14-14
 7204                           ;'CAN_F22R2.FB15`                      EQU 0x400066F4,        4, base=16,    bitRange=15-15
 7205                           ;'CAN_F22R2.FB16`                      EQU 0x400066F4,        4, base=16,    bitRange=16-16
 7206                           ;'CAN_F22R2.FB17`                      EQU 0x400066F4,        4, base=16,    bitRange=17-17
 7207                           ;'CAN_F22R2.FB18`                      EQU 0x400066F4,        4, base=16,    bitRange=18-18
 7208                           ;'CAN_F22R2.FB19`                      EQU 0x400066F4,        4, base=16,    bitRange=19-19
 7209                           ;'CAN_F22R2.FB20`                      EQU 0x400066F4,        4, base=16,    bitRange=20-20
 7210                           ;'CAN_F22R2.FB21`                      EQU 0x400066F4,        4, base=16,    bitRange=21-21
 7211                           ;'CAN_F22R2.FB22`                      EQU 0x400066F4,        4, base=16,    bitRange=22-22
 7212                           ;'CAN_F22R2.FB23`                      EQU 0x400066F4,        4, base=16,    bitRange=23-23
 7213                           ;'CAN_F22R2.FB24`                      EQU 0x400066F4,        4, base=16,    bitRange=24-24
 7214                           ;'CAN_F22R2.FB25`                      EQU 0x400066F4,        4, base=16,    bitRange=25-25
 7215                           ;'CAN_F22R2.FB26`                      EQU 0x400066F4,        4, base=16,    bitRange=26-26
 7216                           ;'CAN_F22R2.FB27`                      EQU 0x400066F4,        4, base=16,    bitRange=27-27
 7217                           ;'CAN_F22R2.FB28`                      EQU 0x400066F4,        4, base=16,    bitRange=28-28
 7218                           ;'CAN_F22R2.FB29`                      EQU 0x400066F4,        4, base=16,    bitRange=29-29
 7219                           ;'CAN_F22R2.FB30`                      EQU 0x400066F4,        4, base=16,    bitRange=30-30
 7220                           ;'CAN_F22R2.FB31`                      EQU 0x400066F4,        4, base=16,    bitRange=31-31
 7221                           
 7222                           ;CAN_F23R1                           EQU 0x400066F8
 7223                           ;'CAN_F23R1.FB0`                       EQU 0x400066F8,        4, base=16,    bitRange=0-0
 7224                           ;'CAN_F23R1.FB1`                       EQU 0x400066F8,        4, base=16,    bitRange=1-1
 7225                           ;'CAN_F23R1.FB2`                       EQU 0x400066F8,        4, base=16,    bitRange=2-2
 7226                           ;'CAN_F23R1.FB3`                       EQU 0x400066F8,        4, base=16,    bitRange=3-3
 7227                           ;'CAN_F23R1.FB4`                       EQU 0x400066F8,        4, base=16,    bitRange=4-4
 7228                           ;'CAN_F23R1.FB5`                       EQU 0x400066F8,        4, base=16,    bitRange=5-5
 7229                           ;'CAN_F23R1.FB6`                       EQU 0x400066F8,        4, base=16,    bitRange=6-6
 7230                           ;'CAN_F23R1.FB7`                       EQU 0x400066F8,        4, base=16,    bitRange=7-7
 7231                           ;'CAN_F23R1.FB8`                       EQU 0x400066F8,        4, base=16,    bitRange=8-8
 7232                           ;'CAN_F23R1.FB9`                       EQU 0x400066F8,        4, base=16,    bitRange=9-9
 7233                           ;'CAN_F23R1.FB10`                      EQU 0x400066F8,        4, base=16,    bitRange=10-10
 7234                           ;'CAN_F23R1.FB11`                      EQU 0x400066F8,        4, base=16,    bitRange=11-11
 7235                           ;'CAN_F23R1.FB12`                      EQU 0x400066F8,        4, base=16,    bitRange=12-12
 7236                           ;'CAN_F23R1.FB13`                      EQU 0x400066F8,        4, base=16,    bitRange=13-13
 7237                           ;'CAN_F23R1.FB14`                      EQU 0x400066F8,        4, base=16,    bitRange=14-14
 7238                           ;'CAN_F23R1.FB15`                      EQU 0x400066F8,        4, base=16,    bitRange=15-15
 7239                           ;'CAN_F23R1.FB16`                      EQU 0x400066F8,        4, base=16,    bitRange=16-16
 7240                           ;'CAN_F23R1.FB17`                      EQU 0x400066F8,        4, base=16,    bitRange=17-17
 7241                           ;'CAN_F23R1.FB18`                      EQU 0x400066F8,        4, base=16,    bitRange=18-18
 7242                           ;'CAN_F23R1.FB19`                      EQU 0x400066F8,        4, base=16,    bitRange=19-19
 7243                           ;'CAN_F23R1.FB20`                      EQU 0x400066F8,        4, base=16,    bitRange=20-20
 7244                           ;'CAN_F23R1.FB21`                      EQU 0x400066F8,        4, base=16,    bitRange=21-21
 7245                           ;'CAN_F23R1.FB22`                      EQU 0x400066F8,        4, base=16,    bitRange=22-22
 7246                           ;'CAN_F23R1.FB23`                      EQU 0x400066F8,        4, base=16,    bitRange=23-23
 7247                           ;'CAN_F23R1.FB24`                      EQU 0x400066F8,        4, base=16,    bitRange=24-24
 7248                           ;'CAN_F23R1.FB25`                      EQU 0x400066F8,        4, base=16,    bitRange=25-25
 7249                           ;'CAN_F23R1.FB26`                      EQU 0x400066F8,        4, base=16,    bitRange=26-26
 7250                           ;'CAN_F23R1.FB27`                      EQU 0x400066F8,        4, base=16,    bitRange=27-27
 7251                           ;'CAN_F23R1.FB28`                      EQU 0x400066F8,        4, base=16,    bitRange=28-28
 7252                           ;'CAN_F23R1.FB29`                      EQU 0x400066F8,        4, base=16,    bitRange=29-29
 7253                           ;'CAN_F23R1.FB30`                      EQU 0x400066F8,        4, base=16,    bitRange=30-30
 7254                           ;'CAN_F23R1.FB31`                      EQU 0x400066F8,        4, base=16,    bitRange=31-31
 7255                           
 7256                           ;CAN_F23R2                           EQU 0x400066FC
 7257                           ;'CAN_F23R2.FB0`                       EQU 0x400066FC,        4, base=16,    bitRange=0-0
 7258                           ;'CAN_F23R2.FB1`                       EQU 0x400066FC,        4, base=16,    bitRange=1-1
 7259                           ;'CAN_F23R2.FB2`                       EQU 0x400066FC,        4, base=16,    bitRange=2-2
 7260                           ;'CAN_F23R2.FB3`                       EQU 0x400066FC,        4, base=16,    bitRange=3-3
 7261                           ;'CAN_F23R2.FB4`                       EQU 0x400066FC,        4, base=16,    bitRange=4-4
 7262                           ;'CAN_F23R2.FB5`                       EQU 0x400066FC,        4, base=16,    bitRange=5-5
 7263                           ;'CAN_F23R2.FB6`                       EQU 0x400066FC,        4, base=16,    bitRange=6-6
 7264                           ;'CAN_F23R2.FB7`                       EQU 0x400066FC,        4, base=16,    bitRange=7-7
 7265                           ;'CAN_F23R2.FB8`                       EQU 0x400066FC,        4, base=16,    bitRange=8-8
 7266                           ;'CAN_F23R2.FB9`                       EQU 0x400066FC,        4, base=16,    bitRange=9-9
 7267                           ;'CAN_F23R2.FB10`                      EQU 0x400066FC,        4, base=16,    bitRange=10-10
 7268                           ;'CAN_F23R2.FB11`                      EQU 0x400066FC,        4, base=16,    bitRange=11-11
 7269                           ;'CAN_F23R2.FB12`                      EQU 0x400066FC,        4, base=16,    bitRange=12-12
 7270                           ;'CAN_F23R2.FB13`                      EQU 0x400066FC,        4, base=16,    bitRange=13-13
 7271                           ;'CAN_F23R2.FB14`                      EQU 0x400066FC,        4, base=16,    bitRange=14-14
 7272                           ;'CAN_F23R2.FB15`                      EQU 0x400066FC,        4, base=16,    bitRange=15-15
 7273                           ;'CAN_F23R2.FB16`                      EQU 0x400066FC,        4, base=16,    bitRange=16-16
 7274                           ;'CAN_F23R2.FB17`                      EQU 0x400066FC,        4, base=16,    bitRange=17-17
 7275                           ;'CAN_F23R2.FB18`                      EQU 0x400066FC,        4, base=16,    bitRange=18-18
 7276                           ;'CAN_F23R2.FB19`                      EQU 0x400066FC,        4, base=16,    bitRange=19-19
 7277                           ;'CAN_F23R2.FB20`                      EQU 0x400066FC,        4, base=16,    bitRange=20-20
 7278                           ;'CAN_F23R2.FB21`                      EQU 0x400066FC,        4, base=16,    bitRange=21-21
 7279                           ;'CAN_F23R2.FB22`                      EQU 0x400066FC,        4, base=16,    bitRange=22-22
 7280                           ;'CAN_F23R2.FB23`                      EQU 0x400066FC,        4, base=16,    bitRange=23-23
 7281                           ;'CAN_F23R2.FB24`                      EQU 0x400066FC,        4, base=16,    bitRange=24-24
 7282                           ;'CAN_F23R2.FB25`                      EQU 0x400066FC,        4, base=16,    bitRange=25-25
 7283                           ;'CAN_F23R2.FB26`                      EQU 0x400066FC,        4, base=16,    bitRange=26-26
 7284                           ;'CAN_F23R2.FB27`                      EQU 0x400066FC,        4, base=16,    bitRange=27-27
 7285                           ;'CAN_F23R2.FB28`                      EQU 0x400066FC,        4, base=16,    bitRange=28-28
 7286                           ;'CAN_F23R2.FB29`                      EQU 0x400066FC,        4, base=16,    bitRange=29-29
 7287                           ;'CAN_F23R2.FB30`                      EQU 0x400066FC,        4, base=16,    bitRange=30-30
 7288                           ;'CAN_F23R2.FB31`                      EQU 0x400066FC,        4, base=16,    bitRange=31-31
 7289                           
 7290                           ;CAN_F24R1                           EQU 0x40006700
 7291                           ;'CAN_F24R1.FB0`                       EQU 0x40006700,        4, base=16,    bitRange=0-0
 7292                           ;'CAN_F24R1.FB1`                       EQU 0x40006700,        4, base=16,    bitRange=1-1
 7293                           ;'CAN_F24R1.FB2`                       EQU 0x40006700,        4, base=16,    bitRange=2-2
 7294                           ;'CAN_F24R1.FB3`                       EQU 0x40006700,        4, base=16,    bitRange=3-3
 7295                           ;'CAN_F24R1.FB4`                       EQU 0x40006700,        4, base=16,    bitRange=4-4
 7296                           ;'CAN_F24R1.FB5`                       EQU 0x40006700,        4, base=16,    bitRange=5-5
 7297                           ;'CAN_F24R1.FB6`                       EQU 0x40006700,        4, base=16,    bitRange=6-6
 7298                           ;'CAN_F24R1.FB7`                       EQU 0x40006700,        4, base=16,    bitRange=7-7
 7299                           ;'CAN_F24R1.FB8`                       EQU 0x40006700,        4, base=16,    bitRange=8-8
 7300                           ;'CAN_F24R1.FB9`                       EQU 0x40006700,        4, base=16,    bitRange=9-9
 7301                           ;'CAN_F24R1.FB10`                      EQU 0x40006700,        4, base=16,    bitRange=10-10
 7302                           ;'CAN_F24R1.FB11`                      EQU 0x40006700,        4, base=16,    bitRange=11-11
 7303                           ;'CAN_F24R1.FB12`                      EQU 0x40006700,        4, base=16,    bitRange=12-12
 7304                           ;'CAN_F24R1.FB13`                      EQU 0x40006700,        4, base=16,    bitRange=13-13
 7305                           ;'CAN_F24R1.FB14`                      EQU 0x40006700,        4, base=16,    bitRange=14-14
 7306                           ;'CAN_F24R1.FB15`                      EQU 0x40006700,        4, base=16,    bitRange=15-15
 7307                           ;'CAN_F24R1.FB16`                      EQU 0x40006700,        4, base=16,    bitRange=16-16
 7308                           ;'CAN_F24R1.FB17`                      EQU 0x40006700,        4, base=16,    bitRange=17-17
 7309                           ;'CAN_F24R1.FB18`                      EQU 0x40006700,        4, base=16,    bitRange=18-18
 7310                           ;'CAN_F24R1.FB19`                      EQU 0x40006700,        4, base=16,    bitRange=19-19
 7311                           ;'CAN_F24R1.FB20`                      EQU 0x40006700,        4, base=16,    bitRange=20-20
 7312                           ;'CAN_F24R1.FB21`                      EQU 0x40006700,        4, base=16,    bitRange=21-21
 7313                           ;'CAN_F24R1.FB22`                      EQU 0x40006700,        4, base=16,    bitRange=22-22
 7314                           ;'CAN_F24R1.FB23`                      EQU 0x40006700,        4, base=16,    bitRange=23-23
 7315                           ;'CAN_F24R1.FB24`                      EQU 0x40006700,        4, base=16,    bitRange=24-24
 7316                           ;'CAN_F24R1.FB25`                      EQU 0x40006700,        4, base=16,    bitRange=25-25
 7317                           ;'CAN_F24R1.FB26`                      EQU 0x40006700,        4, base=16,    bitRange=26-26
 7318                           ;'CAN_F24R1.FB27`                      EQU 0x40006700,        4, base=16,    bitRange=27-27
 7319                           ;'CAN_F24R1.FB28`                      EQU 0x40006700,        4, base=16,    bitRange=28-28
 7320                           ;'CAN_F24R1.FB29`                      EQU 0x40006700,        4, base=16,    bitRange=29-29
 7321                           ;'CAN_F24R1.FB30`                      EQU 0x40006700,        4, base=16,    bitRange=30-30
 7322                           ;'CAN_F24R1.FB31`                      EQU 0x40006700,        4, base=16,    bitRange=31-31
 7323                           
 7324                           ;CAN_F24R2                           EQU 0x40006704
 7325                           ;'CAN_F24R2.FB0`                       EQU 0x40006704,        4, base=16,    bitRange=0-0
 7326                           ;'CAN_F24R2.FB1`                       EQU 0x40006704,        4, base=16,    bitRange=1-1
 7327                           ;'CAN_F24R2.FB2`                       EQU 0x40006704,        4, base=16,    bitRange=2-2
 7328                           ;'CAN_F24R2.FB3`                       EQU 0x40006704,        4, base=16,    bitRange=3-3
 7329                           ;'CAN_F24R2.FB4`                       EQU 0x40006704,        4, base=16,    bitRange=4-4
 7330                           ;'CAN_F24R2.FB5`                       EQU 0x40006704,        4, base=16,    bitRange=5-5
 7331                           ;'CAN_F24R2.FB6`                       EQU 0x40006704,        4, base=16,    bitRange=6-6
 7332                           ;'CAN_F24R2.FB7`                       EQU 0x40006704,        4, base=16,    bitRange=7-7
 7333                           ;'CAN_F24R2.FB8`                       EQU 0x40006704,        4, base=16,    bitRange=8-8
 7334                           ;'CAN_F24R2.FB9`                       EQU 0x40006704,        4, base=16,    bitRange=9-9
 7335                           ;'CAN_F24R2.FB10`                      EQU 0x40006704,        4, base=16,    bitRange=10-10
 7336                           ;'CAN_F24R2.FB11`                      EQU 0x40006704,        4, base=16,    bitRange=11-11
 7337                           ;'CAN_F24R2.FB12`                      EQU 0x40006704,        4, base=16,    bitRange=12-12
 7338                           ;'CAN_F24R2.FB13`                      EQU 0x40006704,        4, base=16,    bitRange=13-13
 7339                           ;'CAN_F24R2.FB14`                      EQU 0x40006704,        4, base=16,    bitRange=14-14
 7340                           ;'CAN_F24R2.FB15`                      EQU 0x40006704,        4, base=16,    bitRange=15-15
 7341                           ;'CAN_F24R2.FB16`                      EQU 0x40006704,        4, base=16,    bitRange=16-16
 7342                           ;'CAN_F24R2.FB17`                      EQU 0x40006704,        4, base=16,    bitRange=17-17
 7343                           ;'CAN_F24R2.FB18`                      EQU 0x40006704,        4, base=16,    bitRange=18-18
 7344                           ;'CAN_F24R2.FB19`                      EQU 0x40006704,        4, base=16,    bitRange=19-19
 7345                           ;'CAN_F24R2.FB20`                      EQU 0x40006704,        4, base=16,    bitRange=20-20
 7346                           ;'CAN_F24R2.FB21`                      EQU 0x40006704,        4, base=16,    bitRange=21-21
 7347                           ;'CAN_F24R2.FB22`                      EQU 0x40006704,        4, base=16,    bitRange=22-22
 7348                           ;'CAN_F24R2.FB23`                      EQU 0x40006704,        4, base=16,    bitRange=23-23
 7349                           ;'CAN_F24R2.FB24`                      EQU 0x40006704,        4, base=16,    bitRange=24-24
 7350                           ;'CAN_F24R2.FB25`                      EQU 0x40006704,        4, base=16,    bitRange=25-25
 7351                           ;'CAN_F24R2.FB26`                      EQU 0x40006704,        4, base=16,    bitRange=26-26
 7352                           ;'CAN_F24R2.FB27`                      EQU 0x40006704,        4, base=16,    bitRange=27-27
 7353                           ;'CAN_F24R2.FB28`                      EQU 0x40006704,        4, base=16,    bitRange=28-28
 7354                           ;'CAN_F24R2.FB29`                      EQU 0x40006704,        4, base=16,    bitRange=29-29
 7355                           ;'CAN_F24R2.FB30`                      EQU 0x40006704,        4, base=16,    bitRange=30-30
 7356                           ;'CAN_F24R2.FB31`                      EQU 0x40006704,        4, base=16,    bitRange=31-31
 7357                           
 7358                           ;CAN_F25R1                           EQU 0x40006708
 7359                           ;'CAN_F25R1.FB0`                       EQU 0x40006708,        4, base=16,    bitRange=0-0
 7360                           ;'CAN_F25R1.FB1`                       EQU 0x40006708,        4, base=16,    bitRange=1-1
 7361                           ;'CAN_F25R1.FB2`                       EQU 0x40006708,        4, base=16,    bitRange=2-2
 7362                           ;'CAN_F25R1.FB3`                       EQU 0x40006708,        4, base=16,    bitRange=3-3
 7363                           ;'CAN_F25R1.FB4`                       EQU 0x40006708,        4, base=16,    bitRange=4-4
 7364                           ;'CAN_F25R1.FB5`                       EQU 0x40006708,        4, base=16,    bitRange=5-5
 7365                           ;'CAN_F25R1.FB6`                       EQU 0x40006708,        4, base=16,    bitRange=6-6
 7366                           ;'CAN_F25R1.FB7`                       EQU 0x40006708,        4, base=16,    bitRange=7-7
 7367                           ;'CAN_F25R1.FB8`                       EQU 0x40006708,        4, base=16,    bitRange=8-8
 7368                           ;'CAN_F25R1.FB9`                       EQU 0x40006708,        4, base=16,    bitRange=9-9
 7369                           ;'CAN_F25R1.FB10`                      EQU 0x40006708,        4, base=16,    bitRange=10-10
 7370                           ;'CAN_F25R1.FB11`                      EQU 0x40006708,        4, base=16,    bitRange=11-11
 7371                           ;'CAN_F25R1.FB12`                      EQU 0x40006708,        4, base=16,    bitRange=12-12
 7372                           ;'CAN_F25R1.FB13`                      EQU 0x40006708,        4, base=16,    bitRange=13-13
 7373                           ;'CAN_F25R1.FB14`                      EQU 0x40006708,        4, base=16,    bitRange=14-14
 7374                           ;'CAN_F25R1.FB15`                      EQU 0x40006708,        4, base=16,    bitRange=15-15
 7375                           ;'CAN_F25R1.FB16`                      EQU 0x40006708,        4, base=16,    bitRange=16-16
 7376                           ;'CAN_F25R1.FB17`                      EQU 0x40006708,        4, base=16,    bitRange=17-17
 7377                           ;'CAN_F25R1.FB18`                      EQU 0x40006708,        4, base=16,    bitRange=18-18
 7378                           ;'CAN_F25R1.FB19`                      EQU 0x40006708,        4, base=16,    bitRange=19-19
 7379                           ;'CAN_F25R1.FB20`                      EQU 0x40006708,        4, base=16,    bitRange=20-20
 7380                           ;'CAN_F25R1.FB21`                      EQU 0x40006708,        4, base=16,    bitRange=21-21
 7381                           ;'CAN_F25R1.FB22`                      EQU 0x40006708,        4, base=16,    bitRange=22-22
 7382                           ;'CAN_F25R1.FB23`                      EQU 0x40006708,        4, base=16,    bitRange=23-23
 7383                           ;'CAN_F25R1.FB24`                      EQU 0x40006708,        4, base=16,    bitRange=24-24
 7384                           ;'CAN_F25R1.FB25`                      EQU 0x40006708,        4, base=16,    bitRange=25-25
 7385                           ;'CAN_F25R1.FB26`                      EQU 0x40006708,        4, base=16,    bitRange=26-26
 7386                           ;'CAN_F25R1.FB27`                      EQU 0x40006708,        4, base=16,    bitRange=27-27
 7387                           ;'CAN_F25R1.FB28`                      EQU 0x40006708,        4, base=16,    bitRange=28-28
 7388                           ;'CAN_F25R1.FB29`                      EQU 0x40006708,        4, base=16,    bitRange=29-29
 7389                           ;'CAN_F25R1.FB30`                      EQU 0x40006708,        4, base=16,    bitRange=30-30
 7390                           ;'CAN_F25R1.FB31`                      EQU 0x40006708,        4, base=16,    bitRange=31-31
 7391                           
 7392                           ;CAN_F25R2                           EQU 0x4000670C
 7393                           ;'CAN_F25R2.FB0`                       EQU 0x4000670C,        4, base=16,    bitRange=0-0
 7394                           ;'CAN_F25R2.FB1`                       EQU 0x4000670C,        4, base=16,    bitRange=1-1
 7395                           ;'CAN_F25R2.FB2`                       EQU 0x4000670C,        4, base=16,    bitRange=2-2
 7396                           ;'CAN_F25R2.FB3`                       EQU 0x4000670C,        4, base=16,    bitRange=3-3
 7397                           ;'CAN_F25R2.FB4`                       EQU 0x4000670C,        4, base=16,    bitRange=4-4
 7398                           ;'CAN_F25R2.FB5`                       EQU 0x4000670C,        4, base=16,    bitRange=5-5
 7399                           ;'CAN_F25R2.FB6`                       EQU 0x4000670C,        4, base=16,    bitRange=6-6
 7400                           ;'CAN_F25R2.FB7`                       EQU 0x4000670C,        4, base=16,    bitRange=7-7
 7401                           ;'CAN_F25R2.FB8`                       EQU 0x4000670C,        4, base=16,    bitRange=8-8
 7402                           ;'CAN_F25R2.FB9`                       EQU 0x4000670C,        4, base=16,    bitRange=9-9
 7403                           ;'CAN_F25R2.FB10`                      EQU 0x4000670C,        4, base=16,    bitRange=10-10
 7404                           ;'CAN_F25R2.FB11`                      EQU 0x4000670C,        4, base=16,    bitRange=11-11
 7405                           ;'CAN_F25R2.FB12`                      EQU 0x4000670C,        4, base=16,    bitRange=12-12
 7406                           ;'CAN_F25R2.FB13`                      EQU 0x4000670C,        4, base=16,    bitRange=13-13
 7407                           ;'CAN_F25R2.FB14`                      EQU 0x4000670C,        4, base=16,    bitRange=14-14
 7408                           ;'CAN_F25R2.FB15`                      EQU 0x4000670C,        4, base=16,    bitRange=15-15
 7409                           ;'CAN_F25R2.FB16`                      EQU 0x4000670C,        4, base=16,    bitRange=16-16
 7410                           ;'CAN_F25R2.FB17`                      EQU 0x4000670C,        4, base=16,    bitRange=17-17
 7411                           ;'CAN_F25R2.FB18`                      EQU 0x4000670C,        4, base=16,    bitRange=18-18
 7412                           ;'CAN_F25R2.FB19`                      EQU 0x4000670C,        4, base=16,    bitRange=19-19
 7413                           ;'CAN_F25R2.FB20`                      EQU 0x4000670C,        4, base=16,    bitRange=20-20
 7414                           ;'CAN_F25R2.FB21`                      EQU 0x4000670C,        4, base=16,    bitRange=21-21
 7415                           ;'CAN_F25R2.FB22`                      EQU 0x4000670C,        4, base=16,    bitRange=22-22
 7416                           ;'CAN_F25R2.FB23`                      EQU 0x4000670C,        4, base=16,    bitRange=23-23
 7417                           ;'CAN_F25R2.FB24`                      EQU 0x4000670C,        4, base=16,    bitRange=24-24
 7418                           ;'CAN_F25R2.FB25`                      EQU 0x4000670C,        4, base=16,    bitRange=25-25
 7419                           ;'CAN_F25R2.FB26`                      EQU 0x4000670C,        4, base=16,    bitRange=26-26
 7420                           ;'CAN_F25R2.FB27`                      EQU 0x4000670C,        4, base=16,    bitRange=27-27
 7421                           ;'CAN_F25R2.FB28`                      EQU 0x4000670C,        4, base=16,    bitRange=28-28
 7422                           ;'CAN_F25R2.FB29`                      EQU 0x4000670C,        4, base=16,    bitRange=29-29
 7423                           ;'CAN_F25R2.FB30`                      EQU 0x4000670C,        4, base=16,    bitRange=30-30
 7424                           ;'CAN_F25R2.FB31`                      EQU 0x4000670C,        4, base=16,    bitRange=31-31
 7425                           
 7426                           ;CAN_F26R1                           EQU 0x40006710
 7427                           ;'CAN_F26R1.FB0`                       EQU 0x40006710,        4, base=16,    bitRange=0-0
 7428                           ;'CAN_F26R1.FB1`                       EQU 0x40006710,        4, base=16,    bitRange=1-1
 7429                           ;'CAN_F26R1.FB2`                       EQU 0x40006710,        4, base=16,    bitRange=2-2
 7430                           ;'CAN_F26R1.FB3`                       EQU 0x40006710,        4, base=16,    bitRange=3-3
 7431                           ;'CAN_F26R1.FB4`                       EQU 0x40006710,        4, base=16,    bitRange=4-4
 7432                           ;'CAN_F26R1.FB5`                       EQU 0x40006710,        4, base=16,    bitRange=5-5
 7433                           ;'CAN_F26R1.FB6`                       EQU 0x40006710,        4, base=16,    bitRange=6-6
 7434                           ;'CAN_F26R1.FB7`                       EQU 0x40006710,        4, base=16,    bitRange=7-7
 7435                           ;'CAN_F26R1.FB8`                       EQU 0x40006710,        4, base=16,    bitRange=8-8
 7436                           ;'CAN_F26R1.FB9`                       EQU 0x40006710,        4, base=16,    bitRange=9-9
 7437                           ;'CAN_F26R1.FB10`                      EQU 0x40006710,        4, base=16,    bitRange=10-10
 7438                           ;'CAN_F26R1.FB11`                      EQU 0x40006710,        4, base=16,    bitRange=11-11
 7439                           ;'CAN_F26R1.FB12`                      EQU 0x40006710,        4, base=16,    bitRange=12-12
 7440                           ;'CAN_F26R1.FB13`                      EQU 0x40006710,        4, base=16,    bitRange=13-13
 7441                           ;'CAN_F26R1.FB14`                      EQU 0x40006710,        4, base=16,    bitRange=14-14
 7442                           ;'CAN_F26R1.FB15`                      EQU 0x40006710,        4, base=16,    bitRange=15-15
 7443                           ;'CAN_F26R1.FB16`                      EQU 0x40006710,        4, base=16,    bitRange=16-16
 7444                           ;'CAN_F26R1.FB17`                      EQU 0x40006710,        4, base=16,    bitRange=17-17
 7445                           ;'CAN_F26R1.FB18`                      EQU 0x40006710,        4, base=16,    bitRange=18-18
 7446                           ;'CAN_F26R1.FB19`                      EQU 0x40006710,        4, base=16,    bitRange=19-19
 7447                           ;'CAN_F26R1.FB20`                      EQU 0x40006710,        4, base=16,    bitRange=20-20
 7448                           ;'CAN_F26R1.FB21`                      EQU 0x40006710,        4, base=16,    bitRange=21-21
 7449                           ;'CAN_F26R1.FB22`                      EQU 0x40006710,        4, base=16,    bitRange=22-22
 7450                           ;'CAN_F26R1.FB23`                      EQU 0x40006710,        4, base=16,    bitRange=23-23
 7451                           ;'CAN_F26R1.FB24`                      EQU 0x40006710,        4, base=16,    bitRange=24-24
 7452                           ;'CAN_F26R1.FB25`                      EQU 0x40006710,        4, base=16,    bitRange=25-25
 7453                           ;'CAN_F26R1.FB26`                      EQU 0x40006710,        4, base=16,    bitRange=26-26
 7454                           ;'CAN_F26R1.FB27`                      EQU 0x40006710,        4, base=16,    bitRange=27-27
 7455                           ;'CAN_F26R1.FB28`                      EQU 0x40006710,        4, base=16,    bitRange=28-28
 7456                           ;'CAN_F26R1.FB29`                      EQU 0x40006710,        4, base=16,    bitRange=29-29
 7457                           ;'CAN_F26R1.FB30`                      EQU 0x40006710,        4, base=16,    bitRange=30-30
 7458                           ;'CAN_F26R1.FB31`                      EQU 0x40006710,        4, base=16,    bitRange=31-31
 7459                           
 7460                           ;CAN_F26R2                           EQU 0x40006714
 7461                           ;'CAN_F26R2.FB0`                       EQU 0x40006714,        4, base=16,    bitRange=0-0
 7462                           ;'CAN_F26R2.FB1`                       EQU 0x40006714,        4, base=16,    bitRange=1-1
 7463                           ;'CAN_F26R2.FB2`                       EQU 0x40006714,        4, base=16,    bitRange=2-2
 7464                           ;'CAN_F26R2.FB3`                       EQU 0x40006714,        4, base=16,    bitRange=3-3
 7465                           ;'CAN_F26R2.FB4`                       EQU 0x40006714,        4, base=16,    bitRange=4-4
 7466                           ;'CAN_F26R2.FB5`                       EQU 0x40006714,        4, base=16,    bitRange=5-5
 7467                           ;'CAN_F26R2.FB6`                       EQU 0x40006714,        4, base=16,    bitRange=6-6
 7468                           ;'CAN_F26R2.FB7`                       EQU 0x40006714,        4, base=16,    bitRange=7-7
 7469                           ;'CAN_F26R2.FB8`                       EQU 0x40006714,        4, base=16,    bitRange=8-8
 7470                           ;'CAN_F26R2.FB9`                       EQU 0x40006714,        4, base=16,    bitRange=9-9
 7471                           ;'CAN_F26R2.FB10`                      EQU 0x40006714,        4, base=16,    bitRange=10-10
 7472                           ;'CAN_F26R2.FB11`                      EQU 0x40006714,        4, base=16,    bitRange=11-11
 7473                           ;'CAN_F26R2.FB12`                      EQU 0x40006714,        4, base=16,    bitRange=12-12
 7474                           ;'CAN_F26R2.FB13`                      EQU 0x40006714,        4, base=16,    bitRange=13-13
 7475                           ;'CAN_F26R2.FB14`                      EQU 0x40006714,        4, base=16,    bitRange=14-14
 7476                           ;'CAN_F26R2.FB15`                      EQU 0x40006714,        4, base=16,    bitRange=15-15
 7477                           ;'CAN_F26R2.FB16`                      EQU 0x40006714,        4, base=16,    bitRange=16-16
 7478                           ;'CAN_F26R2.FB17`                      EQU 0x40006714,        4, base=16,    bitRange=17-17
 7479                           ;'CAN_F26R2.FB18`                      EQU 0x40006714,        4, base=16,    bitRange=18-18
 7480                           ;'CAN_F26R2.FB19`                      EQU 0x40006714,        4, base=16,    bitRange=19-19
 7481                           ;'CAN_F26R2.FB20`                      EQU 0x40006714,        4, base=16,    bitRange=20-20
 7482                           ;'CAN_F26R2.FB21`                      EQU 0x40006714,        4, base=16,    bitRange=21-21
 7483                           ;'CAN_F26R2.FB22`                      EQU 0x40006714,        4, base=16,    bitRange=22-22
 7484                           ;'CAN_F26R2.FB23`                      EQU 0x40006714,        4, base=16,    bitRange=23-23
 7485                           ;'CAN_F26R2.FB24`                      EQU 0x40006714,        4, base=16,    bitRange=24-24
 7486                           ;'CAN_F26R2.FB25`                      EQU 0x40006714,        4, base=16,    bitRange=25-25
 7487                           ;'CAN_F26R2.FB26`                      EQU 0x40006714,        4, base=16,    bitRange=26-26
 7488                           ;'CAN_F26R2.FB27`                      EQU 0x40006714,        4, base=16,    bitRange=27-27
 7489                           ;'CAN_F26R2.FB28`                      EQU 0x40006714,        4, base=16,    bitRange=28-28
 7490                           ;'CAN_F26R2.FB29`                      EQU 0x40006714,        4, base=16,    bitRange=29-29
 7491                           ;'CAN_F26R2.FB30`                      EQU 0x40006714,        4, base=16,    bitRange=30-30
 7492                           ;'CAN_F26R2.FB31`                      EQU 0x40006714,        4, base=16,    bitRange=31-31
 7493                           
 7494                           ;CAN_F27R1                           EQU 0x40006718
 7495                           ;'CAN_F27R1.FB0`                       EQU 0x40006718,        4, base=16,    bitRange=0-0
 7496                           ;'CAN_F27R1.FB1`                       EQU 0x40006718,        4, base=16,    bitRange=1-1
 7497                           ;'CAN_F27R1.FB2`                       EQU 0x40006718,        4, base=16,    bitRange=2-2
 7498                           ;'CAN_F27R1.FB3`                       EQU 0x40006718,        4, base=16,    bitRange=3-3
 7499                           ;'CAN_F27R1.FB4`                       EQU 0x40006718,        4, base=16,    bitRange=4-4
 7500                           ;'CAN_F27R1.FB5`                       EQU 0x40006718,        4, base=16,    bitRange=5-5
 7501                           ;'CAN_F27R1.FB6`                       EQU 0x40006718,        4, base=16,    bitRange=6-6
 7502                           ;'CAN_F27R1.FB7`                       EQU 0x40006718,        4, base=16,    bitRange=7-7
 7503                           ;'CAN_F27R1.FB8`                       EQU 0x40006718,        4, base=16,    bitRange=8-8
 7504                           ;'CAN_F27R1.FB9`                       EQU 0x40006718,        4, base=16,    bitRange=9-9
 7505                           ;'CAN_F27R1.FB10`                      EQU 0x40006718,        4, base=16,    bitRange=10-10
 7506                           ;'CAN_F27R1.FB11`                      EQU 0x40006718,        4, base=16,    bitRange=11-11
 7507                           ;'CAN_F27R1.FB12`                      EQU 0x40006718,        4, base=16,    bitRange=12-12
 7508                           ;'CAN_F27R1.FB13`                      EQU 0x40006718,        4, base=16,    bitRange=13-13
 7509                           ;'CAN_F27R1.FB14`                      EQU 0x40006718,        4, base=16,    bitRange=14-14
 7510                           ;'CAN_F27R1.FB15`                      EQU 0x40006718,        4, base=16,    bitRange=15-15
 7511                           ;'CAN_F27R1.FB16`                      EQU 0x40006718,        4, base=16,    bitRange=16-16
 7512                           ;'CAN_F27R1.FB17`                      EQU 0x40006718,        4, base=16,    bitRange=17-17
 7513                           ;'CAN_F27R1.FB18`                      EQU 0x40006718,        4, base=16,    bitRange=18-18
 7514                           ;'CAN_F27R1.FB19`                      EQU 0x40006718,        4, base=16,    bitRange=19-19
 7515                           ;'CAN_F27R1.FB20`                      EQU 0x40006718,        4, base=16,    bitRange=20-20
 7516                           ;'CAN_F27R1.FB21`                      EQU 0x40006718,        4, base=16,    bitRange=21-21
 7517                           ;'CAN_F27R1.FB22`                      EQU 0x40006718,        4, base=16,    bitRange=22-22
 7518                           ;'CAN_F27R1.FB23`                      EQU 0x40006718,        4, base=16,    bitRange=23-23
 7519                           ;'CAN_F27R1.FB24`                      EQU 0x40006718,        4, base=16,    bitRange=24-24
 7520                           ;'CAN_F27R1.FB25`                      EQU 0x40006718,        4, base=16,    bitRange=25-25
 7521                           ;'CAN_F27R1.FB26`                      EQU 0x40006718,        4, base=16,    bitRange=26-26
 7522                           ;'CAN_F27R1.FB27`                      EQU 0x40006718,        4, base=16,    bitRange=27-27
 7523                           ;'CAN_F27R1.FB28`                      EQU 0x40006718,        4, base=16,    bitRange=28-28
 7524                           ;'CAN_F27R1.FB29`                      EQU 0x40006718,        4, base=16,    bitRange=29-29
 7525                           ;'CAN_F27R1.FB30`                      EQU 0x40006718,        4, base=16,    bitRange=30-30
 7526                           ;'CAN_F27R1.FB31`                      EQU 0x40006718,        4, base=16,    bitRange=31-31
 7527                           
 7528                           ;CAN_F27R2                           EQU 0x4000671C
 7529                           ;'CAN_F27R2.FB0`                       EQU 0x4000671C,        4, base=16,    bitRange=0-0
 7530                           ;'CAN_F27R2.FB1`                       EQU 0x4000671C,        4, base=16,    bitRange=1-1
 7531                           ;'CAN_F27R2.FB2`                       EQU 0x4000671C,        4, base=16,    bitRange=2-2
 7532                           ;'CAN_F27R2.FB3`                       EQU 0x4000671C,        4, base=16,    bitRange=3-3
 7533                           ;'CAN_F27R2.FB4`                       EQU 0x4000671C,        4, base=16,    bitRange=4-4
 7534                           ;'CAN_F27R2.FB5`                       EQU 0x4000671C,        4, base=16,    bitRange=5-5
 7535                           ;'CAN_F27R2.FB6`                       EQU 0x4000671C,        4, base=16,    bitRange=6-6
 7536                           ;'CAN_F27R2.FB7`                       EQU 0x4000671C,        4, base=16,    bitRange=7-7
 7537                           ;'CAN_F27R2.FB8`                       EQU 0x4000671C,        4, base=16,    bitRange=8-8
 7538                           ;'CAN_F27R2.FB9`                       EQU 0x4000671C,        4, base=16,    bitRange=9-9
 7539                           ;'CAN_F27R2.FB10`                      EQU 0x4000671C,        4, base=16,    bitRange=10-10
 7540                           ;'CAN_F27R2.FB11`                      EQU 0x4000671C,        4, base=16,    bitRange=11-11
 7541                           ;'CAN_F27R2.FB12`                      EQU 0x4000671C,        4, base=16,    bitRange=12-12
 7542                           ;'CAN_F27R2.FB13`                      EQU 0x4000671C,        4, base=16,    bitRange=13-13
 7543                           ;'CAN_F27R2.FB14`                      EQU 0x4000671C,        4, base=16,    bitRange=14-14
 7544                           ;'CAN_F27R2.FB15`                      EQU 0x4000671C,        4, base=16,    bitRange=15-15
 7545                           ;'CAN_F27R2.FB16`                      EQU 0x4000671C,        4, base=16,    bitRange=16-16
 7546                           ;'CAN_F27R2.FB17`                      EQU 0x4000671C,        4, base=16,    bitRange=17-17
 7547                           ;'CAN_F27R2.FB18`                      EQU 0x4000671C,        4, base=16,    bitRange=18-18
 7548                           ;'CAN_F27R2.FB19`                      EQU 0x4000671C,        4, base=16,    bitRange=19-19
 7549                           ;'CAN_F27R2.FB20`                      EQU 0x4000671C,        4, base=16,    bitRange=20-20
 7550                           ;'CAN_F27R2.FB21`                      EQU 0x4000671C,        4, base=16,    bitRange=21-21
 7551                           ;'CAN_F27R2.FB22`                      EQU 0x4000671C,        4, base=16,    bitRange=22-22
 7552                           ;'CAN_F27R2.FB23`                      EQU 0x4000671C,        4, base=16,    bitRange=23-23
 7553                           ;'CAN_F27R2.FB24`                      EQU 0x4000671C,        4, base=16,    bitRange=24-24
 7554                           ;'CAN_F27R2.FB25`                      EQU 0x4000671C,        4, base=16,    bitRange=25-25
 7555                           ;'CAN_F27R2.FB26`                      EQU 0x4000671C,        4, base=16,    bitRange=26-26
 7556                           ;'CAN_F27R2.FB27`                      EQU 0x4000671C,        4, base=16,    bitRange=27-27
 7557                           ;'CAN_F27R2.FB28`                      EQU 0x4000671C,        4, base=16,    bitRange=28-28
 7558                           ;'CAN_F27R2.FB29`                      EQU 0x4000671C,        4, base=16,    bitRange=29-29
 7559                           ;'CAN_F27R2.FB30`                      EQU 0x4000671C,        4, base=16,    bitRange=30-30
 7560                           ;'CAN_F27R2.FB31`                      EQU 0x4000671C,        4, base=16,    bitRange=31-31
 7561                           
 7562                           
 7563                           ;
 7564                           ;               I2C1
 7565                           ;
 7566                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7567                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7568                           
 7569                           ;'I2C1_CR1`                            EQU 0x40005400,        4, base=16
 7570                           ;'I2C1_CR1.PE`                         EQU 0x40005400,        4, base=16,    bitRange=0-0
 7571                           ;'I2C1_CR1.SMBUS`                      EQU 0x40005400,        4, base=16,    bitRange=1-1
 7572                           ;'I2C1_CR1.SMBTYPE`                    EQU 0x40005400,        4, base=16,    bitRange=3-3
 7573                           ;'I2C1_CR1.ENARP`                      EQU 0x40005400,        4, base=16,    bitRange=4-4
 7574                           ;'I2C1_CR1.ENPEC`                      EQU 0x40005400,        4, base=16,    bitRange=5-5
 7575                           ;'I2C1_CR1.ENGC`                       EQU 0x40005400,        4, base=16,    bitRange=6-6
 7576                           ;'I2C1_CR1.NOSTRETCH`                  EQU 0x40005400,        4, base=16,    bitRange=7-7
 7577                           ;'I2C1_CR1.START`                      EQU 0x40005400,        4, base=16,    bitRange=8-8
 7578                           ;'I2C1_CR1.STOP`                       EQU 0x40005400,        4, base=16,    bitRange=9-9
 7579                           ;'I2C1_CR1.ACK`                        EQU 0x40005400,        4, base=16,    bitRange=10-10
 7580                           ;'I2C1_CR1.POS`                        EQU 0x40005400,        4, base=16,    bitRange=11-11
 7581                           ;'I2C1_CR1.PEC`                        EQU 0x40005400,        4, base=16,    bitRange=12-12
 7582                           ;'I2C1_CR1.ALERT`                      EQU 0x40005400,        4, base=16,    bitRange=13-13
 7583                           ;'I2C1_CR1.SWRST`                      EQU 0x40005400,        4, base=16,    bitRange=15-15
 7584                           
 7585                           ;'I2C1_CR2`                            EQU 0x40005404,        4, base=16
 7586                           ;'I2C1_CR2.FREQ`                       EQU 0x40005404,        4, base=16,    bitRange=0-5
 7587                           ;'I2C1_CR2.ITERREN`                    EQU 0x40005404,        4, base=16,    bitRange=8-8
 7588                           ;'I2C1_CR2.ITEVTEN`                    EQU 0x40005404,        4, base=16,    bitRange=9-9
 7589                           ;'I2C1_CR2.ITBUFEN`                    EQU 0x40005404,        4, base=16,    bitRange=10-10
 7590                           ;'I2C1_CR2.DMAEN`                      EQU 0x40005404,        4, base=16,    bitRange=11-11
 7591                           ;'I2C1_CR2.LAST`                       EQU 0x40005404,        4, base=16,    bitRange=12-12
 7592                           
 7593                           ;'I2C1_OAR1`                           EQU 0x40005408,        4, base=16
 7594                           ;'I2C1_OAR1.ADD0`                      EQU 0x40005408,        4, base=16,    bitRange=0-0
 7595                           ;'I2C1_OAR1.ADD`                       EQU 0x40005408,        4, base=16,    bitRange=1-9
 7596                           ;'I2C1_OAR1.ADDMODE`                   EQU 0x40005408,        4, base=16,    bitRange=15-15
 7597                           
 7598                           ;'I2C1_OAR2`                           EQU 0x4000540C,        4, base=16
 7599                           ;'I2C1_OAR2.ENDUAL`                    EQU 0x4000540C,        4, base=16,    bitRange=0-0
 7600                           ;'I2C1_OAR2.ADD2`                      EQU 0x4000540C,        4, base=16,    bitRange=1-7
 7601                           
 7602                           ;'I2C1_DR`                             EQU 0x40005410,        4, base=16
 7603                           ;'I2C1_DR.DR`                          EQU 0x40005410,        4, base=16,    bitRange=0-7
 7604                           
 7605                           ;'I2C1_SR1`                            EQU 0x40005414,        4, base=16
 7606                           ;'I2C1_SR1.SB`                         EQU 0x40005414,        4, base=16,    bitRange=0-0
 7607                           ;'I2C1_SR1.ADDR`                       EQU 0x40005414,        4, base=16,    bitRange=1-1
 7608                           ;'I2C1_SR1.BTF`                        EQU 0x40005414,        4, base=16,    bitRange=2-2
 7609                           ;'I2C1_SR1.ADD10`                      EQU 0x40005414,        4, base=16,    bitRange=3-3
 7610                           ;'I2C1_SR1.STOPF`                      EQU 0x40005414,        4, base=16,    bitRange=4-4
 7611                           ;'I2C1_SR1.RxNE`                       EQU 0x40005414,        4, base=16,    bitRange=6-6
 7612                           ;'I2C1_SR1.TxE`                        EQU 0x40005414,        4, base=16,    bitRange=7-7
 7613                           ;'I2C1_SR1.BERR`                       EQU 0x40005414,        4, base=16,    bitRange=8-8
 7614                           ;'I2C1_SR1.ARLO`                       EQU 0x40005414,        4, base=16,    bitRange=9-9
 7615                           ;'I2C1_SR1.AF`                         EQU 0x40005414,        4, base=16,    bitRange=10-10
 7616                           ;'I2C1_SR1.OVR`                        EQU 0x40005414,        4, base=16,    bitRange=11-11
 7617                           ;'I2C1_SR1.PECERR`                     EQU 0x40005414,        4, base=16,    bitRange=12-12
 7618                           ;'I2C1_SR1.TIMEOUT`                    EQU 0x40005414,        4, base=16,    bitRange=14-14
 7619                           ;'I2C1_SR1.SMBALERT`                   EQU 0x40005414,        4, base=16,    bitRange=15-15
 7620                           
 7621                           ;'I2C1_SR2`                            EQU 0x40005418,        4, base=16
 7622                           ;'I2C1_SR2.MSL`                        EQU 0x40005418,        4, base=16,    bitRange=0-0
 7623                           ;'I2C1_SR2.BUSY`                       EQU 0x40005418,        4, base=16,    bitRange=1-1
 7624                           ;'I2C1_SR2.TRA`                        EQU 0x40005418,        4, base=16,    bitRange=2-2
 7625                           ;'I2C1_SR2.GENCALL`                    EQU 0x40005418,        4, base=16,    bitRange=4-4
 7626                           ;'I2C1_SR2.SMBDEFAULT`                 EQU 0x40005418,        4, base=16,    bitRange=5-5
 7627                           ;'I2C1_SR2.SMBHOST`                    EQU 0x40005418,        4, base=16,    bitRange=6-6
 7628                           ;'I2C1_SR2.DUALF`                      EQU 0x40005418,        4, base=16,    bitRange=7-7
 7629                           ;'I2C1_SR2.PEC`                        EQU 0x40005418,        4, base=16,    bitRange=8-15
 7630                           
 7631                           ;'I2C1_CCR`                            EQU 0x4000541C,        4, base=16
 7632                           ;'I2C1_CCR.CCR`                        EQU 0x4000541C,        4, base=16,    bitRange=0-11
 7633                           ;'I2C1_CCR.DUTY`                       EQU 0x4000541C,        4, base=16,    bitRange=14-14
 7634                           ;'I2C1_CCR.F_S`                        EQU 0x4000541C,        4, base=16,    bitRange=15-15
 7635                           
 7636                           ;'I2C1_TRISE`                          EQU 0x40005420,        4, base=16
 7637                           ;'I2C1_TRISE.TRISE`                    EQU 0x40005420,        4, base=16,    bitRange=0-5
 7638                           
 7639                           
 7640                           ;
 7641                           ;               I2C2
 7642                           ;
 7643                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7644                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7645                           
 7646                           ;'I2C2_CR1`                            EQU 0x40005800,        4, base=16
 7647                           ;'I2C2_CR1.PE`                         EQU 0x40005800,        4, base=16,    bitRange=0-0
 7648                           ;'I2C2_CR1.SMBUS`                      EQU 0x40005800,        4, base=16,    bitRange=1-1
 7649                           ;'I2C2_CR1.SMBTYPE`                    EQU 0x40005800,        4, base=16,    bitRange=3-3
 7650                           ;'I2C2_CR1.ENARP`                      EQU 0x40005800,        4, base=16,    bitRange=4-4
 7651                           ;'I2C2_CR1.ENPEC`                      EQU 0x40005800,        4, base=16,    bitRange=5-5
 7652                           ;'I2C2_CR1.ENGC`                       EQU 0x40005800,        4, base=16,    bitRange=6-6
 7653                           ;'I2C2_CR1.NOSTRETCH`                  EQU 0x40005800,        4, base=16,    bitRange=7-7
 7654                           ;'I2C2_CR1.START`                      EQU 0x40005800,        4, base=16,    bitRange=8-8
 7655                           ;'I2C2_CR1.STOP`                       EQU 0x40005800,        4, base=16,    bitRange=9-9
 7656                           ;'I2C2_CR1.ACK`                        EQU 0x40005800,        4, base=16,    bitRange=10-10
 7657                           ;'I2C2_CR1.POS`                        EQU 0x40005800,        4, base=16,    bitRange=11-11
 7658                           ;'I2C2_CR1.PEC`                        EQU 0x40005800,        4, base=16,    bitRange=12-12
 7659                           ;'I2C2_CR1.ALERT`                      EQU 0x40005800,        4, base=16,    bitRange=13-13
 7660                           ;'I2C2_CR1.SWRST`                      EQU 0x40005800,        4, base=16,    bitRange=15-15
 7661                           
 7662                           ;'I2C2_CR2`                            EQU 0x40005804,        4, base=16
 7663                           ;'I2C2_CR2.FREQ`                       EQU 0x40005804,        4, base=16,    bitRange=0-5
 7664                           ;'I2C2_CR2.ITERREN`                    EQU 0x40005804,        4, base=16,    bitRange=8-8
 7665                           ;'I2C2_CR2.ITEVTEN`                    EQU 0x40005804,        4, base=16,    bitRange=9-9
 7666                           ;'I2C2_CR2.ITBUFEN`                    EQU 0x40005804,        4, base=16,    bitRange=10-10
 7667                           ;'I2C2_CR2.DMAEN`                      EQU 0x40005804,        4, base=16,    bitRange=11-11
 7668                           ;'I2C2_CR2.LAST`                       EQU 0x40005804,        4, base=16,    bitRange=12-12
 7669                           
 7670                           ;'I2C2_OAR1`                           EQU 0x40005808,        4, base=16
 7671                           ;'I2C2_OAR1.ADD0`                      EQU 0x40005808,        4, base=16,    bitRange=0-0
 7672                           ;'I2C2_OAR1.ADD`                       EQU 0x40005808,        4, base=16,    bitRange=1-9
 7673                           ;'I2C2_OAR1.ADDMODE`                   EQU 0x40005808,        4, base=16,    bitRange=15-15
 7674                           
 7675                           ;'I2C2_OAR2`                           EQU 0x4000580C,        4, base=16
 7676                           ;'I2C2_OAR2.ENDUAL`                    EQU 0x4000580C,        4, base=16,    bitRange=0-0
 7677                           ;'I2C2_OAR2.ADD2`                      EQU 0x4000580C,        4, base=16,    bitRange=1-7
 7678                           
 7679                           ;'I2C2_DR`                             EQU 0x40005810,        4, base=16
 7680                           ;'I2C2_DR.DR`                          EQU 0x40005810,        4, base=16,    bitRange=0-7
 7681                           
 7682                           ;'I2C2_SR1`                            EQU 0x40005814,        4, base=16
 7683                           ;'I2C2_SR1.SB`                         EQU 0x40005814,        4, base=16,    bitRange=0-0
 7684                           ;'I2C2_SR1.ADDR`                       EQU 0x40005814,        4, base=16,    bitRange=1-1
 7685                           ;'I2C2_SR1.BTF`                        EQU 0x40005814,        4, base=16,    bitRange=2-2
 7686                           ;'I2C2_SR1.ADD10`                      EQU 0x40005814,        4, base=16,    bitRange=3-3
 7687                           ;'I2C2_SR1.STOPF`                      EQU 0x40005814,        4, base=16,    bitRange=4-4
 7688                           ;'I2C2_SR1.RxNE`                       EQU 0x40005814,        4, base=16,    bitRange=6-6
 7689                           ;'I2C2_SR1.TxE`                        EQU 0x40005814,        4, base=16,    bitRange=7-7
 7690                           ;'I2C2_SR1.BERR`                       EQU 0x40005814,        4, base=16,    bitRange=8-8
 7691                           ;'I2C2_SR1.ARLO`                       EQU 0x40005814,        4, base=16,    bitRange=9-9
 7692                           ;'I2C2_SR1.AF`                         EQU 0x40005814,        4, base=16,    bitRange=10-10
 7693                           ;'I2C2_SR1.OVR`                        EQU 0x40005814,        4, base=16,    bitRange=11-11
 7694                           ;'I2C2_SR1.PECERR`                     EQU 0x40005814,        4, base=16,    bitRange=12-12
 7695                           ;'I2C2_SR1.TIMEOUT`                    EQU 0x40005814,        4, base=16,    bitRange=14-14
 7696                           ;'I2C2_SR1.SMBALERT`                   EQU 0x40005814,        4, base=16,    bitRange=15-15
 7697                           
 7698                           ;'I2C2_SR2`                            EQU 0x40005818,        4, base=16
 7699                           ;'I2C2_SR2.MSL`                        EQU 0x40005818,        4, base=16,    bitRange=0-0
 7700                           ;'I2C2_SR2.BUSY`                       EQU 0x40005818,        4, base=16,    bitRange=1-1
 7701                           ;'I2C2_SR2.TRA`                        EQU 0x40005818,        4, base=16,    bitRange=2-2
 7702                           ;'I2C2_SR2.GENCALL`                    EQU 0x40005818,        4, base=16,    bitRange=4-4
 7703                           ;'I2C2_SR2.SMBDEFAULT`                 EQU 0x40005818,        4, base=16,    bitRange=5-5
 7704                           ;'I2C2_SR2.SMBHOST`                    EQU 0x40005818,        4, base=16,    bitRange=6-6
 7705                           ;'I2C2_SR2.DUALF`                      EQU 0x40005818,        4, base=16,    bitRange=7-7
 7706                           ;'I2C2_SR2.PEC`                        EQU 0x40005818,        4, base=16,    bitRange=8-15
 7707                           
 7708                           ;'I2C2_CCR`                            EQU 0x4000581C,        4, base=16
 7709                           ;'I2C2_CCR.CCR`                        EQU 0x4000581C,        4, base=16,    bitRange=0-11
 7710                           ;'I2C2_CCR.DUTY`                       EQU 0x4000581C,        4, base=16,    bitRange=14-14
 7711                           ;'I2C2_CCR.F_S`                        EQU 0x4000581C,        4, base=16,    bitRange=15-15
 7712                           
 7713                           ;'I2C2_TRISE`                          EQU 0x40005820,        4, base=16
 7714                           ;'I2C2_TRISE.TRISE`                    EQU 0x40005820,        4, base=16,    bitRange=0-5
 7715                           
 7716                           
 7717                           ;
 7718                           ;               I2C3
 7719                           ;
 7720                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7721                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7722                           
 7723                           ;'I2C3_CR1`                            EQU 0x40005C00,        4, base=16
 7724                           ;'I2C3_CR1.PE`                         EQU 0x40005C00,        4, base=16,    bitRange=0-0
 7725                           ;'I2C3_CR1.SMBUS`                      EQU 0x40005C00,        4, base=16,    bitRange=1-1
 7726                           ;'I2C3_CR1.SMBTYPE`                    EQU 0x40005C00,        4, base=16,    bitRange=3-3
 7727                           ;'I2C3_CR1.ENARP`                      EQU 0x40005C00,        4, base=16,    bitRange=4-4
 7728                           ;'I2C3_CR1.ENPEC`                      EQU 0x40005C00,        4, base=16,    bitRange=5-5
 7729                           ;'I2C3_CR1.ENGC`                       EQU 0x40005C00,        4, base=16,    bitRange=6-6
 7730                           ;'I2C3_CR1.NOSTRETCH`                  EQU 0x40005C00,        4, base=16,    bitRange=7-7
 7731                           ;'I2C3_CR1.START`                      EQU 0x40005C00,        4, base=16,    bitRange=8-8
 7732                           ;'I2C3_CR1.STOP`                       EQU 0x40005C00,        4, base=16,    bitRange=9-9
 7733                           ;'I2C3_CR1.ACK`                        EQU 0x40005C00,        4, base=16,    bitRange=10-10
 7734                           ;'I2C3_CR1.POS`                        EQU 0x40005C00,        4, base=16,    bitRange=11-11
 7735                           ;'I2C3_CR1.PEC`                        EQU 0x40005C00,        4, base=16,    bitRange=12-12
 7736                           ;'I2C3_CR1.ALERT`                      EQU 0x40005C00,        4, base=16,    bitRange=13-13
 7737                           ;'I2C3_CR1.SWRST`                      EQU 0x40005C00,        4, base=16,    bitRange=15-15
 7738                           
 7739                           ;'I2C3_CR2`                            EQU 0x40005C04,        4, base=16
 7740                           ;'I2C3_CR2.FREQ`                       EQU 0x40005C04,        4, base=16,    bitRange=0-5
 7741                           ;'I2C3_CR2.ITERREN`                    EQU 0x40005C04,        4, base=16,    bitRange=8-8
 7742                           ;'I2C3_CR2.ITEVTEN`                    EQU 0x40005C04,        4, base=16,    bitRange=9-9
 7743                           ;'I2C3_CR2.ITBUFEN`                    EQU 0x40005C04,        4, base=16,    bitRange=10-10
 7744                           ;'I2C3_CR2.DMAEN`                      EQU 0x40005C04,        4, base=16,    bitRange=11-11
 7745                           ;'I2C3_CR2.LAST`                       EQU 0x40005C04,        4, base=16,    bitRange=12-12
 7746                           
 7747                           ;'I2C3_OAR1`                           EQU 0x40005C08,        4, base=16
 7748                           ;'I2C3_OAR1.ADD0`                      EQU 0x40005C08,        4, base=16,    bitRange=0-0
 7749                           ;'I2C3_OAR1.ADD`                       EQU 0x40005C08,        4, base=16,    bitRange=1-9
 7750                           ;'I2C3_OAR1.ADDMODE`                   EQU 0x40005C08,        4, base=16,    bitRange=15-15
 7751                           
 7752                           ;'I2C3_OAR2`                           EQU 0x40005C0C,        4, base=16
 7753                           ;'I2C3_OAR2.ENDUAL`                    EQU 0x40005C0C,        4, base=16,    bitRange=0-0
 7754                           ;'I2C3_OAR2.ADD2`                      EQU 0x40005C0C,        4, base=16,    bitRange=1-7
 7755                           
 7756                           ;'I2C3_DR`                             EQU 0x40005C10,        4, base=16
 7757                           ;'I2C3_DR.DR`                          EQU 0x40005C10,        4, base=16,    bitRange=0-7
 7758                           
 7759                           ;'I2C3_SR1`                            EQU 0x40005C14,        4, base=16
 7760                           ;'I2C3_SR1.SB`                         EQU 0x40005C14,        4, base=16,    bitRange=0-0
 7761                           ;'I2C3_SR1.ADDR`                       EQU 0x40005C14,        4, base=16,    bitRange=1-1
 7762                           ;'I2C3_SR1.BTF`                        EQU 0x40005C14,        4, base=16,    bitRange=2-2
 7763                           ;'I2C3_SR1.ADD10`                      EQU 0x40005C14,        4, base=16,    bitRange=3-3
 7764                           ;'I2C3_SR1.STOPF`                      EQU 0x40005C14,        4, base=16,    bitRange=4-4
 7765                           ;'I2C3_SR1.RxNE`                       EQU 0x40005C14,        4, base=16,    bitRange=6-6
 7766                           ;'I2C3_SR1.TxE`                        EQU 0x40005C14,        4, base=16,    bitRange=7-7
 7767                           ;'I2C3_SR1.BERR`                       EQU 0x40005C14,        4, base=16,    bitRange=8-8
 7768                           ;'I2C3_SR1.ARLO`                       EQU 0x40005C14,        4, base=16,    bitRange=9-9
 7769                           ;'I2C3_SR1.AF`                         EQU 0x40005C14,        4, base=16,    bitRange=10-10
 7770                           ;'I2C3_SR1.OVR`                        EQU 0x40005C14,        4, base=16,    bitRange=11-11
 7771                           ;'I2C3_SR1.PECERR`                     EQU 0x40005C14,        4, base=16,    bitRange=12-12
 7772                           ;'I2C3_SR1.TIMEOUT`                    EQU 0x40005C14,        4, base=16,    bitRange=14-14
 7773                           ;'I2C3_SR1.SMBALERT`                   EQU 0x40005C14,        4, base=16,    bitRange=15-15
 7774                           
 7775                           ;'I2C3_SR2`                            EQU 0x40005C18,        4, base=16
 7776                           ;'I2C3_SR2.MSL`                        EQU 0x40005C18,        4, base=16,    bitRange=0-0
 7777                           ;'I2C3_SR2.BUSY`                       EQU 0x40005C18,        4, base=16,    bitRange=1-1
 7778                           ;'I2C3_SR2.TRA`                        EQU 0x40005C18,        4, base=16,    bitRange=2-2
 7779                           ;'I2C3_SR2.GENCALL`                    EQU 0x40005C18,        4, base=16,    bitRange=4-4
 7780                           ;'I2C3_SR2.SMBDEFAULT`                 EQU 0x40005C18,        4, base=16,    bitRange=5-5
 7781                           ;'I2C3_SR2.SMBHOST`                    EQU 0x40005C18,        4, base=16,    bitRange=6-6
 7782                           ;'I2C3_SR2.DUALF`                      EQU 0x40005C18,        4, base=16,    bitRange=7-7
 7783                           ;'I2C3_SR2.PEC`                        EQU 0x40005C18,        4, base=16,    bitRange=8-15
 7784                           
 7785                           ;'I2C3_CCR`                            EQU 0x40005C1C,        4, base=16
 7786                           ;'I2C3_CCR.CCR`                        EQU 0x40005C1C,        4, base=16,    bitRange=0-11
 7787                           ;'I2C3_CCR.DUTY`                       EQU 0x40005C1C,        4, base=16,    bitRange=14-14
 7788                           ;'I2C3_CCR.F_S`                        EQU 0x40005C1C,        4, base=16,    bitRange=15-15
 7789                           
 7790                           ;'I2C3_TRISE`                          EQU 0x40005C20,        4, base=16
 7791                           ;'I2C3_TRISE.TRISE`                    EQU 0x40005C20,        4, base=16,    bitRange=0-5
 7792                           
 7793                           
 7794                           ;
 7795                           ;               SPI1
 7796                           ;
 7797                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7798                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7799                           
 7800                           SPI1_CR1                            EQU 0x40013000
 7801                           ;'SPI1_CR1.CPHA`                       EQU 0x40013000,        4, base=16,    bitRange=0-0
 7802                           ;'SPI1_CR1.CPOL`                       EQU 0x40013000,        4, base=16,    bitRange=1-1
 7803                           ;'SPI1_CR1.MSTR`                       EQU 0x40013000,        4, base=16,    bitRange=2-2
 7804                           ;'SPI1_CR1.BR`                         EQU 0x40013000,        4, base=16,    bitRange=3-5
 7805                           ;'SPI1_CR1.SPE`                        EQU 0x40013000,        4, base=16,    bitRange=6-6
 7806                           ;'SPI1_CR1.LSBFIRST`                   EQU 0x40013000,        4, base=16,    bitRange=7-7
 7807                           ;'SPI1_CR1.SSI`                        EQU 0x40013000,        4, base=16,    bitRange=8-8
 7808                           ;'SPI1_CR1.SSM`                        EQU 0x40013000,        4, base=16,    bitRange=9-9
 7809                           ;'SPI1_CR1.RXONLY`                     EQU 0x40013000,        4, base=16,    bitRange=10-10
 7810                           ;'SPI1_CR1.DFF`                        EQU 0x40013000,        4, base=16,    bitRange=11-11
 7811                           ;'SPI1_CR1.CRCNEXT`                    EQU 0x40013000,        4, base=16,    bitRange=12-12
 7812                           ;'SPI1_CR1.CRCEN`                      EQU 0x40013000,        4, base=16,    bitRange=13-13
 7813                           ;'SPI1_CR1.BIDIOE`                     EQU 0x40013000,        4, base=16,    bitRange=14-14
 7814                           ;'SPI1_CR1.BIDIMODE`                   EQU 0x40013000,        4, base=16,    bitRange=15-15
 7815                           
 7816                           SPI1_CR2                            EQU 0x40013004
 7817                           ;'SPI1_CR2.RXDMAEN`                    EQU 0x40013004,        4, base=16,    bitRange=0-0
 7818                           ;'SPI1_CR2.TXDMAEN`                    EQU 0x40013004,        4, base=16,    bitRange=1-1
 7819                           ;'SPI1_CR2.SSOE`                       EQU 0x40013004,        4, base=16,    bitRange=2-2
 7820                           ;'SPI1_CR2.FRF`                        EQU 0x40013004,        4, base=16,    bitRange=4-4
 7821                           ;'SPI1_CR2.ERRIE`                      EQU 0x40013004,        4, base=16,    bitRange=5-5
 7822                           ;'SPI1_CR2.RXNEIE`                     EQU 0x40013004,        4, base=16,    bitRange=6-6
 7823                           ;'SPI1_CR2.TXEIE`                      EQU 0x40013004,        4, base=16,    bitRange=7-7
 7824                           
 7825                           SPI1_SR                             EQU 0x40013008
 7826                           ;'SPI1_SR.RXNE`                        EQU 0x40013008,        4, base=16,    bitRange=0-0
 7827                           ;'SPI1_SR.TXE`                         EQU 0x40013008,        4, base=16,    bitRange=1-1
 7828                           ;'SPI1_SR.CHSIDE`                      EQU 0x40013008,        4, base=16,    bitRange=2-2
 7829                           ;'SPI1_SR.UDR`                         EQU 0x40013008,        4, base=16,    bitRange=3-3
 7830                           ;'SPI1_SR.CRCERR`                      EQU 0x40013008,        4, base=16,    bitRange=4-4
 7831                           ;'SPI1_SR.MODF`                        EQU 0x40013008,        4, base=16,    bitRange=5-5
 7832                           ;'SPI1_SR.OVR`                         EQU 0x40013008,        4, base=16,    bitRange=6-6
 7833                           ;'SPI1_SR.BSY`                         EQU 0x40013008,        4, base=16,    bitRange=7-7
 7834                           ;'SPI1_SR.TIFRFE`                      EQU 0x40013008,        4, base=16,    bitRange=8-8
 7835                           
 7836                           SPI1_DR                             EQU 0x4001300C
 7837                           ;'SPI1_DR.DR`                          EQU 0x4001300C,        4, base=16,    bitRange=0-15
 7838                           
 7839                           SPI1_CRCPR                          EQU 0x40013010
 7840                           ;'SPI1_CRCPR.CRCPOLY`                  EQU 0x40013010,        4, base=16,    bitRange=0-15
 7841                           
 7842                           SPI1_RXCRCR                         EQU 0x40013014
 7843                           ;'SPI1_RXCRCR.RxCRC`                   EQU 0x40013014,        4, base=16,    bitRange=0-15
 7844                           
 7845                           SPI1_TXCRCR                         EQU 0x40013018
 7846                           ;'SPI1_TXCRCR.TxCRC`                   EQU 0x40013018,        4, base=16,    bitRange=0-15
 7847                           
 7848                           
 7849                           ;
 7850                           ;               SPI2
 7851                           ;
 7852                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7853                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7854                           
 7855                           SPI2_CR1                            EQU 0x40003800
 7856                           ;'SPI2_CR1.CPHA`                       EQU 0x40003800,        4, base=16,    bitRange=0-0
 7857                           ;'SPI2_CR1.CPOL`                       EQU 0x40003800,        4, base=16,    bitRange=1-1
 7858                           ;'SPI2_CR1.MSTR`                       EQU 0x40003800,        4, base=16,    bitRange=2-2
 7859                           ;'SPI2_CR1.BR`                         EQU 0x40003800,        4, base=16,    bitRange=3-5
 7860                           ;'SPI2_CR1.SPE`                        EQU 0x40003800,        4, base=16,    bitRange=6-6
 7861                           ;'SPI2_CR1.LSBFIRST`                   EQU 0x40003800,        4, base=16,    bitRange=7-7
 7862                           ;'SPI2_CR1.SSI`                        EQU 0x40003800,        4, base=16,    bitRange=8-8
 7863                           ;'SPI2_CR1.SSM`                        EQU 0x40003800,        4, base=16,    bitRange=9-9
 7864                           ;'SPI2_CR1.RXONLY`                     EQU 0x40003800,        4, base=16,    bitRange=10-10
 7865                           ;'SPI2_CR1.DFF`                        EQU 0x40003800,        4, base=16,    bitRange=11-11
 7866                           ;'SPI2_CR1.CRCNEXT`                    EQU 0x40003800,        4, base=16,    bitRange=12-12
 7867                           ;'SPI2_CR1.CRCEN`                      EQU 0x40003800,        4, base=16,    bitRange=13-13
 7868                           ;'SPI2_CR1.BIDIOE`                     EQU 0x40003800,        4, base=16,    bitRange=14-14
 7869                           ;'SPI2_CR1.BIDIMODE`                   EQU 0x40003800,        4, base=16,    bitRange=15-15
 7870                           
 7871                           SPI2_CR2                            EQU 0x40003804
 7872                           ;'SPI2_CR2.RXDMAEN`                    EQU 0x40003804,        4, base=16,    bitRange=0-0
 7873                           ;'SPI2_CR2.TXDMAEN`                    EQU 0x40003804,        4, base=16,    bitRange=1-1
 7874                           ;'SPI2_CR2.SSOE`                       EQU 0x40003804,        4, base=16,    bitRange=2-2
 7875                           ;'SPI2_CR2.FRF`                        EQU 0x40003804,        4, base=16,    bitRange=4-4
 7876                           ;'SPI2_CR2.ERRIE`                      EQU 0x40003804,        4, base=16,    bitRange=5-5
 7877                           ;'SPI2_CR2.RXNEIE`                     EQU 0x40003804,        4, base=16,    bitRange=6-6
 7878                           ;'SPI2_CR2.TXEIE`                      EQU 0x40003804,        4, base=16,    bitRange=7-7
 7879                           
 7880                           SPI2_SR                             EQU 0x40003808
 7881                           ;'SPI2_SR.RXNE`                        EQU 0x40003808,        4, base=16,    bitRange=0-0
 7882                           ;'SPI2_SR.TXE`                         EQU 0x40003808,        4, base=16,    bitRange=1-1
 7883                           ;'SPI2_SR.CHSIDE`                      EQU 0x40003808,        4, base=16,    bitRange=2-2
 7884                           ;'SPI2_SR.UDR`                         EQU 0x40003808,        4, base=16,    bitRange=3-3
 7885                           ;'SPI2_SR.CRCERR`                      EQU 0x40003808,        4, base=16,    bitRange=4-4
 7886                           ;'SPI2_SR.MODF`                        EQU 0x40003808,        4, base=16,    bitRange=5-5
 7887                           ;'SPI2_SR.OVR`                         EQU 0x40003808,        4, base=16,    bitRange=6-6
 7888                           ;'SPI2_SR.BSY`                         EQU 0x40003808,        4, base=16,    bitRange=7-7
 7889                           ;'SPI2_SR.TIFRFE`                      EQU 0x40003808,        4, base=16,    bitRange=8-8
 7890                           
 7891                           SPI2_DR                             EQU 0x4000380C
 7892                           ;'SPI2_DR.DR`                          EQU 0x4000380C,        4, base=16,    bitRange=0-15
 7893                           
 7894                           SPI2_CRCPR                          EQU 0x40003810
 7895                           ;'SPI2_CRCPR.CRCPOLY`                  EQU 0x40003810,        4, base=16,    bitRange=0-15
 7896                           
 7897                           SPI2_RXCRCR                         EQU 0x40003814
 7898                           ;'SPI2_RXCRCR.RxCRC`                   EQU 0x40003814,        4, base=16,    bitRange=0-15
 7899                           
 7900                           SPI2_TXCRCR                         EQU 0x40003818
 7901                           ;'SPI2_TXCRCR.TxCRC`                   EQU 0x40003818,        4, base=16,    bitRange=0-15
 7902                           
 7903                           SPI2_I2SCFGR                        EQU 0x4000381C
 7904                           ;'SPI2_I2SCFGR.CHLEN`                  EQU 0x4000381C,        4, base=16,    bitRange=0-0
 7905                           ;'SPI2_I2SCFGR.DATLEN`                 EQU 0x4000381C,        4, base=16,    bitRange=1-2
 7906                           ;'SPI2_I2SCFGR.CKPOL`                  EQU 0x4000381C,        4, base=16,    bitRange=3-3
 7907                           ;'SPI2_I2SCFGR.I2SSTD`                 EQU 0x4000381C,        4, base=16,    bitRange=4-5
 7908                           ;'SPI2_I2SCFGR.PCMSYNC`                EQU 0x4000381C,        4, base=16,    bitRange=7-7
 7909                           ;'SPI2_I2SCFGR.I2SCFG`                 EQU 0x4000381C,        4, base=16,    bitRange=8-9
 7910                           ;'SPI2_I2SCFGR.I2SE`                   EQU 0x4000381C,        4, base=16,    bitRange=10-10
 7911                           ;'SPI2_I2SCFGR.I2SMOD`                 EQU 0x4000381C,        4, base=16,    bitRange=11-11
 7912                           
 7913                           SPI2_I2SPR                          EQU 0x40003820
 7914                           ;'SPI2_I2SPR.I2SDIV`                   EQU 0x40003820,        4, base=16,    bitRange=0-7
 7915                           ;'SPI2_I2SPR.ODD`                      EQU 0x40003820,        4, base=16,    bitRange=8-8
 7916                           ;'SPI2_I2SPR.MCKOE`                    EQU 0x40003820,        4, base=16,    bitRange=9-9
 7917                           
 7918                           
 7919                           ;
 7920                           ;               SPI3
 7921                           ;
 7922                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7923                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7924                           
 7925                           SPI3_CR1                            EQU 0x40003C00
 7926                           ;'SPI3_CR1.CPHA`                       EQU 0x40003C00,        4, base=16,    bitRange=0-0
 7927                           ;'SPI3_CR1.CPOL`                       EQU 0x40003C00,        4, base=16,    bitRange=1-1
 7928                           ;'SPI3_CR1.MSTR`                       EQU 0x40003C00,        4, base=16,    bitRange=2-2
 7929                           ;'SPI3_CR1.BR`                         EQU 0x40003C00,        4, base=16,    bitRange=3-5
 7930                           ;'SPI3_CR1.SPE`                        EQU 0x40003C00,        4, base=16,    bitRange=6-6
 7931                           ;'SPI3_CR1.LSBFIRST`                   EQU 0x40003C00,        4, base=16,    bitRange=7-7
 7932                           ;'SPI3_CR1.SSI`                        EQU 0x40003C00,        4, base=16,    bitRange=8-8
 7933                           ;'SPI3_CR1.SSM`                        EQU 0x40003C00,        4, base=16,    bitRange=9-9
 7934                           ;'SPI3_CR1.RXONLY`                     EQU 0x40003C00,        4, base=16,    bitRange=10-10
 7935                           ;'SPI3_CR1.DFF`                        EQU 0x40003C00,        4, base=16,    bitRange=11-11
 7936                           ;'SPI3_CR1.CRCNEXT`                    EQU 0x40003C00,        4, base=16,    bitRange=12-12
 7937                           ;'SPI3_CR1.CRCEN`                      EQU 0x40003C00,        4, base=16,    bitRange=13-13
 7938                           ;'SPI3_CR1.BIDIOE`                     EQU 0x40003C00,        4, base=16,    bitRange=14-14
 7939                           ;'SPI3_CR1.BIDIMODE`                   EQU 0x40003C00,        4, base=16,    bitRange=15-15
 7940                           
 7941                           SPI3_CR2                            EQU 0x40003C04
 7942                           ;'SPI3_CR2.RXDMAEN`                    EQU 0x40003C04,        4, base=16,    bitRange=0-0
 7943                           ;'SPI3_CR2.TXDMAEN`                    EQU 0x40003C04,        4, base=16,    bitRange=1-1
 7944                           ;'SPI3_CR2.SSOE`                       EQU 0x40003C04,        4, base=16,    bitRange=2-2
 7945                           ;'SPI3_CR2.FRF`                        EQU 0x40003C04,        4, base=16,    bitRange=4-4
 7946                           ;'SPI3_CR2.ERRIE`                      EQU 0x40003C04,        4, base=16,    bitRange=5-5
 7947                           ;'SPI3_CR2.RXNEIE`                     EQU 0x40003C04,        4, base=16,    bitRange=6-6
 7948                           ;'SPI3_CR2.TXEIE`                      EQU 0x40003C04,        4, base=16,    bitRange=7-7
 7949                           
 7950                           SPI3_SR                             EQU 0x40003C08
 7951                           ;'SPI3_SR.RXNE`                        EQU 0x40003C08,        4, base=16,    bitRange=0-0
 7952                           ;'SPI3_SR.TXE`                         EQU 0x40003C08,        4, base=16,    bitRange=1-1
 7953                           ;'SPI3_SR.CHSIDE`                      EQU 0x40003C08,        4, base=16,    bitRange=2-2
 7954                           ;'SPI3_SR.UDR`                         EQU 0x40003C08,        4, base=16,    bitRange=3-3
 7955                           ;'SPI3_SR.CRCERR`                      EQU 0x40003C08,        4, base=16,    bitRange=4-4
 7956                           ;'SPI3_SR.MODF`                        EQU 0x40003C08,        4, base=16,    bitRange=5-5
 7957                           ;'SPI3_SR.OVR`                         EQU 0x40003C08,        4, base=16,    bitRange=6-6
 7958                           ;'SPI3_SR.BSY`                         EQU 0x40003C08,        4, base=16,    bitRange=7-7
 7959                           ;'SPI3_SR.TIFRFE`                      EQU 0x40003C08,        4, base=16,    bitRange=8-8
 7960                           
 7961                           SPI3_DR                             EQU 0x40003C0C
 7962                           ;'SPI3_DR.DR`                          EQU 0x40003C0C,        4, base=16,    bitRange=0-15
 7963                           
 7964                           SPI3_CRCPR                          EQU 0x40003C10
 7965                           ;'SPI3_CRCPR.CRCPOLY`                  EQU 0x40003C10,        4, base=16,    bitRange=0-15
 7966                           
 7967                           SPI3_RXCRCR                         EQU 0x40003C14
 7968                           ;'SPI3_RXCRCR.RxCRC`                   EQU 0x40003C14,        4, base=16,    bitRange=0-15
 7969                           
 7970                           SPI3_TXCRCR                         EQU 0x40003C18
 7971                           ;'SPI3_TXCRCR.TxCRC`                   EQU 0x40003C18,        4, base=16,    bitRange=0-15
 7972                           
 7973                           SPI3_I2SCFGR                        EQU 0x40003C1C
 7974                           ;'SPI3_I2SCFGR.CHLEN`                  EQU 0x40003C1C,        4, base=16,    bitRange=0-0
 7975                           ;'SPI3_I2SCFGR.DATLEN`                 EQU 0x40003C1C,        4, base=16,    bitRange=1-2
 7976                           ;'SPI3_I2SCFGR.CKPOL`                  EQU 0x40003C1C,        4, base=16,    bitRange=3-3
 7977                           ;'SPI3_I2SCFGR.I2SSTD`                 EQU 0x40003C1C,        4, base=16,    bitRange=4-5
 7978                           ;'SPI3_I2SCFGR.PCMSYNC`                EQU 0x40003C1C,        4, base=16,    bitRange=7-7
 7979                           ;'SPI3_I2SCFGR.I2SCFG`                 EQU 0x40003C1C,        4, base=16,    bitRange=8-9
 7980                           ;'SPI3_I2SCFGR.I2SE`                   EQU 0x40003C1C,        4, base=16,    bitRange=10-10
 7981                           ;'SPI3_I2SCFGR.I2SMOD`                 EQU 0x40003C1C,        4, base=16,    bitRange=11-11
 7982                           
 7983                           SPI3_I2SPR                          EQU 0x40003C20
 7984                           ;'SPI3_I2SPR.I2SDIV`                   EQU 0x40003C20,        4, base=16,    bitRange=0-7
 7985                           ;'SPI3_I2SPR.ODD`                      EQU 0x40003C20,        4, base=16,    bitRange=8-8
 7986                           ;'SPI3_I2SPR.MCKOE`                    EQU 0x40003C20,        4, base=16,    bitRange=9-9
 7987                           
 7988                           
 7989                           ;
 7990                           ;               SDIO
 7991                           ;
 7992                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 7993                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 7994                           
 7995                           SDIO_POWER                          EQU 0x40012C00
 7996                           ;'SDIO_POWER.PWRCTRL`                  EQU 0x40012C00,        4, base=16,    bitRange=0-1
 7997                           
 7998                           SDIO_CLKCR                          EQU 0x40012C04
 7999                           ;'SDIO_CLKCR.CLKDIV`                   EQU 0x40012C04,        4, base=16,    bitRange=0-7
 8000                           ;'SDIO_CLKCR.CLKEN`                    EQU 0x40012C04,        4, base=16,    bitRange=8-8
 8001                           ;'SDIO_CLKCR.PWRSAV`                   EQU 0x40012C04,        4, base=16,    bitRange=9-9
 8002                           ;'SDIO_CLKCR.BYPASS`                   EQU 0x40012C04,        4, base=16,    bitRange=10-10
 8003                           ;'SDIO_CLKCR.WIDBUS`                   EQU 0x40012C04,        4, base=16,    bitRange=11-12
 8004                           ;'SDIO_CLKCR.NEGEDGE`                  EQU 0x40012C04,        4, base=16,    bitRange=13-13
 8005                           ;'SDIO_CLKCR.HWFC_EN`                  EQU 0x40012C04,        4, base=16,    bitRange=14-14
 8006                           
 8007                           SDIO_ARG                            EQU 0x40012C08
 8008                           
 8009                           SDIO_CMD                            EQU 0x40012C0C
 8010                           ;'SDIO_CMD.CMDINDEX`                   EQU 0x40012C0C,        4, base=16,    bitRange=0-5
 8011                           ;'SDIO_CMD.WAITRESP`                   EQU 0x40012C0C,        4, base=16,    bitRange=6-7
 8012                           ;'SDIO_CMD.WAITINT`                    EQU 0x40012C0C,        4, base=16,    bitRange=8-8
 8013                           ;'SDIO_CMD.WAITPEND`                   EQU 0x40012C0C,        4, base=16,    bitRange=9-9
 8014                           ;'SDIO_CMD.CPSMEN`                     EQU 0x40012C0C,        4, base=16,    bitRange=10-10
 8015                           ;'SDIO_CMD.SDIOSuspend`                EQU 0x40012C0C,        4, base=16,    bitRange=11-11
 8016                           ;'SDIO_CMD.ENCMDcompl`                 EQU 0x40012C0C,        4, base=16,    bitRange=12-12
 8017                           ;'SDIO_CMD.nIEN`                       EQU 0x40012C0C,        4, base=16,    bitRange=13-13
 8018                           ;'SDIO_CMD.ATACMD`                     EQU 0x40012C0C,        4, base=16,    bitRange=14-14
 8019                           
 8020                           SDIO_RESPCMD                        EQU 0x40012C10
 8021                           ;'SDIO_RESPCMD.RESPCMD`                EQU 0x40012C10,        4, base=16,    bitRange=0-5
 8022                           
 8023                           SDIO_RESP1                          EQU 0x40012C14
 8024                           
 8025                           SDIO_RESP2                          EQU 0x40012C18
 8026                           
 8027                           SDIO_RESP3                          EQU 0x40012C1C
 8028                           
 8029                           SDIO_RESP4                          EQU 0x40012C20
 8030                           
 8031                           SDIO_DTIMER                         EQU 0x40012C24
 8032                           
 8033                           SDIO_DLEN                           EQU 0x40012C28
 8034                           ;'SDIO_DLEN.DATALENGTH`                EQU 0x40012C28,        4, base=16,    bitRange=0-24
 8035                           
 8036                           SDIO_DCTRL                          EQU 0x40012C2C
 8037                           ;'SDIO_DCTRL.DTEN`                     EQU 0x40012C2C,        4, base=16,    bitRange=0-0
 8038                           ;'SDIO_DCTRL.DTDIR`                    EQU 0x40012C2C,        4, base=16,    bitRange=1-1
 8039                           ;'SDIO_DCTRL.DTMODE`                   EQU 0x40012C2C,        4, base=16,    bitRange=2-2
 8040                           ;'SDIO_DCTRL.DMAEN`                    EQU 0x40012C2C,        4, base=16,    bitRange=3-3
 8041                           ;'SDIO_DCTRL.DBLOCKSIZE`               EQU 0x40012C2C,        4, base=16,    bitRange=4-7
 8042                           ;'SDIO_DCTRL.RWSTART`                  EQU 0x40012C2C,        4, base=16,    bitRange=8-8
 8043                           ;'SDIO_DCTRL.RWSTOP`                   EQU 0x40012C2C,        4, base=16,    bitRange=9-9
 8044                           ;'SDIO_DCTRL.RWMOD`                    EQU 0x40012C2C,        4, base=16,    bitRange=10-10
 8045                           ;'SDIO_DCTRL.SDIOEN`                   EQU 0x40012C2C,        4, base=16,    bitRange=11-11
 8046                           
 8047                           SDIO_DCOUNT                         EQU 0x40012C30
 8048                           ;'SDIO_DCOUNT.DATACOUNT`               EQU 0x40012C30,        4, base=16,    bitRange=0-24
 8049                           
 8050                           SDIO_STA                            EQU 0x40012C34
 8051                           ;'SDIO_STA.CCRCFAIL`                   EQU 0x40012C34,        4, base=16,    bitRange=0-0
 8052                           ;'SDIO_STA.DCRCFAIL`                   EQU 0x40012C34,        4, base=16,    bitRange=1-1
 8053                           ;'SDIO_STA.CTIMEOUT`                   EQU 0x40012C34,        4, base=16,    bitRange=2-2
 8054                           ;'SDIO_STA.DTIMEOUT`                   EQU 0x40012C34,        4, base=16,    bitRange=3-3
 8055                           ;'SDIO_STA.TXUNDERR`                   EQU 0x40012C34,        4, base=16,    bitRange=4-4
 8056                           ;'SDIO_STA.RXOVERR`                    EQU 0x40012C34,        4, base=16,    bitRange=5-5
 8057                           ;'SDIO_STA.CMDREND`                    EQU 0x40012C34,        4, base=16,    bitRange=6-6
 8058                           ;'SDIO_STA.CMDSENT`                    EQU 0x40012C34,        4, base=16,    bitRange=7-7
 8059                           ;'SDIO_STA.DATAEND`                    EQU 0x40012C34,        4, base=16,    bitRange=8-8
 8060                           ;'SDIO_STA.STBITERR`                   EQU 0x40012C34,        4, base=16,    bitRange=9-9
 8061                           ;'SDIO_STA.DBCKEND`                    EQU 0x40012C34,        4, base=16,    bitRange=10-10
 8062                           ;'SDIO_STA.CMDACT`                     EQU 0x40012C34,        4, base=16,    bitRange=11-11
 8063                           ;'SDIO_STA.TXACT`                      EQU 0x40012C34,        4, base=16,    bitRange=12-12
 8064                           ;'SDIO_STA.RXACT`                      EQU 0x40012C34,        4, base=16,    bitRange=13-13
 8065                           ;'SDIO_STA.TXFIFOHE`                   EQU 0x40012C34,        4, base=16,    bitRange=14-14
 8066                           ;'SDIO_STA.RXFIFOHF`                   EQU 0x40012C34,        4, base=16,    bitRange=15-15
 8067                           ;'SDIO_STA.TXFIFOF`                    EQU 0x40012C34,        4, base=16,    bitRange=16-16
 8068                           ;'SDIO_STA.RXFIFOF`                    EQU 0x40012C34,        4, base=16,    bitRange=17-17
 8069                           ;'SDIO_STA.TXFIFOE`                    EQU 0x40012C34,        4, base=16,    bitRange=18-18
 8070                           ;'SDIO_STA.RXFIFOE`                    EQU 0x40012C34,        4, base=16,    bitRange=19-19
 8071                           ;'SDIO_STA.TXDAVL`                     EQU 0x40012C34,        4, base=16,    bitRange=20-20
 8072                           ;'SDIO_STA.RXDAVL`                     EQU 0x40012C34,        4, base=16,    bitRange=21-21
 8073                           ;'SDIO_STA.SDIOIT`                     EQU 0x40012C34,        4, base=16,    bitRange=22-22
 8074                           ;'SDIO_STA.CEATAEND`                   EQU 0x40012C34,        4, base=16,    bitRange=23-23
 8075                           
 8076                           SDIO_ICR                            EQU 0x40012C38
 8077                           ;'SDIO_ICR.CCRCFAILC`                  EQU 0x40012C38,        4, base=16,    bitRange=0-0
 8078                           ;'SDIO_ICR.DCRCFAILC`                  EQU 0x40012C38,        4, base=16,    bitRange=1-1
 8079                           ;'SDIO_ICR.CTIMEOUTC`                  EQU 0x40012C38,        4, base=16,    bitRange=2-2
 8080                           ;'SDIO_ICR.DTIMEOUTC`                  EQU 0x40012C38,        4, base=16,    bitRange=3-3
 8081                           ;'SDIO_ICR.TXUNDERRC`                  EQU 0x40012C38,        4, base=16,    bitRange=4-4
 8082                           ;'SDIO_ICR.RXOVERRC`                   EQU 0x40012C38,        4, base=16,    bitRange=5-5
 8083                           ;'SDIO_ICR.CMDRENDC`                   EQU 0x40012C38,        4, base=16,    bitRange=6-6
 8084                           ;'SDIO_ICR.CMDSENTC`                   EQU 0x40012C38,        4, base=16,    bitRange=7-7
 8085                           ;'SDIO_ICR.DATAENDC`                   EQU 0x40012C38,        4, base=16,    bitRange=8-8
 8086                           ;'SDIO_ICR.STBITERRC`                  EQU 0x40012C38,        4, base=16,    bitRange=9-9
 8087                           ;'SDIO_ICR.DBCKENDC`                   EQU 0x40012C38,        4, base=16,    bitRange=10-10
 8088                           ;'SDIO_ICR.SDIOITC`                    EQU 0x40012C38,        4, base=16,    bitRange=22-22
 8089                           ;'SDIO_ICR.CEATAENDC`                  EQU 0x40012C38,        4, base=16,    bitRange=23-23
 8090                           
 8091                           SDIO_MASK                           EQU 0x40012C3C
 8092                           ;'SDIO_MASK.CCRCFAILIE`                EQU 0x40012C3C,        4, base=16,    bitRange=0-0
 8093                           ;'SDIO_MASK.DCRCFAILIE`                EQU 0x40012C3C,        4, base=16,    bitRange=1-1
 8094                           ;'SDIO_MASK.CTIMEOUTIE`                EQU 0x40012C3C,        4, base=16,    bitRange=2-2
 8095                           ;'SDIO_MASK.DTIMEOUTIE`                EQU 0x40012C3C,        4, base=16,    bitRange=3-3
 8096                           ;'SDIO_MASK.TXUNDERRIE`                EQU 0x40012C3C,        4, base=16,    bitRange=4-4
 8097                           ;'SDIO_MASK.RXOVERRIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=5-5
 8098                           ;'SDIO_MASK.CMDRENDIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=6-6
 8099                           ;'SDIO_MASK.CMDSENTIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=7-7
 8100                           ;'SDIO_MASK.DATAENDIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=8-8
 8101                           ;'SDIO_MASK.STBITERRIE`                EQU 0x40012C3C,        4, base=16,    bitRange=9-9
 8102                           ;'SDIO_MASK.DBCKENDIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=10-10
 8103                           ;'SDIO_MASK.CMDACTIE`                  EQU 0x40012C3C,        4, base=16,    bitRange=11-11
 8104                           ;'SDIO_MASK.TXACTIE`                   EQU 0x40012C3C,        4, base=16,    bitRange=12-12
 8105                           ;'SDIO_MASK.RXACTIE`                   EQU 0x40012C3C,        4, base=16,    bitRange=13-13
 8106                           ;'SDIO_MASK.TXFIFOHEIE`                EQU 0x40012C3C,        4, base=16,    bitRange=14-14
 8107                           ;'SDIO_MASK.RXFIFOHFIE`                EQU 0x40012C3C,        4, base=16,    bitRange=15-15
 8108                           ;'SDIO_MASK.TXFIFOFIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=16-16
 8109                           ;'SDIO_MASK.RXFIFOFIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=17-17
 8110                           ;'SDIO_MASK.TXFIFOEIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=18-18
 8111                           ;'SDIO_MASK.RXFIFOEIE`                 EQU 0x40012C3C,        4, base=16,    bitRange=19-19
 8112                           ;'SDIO_MASK.TXDAVLIE`                  EQU 0x40012C3C,        4, base=16,    bitRange=20-20
 8113                           ;'SDIO_MASK.RXDAVLIE`                  EQU 0x40012C3C,        4, base=16,    bitRange=21-21
 8114                           ;'SDIO_MASK.SDIOITIE`                  EQU 0x40012C3C,        4, base=16,    bitRange=22-22
 8115                           ;'SDIO_MASK.CEATAENDIE`                EQU 0x40012C3C,        4, base=16,    bitRange=23-23
 8116                           
 8117                           SDIO_FIFOCNT                        EQU 0x40012C48
 8118                           ;'SDIO_FIFOCNT.FIFOCOUNT`              EQU 0x40012C48,        4, base=16,    bitRange=0-23
 8119                           
 8120                           SDIO_FIFO                           EQU 0x40012C80
 8121                           
 8122                           
 8123                           ;
 8124                           ;               USART1
 8125                           ;
 8126                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8127                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8128                           
 8129                           USART1_SR                           EQU 0x40011000
 8130                           ;'USART1_SR.PE`                        EQU 0x40011000,        4, base=16,    bitRange=0-0
 8131                           ;'USART1_SR.FE`                        EQU 0x40011000,        4, base=16,    bitRange=1-1
 8132                           ;'USART1_SR.NE`                        EQU 0x40011000,        4, base=16,    bitRange=2-2
 8133                           ;'USART1_SR.ORE`                       EQU 0x40011000,        4, base=16,    bitRange=3-3
 8134                           ;'USART1_SR.IDLE`                      EQU 0x40011000,        4, base=16,    bitRange=4-4
 8135                           ;'USART1_SR.RXNE`                      EQU 0x40011000,        4, base=16,    bitRange=5-5
 8136                           ;'USART1_SR.TC`                        EQU 0x40011000,        4, base=16,    bitRange=6-6
 8137                           ;'USART1_SR.TXE`                       EQU 0x40011000,        4, base=16,    bitRange=7-7
 8138                           ;'USART1_SR.LBD`                       EQU 0x40011000,        4, base=16,    bitRange=8-8
 8139                           ;'USART1_SR.CTS`                       EQU 0x40011000,        4, base=16,    bitRange=9-9
 8140                           
 8141                           USART1_DR                           EQU 0x40011004
 8142                           ;'USART1_DR.DR`                        EQU 0x40011004,        4, base=16,    bitRange=0-8
 8143                           
 8144                           USART1_BRR                          EQU 0x40011008
 8145                           ;'USART1_BRR.DIV_Fraction`             EQU 0x40011008,        4, base=16,    bitRange=0-3
 8146                           ;'USART1_BRR.DIV_Mantissa`             EQU 0x40011008,        4, base=16,    bitRange=4-15
 8147                           
 8148                           USART1_CR1                          EQU 0x4001100C
 8149                           ;'USART1_CR1.SBK`                      EQU 0x4001100C,        4, base=16,    bitRange=0-0
 8150                           ;'USART1_CR1.RWU`                      EQU 0x4001100C,        4, base=16,    bitRange=1-1
 8151                           ;'USART1_CR1.RE`                       EQU 0x4001100C,        4, base=16,    bitRange=2-2
 8152                           ;'USART1_CR1.TE`                       EQU 0x4001100C,        4, base=16,    bitRange=3-3
 8153                           ;'USART1_CR1.IDLEIE`                   EQU 0x4001100C,        4, base=16,    bitRange=4-4
 8154                           ;'USART1_CR1.RXNEIE`                   EQU 0x4001100C,        4, base=16,    bitRange=5-5
 8155                           ;'USART1_CR1.TCIE`                     EQU 0x4001100C,        4, base=16,    bitRange=6-6
 8156                           ;'USART1_CR1.TXEIE`                    EQU 0x4001100C,        4, base=16,    bitRange=7-7
 8157                           ;'USART1_CR1.PEIE`                     EQU 0x4001100C,        4, base=16,    bitRange=8-8
 8158                           ;'USART1_CR1.PS`                       EQU 0x4001100C,        4, base=16,    bitRange=9-9
 8159                           ;'USART1_CR1.PCE`                      EQU 0x4001100C,        4, base=16,    bitRange=10-10
 8160                           ;'USART1_CR1.WAKE`                     EQU 0x4001100C,        4, base=16,    bitRange=11-11
 8161                           ;'USART1_CR1.M`                        EQU 0x4001100C,        4, base=16,    bitRange=12-12
 8162                           ;'USART1_CR1.UE`                       EQU 0x4001100C,        4, base=16,    bitRange=13-13
 8163                           
 8164                           USART1_CR2                          EQU 0x40011010
 8165                           ;'USART1_CR2.ADD`                      EQU 0x40011010,        4, base=16,    bitRange=0-3
 8166                           ;'USART1_CR2.LBDL`                     EQU 0x40011010,        4, base=16,    bitRange=5-5
 8167                           ;'USART1_CR2.LBDIE`                    EQU 0x40011010,        4, base=16,    bitRange=6-6
 8168                           ;'USART1_CR2.LBCL`                     EQU 0x40011010,        4, base=16,    bitRange=8-8
 8169                           ;'USART1_CR2.CPHA`                     EQU 0x40011010,        4, base=16,    bitRange=9-9
 8170                           ;'USART1_CR2.CPOL`                     EQU 0x40011010,        4, base=16,    bitRange=10-10
 8171                           ;'USART1_CR2.CLKEN`                    EQU 0x40011010,        4, base=16,    bitRange=11-11
 8172                           ;'USART1_CR2.STOP`                     EQU 0x40011010,        4, base=16,    bitRange=12-13
 8173                           ;'USART1_CR2.LINEN`                    EQU 0x40011010,        4, base=16,    bitRange=14-14
 8174                           
 8175                           USART1_CR3                          EQU 0x40011014
 8176                           ;'USART1_CR3.EIE`                      EQU 0x40011014,        4, base=16,    bitRange=0-0
 8177                           ;'USART1_CR3.IREN`                     EQU 0x40011014,        4, base=16,    bitRange=1-1
 8178                           ;'USART1_CR3.IRLP`                     EQU 0x40011014,        4, base=16,    bitRange=2-2
 8179                           ;'USART1_CR3.HDSEL`                    EQU 0x40011014,        4, base=16,    bitRange=3-3
 8180                           ;'USART1_CR3.NACK`                     EQU 0x40011014,        4, base=16,    bitRange=4-4
 8181                           ;'USART1_CR3.SCEN`                     EQU 0x40011014,        4, base=16,    bitRange=5-5
 8182                           ;'USART1_CR3.DMAR`                     EQU 0x40011014,        4, base=16,    bitRange=6-6
 8183                           ;'USART1_CR3.DMAT`                     EQU 0x40011014,        4, base=16,    bitRange=7-7
 8184                           ;'USART1_CR3.RTSE`                     EQU 0x40011014,        4, base=16,    bitRange=8-8
 8185                           ;'USART1_CR3.CTSE`                     EQU 0x40011014,        4, base=16,    bitRange=9-9
 8186                           ;'USART1_CR3.CTSIE`                    EQU 0x40011014,        4, base=16,    bitRange=10-10
 8187                           
 8188                           USART1_GTPR                         EQU 0x40011018
 8189                           ;'USART1_GTPR.PSC`                     EQU 0x40011018,        4, base=16,    bitRange=0-7
 8190                           ;'USART1_GTPR.GT`                      EQU 0x40011018,        4, base=16,    bitRange=8-15
 8191                           
 8192                           
 8193                           ;
 8194                           ;               USART2
 8195                           ;
 8196                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8197                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8198                           
 8199                           USART2_SR                           EQU 0x40004400
 8200                           ;'USART2_SR.PE`                        EQU 0x40004400,        4, base=16,    bitRange=0-0
 8201                           ;'USART2_SR.FE`                        EQU 0x40004400,        4, base=16,    bitRange=1-1
 8202                           ;'USART2_SR.NE`                        EQU 0x40004400,        4, base=16,    bitRange=2-2
 8203                           ;'USART2_SR.ORE`                       EQU 0x40004400,        4, base=16,    bitRange=3-3
 8204                           ;'USART2_SR.IDLE`                      EQU 0x40004400,        4, base=16,    bitRange=4-4
 8205                           ;'USART2_SR.RXNE`                      EQU 0x40004400,        4, base=16,    bitRange=5-5
 8206                           ;'USART2_SR.TC`                        EQU 0x40004400,        4, base=16,    bitRange=6-6
 8207                           ;'USART2_SR.TXE`                       EQU 0x40004400,        4, base=16,    bitRange=7-7
 8208                           ;'USART2_SR.LBD`                       EQU 0x40004400,        4, base=16,    bitRange=8-8
 8209                           ;'USART2_SR.CTS`                       EQU 0x40004400,        4, base=16,    bitRange=9-9
 8210                           
 8211                           USART2_DR                           EQU 0x40004404
 8212                           ;'USART2_DR.DR`                        EQU 0x40004404,        4, base=16,    bitRange=0-8
 8213                           
 8214                           USART2_BRR                          EQU 0x40004408
 8215                           ;'USART2_BRR.DIV_Fraction`             EQU 0x40004408,        4, base=16,    bitRange=0-3
 8216                           ;'USART2_BRR.DIV_Mantissa`             EQU 0x40004408,        4, base=16,    bitRange=4-15
 8217                           
 8218                           USART2_CR1                          EQU 0x4000440C
 8219                           ;'USART2_CR1.SBK`                      EQU 0x4000440C,        4, base=16,    bitRange=0-0
 8220                           ;'USART2_CR1.RWU`                      EQU 0x4000440C,        4, base=16,    bitRange=1-1
 8221                           ;'USART2_CR1.RE`                       EQU 0x4000440C,        4, base=16,    bitRange=2-2
 8222                           ;'USART2_CR1.TE`                       EQU 0x4000440C,        4, base=16,    bitRange=3-3
 8223                           ;'USART2_CR1.IDLEIE`                   EQU 0x4000440C,        4, base=16,    bitRange=4-4
 8224                           ;'USART2_CR1.RXNEIE`                   EQU 0x4000440C,        4, base=16,    bitRange=5-5
 8225                           ;'USART2_CR1.TCIE`                     EQU 0x4000440C,        4, base=16,    bitRange=6-6
 8226                           ;'USART2_CR1.TXEIE`                    EQU 0x4000440C,        4, base=16,    bitRange=7-7
 8227                           ;'USART2_CR1.PEIE`                     EQU 0x4000440C,        4, base=16,    bitRange=8-8
 8228                           ;'USART2_CR1.PS`                       EQU 0x4000440C,        4, base=16,    bitRange=9-9
 8229                           ;'USART2_CR1.PCE`                      EQU 0x4000440C,        4, base=16,    bitRange=10-10
 8230                           ;'USART2_CR1.WAKE`                     EQU 0x4000440C,        4, base=16,    bitRange=11-11
 8231                           ;'USART2_CR1.M`                        EQU 0x4000440C,        4, base=16,    bitRange=12-12
 8232                           ;'USART2_CR1.UE`                       EQU 0x4000440C,        4, base=16,    bitRange=13-13
 8233                           
 8234                           USART2_CR2                          EQU 0x40004410
 8235                           ;'USART2_CR2.ADD`                      EQU 0x40004410,        4, base=16,    bitRange=0-3
 8236                           ;'USART2_CR2.LBDL`                     EQU 0x40004410,        4, base=16,    bitRange=5-5
 8237                           ;'USART2_CR2.LBDIE`                    EQU 0x40004410,        4, base=16,    bitRange=6-6
 8238                           ;'USART2_CR2.LBCL`                     EQU 0x40004410,        4, base=16,    bitRange=8-8
 8239                           ;'USART2_CR2.CPHA`                     EQU 0x40004410,        4, base=16,    bitRange=9-9
 8240                           ;'USART2_CR2.CPOL`                     EQU 0x40004410,        4, base=16,    bitRange=10-10
 8241                           ;'USART2_CR2.CLKEN`                    EQU 0x40004410,        4, base=16,    bitRange=11-11
 8242                           ;'USART2_CR2.STOP`                     EQU 0x40004410,        4, base=16,    bitRange=12-13
 8243                           ;'USART2_CR2.LINEN`                    EQU 0x40004410,        4, base=16,    bitRange=14-14
 8244                           
 8245                           USART2_CR3                          EQU 0x40004414
 8246                           ;'USART2_CR3.EIE`                      EQU 0x40004414,        4, base=16,    bitRange=0-0
 8247                           ;'USART2_CR3.IREN`                     EQU 0x40004414,        4, base=16,    bitRange=1-1
 8248                           ;'USART2_CR3.IRLP`                     EQU 0x40004414,        4, base=16,    bitRange=2-2
 8249                           ;'USART2_CR3.HDSEL`                    EQU 0x40004414,        4, base=16,    bitRange=3-3
 8250                           ;'USART2_CR3.NACK`                     EQU 0x40004414,        4, base=16,    bitRange=4-4
 8251                           ;'USART2_CR3.SCEN`                     EQU 0x40004414,        4, base=16,    bitRange=5-5
 8252                           ;'USART2_CR3.DMAR`                     EQU 0x40004414,        4, base=16,    bitRange=6-6
 8253                           ;'USART2_CR3.DMAT`                     EQU 0x40004414,        4, base=16,    bitRange=7-7
 8254                           ;'USART2_CR3.RTSE`                     EQU 0x40004414,        4, base=16,    bitRange=8-8
 8255                           ;'USART2_CR3.CTSE`                     EQU 0x40004414,        4, base=16,    bitRange=9-9
 8256                           ;'USART2_CR3.CTSIE`                    EQU 0x40004414,        4, base=16,    bitRange=10-10
 8257                           
 8258                           USART2_GTPR                         EQU 0x40004418
 8259                           ;'USART2_GTPR.PSC`                     EQU 0x40004418,        4, base=16,    bitRange=0-7
 8260                           ;'USART2_GTPR.GT`                      EQU 0x40004418,        4, base=16,    bitRange=8-15
 8261                           
 8262                           
 8263                           ;
 8264                           ;               USART3
 8265                           ;
 8266                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8267                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8268                           
 8269                           USART3_SR                           EQU 0x40004800
 8270                           ;'USART3_SR.PE`                        EQU 0x40004800,        4, base=16,    bitRange=0-0
 8271                           ;'USART3_SR.FE`                        EQU 0x40004800,        4, base=16,    bitRange=1-1
 8272                           ;'USART3_SR.NE`                        EQU 0x40004800,        4, base=16,    bitRange=2-2
 8273                           ;'USART3_SR.ORE`                       EQU 0x40004800,        4, base=16,    bitRange=3-3
 8274                           ;'USART3_SR.IDLE`                      EQU 0x40004800,        4, base=16,    bitRange=4-4
 8275                           ;'USART3_SR.RXNE`                      EQU 0x40004800,        4, base=16,    bitRange=5-5
 8276                           ;'USART3_SR.TC`                        EQU 0x40004800,        4, base=16,    bitRange=6-6
 8277                           ;'USART3_SR.TXE`                       EQU 0x40004800,        4, base=16,    bitRange=7-7
 8278                           ;'USART3_SR.LBD`                       EQU 0x40004800,        4, base=16,    bitRange=8-8
 8279                           ;'USART3_SR.CTS`                       EQU 0x40004800,        4, base=16,    bitRange=9-9
 8280                           
 8281                           USART3_DR                           EQU 0x40004804
 8282                           ;'USART3_DR.DR`                        EQU 0x40004804,        4, base=16,    bitRange=0-8
 8283                           
 8284                           USART3_BRR                          EQU 0x40004808
 8285                           ;'USART3_BRR.DIV_Fraction`             EQU 0x40004808,        4, base=16,    bitRange=0-3
 8286                           ;'USART3_BRR.DIV_Mantissa`             EQU 0x40004808,        4, base=16,    bitRange=4-15
 8287                           
 8288                           USART3_CR1                          EQU 0x4000480C
 8289                           ;'USART3_CR1.SBK`                      EQU 0x4000480C,        4, base=16,    bitRange=0-0
 8290                           ;'USART3_CR1.RWU`                      EQU 0x4000480C,        4, base=16,    bitRange=1-1
 8291                           ;'USART3_CR1.RE`                       EQU 0x4000480C,        4, base=16,    bitRange=2-2
 8292                           ;'USART3_CR1.TE`                       EQU 0x4000480C,        4, base=16,    bitRange=3-3
 8293                           ;'USART3_CR1.IDLEIE`                   EQU 0x4000480C,        4, base=16,    bitRange=4-4
 8294                           ;'USART3_CR1.RXNEIE`                   EQU 0x4000480C,        4, base=16,    bitRange=5-5
 8295                           ;'USART3_CR1.TCIE`                     EQU 0x4000480C,        4, base=16,    bitRange=6-6
 8296                           ;'USART3_CR1.TXEIE`                    EQU 0x4000480C,        4, base=16,    bitRange=7-7
 8297                           ;'USART3_CR1.PEIE`                     EQU 0x4000480C,        4, base=16,    bitRange=8-8
 8298                           ;'USART3_CR1.PS`                       EQU 0x4000480C,        4, base=16,    bitRange=9-9
 8299                           ;'USART3_CR1.PCE`                      EQU 0x4000480C,        4, base=16,    bitRange=10-10
 8300                           ;'USART3_CR1.WAKE`                     EQU 0x4000480C,        4, base=16,    bitRange=11-11
 8301                           ;'USART3_CR1.M`                        EQU 0x4000480C,        4, base=16,    bitRange=12-12
 8302                           ;'USART3_CR1.UE`                       EQU 0x4000480C,        4, base=16,    bitRange=13-13
 8303                           
 8304                           USART3_CR2                          EQU 0x40004810
 8305                           ;'USART3_CR2.ADD`                      EQU 0x40004810,        4, base=16,    bitRange=0-3
 8306                           ;'USART3_CR2.LBDL`                     EQU 0x40004810,        4, base=16,    bitRange=5-5
 8307                           ;'USART3_CR2.LBDIE`                    EQU 0x40004810,        4, base=16,    bitRange=6-6
 8308                           ;'USART3_CR2.LBCL`                     EQU 0x40004810,        4, base=16,    bitRange=8-8
 8309                           ;'USART3_CR2.CPHA`                     EQU 0x40004810,        4, base=16,    bitRange=9-9
 8310                           ;'USART3_CR2.CPOL`                     EQU 0x40004810,        4, base=16,    bitRange=10-10
 8311                           ;'USART3_CR2.CLKEN`                    EQU 0x40004810,        4, base=16,    bitRange=11-11
 8312                           ;'USART3_CR2.STOP`                     EQU 0x40004810,        4, base=16,    bitRange=12-13
 8313                           ;'USART3_CR2.LINEN`                    EQU 0x40004810,        4, base=16,    bitRange=14-14
 8314                           
 8315                           USART3_CR3                          EQU 0x40004814
 8316                           ;'USART3_CR3.EIE`                      EQU 0x40004814,        4, base=16,    bitRange=0-0
 8317                           ;'USART3_CR3.IREN`                     EQU 0x40004814,        4, base=16,    bitRange=1-1
 8318                           ;'USART3_CR3.IRLP`                     EQU 0x40004814,        4, base=16,    bitRange=2-2
 8319                           ;'USART3_CR3.HDSEL`                    EQU 0x40004814,        4, base=16,    bitRange=3-3
 8320                           ;'USART3_CR3.NACK`                     EQU 0x40004814,        4, base=16,    bitRange=4-4
 8321                           ;'USART3_CR3.SCEN`                     EQU 0x40004814,        4, base=16,    bitRange=5-5
 8322                           ;'USART3_CR3.DMAR`                     EQU 0x40004814,        4, base=16,    bitRange=6-6
 8323                           ;'USART3_CR3.DMAT`                     EQU 0x40004814,        4, base=16,    bitRange=7-7
 8324                           ;'USART3_CR3.RTSE`                     EQU 0x40004814,        4, base=16,    bitRange=8-8
 8325                           ;'USART3_CR3.CTSE`                     EQU 0x40004814,        4, base=16,    bitRange=9-9
 8326                           ;'USART3_CR3.CTSIE`                    EQU 0x40004814,        4, base=16,    bitRange=10-10
 8327                           
 8328                           USART3_GTPR                         EQU 0x40004818
 8329                           ;'USART3_GTPR.PSC`                     EQU 0x40004818,        4, base=16,    bitRange=0-7
 8330                           ;'USART3_GTPR.GT`                      EQU 0x40004818,        4, base=16,    bitRange=8-15
 8331                           
 8332                           
 8333                           ;
 8334                           ;               UART4
 8335                           ;
 8336                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8337                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8338                           
 8339                           UART4_SR                            EQU 0x40004C00
 8340                           ;'UART4_SR.PE`                         EQU 0x40004C00,        4, base=16,    bitRange=0-0
 8341                           ;'UART4_SR.FE`                         EQU 0x40004C00,        4, base=16,    bitRange=1-1
 8342                           ;'UART4_SR.NE`                         EQU 0x40004C00,        4, base=16,    bitRange=2-2
 8343                           ;'UART4_SR.ORE`                        EQU 0x40004C00,        4, base=16,    bitRange=3-3
 8344                           ;'UART4_SR.IDLE`                       EQU 0x40004C00,        4, base=16,    bitRange=4-4
 8345                           ;'UART4_SR.RXNE`                       EQU 0x40004C00,        4, base=16,    bitRange=5-5
 8346                           ;'UART4_SR.TC`                         EQU 0x40004C00,        4, base=16,    bitRange=6-6
 8347                           ;'UART4_SR.TXE`                        EQU 0x40004C00,        4, base=16,    bitRange=7-7
 8348                           ;'UART4_SR.LBD`                        EQU 0x40004C00,        4, base=16,    bitRange=8-8
 8349                           
 8350                           UART4_DR                            EQU 0x40004C04
 8351                           ;'UART4_DR.DR`                         EQU 0x40004C04,        4, base=16,    bitRange=0-8
 8352                           
 8353                           UART4_BRR                           EQU 0x40004C08
 8354                           ;'UART4_BRR.DIV_Fraction`              EQU 0x40004C08,        4, base=16,    bitRange=0-3
 8355                           ;'UART4_BRR.DIV_Mantissa`              EQU 0x40004C08,        4, base=16,    bitRange=4-15
 8356                           
 8357                           UART4_CR1                           EQU 0x40004C0C
 8358                           ;'UART4_CR1.SBK`                       EQU 0x40004C0C,        4, base=16,    bitRange=0-0
 8359                           ;'UART4_CR1.RWU`                       EQU 0x40004C0C,        4, base=16,    bitRange=1-1
 8360                           ;'UART4_CR1.RE`                        EQU 0x40004C0C,        4, base=16,    bitRange=2-2
 8361                           ;'UART4_CR1.TE`                        EQU 0x40004C0C,        4, base=16,    bitRange=3-3
 8362                           ;'UART4_CR1.IDLEIE`                    EQU 0x40004C0C,        4, base=16,    bitRange=4-4
 8363                           ;'UART4_CR1.RXNEIE`                    EQU 0x40004C0C,        4, base=16,    bitRange=5-5
 8364                           ;'UART4_CR1.TCIE`                      EQU 0x40004C0C,        4, base=16,    bitRange=6-6
 8365                           ;'UART4_CR1.TXEIE`                     EQU 0x40004C0C,        4, base=16,    bitRange=7-7
 8366                           ;'UART4_CR1.PEIE`                      EQU 0x40004C0C,        4, base=16,    bitRange=8-8
 8367                           ;'UART4_CR1.PS`                        EQU 0x40004C0C,        4, base=16,    bitRange=9-9
 8368                           ;'UART4_CR1.PCE`                       EQU 0x40004C0C,        4, base=16,    bitRange=10-10
 8369                           ;'UART4_CR1.WAKE`                      EQU 0x40004C0C,        4, base=16,    bitRange=11-11
 8370                           ;'UART4_CR1.M`                         EQU 0x40004C0C,        4, base=16,    bitRange=12-12
 8371                           ;'UART4_CR1.UE`                        EQU 0x40004C0C,        4, base=16,    bitRange=13-13
 8372                           
 8373                           UART4_CR2                           EQU 0x40004C10
 8374                           ;'UART4_CR2.ADD`                       EQU 0x40004C10,        4, base=16,    bitRange=0-3
 8375                           ;'UART4_CR2.LBDL`                      EQU 0x40004C10,        4, base=16,    bitRange=5-5
 8376                           ;'UART4_CR2.LBDIE`                     EQU 0x40004C10,        4, base=16,    bitRange=6-6
 8377                           ;'UART4_CR2.STOP`                      EQU 0x40004C10,        4, base=16,    bitRange=12-13
 8378                           ;'UART4_CR2.LINEN`                     EQU 0x40004C10,        4, base=16,    bitRange=14-14
 8379                           
 8380                           UART4_CR3                           EQU 0x40004C14
 8381                           ;'UART4_CR3.EIE`                       EQU 0x40004C14,        4, base=16,    bitRange=0-0
 8382                           ;'UART4_CR3.IREN`                      EQU 0x40004C14,        4, base=16,    bitRange=1-1
 8383                           ;'UART4_CR3.IRLP`                      EQU 0x40004C14,        4, base=16,    bitRange=2-2
 8384                           ;'UART4_CR3.HDSEL`                     EQU 0x40004C14,        4, base=16,    bitRange=3-3
 8385                           ;'UART4_CR3.DMAR`                      EQU 0x40004C14,        4, base=16,    bitRange=6-6
 8386                           ;'UART4_CR3.DMAT`                      EQU 0x40004C14,        4, base=16,    bitRange=7-7
 8387                           
 8388                           
 8389                           ;
 8390                           ;               UART5
 8391                           ;
 8392                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8393                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8394                           
 8395                           UART5_SR                            EQU 0x40005000
 8396                           ;'UART5_SR.PE`                         EQU 0x40005000,        4, base=16,    bitRange=0-0
 8397                           ;'UART5_SR.FE`                         EQU 0x40005000,        4, base=16,    bitRange=1-1
 8398                           ;'UART5_SR.NE`                         EQU 0x40005000,        4, base=16,    bitRange=2-2
 8399                           ;'UART5_SR.ORE`                        EQU 0x40005000,        4, base=16,    bitRange=3-3
 8400                           ;'UART5_SR.IDLE`                       EQU 0x40005000,        4, base=16,    bitRange=4-4
 8401                           ;'UART5_SR.RXNE`                       EQU 0x40005000,        4, base=16,    bitRange=5-5
 8402                           ;'UART5_SR.TC`                         EQU 0x40005000,        4, base=16,    bitRange=6-6
 8403                           ;'UART5_SR.TXE`                        EQU 0x40005000,        4, base=16,    bitRange=7-7
 8404                           ;'UART5_SR.LBD`                        EQU 0x40005000,        4, base=16,    bitRange=8-8
 8405                           
 8406                           UART5_DR                            EQU 0x40005004
 8407                           ;'UART5_DR.DR`                         EQU 0x40005004,        4, base=16,    bitRange=0-8
 8408                           
 8409                           UART5_BRR                           EQU 0x40005008
 8410                           ;'UART5_BRR.DIV_Fraction`              EQU 0x40005008,        4, base=16,    bitRange=0-3
 8411                           ;'UART5_BRR.DIV_Mantissa`              EQU 0x40005008,        4, base=16,    bitRange=4-15
 8412                           
 8413                           UART5_CR1                           EQU 0x4000500C
 8414                           ;'UART5_CR1.SBK`                       EQU 0x4000500C,        4, base=16,    bitRange=0-0
 8415                           ;'UART5_CR1.RWU`                       EQU 0x4000500C,        4, base=16,    bitRange=1-1
 8416                           ;'UART5_CR1.RE`                        EQU 0x4000500C,        4, base=16,    bitRange=2-2
 8417                           ;'UART5_CR1.TE`                        EQU 0x4000500C,        4, base=16,    bitRange=3-3
 8418                           ;'UART5_CR1.IDLEIE`                    EQU 0x4000500C,        4, base=16,    bitRange=4-4
 8419                           ;'UART5_CR1.RXNEIE`                    EQU 0x4000500C,        4, base=16,    bitRange=5-5
 8420                           ;'UART5_CR1.TCIE`                      EQU 0x4000500C,        4, base=16,    bitRange=6-6
 8421                           ;'UART5_CR1.TXEIE`                     EQU 0x4000500C,        4, base=16,    bitRange=7-7
 8422                           ;'UART5_CR1.PEIE`                      EQU 0x4000500C,        4, base=16,    bitRange=8-8
 8423                           ;'UART5_CR1.PS`                        EQU 0x4000500C,        4, base=16,    bitRange=9-9
 8424                           ;'UART5_CR1.PCE`                       EQU 0x4000500C,        4, base=16,    bitRange=10-10
 8425                           ;'UART5_CR1.WAKE`                      EQU 0x4000500C,        4, base=16,    bitRange=11-11
 8426                           ;'UART5_CR1.M`                         EQU 0x4000500C,        4, base=16,    bitRange=12-12
 8427                           ;'UART5_CR1.UE`                        EQU 0x4000500C,        4, base=16,    bitRange=13-13
 8428                           
 8429                           UART5_CR2                           EQU 0x40005010
 8430                           ;'UART5_CR2.ADD`                       EQU 0x40005010,        4, base=16,    bitRange=0-3
 8431                           ;'UART5_CR2.LBDL`                      EQU 0x40005010,        4, base=16,    bitRange=5-5
 8432                           ;'UART5_CR2.LBDIE`                     EQU 0x40005010,        4, base=16,    bitRange=6-6
 8433                           ;'UART5_CR2.STOP`                      EQU 0x40005010,        4, base=16,    bitRange=12-13
 8434                           ;'UART5_CR2.LINEN`                     EQU 0x40005010,        4, base=16,    bitRange=14-14
 8435                           
 8436                           UART5_CR3                           EQU 0x40005014
 8437                           ;'UART5_CR3.EIE`                       EQU 0x40005014,        4, base=16,    bitRange=0-0
 8438                           ;'UART5_CR3.IREN`                      EQU 0x40005014,        4, base=16,    bitRange=1-1
 8439                           ;'UART5_CR3.IRLP`                      EQU 0x40005014,        4, base=16,    bitRange=2-2
 8440                           ;'UART5_CR3.HDSEL`                     EQU 0x40005014,        4, base=16,    bitRange=3-3
 8441                           
 8442                           
 8443                           ;
 8444                           ;               UART6
 8445                           ;
 8446                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8447                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8448                           
 8449                           UART6_SR                            EQU 0x40011400
 8450                           ;'UART6_SR.PE`                         EQU 0x40011400,        4, base=16,    bitRange=0-0
 8451                           ;'UART6_SR.FE`                         EQU 0x40011400,        4, base=16,    bitRange=1-1
 8452                           ;'UART6_SR.NE`                         EQU 0x40011400,        4, base=16,    bitRange=2-2
 8453                           ;'UART6_SR.ORE`                        EQU 0x40011400,        4, base=16,    bitRange=3-3
 8454                           ;'UART6_SR.IDLE`                       EQU 0x40011400,        4, base=16,    bitRange=4-4
 8455                           ;'UART6_SR.RXNE`                       EQU 0x40011400,        4, base=16,    bitRange=5-5
 8456                           ;'UART6_SR.TC`                         EQU 0x40011400,        4, base=16,    bitRange=6-6
 8457                           ;'UART6_SR.TXE`                        EQU 0x40011400,        4, base=16,    bitRange=7-7
 8458                           ;'UART6_SR.LBD`                        EQU 0x40011400,        4, base=16,    bitRange=8-8
 8459                           
 8460                           UART6_DR                            EQU 0x40011404
 8461                           ;'UART6_DR.DR`                         EQU 0x40011404,        4, base=16,    bitRange=0-8
 8462                           
 8463                           UART6_BRR                           EQU 0x40011408
 8464                           ;'UART6_BRR.DIV_Fraction`              EQU 0x40011408,        4, base=16,    bitRange=0-3
 8465                           ;'UART6_BRR.DIV_Mantissa`              EQU 0x40011408,        4, base=16,    bitRange=4-15
 8466                           
 8467                           UART6_CR1                           EQU 0x4001140C
 8468                           ;'UART6_CR1.SBK`                       EQU 0x4001140C,        4, base=16,    bitRange=0-0
 8469                           ;'UART6_CR1.RWU`                       EQU 0x4001140C,        4, base=16,    bitRange=1-1
 8470                           ;'UART6_CR1.RE`                        EQU 0x4001140C,        4, base=16,    bitRange=2-2
 8471                           ;'UART6_CR1.TE`                        EQU 0x4001140C,        4, base=16,    bitRange=3-3
 8472                           ;'UART6_CR1.IDLEIE`                    EQU 0x4001140C,        4, base=16,    bitRange=4-4
 8473                           ;'UART6_CR1.RXNEIE`                    EQU 0x4001140C,        4, base=16,    bitRange=5-5
 8474                           ;'UART6_CR1.TCIE`                      EQU 0x4001140C,        4, base=16,    bitRange=6-6
 8475                           ;'UART6_CR1.TXEIE`                     EQU 0x4001140C,        4, base=16,    bitRange=7-7
 8476                           ;'UART6_CR1.PEIE`                      EQU 0x4001140C,        4, base=16,    bitRange=8-8
 8477                           ;'UART6_CR1.PS`                        EQU 0x4001140C,        4, base=16,    bitRange=9-9
 8478                           ;'UART6_CR1.PCE`                       EQU 0x4001140C,        4, base=16,    bitRange=10-10
 8479                           ;'UART6_CR1.WAKE`                      EQU 0x4001140C,        4, base=16,    bitRange=11-11
 8480                           ;'UART6_CR1.M`                         EQU 0x4001140C,        4, base=16,    bitRange=12-12
 8481                           ;'UART6_CR1.UE`                        EQU 0x4001140C,        4, base=16,    bitRange=13-13
 8482                           
 8483                           UART6_CR2                           EQU 0x40011410
 8484                           ;'UART6_CR2.ADD`                       EQU 0x40011410,        4, base=16,    bitRange=0-3
 8485                           ;'UART6_CR2.LBDL`                      EQU 0x40011410,        4, base=16,    bitRange=5-5
 8486                           ;'UART6_CR2.LBDIE`                     EQU 0x40011410,        4, base=16,    bitRange=6-6
 8487                           ;'UART6_CR2.STOP`                      EQU 0x40011410,        4, base=16,    bitRange=12-13
 8488                           ;'UART6_CR2.LINEN`                     EQU 0x40011410,        4, base=16,    bitRange=14-14
 8489                           
 8490                           UART6_CR3                           EQU 0x40011414
 8491                           ;'UART6_CR3.EIE`                       EQU 0x40011414,        4, base=16,    bitRange=0-0
 8492                           ;'UART6_CR3.IREN`                      EQU 0x40011414,        4, base=16,    bitRange=1-1
 8493                           ;'UART6_CR3.IRLP`                      EQU 0x40011414,        4, base=16,    bitRange=2-2
 8494                           ;'UART6_CR3.HDSEL`                     EQU 0x40011414,        4, base=16,    bitRange=3-3
 8495                           
 8496                           
 8497                           ;
 8498                           ;               ADC
 8499                           ;
 8500                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8501                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8502                           
 8503                           ADC_CSR                             EQU 0x40012300
 8504                           ;'ADC_CSR.AWD1`                        EQU 0x40012300,        4, base=16,    bitRange=0-0
 8505                           ;'ADC_CSR.EOC1`                        EQU 0x40012300,        4, base=16,    bitRange=1-1
 8506                           ;'ADC_CSR.JEOC1`                       EQU 0x40012300,        4, base=16,    bitRange=2-2
 8507                           ;'ADC_CSR.JSTRT1`                      EQU 0x40012300,        4, base=16,    bitRange=3-3
 8508                           ;'ADC_CSR.STRT1`                       EQU 0x40012300,        4, base=16,    bitRange=4-4
 8509                           ;'ADC_CSR.OVR1`                        EQU 0x40012300,        4, base=16,    bitRange=5-5
 8510                           ;'ADC_CSR.AWD2`                        EQU 0x40012300,        4, base=16,    bitRange=8-8
 8511                           ;'ADC_CSR.EOC2`                        EQU 0x40012300,        4, base=16,    bitRange=9-9
 8512                           ;'ADC_CSR.JEOC2`                       EQU 0x40012300,        4, base=16,    bitRange=10-10
 8513                           ;'ADC_CSR.JSTRT2`                      EQU 0x40012300,        4, base=16,    bitRange=11-11
 8514                           ;'ADC_CSR.STRT2`                       EQU 0x40012300,        4, base=16,    bitRange=12-12
 8515                           ;'ADC_CSR.OVR2`                        EQU 0x40012300,        4, base=16,    bitRange=13-13
 8516                           ;'ADC_CSR.AWD3`                        EQU 0x40012300,        4, base=16,    bitRange=16-16
 8517                           ;'ADC_CSR.EOC3`                        EQU 0x40012300,        4, base=16,    bitRange=17-17
 8518                           ;'ADC_CSR.JEOC3`                       EQU 0x40012300,        4, base=16,    bitRange=18-18
 8519                           ;'ADC_CSR.JSTRT3`                      EQU 0x40012300,        4, base=16,    bitRange=19-19
 8520                           ;'ADC_CSR.STRT3`                       EQU 0x40012300,        4, base=16,    bitRange=20-20
 8521                           ;'ADC_CSR.OVR3`                        EQU 0x40012300,        4, base=16,    bitRange=21-21
 8522                           
 8523                           ADC_CCR                             EQU 0x40012304
 8524                           ;'ADC_CCR.MULTI`                       EQU 0x40012304,        4, base=16,    bitRange=0-4
 8525                           ;'ADC_CCR.DELAY`                       EQU 0x40012304,        4, base=16,    bitRange=8-11
 8526                           ;'ADC_CCR.DDS`                         EQU 0x40012304,        4, base=16,    bitRange=13-13
 8527                           ;'ADC_CCR.DMA`                         EQU 0x40012304,        4, base=16,    bitRange=14-15
 8528                           ;'ADC_CCR.ADCPRE`                      EQU 0x40012304,        4, base=16,    bitRange=16-17
 8529                           ;'ADC_CCR.VBATE`                       EQU 0x40012304,        4, base=16,    bitRange=22-22
 8530                           ;'ADC_CCR.TSVREFE`                     EQU 0x40012304,        4, base=16,    bitRange=23-23
 8531                           
 8532                           ADC_CDR                             EQU 0x40012308
 8533                           ;'ADC_CDR.DATA1`                       EQU 0x40012308,        4, base=16,    bitRange=0-15
 8534                           ;'ADC_CDR.DATA2`                       EQU 0x40012308,        4, base=16,    bitRange=16-31
 8535                           
 8536                           
 8537                           ;
 8538                           ;               ADC1
 8539                           ;
 8540                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8541                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8542                           
 8543                           ADC1_SR                             EQU 0x40012000
 8544                           ;'ADC1_SR.AWD`                         EQU 0x40012000,        4, base=16,    bitRange=0-0
 8545                           ;'ADC1_SR.EOC`                         EQU 0x40012000,        4, base=16,    bitRange=1-1
 8546                           ;'ADC1_SR.JEOC`                        EQU 0x40012000,        4, base=16,    bitRange=2-2
 8547                           ;'ADC1_SR.JSTRT`                       EQU 0x40012000,        4, base=16,    bitRange=3-3
 8548                           ;'ADC1_SR.STRT`                        EQU 0x40012000,        4, base=16,    bitRange=4-4
 8549                           ;'ADC1_SR.OVR`                         EQU 0x40012000,        4, base=16,    bitRange=5-5
 8550                           
 8551                           ADC1_CR1                            EQU 0x40012004
 8552                           ;'ADC1_CR1.AWDCH`                      EQU 0x40012004,        4, base=16,    bitRange=0-4
 8553                           ;'ADC1_CR1.EOCIE`                      EQU 0x40012004,        4, base=16,    bitRange=5-5
 8554                           ;'ADC1_CR1.AWDIE`                      EQU 0x40012004,        4, base=16,    bitRange=6-6
 8555                           ;'ADC1_CR1.JEOCIE`                     EQU 0x40012004,        4, base=16,    bitRange=7-7
 8556                           ;'ADC1_CR1.SCAN`                       EQU 0x40012004,        4, base=16,    bitRange=8-8
 8557                           ;'ADC1_CR1.AWDSGL`                     EQU 0x40012004,        4, base=16,    bitRange=9-9
 8558                           ;'ADC1_CR1.JAUTO`                      EQU 0x40012004,        4, base=16,    bitRange=10-10
 8559                           ;'ADC1_CR1.DISCEN`                     EQU 0x40012004,        4, base=16,    bitRange=11-11
 8560                           ;'ADC1_CR1.JDISCEN`                    EQU 0x40012004,        4, base=16,    bitRange=12-12
 8561                           ;'ADC1_CR1.DISCNUM`                    EQU 0x40012004,        4, base=16,    bitRange=13-15
 8562                           ;'ADC1_CR1.JAWDEN`                     EQU 0x40012004,        4, base=16,    bitRange=22-22
 8563                           ;'ADC1_CR1.AWDEN`                      EQU 0x40012004,        4, base=16,    bitRange=23-23
 8564                           ;'ADC1_CR1.RES`                        EQU 0x40012004,        4, base=16,    bitRange=24-25
 8565                           ;'ADC1_CR1.OVRIE`                      EQU 0x40012004,        4, base=16,    bitRange=26-26
 8566                           
 8567                           ADC1_CR2                            EQU 0x40012008
 8568                           ;'ADC1_CR2.ADON`                       EQU 0x40012008,        4, base=16,    bitRange=0-0
 8569                           ;'ADC1_CR2.CONT`                       EQU 0x40012008,        4, base=16,    bitRange=1-1
 8570                           ;'ADC1_CR2.DMA`                        EQU 0x40012008,        4, base=16,    bitRange=8-8
 8571                           ;'ADC1_CR2.DDS`                        EQU 0x40012008,        4, base=16,    bitRange=9-9
 8572                           ;'ADC1_CR2.EOCS`                       EQU 0x40012008,        4, base=16,    bitRange=10-10
 8573                           ;'ADC1_CR2.ALIGN`                      EQU 0x40012008,        4, base=16,    bitRange=11-11
 8574                           ;'ADC1_CR2.JEXTSEL`                    EQU 0x40012008,        4, base=16,    bitRange=16-19
 8575                           ;'ADC1_CR2.JEXTEN`                     EQU 0x40012008,        4, base=16,    bitRange=20-21
 8576                           ;'ADC1_CR2.JSWSTART`                   EQU 0x40012008,        4, base=16,    bitRange=22-22
 8577                           ;'ADC1_CR2.EXTSEL`                     EQU 0x40012008,        4, base=16,    bitRange=24-27
 8578                           ;'ADC1_CR2.EXTEN`                      EQU 0x40012008,        4, base=16,    bitRange=28-29
 8579                           ;'ADC1_CR2.SWSTART`                    EQU 0x40012008,        4, base=16,    bitRange=30-30
 8580                           
 8581                           ADC1_SMPR1                          EQU 0x4001200C
 8582                           ;'ADC1_SMPR1.SMP10`                    EQU 0x4001200C,        4, base=16,    bitRange=0-2
 8583                           ;'ADC1_SMPR1.SMP11`                    EQU 0x4001200C,        4, base=16,    bitRange=3-5
 8584                           ;'ADC1_SMPR1.SMP12`                    EQU 0x4001200C,        4, base=16,    bitRange=6-8
 8585                           ;'ADC1_SMPR1.SMP13`                    EQU 0x4001200C,        4, base=16,    bitRange=9-11
 8586                           ;'ADC1_SMPR1.SMP14`                    EQU 0x4001200C,        4, base=16,    bitRange=12-14
 8587                           ;'ADC1_SMPR1.SMP15`                    EQU 0x4001200C,        4, base=16,    bitRange=15-17
 8588                           ;'ADC1_SMPR1.SMP16`                    EQU 0x4001200C,        4, base=16,    bitRange=18-20
 8589                           ;'ADC1_SMPR1.SMP17`                    EQU 0x4001200C,        4, base=16,    bitRange=21-23
 8590                           ;'ADC1_SMPR1.SMP18`                    EQU 0x4001200C,        4, base=16,    bitRange=24-26
 8591                           
 8592                           ADC1_SMPR2                          EQU 0x40012010
 8593                           ;'ADC1_SMPR2.SMP0`                     EQU 0x40012010,        4, base=16,    bitRange=0-2
 8594                           ;'ADC1_SMPR2.SMP1`                     EQU 0x40012010,        4, base=16,    bitRange=3-5
 8595                           ;'ADC1_SMPR2.SMP2`                     EQU 0x40012010,        4, base=16,    bitRange=6-8
 8596                           ;'ADC1_SMPR2.SMP3`                     EQU 0x40012010,        4, base=16,    bitRange=9-11
 8597                           ;'ADC1_SMPR2.SMP4`                     EQU 0x40012010,        4, base=16,    bitRange=12-14
 8598                           ;'ADC1_SMPR2.SMP5`                     EQU 0x40012010,        4, base=16,    bitRange=15-17
 8599                           ;'ADC1_SMPR2.SMP6`                     EQU 0x40012010,        4, base=16,    bitRange=18-20
 8600                           ;'ADC1_SMPR2.SMP7`                     EQU 0x40012010,        4, base=16,    bitRange=21-23
 8601                           ;'ADC1_SMPR2.SMP8`                     EQU 0x40012010,        4, base=16,    bitRange=24-26
 8602                           ;'ADC1_SMPR2.SMP9`                     EQU 0x40012010,        4, base=16,    bitRange=27-29
 8603                           
 8604                           ADC1_JOFR1                          EQU 0x40012014
 8605                           ;'ADC1_JOFR1.JOFFSET`                  EQU 0x40012014,        4, base=16,    bitRange=0-11
 8606                           
 8607                           ADC1_JOFR2                          EQU 0x40012018
 8608                           ;'ADC1_JOFR2.JOFFSET`                  EQU 0x40012018,        4, base=16,    bitRange=0-11
 8609                           
 8610                           ADC1_JOFR3                          EQU 0x4001201C
 8611                           ;'ADC1_JOFR3.JOFFSET`                  EQU 0x4001201C,        4, base=16,    bitRange=0-11
 8612                           
 8613                           ADC1_JOFR4                          EQU 0x40012020
 8614                           ;'ADC1_JOFR4.JOFFSET`                  EQU 0x40012020,        4, base=16,    bitRange=0-11
 8615                           
 8616                           ADC1_HTR                            EQU 0x40012024
 8617                           ;'ADC1_HTR.HT`                         EQU 0x40012024,        4, base=16,    bitRange=0-11
 8618                           
 8619                           ADC1_LTR                            EQU 0x40012028
 8620                           ;'ADC1_LTR.LT`                         EQU 0x40012028,        4, base=16,    bitRange=0-11
 8621                           
 8622                           ADC1_SQR1                           EQU 0x4001202C
 8623                           ;'ADC1_SQR1.SQ13`                      EQU 0x4001202C,        4, base=16,    bitRange=0-4
 8624                           ;'ADC1_SQR1.SQ14`                      EQU 0x4001202C,        4, base=16,    bitRange=5-9
 8625                           ;'ADC1_SQR1.SQ15`                      EQU 0x4001202C,        4, base=16,    bitRange=10-14
 8626                           ;'ADC1_SQR1.SQ16`                      EQU 0x4001202C,        4, base=16,    bitRange=15-19
 8627                           ;'ADC1_SQR1.L`                         EQU 0x4001202C,        4, base=16,    bitRange=20-23
 8628                           
 8629                           ADC1_SQR2                           EQU 0x40012030
 8630                           ;'ADC1_SQR2.SQ7`                       EQU 0x40012030,        4, base=16,    bitRange=0-4
 8631                           ;'ADC1_SQR2.SQ8`                       EQU 0x40012030,        4, base=16,    bitRange=5-9
 8632                           ;'ADC1_SQR2.SQ9`                       EQU 0x40012030,        4, base=16,    bitRange=10-14
 8633                           ;'ADC1_SQR2.SQ10`                      EQU 0x40012030,        4, base=16,    bitRange=15-19
 8634                           ;'ADC1_SQR2.SQ11`                      EQU 0x40012030,        4, base=16,    bitRange=20-24
 8635                           ;'ADC1_SQR2.SQ12`                      EQU 0x40012030,        4, base=16,    bitRange=25-29
 8636                           
 8637                           ADC1_SQR3                           EQU 0x40012034
 8638                           ;'ADC1_SQR3.SQ1`                       EQU 0x40012034,        4, base=16,    bitRange=0-4
 8639                           ;'ADC1_SQR3.SQ2`                       EQU 0x40012034,        4, base=16,    bitRange=5-9
 8640                           ;'ADC1_SQR3.SQ3`                       EQU 0x40012034,        4, base=16,    bitRange=10-14
 8641                           ;'ADC1_SQR3.SQ4`                       EQU 0x40012034,        4, base=16,    bitRange=15-19
 8642                           ;'ADC1_SQR3.SQ5`                       EQU 0x40012034,        4, base=16,    bitRange=20-24
 8643                           ;'ADC1_SQR3.SQ6`                       EQU 0x40012034,        4, base=16,    bitRange=25-29
 8644                           
 8645                           ADC1_JSQR                           EQU 0x40012038
 8646                           ;'ADC1_JSQR.JSQ1`                      EQU 0x40012038,        4, base=16,    bitRange=0-4
 8647                           ;'ADC1_JSQR.JSQ2`                      EQU 0x40012038,        4, base=16,    bitRange=5-9
 8648                           ;'ADC1_JSQR.JSQ3`                      EQU 0x40012038,        4, base=16,    bitRange=10-14
 8649                           ;'ADC1_JSQR.JSQ4`                      EQU 0x40012038,        4, base=16,    bitRange=15-19
 8650                           ;'ADC1_JSQR.JL`                        EQU 0x40012038,        4, base=16,    bitRange=20-21
 8651                           
 8652                           ADC1_JDR1                           EQU 0x4001203C
 8653                           ;'ADC1_JDR1.JDATA`                     EQU 0x4001203C,        4, base=16,    bitRange=0-15
 8654                           
 8655                           ADC1_JDR2                           EQU 0x40012040
 8656                           ;'ADC1_JDR2.JDATA`                     EQU 0x40012040,        4, base=16,    bitRange=0-15
 8657                           
 8658                           ADC1_JDR3                           EQU 0x40012044
 8659                           ;'ADC1_JDR3.JDATA`                     EQU 0x40012044,        4, base=16,    bitRange=0-15
 8660                           
 8661                           ADC1_JDR4                           EQU 0x40012048
 8662                           ;'ADC1_JDR4.JDATA`                     EQU 0x40012048,        4, base=16,    bitRange=0-15
 8663                           
 8664                           ADC1_DR                             EQU 0x4001204C
 8665                           ;'ADC1_DR.DATA`                        EQU 0x4001204C,        4, base=16,    bitRange=0-15
 8666                           ;'ADC1_DR.ADC2DATA`                    EQU 0x4001204C,        4, base=16,    bitRange=16-31
 8667                           
 8668                           
 8669                           ;
 8670                           ;               ADC2
 8671                           ;
 8672                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8673                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8674                           
 8675                           ADC2_SR                             EQU 0x40012100
 8676                           ;'ADC2_SR.AWD`                         EQU 0x40012100,        4, base=16,    bitRange=0-0
 8677                           ;'ADC2_SR.EOC`                         EQU 0x40012100,        4, base=16,    bitRange=1-1
 8678                           ;'ADC2_SR.JEOC`                        EQU 0x40012100,        4, base=16,    bitRange=2-2
 8679                           ;'ADC2_SR.JSTRT`                       EQU 0x40012100,        4, base=16,    bitRange=3-3
 8680                           ;'ADC2_SR.STRT`                        EQU 0x40012100,        4, base=16,    bitRange=4-4
 8681                           ;'ADC2_SR.OVR`                         EQU 0x40012100,        4, base=16,    bitRange=5-5
 8682                           
 8683                           ADC2_CR1                            EQU 0x40012104
 8684                           ;'ADC2_CR1.AWDCH`                      EQU 0x40012104,        4, base=16,    bitRange=0-4
 8685                           ;'ADC2_CR1.EOCIE`                      EQU 0x40012104,        4, base=16,    bitRange=5-5
 8686                           ;'ADC2_CR1.AWDIE`                      EQU 0x40012104,        4, base=16,    bitRange=6-6
 8687                           ;'ADC2_CR1.JEOCIE`                     EQU 0x40012104,        4, base=16,    bitRange=7-7
 8688                           ;'ADC2_CR1.SCAN`                       EQU 0x40012104,        4, base=16,    bitRange=8-8
 8689                           ;'ADC2_CR1.AWDSGL`                     EQU 0x40012104,        4, base=16,    bitRange=9-9
 8690                           ;'ADC2_CR1.JAUTO`                      EQU 0x40012104,        4, base=16,    bitRange=10-10
 8691                           ;'ADC2_CR1.DISCEN`                     EQU 0x40012104,        4, base=16,    bitRange=11-11
 8692                           ;'ADC2_CR1.JDISCEN`                    EQU 0x40012104,        4, base=16,    bitRange=12-12
 8693                           ;'ADC2_CR1.DISCNUM`                    EQU 0x40012104,        4, base=16,    bitRange=13-15
 8694                           ;'ADC2_CR1.JAWDEN`                     EQU 0x40012104,        4, base=16,    bitRange=22-22
 8695                           ;'ADC2_CR1.AWDEN`                      EQU 0x40012104,        4, base=16,    bitRange=23-23
 8696                           ;'ADC2_CR1.RES`                        EQU 0x40012104,        4, base=16,    bitRange=24-25
 8697                           ;'ADC2_CR1.OVRIE`                      EQU 0x40012104,        4, base=16,    bitRange=26-26
 8698                           
 8699                           ADC2_CR2                            EQU 0x40012108
 8700                           ;'ADC2_CR2.ADON`                       EQU 0x40012108,        4, base=16,    bitRange=0-0
 8701                           ;'ADC2_CR2.CONT`                       EQU 0x40012108,        4, base=16,    bitRange=1-1
 8702                           ;'ADC2_CR2.DMA`                        EQU 0x40012108,        4, base=16,    bitRange=8-8
 8703                           ;'ADC2_CR2.DDS`                        EQU 0x40012108,        4, base=16,    bitRange=9-9
 8704                           ;'ADC2_CR2.EOCS`                       EQU 0x40012108,        4, base=16,    bitRange=10-10
 8705                           ;'ADC2_CR2.ALIGN`                      EQU 0x40012108,        4, base=16,    bitRange=11-11
 8706                           ;'ADC2_CR2.JEXTSEL`                    EQU 0x40012108,        4, base=16,    bitRange=16-19
 8707                           ;'ADC2_CR2.JEXTEN`                     EQU 0x40012108,        4, base=16,    bitRange=20-21
 8708                           ;'ADC2_CR2.JSWSTART`                   EQU 0x40012108,        4, base=16,    bitRange=22-22
 8709                           ;'ADC2_CR2.EXTSEL`                     EQU 0x40012108,        4, base=16,    bitRange=24-27
 8710                           ;'ADC2_CR2.EXTEN`                      EQU 0x40012108,        4, base=16,    bitRange=28-29
 8711                           ;'ADC2_CR2.SWSTART`                    EQU 0x40012108,        4, base=16,    bitRange=30-30
 8712                           
 8713                           ADC2_SMPR1                          EQU 0x4001210C
 8714                           ;'ADC2_SMPR1.SMP10`                    EQU 0x4001210C,        4, base=16,    bitRange=0-2
 8715                           ;'ADC2_SMPR1.SMP11`                    EQU 0x4001210C,        4, base=16,    bitRange=3-5
 8716                           ;'ADC2_SMPR1.SMP12`                    EQU 0x4001210C,        4, base=16,    bitRange=6-8
 8717                           ;'ADC2_SMPR1.SMP13`                    EQU 0x4001210C,        4, base=16,    bitRange=9-11
 8718                           ;'ADC2_SMPR1.SMP14`                    EQU 0x4001210C,        4, base=16,    bitRange=12-14
 8719                           ;'ADC2_SMPR1.SMP15`                    EQU 0x4001210C,        4, base=16,    bitRange=15-17
 8720                           ;'ADC2_SMPR1.SMP16`                    EQU 0x4001210C,        4, base=16,    bitRange=18-20
 8721                           ;'ADC2_SMPR1.SMP17`                    EQU 0x4001210C,        4, base=16,    bitRange=21-23
 8722                           ;'ADC2_SMPR1.SMP18`                    EQU 0x4001210C,        4, base=16,    bitRange=24-26
 8723                           
 8724                           ADC2_SMPR2                          EQU 0x40012110
 8725                           ;'ADC2_SMPR2.SMP0`                     EQU 0x40012110,        4, base=16,    bitRange=0-2
 8726                           ;'ADC2_SMPR2.SMP1`                     EQU 0x40012110,        4, base=16,    bitRange=3-5
 8727                           ;'ADC2_SMPR2.SMP2`                     EQU 0x40012110,        4, base=16,    bitRange=6-8
 8728                           ;'ADC2_SMPR2.SMP3`                     EQU 0x40012110,        4, base=16,    bitRange=9-11
 8729                           ;'ADC2_SMPR2.SMP4`                     EQU 0x40012110,        4, base=16,    bitRange=12-14
 8730                           ;'ADC2_SMPR2.SMP5`                     EQU 0x40012110,        4, base=16,    bitRange=15-17
 8731                           ;'ADC2_SMPR2.SMP6`                     EQU 0x40012110,        4, base=16,    bitRange=18-20
 8732                           ;'ADC2_SMPR2.SMP7`                     EQU 0x40012110,        4, base=16,    bitRange=21-23
 8733                           ;'ADC2_SMPR2.SMP8`                     EQU 0x40012110,        4, base=16,    bitRange=24-26
 8734                           ;'ADC2_SMPR2.SMP9`                     EQU 0x40012110,        4, base=16,    bitRange=27-29
 8735                           
 8736                           ADC2_JOFR1                          EQU 0x40012114
 8737                           ;'ADC2_JOFR1.JOFFSET`                  EQU 0x40012114,        4, base=16,    bitRange=0-11
 8738                           
 8739                           ADC2_JOFR2                          EQU 0x40012118
 8740                           ;'ADC2_JOFR2.JOFFSET`                  EQU 0x40012118,        4, base=16,    bitRange=0-11
 8741                           
 8742                           ADC2_JOFR3                          EQU 0x4001211C
 8743                           ;'ADC2_JOFR3.JOFFSET`                  EQU 0x4001211C,        4, base=16,    bitRange=0-11
 8744                           
 8745                           ADC2_JOFR4                          EQU 0x40012120
 8746                           ;'ADC2_JOFR4.JOFFSET`                  EQU 0x40012120,        4, base=16,    bitRange=0-11
 8747                           
 8748                           ADC2_HTR                            EQU 0x40012124
 8749                           ;'ADC2_HTR.HT`                         EQU 0x40012124,        4, base=16,    bitRange=0-11
 8750                           
 8751                           ADC2_LTR                            EQU 0x40012128
 8752                           ;'ADC2_LTR.LT`                         EQU 0x40012128,        4, base=16,    bitRange=0-11
 8753                           
 8754                           ADC2_SQR1                           EQU 0x4001212C
 8755                           ;'ADC2_SQR1.SQ13`                      EQU 0x4001212C,        4, base=16,    bitRange=0-4
 8756                           ;'ADC2_SQR1.SQ14`                      EQU 0x4001212C,        4, base=16,    bitRange=5-9
 8757                           ;'ADC2_SQR1.SQ15`                      EQU 0x4001212C,        4, base=16,    bitRange=10-14
 8758                           ;'ADC2_SQR1.SQ16`                      EQU 0x4001212C,        4, base=16,    bitRange=15-19
 8759                           ;'ADC2_SQR1.L`                         EQU 0x4001212C,        4, base=16,    bitRange=20-23
 8760                           
 8761                           ADC2_SQR2                           EQU 0x40012130
 8762                           ;'ADC2_SQR2.SQ7`                       EQU 0x40012130,        4, base=16,    bitRange=0-4
 8763                           ;'ADC2_SQR2.SQ8`                       EQU 0x40012130,        4, base=16,    bitRange=5-9
 8764                           ;'ADC2_SQR2.SQ9`                       EQU 0x40012130,        4, base=16,    bitRange=10-14
 8765                           ;'ADC2_SQR2.SQ10`                      EQU 0x40012130,        4, base=16,    bitRange=15-19
 8766                           ;'ADC2_SQR2.SQ11`                      EQU 0x40012130,        4, base=16,    bitRange=20-24
 8767                           ;'ADC2_SQR2.SQ12`                      EQU 0x40012130,        4, base=16,    bitRange=25-29
 8768                           
 8769                           ADC2_SQR3                           EQU 0x40012134
 8770                           ;'ADC2_SQR3.SQ1`                       EQU 0x40012134,        4, base=16,    bitRange=0-4
 8771                           ;'ADC2_SQR3.SQ2`                       EQU 0x40012134,        4, base=16,    bitRange=5-9
 8772                           ;'ADC2_SQR3.SQ3`                       EQU 0x40012134,        4, base=16,    bitRange=10-14
 8773                           ;'ADC2_SQR3.SQ4`                       EQU 0x40012134,        4, base=16,    bitRange=15-19
 8774                           ;'ADC2_SQR3.SQ5`                       EQU 0x40012134,        4, base=16,    bitRange=20-24
 8775                           ;'ADC2_SQR3.SQ6`                       EQU 0x40012134,        4, base=16,    bitRange=25-29
 8776                           
 8777                           ADC2_JSQR                           EQU 0x40012138
 8778                           ;'ADC2_JSQR.JSQ1`                      EQU 0x40012138,        4, base=16,    bitRange=0-4
 8779                           ;'ADC2_JSQR.JSQ2`                      EQU 0x40012138,        4, base=16,    bitRange=5-9
 8780                           ;'ADC2_JSQR.JSQ3`                      EQU 0x40012138,        4, base=16,    bitRange=10-14
 8781                           ;'ADC2_JSQR.JSQ4`                      EQU 0x40012138,        4, base=16,    bitRange=15-19
 8782                           ;'ADC2_JSQR.JL`                        EQU 0x40012138,        4, base=16,    bitRange=20-21
 8783                           
 8784                           ADC2_JDR1                           EQU 0x4001213C
 8785                           ;'ADC2_JDR1.JDATA`                     EQU 0x4001213C,        4, base=16,    bitRange=0-15
 8786                           
 8787                           ADC2_JDR2                           EQU 0x40012140
 8788                           ;'ADC2_JDR2.JDATA`                     EQU 0x40012140,        4, base=16,    bitRange=0-15
 8789                           
 8790                           ADC2_JDR3                           EQU 0x40012144
 8791                           ;'ADC2_JDR3.JDATA`                     EQU 0x40012144,        4, base=16,    bitRange=0-15
 8792                           
 8793                           ADC2_JDR4                           EQU 0x40012148
 8794                           ;'ADC2_JDR4.JDATA`                     EQU 0x40012148,        4, base=16,    bitRange=0-15
 8795                           
 8796                           ADC2_DR                             EQU 0x4001214C
 8797                           ;'ADC2_DR.DATA`                        EQU 0x4001214C,        4, base=16,    bitRange=0-15
 8798                           ;'ADC2_DR.ADC2DATA`                    EQU 0x4001214C,        4, base=16,    bitRange=16-31
 8799                           
 8800                           
 8801                           ;
 8802                           ;               ADC3
 8803                           ;
 8804                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8805                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8806                           
 8807                           ADC3_SR                             EQU 0x40012200
 8808                           ;'ADC3_SR.AWD`                         EQU 0x40012200,        4, base=16,    bitRange=0-0
 8809                           ;'ADC3_SR.EOC`                         EQU 0x40012200,        4, base=16,    bitRange=1-1
 8810                           ;'ADC3_SR.JEOC`                        EQU 0x40012200,        4, base=16,    bitRange=2-2
 8811                           ;'ADC3_SR.JSTRT`                       EQU 0x40012200,        4, base=16,    bitRange=3-3
 8812                           ;'ADC3_SR.STRT`                        EQU 0x40012200,        4, base=16,    bitRange=4-4
 8813                           ;'ADC3_SR.OVR`                         EQU 0x40012200,        4, base=16,    bitRange=5-5
 8814                           
 8815                           ADC3_CR1                            EQU 0x40012204
 8816                           ;'ADC3_CR1.AWDCH`                      EQU 0x40012204,        4, base=16,    bitRange=0-4
 8817                           ;'ADC3_CR1.EOCIE`                      EQU 0x40012204,        4, base=16,    bitRange=5-5
 8818                           ;'ADC3_CR1.AWDIE`                      EQU 0x40012204,        4, base=16,    bitRange=6-6
 8819                           ;'ADC3_CR1.JEOCIE`                     EQU 0x40012204,        4, base=16,    bitRange=7-7
 8820                           ;'ADC3_CR1.SCAN`                       EQU 0x40012204,        4, base=16,    bitRange=8-8
 8821                           ;'ADC3_CR1.AWDSGL`                     EQU 0x40012204,        4, base=16,    bitRange=9-9
 8822                           ;'ADC3_CR1.JAUTO`                      EQU 0x40012204,        4, base=16,    bitRange=10-10
 8823                           ;'ADC3_CR1.DISCEN`                     EQU 0x40012204,        4, base=16,    bitRange=11-11
 8824                           ;'ADC3_CR1.JDISCEN`                    EQU 0x40012204,        4, base=16,    bitRange=12-12
 8825                           ;'ADC3_CR1.DISCNUM`                    EQU 0x40012204,        4, base=16,    bitRange=13-15
 8826                           ;'ADC3_CR1.JAWDEN`                     EQU 0x40012204,        4, base=16,    bitRange=22-22
 8827                           ;'ADC3_CR1.AWDEN`                      EQU 0x40012204,        4, base=16,    bitRange=23-23
 8828                           ;'ADC3_CR1.RES`                        EQU 0x40012204,        4, base=16,    bitRange=24-25
 8829                           ;'ADC3_CR1.OVRIE`                      EQU 0x40012204,        4, base=16,    bitRange=26-26
 8830                           
 8831                           ADC3_CR2                            EQU 0x40012208
 8832                           ;'ADC3_CR2.ADON`                       EQU 0x40012208,        4, base=16,    bitRange=0-0
 8833                           ;'ADC3_CR2.CONT`                       EQU 0x40012208,        4, base=16,    bitRange=1-1
 8834                           ;'ADC3_CR2.DMA`                        EQU 0x40012208,        4, base=16,    bitRange=8-8
 8835                           ;'ADC3_CR2.DDS`                        EQU 0x40012208,        4, base=16,    bitRange=9-9
 8836                           ;'ADC3_CR2.EOCS`                       EQU 0x40012208,        4, base=16,    bitRange=10-10
 8837                           ;'ADC3_CR2.ALIGN`                      EQU 0x40012208,        4, base=16,    bitRange=11-11
 8838                           ;'ADC3_CR2.JEXTSEL`                    EQU 0x40012208,        4, base=16,    bitRange=16-19
 8839                           ;'ADC3_CR2.JEXTEN`                     EQU 0x40012208,        4, base=16,    bitRange=20-21
 8840                           ;'ADC3_CR2.JSWSTART`                   EQU 0x40012208,        4, base=16,    bitRange=22-22
 8841                           ;'ADC3_CR2.EXTSEL`                     EQU 0x40012208,        4, base=16,    bitRange=24-27
 8842                           ;'ADC3_CR2.EXTEN`                      EQU 0x40012208,        4, base=16,    bitRange=28-29
 8843                           ;'ADC3_CR2.SWSTART`                    EQU 0x40012208,        4, base=16,    bitRange=30-30
 8844                           
 8845                           ADC3_SMPR1                          EQU 0x4001220C
 8846                           ;'ADC3_SMPR1.SMP10`                    EQU 0x4001220C,        4, base=16,    bitRange=0-2
 8847                           ;'ADC3_SMPR1.SMP11`                    EQU 0x4001220C,        4, base=16,    bitRange=3-5
 8848                           ;'ADC3_SMPR1.SMP12`                    EQU 0x4001220C,        4, base=16,    bitRange=6-8
 8849                           ;'ADC3_SMPR1.SMP13`                    EQU 0x4001220C,        4, base=16,    bitRange=9-11
 8850                           ;'ADC3_SMPR1.SMP14`                    EQU 0x4001220C,        4, base=16,    bitRange=12-14
 8851                           ;'ADC3_SMPR1.SMP15`                    EQU 0x4001220C,        4, base=16,    bitRange=15-17
 8852                           ;'ADC3_SMPR1.SMP16`                    EQU 0x4001220C,        4, base=16,    bitRange=18-20
 8853                           ;'ADC3_SMPR1.SMP17`                    EQU 0x4001220C,        4, base=16,    bitRange=21-23
 8854                           ;'ADC3_SMPR1.SMP18`                    EQU 0x4001220C,        4, base=16,    bitRange=24-26
 8855                           
 8856                           ADC3_SMPR2                          EQU 0x40012210
 8857                           ;'ADC3_SMPR2.SMP0`                     EQU 0x40012210,        4, base=16,    bitRange=0-2
 8858                           ;'ADC3_SMPR2.SMP1`                     EQU 0x40012210,        4, base=16,    bitRange=3-5
 8859                           ;'ADC3_SMPR2.SMP2`                     EQU 0x40012210,        4, base=16,    bitRange=6-8
 8860                           ;'ADC3_SMPR2.SMP3`                     EQU 0x40012210,        4, base=16,    bitRange=9-11
 8861                           ;'ADC3_SMPR2.SMP4`                     EQU 0x40012210,        4, base=16,    bitRange=12-14
 8862                           ;'ADC3_SMPR2.SMP5`                     EQU 0x40012210,        4, base=16,    bitRange=15-17
 8863                           ;'ADC3_SMPR2.SMP6`                     EQU 0x40012210,        4, base=16,    bitRange=18-20
 8864                           ;'ADC3_SMPR2.SMP7`                     EQU 0x40012210,        4, base=16,    bitRange=21-23
 8865                           ;'ADC3_SMPR2.SMP8`                     EQU 0x40012210,        4, base=16,    bitRange=24-26
 8866                           ;'ADC3_SMPR2.SMP9`                     EQU 0x40012210,        4, base=16,    bitRange=27-29
 8867                           
 8868                           ADC3_JOFR1                          EQU 0x40012214
 8869                           ;'ADC3_JOFR1.JOFFSET`                  EQU 0x40012214,        4, base=16,    bitRange=0-11
 8870                           
 8871                           ADC3_JOFR2                          EQU 0x40012218
 8872                           ;'ADC3_JOFR2.JOFFSET`                  EQU 0x40012218,        4, base=16,    bitRange=0-11
 8873                           
 8874                           ADC3_JOFR3                          EQU 0x4001221C
 8875                           ;'ADC3_JOFR3.JOFFSET`                  EQU 0x4001221C,        4, base=16,    bitRange=0-11
 8876                           
 8877                           ADC3_JOFR4                          EQU 0x40012220
 8878                           ;'ADC3_JOFR4.JOFFSET`                  EQU 0x40012220,        4, base=16,    bitRange=0-11
 8879                           
 8880                           ADC3_HTR                            EQU 0x40012224
 8881                           ;'ADC3_HTR.HT`                         EQU 0x40012224,        4, base=16,    bitRange=0-11
 8882                           
 8883                           ADC3_LTR                            EQU 0x40012228
 8884                           ;'ADC3_LTR.LT`                         EQU 0x40012228,        4, base=16,    bitRange=0-11
 8885                           
 8886                           ADC3_SQR1                           EQU 0x4001222C
 8887                           ;'ADC3_SQR1.SQ13`                      EQU 0x4001222C,        4, base=16,    bitRange=0-4
 8888                           ;'ADC3_SQR1.SQ14`                      EQU 0x4001222C,        4, base=16,    bitRange=5-9
 8889                           ;'ADC3_SQR1.SQ15`                      EQU 0x4001222C,        4, base=16,    bitRange=10-14
 8890                           ;'ADC3_SQR1.SQ16`                      EQU 0x4001222C,        4, base=16,    bitRange=15-19
 8891                           ;'ADC3_SQR1.L`                         EQU 0x4001222C,        4, base=16,    bitRange=20-23
 8892                           
 8893                           ADC3_SQR2                           EQU 0x40012230
 8894                           ;'ADC3_SQR2.SQ7`                       EQU 0x40012230,        4, base=16,    bitRange=0-4
 8895                           ;'ADC3_SQR2.SQ8`                       EQU 0x40012230,        4, base=16,    bitRange=5-9
 8896                           ;'ADC3_SQR2.SQ9`                       EQU 0x40012230,        4, base=16,    bitRange=10-14
 8897                           ;'ADC3_SQR2.SQ10`                      EQU 0x40012230,        4, base=16,    bitRange=15-19
 8898                           ;'ADC3_SQR2.SQ11`                      EQU 0x40012230,        4, base=16,    bitRange=20-24
 8899                           ;'ADC3_SQR2.SQ12`                      EQU 0x40012230,        4, base=16,    bitRange=25-29
 8900                           
 8901                           ADC3_SQR3                           EQU 0x40012234
 8902                           ;'ADC3_SQR3.SQ1`                       EQU 0x40012234,        4, base=16,    bitRange=0-4
 8903                           ;'ADC3_SQR3.SQ2`                       EQU 0x40012234,        4, base=16,    bitRange=5-9
 8904                           ;'ADC3_SQR3.SQ3`                       EQU 0x40012234,        4, base=16,    bitRange=10-14
 8905                           ;'ADC3_SQR3.SQ4`                       EQU 0x40012234,        4, base=16,    bitRange=15-19
 8906                           ;'ADC3_SQR3.SQ5`                       EQU 0x40012234,        4, base=16,    bitRange=20-24
 8907                           ;'ADC3_SQR3.SQ6`                       EQU 0x40012234,        4, base=16,    bitRange=25-29
 8908                           
 8909                           ADC3_JSQR                           EQU 0x40012238
 8910                           ;'ADC3_JSQR.JSQ1`                      EQU 0x40012238,        4, base=16,    bitRange=0-4
 8911                           ;'ADC3_JSQR.JSQ2`                      EQU 0x40012238,        4, base=16,    bitRange=5-9
 8912                           ;'ADC3_JSQR.JSQ3`                      EQU 0x40012238,        4, base=16,    bitRange=10-14
 8913                           ;'ADC3_JSQR.JSQ4`                      EQU 0x40012238,        4, base=16,    bitRange=15-19
 8914                           ;'ADC3_JSQR.JL`                        EQU 0x40012238,        4, base=16,    bitRange=20-21
 8915                           
 8916                           ADC3_JDR1                           EQU 0x4001223C
 8917                           ;'ADC3_JDR1.JDATA`                     EQU 0x4001223C,        4, base=16,    bitRange=0-15
 8918                           
 8919                           ADC3_JDR2                           EQU 0x40012240
 8920                           ;'ADC3_JDR2.JDATA`                     EQU 0x40012240,        4, base=16,    bitRange=0-15
 8921                           
 8922                           ADC3_JDR3                           EQU 0x40012244
 8923                           ;'ADC3_JDR3.JDATA`                     EQU 0x40012244,        4, base=16,    bitRange=0-15
 8924                           
 8925                           ADC3_JDR4                           EQU 0x40012248
 8926                           ;'ADC3_JDR4.JDATA`                     EQU 0x40012248,        4, base=16,    bitRange=0-15
 8927                           
 8928                           ADC3_DR                             EQU 0x4001224C
 8929                           ;'ADC3_DR.DATA`                        EQU 0x4001224C,        4, base=16,    bitRange=0-15
 8930                           ;'ADC3_DR.ADC2DATA`                    EQU 0x4001224C,        4, base=16,    bitRange=16-31
 8931                           
 8932                           
 8933                           ;
 8934                           ;               DAC
 8935                           ;
 8936                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 8937                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 8938                           
 8939                           DAC_CR                              EQU 0x40007400
 8940                           ;'DAC_CR.EN1`                          EQU 0x40007400,        4, base=16,    bitRange=0-0
 8941                           ;'DAC_CR.BOFF1`                        EQU 0x40007400,        4, base=16,    bitRange=1-1
 8942                           ;'DAC_CR.TEN1`                         EQU 0x40007400,        4, base=16,    bitRange=2-2
 8943                           ;'DAC_CR.TSEL1`                        EQU 0x40007400,        4, base=16,    bitRange=3-5
 8944                           ;'DAC_CR.WAVE1`                        EQU 0x40007400,        4, base=16,    bitRange=6-7
 8945                           ;'DAC_CR.MAMP1`                        EQU 0x40007400,        4, base=16,    bitRange=8-11
 8946                           ;'DAC_CR.DMAEN1`                       EQU 0x40007400,        4, base=16,    bitRange=12-12
 8947                           ;'DAC_CR.DMAUDRIE1`                    EQU 0x40007400,        4, base=16,    bitRange=13-13
 8948                           ;'DAC_CR.EN2`                          EQU 0x40007400,        4, base=16,    bitRange=16-16
 8949                           ;'DAC_CR.BOFF2`                        EQU 0x40007400,        4, base=16,    bitRange=17-17
 8950                           ;'DAC_CR.TEN2`                         EQU 0x40007400,        4, base=16,    bitRange=18-18
 8951                           ;'DAC_CR.TSEL2`                        EQU 0x40007400,        4, base=16,    bitRange=19-21
 8952                           ;'DAC_CR.WAVE2`                        EQU 0x40007400,        4, base=16,    bitRange=22-23
 8953                           ;'DAC_CR.MAMP2`                        EQU 0x40007400,        4, base=16,    bitRange=24-27
 8954                           ;'DAC_CR.DMAEN2`                       EQU 0x40007400,        4, base=16,    bitRange=28-28
 8955                           ;'DAC_CR.DMAUDRIE2`                    EQU 0x40007400,        4, base=16,    bitRange=29-29
 8956                           
 8957                           DAC_SWTRIGR                         EQU 0x40007404
 8958                           ;'DAC_SWTRIGR.SWTRIG1`                 EQU 0x40007404,        4, base=16,    bitRange=0-0
 8959                           ;'DAC_SWTRIGR.SWTRIG2`                 EQU 0x40007404,        4, base=16,    bitRange=1-1
 8960                           
 8961                           DAC_DHR12R1                         EQU 0x40007408
 8962                           ;'DAC_DHR12R1.DACC1DHR`                EQU 0x40007408,        4, base=16,    bitRange=0-11
 8963                           
 8964                           DAC_DHR12L1                         EQU 0x4000740C
 8965                           ;'DAC_DHR12L1.DACC1DHR`                EQU 0x4000740C,        4, base=16,    bitRange=4-15
 8966                           
 8967                           DAC_DHR8R1                          EQU 0x40007410
 8968                           ;'DAC_DHR8R1.DACC1DHR`                 EQU 0x40007410,        4, base=16,    bitRange=0-7
 8969                           
 8970                           DAC_DHR12R2                         EQU 0x40007414
 8971                           ;'DAC_DHR12R2.DACC2DHR`                EQU 0x40007414,        4, base=16,    bitRange=0-11
 8972                           
 8973                           DAC_DHR12L2                         EQU 0x40007418
 8974                           ;'DAC_DHR12L2.DACC2DHR`                EQU 0x40007418,        4, base=16,    bitRange=4-15
 8975                           
 8976                           DAC_DHR8R2                          EQU 0x4000741C
 8977                           ;'DAC_DHR8R2.DACC2DHR`                 EQU 0x4000741C,        4, base=16,    bitRange=0-7
 8978                           
 8979                           DAC_DHR12RD                         EQU 0x40007420
 8980                           ;'DAC_DHR12RD.DACC1DHR`                EQU 0x40007420,        4, base=16,    bitRange=0-11
 8981                           ;'DAC_DHR12RD.DACC2DHR`                EQU 0x40007420,        4, base=16,    bitRange=16-27
 8982                           
 8983                           DAC_DHR12LD                         EQU 0x40007424
 8984                           ;'DAC_DHR12LD.DACC1DHR`                EQU 0x40007424,        4, base=16,    bitRange=4-15
 8985                           ;'DAC_DHR12LD.DACC2DHR`                EQU 0x40007424,        4, base=16,    bitRange=20-31
 8986                           
 8987                           DAC_DHR8RD                          EQU 0x40007428
 8988                           ;'DAC_DHR8RD.DACC1DHR`                 EQU 0x40007428,        4, base=16,    bitRange=0-7
 8989                           ;'DAC_DHR8RD.DACC2DHR`                 EQU 0x40007428,        4, base=16,    bitRange=8-15
 8990                           
 8991                           DAC_DOR1                            EQU 0x4000742C
 8992                           ;'DAC_DOR1.DACC1DOR`                   EQU 0x4000742C,        4, base=16,    bitRange=0-11
 8993                           
 8994                           DAC_DOR2                            EQU 0x40007430
 8995                           ;'DAC_DOR2.DACC2DOR`                   EQU 0x40007430,        4, base=16,    bitRange=0-11
 8996                           
 8997                           DAC_SR                              EQU 0x40007434
 8998                           ;'DAC_SR.DMAUDR1`                      EQU 0x40007434,        4, base=16,    bitRange=13-13
 8999                           ;'DAC_SR.DMAUDR2`                      EQU 0x40007434,        4, base=16,    bitRange=29-29
 9000                           
 9001                           
 9002                           ;
 9003                           ;               DCMI
 9004                           ;
 9005                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 9006                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 9007                           
 9008                           ;'DCMI_CR`                             EQU 0x50050000,        4, base=16
 9009                           ;'DCMI_CR.CAPTURE`                     EQU 0x50050000,        4, base=16,    bitRange=0-0
 9010                           ;'DCMI_CR.CM`                          EQU 0x50050000,        4, base=16,    bitRange=1-1
 9011                           ;'DCMI_CR.CROP`                        EQU 0x50050000,        4, base=16,    bitRange=2-2
 9012                           ;'DCMI_CR.JPEG`                        EQU 0x50050000,        4, base=16,    bitRange=3-3
 9013                           ;'DCMI_CR.ESS`                         EQU 0x50050000,        4, base=16,    bitRange=4-4
 9014                           ;'DCMI_CR.PCKPOL`                      EQU 0x50050000,        4, base=16,    bitRange=5-5
 9015                           ;'DCMI_CR.HSPOL`                       EQU 0x50050000,        4, base=16,    bitRange=6-6
 9016                           ;'DCMI_CR.VSPOL`                       EQU 0x50050000,        4, base=16,    bitRange=7-7
 9017                           ;'DCMI_CR.FCRC`                        EQU 0x50050000,        4, base=16,    bitRange=8-9
 9018                           ;'DCMI_CR.EDM`                         EQU 0x50050000,        4, base=16,    bitRange=10-11
 9019                           ;'DCMI_CR.CRE`                         EQU 0x50050000,        4, base=16,    bitRange=12-12
 9020                           ;'DCMI_CR.ENABLE`                      EQU 0x50050000,        4, base=16,    bitRange=14-14
 9021                           
 9022                           ;'DCMI_SR`                             EQU 0x50050004,        4, base=16
 9023                           ;'DCMI_SR.HSYNC`                       EQU 0x50050004,        4, base=16,    bitRange=0-0
 9024                           ;'DCMI_SR.VSYNC`                       EQU 0x50050004,        4, base=16,    bitRange=1-1
 9025                           ;'DCMI_SR.FNE`                         EQU 0x50050004,        4, base=16,    bitRange=2-2
 9026                           
 9027                           ;'DCMI_RIS`                            EQU 0x50050008,        4, base=16
 9028                           ;'DCMI_RIS.FRAME_RIS`                  EQU 0x50050008,        4, base=16,    bitRange=0-0
 9029                           ;'DCMI_RIS.OVR_RIS`                    EQU 0x50050008,        4, base=16,    bitRange=1-1
 9030                           ;'DCMI_RIS.ERR_RIS`                    EQU 0x50050008,        4, base=16,    bitRange=2-2
 9031                           ;'DCMI_RIS.VSYNC_RIS`                  EQU 0x50050008,        4, base=16,    bitRange=3-3
 9032                           ;'DCMI_RIS.LINE_RIS`                   EQU 0x50050008,        4, base=16,    bitRange=4-4
 9033                           
 9034                           ;'DCMI_IER`                            EQU 0x5005000C,        4, base=16
 9035                           ;'DCMI_IER.FRAME_IE`                   EQU 0x5005000C,        4, base=16,    bitRange=0-0
 9036                           ;'DCMI_IER.OVR_IE`                     EQU 0x5005000C,        4, base=16,    bitRange=1-1
 9037                           ;'DCMI_IER.ERR_IE`                     EQU 0x5005000C,        4, base=16,    bitRange=2-2
 9038                           ;'DCMI_IER.VSYNC_IE`                   EQU 0x5005000C,        4, base=16,    bitRange=3-3
 9039                           ;'DCMI_IER.LINE_IE`                    EQU 0x5005000C,        4, base=16,    bitRange=4-4
 9040                           
 9041                           ;'DCMI_MIS`                            EQU 0x50050010,        4, base=16
 9042                           ;'DCMI_MIS.FRAME_MIS`                  EQU 0x50050010,        4, base=16,    bitRange=0-0
 9043                           ;'DCMI_MIS.OVR_MIS`                    EQU 0x50050010,        4, base=16,    bitRange=1-1
 9044                           ;'DCMI_MIS.ERR_MIS`                    EQU 0x50050010,        4, base=16,    bitRange=2-2
 9045                           ;'DCMI_MIS.VSYNC_MIS`                  EQU 0x50050010,        4, base=16,    bitRange=3-3
 9046                           ;'DCMI_MIS.LINE_MIS`                   EQU 0x50050010,        4, base=16,    bitRange=4-4
 9047                           
 9048                           ;'DCMI_ICR`                            EQU 0x50050014,        4, base=16
 9049                           ;'DCMI_ICR.FRAME_ISC`                  EQU 0x50050014,        4, base=16,    bitRange=0-0
 9050                           ;'DCMI_ICR.OVR_ISC`                    EQU 0x50050014,        4, base=16,    bitRange=1-1
 9051                           ;'DCMI_ICR.ERR_ISC`                    EQU 0x50050014,        4, base=16,    bitRange=2-2
 9052                           ;'DCMI_ICR.VSYNC_ISC`                  EQU 0x50050014,        4, base=16,    bitRange=3-3
 9053                           ;'DCMI_ICR.LINE_ISC`                   EQU 0x50050014,        4, base=16,    bitRange=4-4
 9054                           
 9055                           ;'DCMI_ESCR`                           EQU 0x50050018,        4, base=16
 9056                           ;'DCMI_ESCR.FSC`                       EQU 0x50050018,        4, base=16,    bitRange=0-7
 9057                           ;'DCMI_ESCR.LSC`                       EQU 0x50050018,        4, base=16,    bitRange=8-15
 9058                           ;'DCMI_ESCR.LEC`                       EQU 0x50050018,        4, base=16,    bitRange=16-23
 9059                           ;'DCMI_ESCR.FEC`                       EQU 0x50050018,        4, base=16,    bitRange=24-31
 9060                           
 9061                           ;'DCMI_ESUR`                           EQU 0x5005001C,        4, base=16
 9062                           ;'DCMI_ESUR.FSU`                       EQU 0x5005001C,        4, base=16,    bitRange=0-7
 9063                           ;'DCMI_ESUR.LSU`                       EQU 0x5005001C,        4, base=16,    bitRange=8-15
 9064                           ;'DCMI_ESUR.LEU`                       EQU 0x5005001C,        4, base=16,    bitRange=16-23
 9065                           ;'DCMI_ESUR.FEU`                       EQU 0x5005001C,        4, base=16,    bitRange=24-31
 9066                           
 9067                           ;'DCMI_CWSTRT`                         EQU 0x50050020,        4, base=16
 9068                           ;'DCMI_CWSTRT.HOFFCNT`                 EQU 0x50050020,        4, base=16,    bitRange=0-13
 9069                           ;'DCMI_CWSTRT.VST`                     EQU 0x50050020,        4, base=16,    bitRange=16-28
 9070                           
 9071                           ;'DCMI_CWSIZE`                         EQU 0x50050024,        4, base=16
 9072                           ;'DCMI_CWSIZE.CAPCNT`                  EQU 0x50050024,        4, base=16,    bitRange=0-13
 9073                           ;'DCMI_CWSIZE.VLINE`                   EQU 0x50050024,        4, base=16,    bitRange=16-29
 9074                           
 9075                           ;'DCMI_DR`                             EQU 0x50050028,        4, base=16
 9076                           ;'DCMI_DR.Byte0`                       EQU 0x50050028,        4, base=16,    bitRange=0-7
 9077                           ;'DCMI_DR.Byte1`                       EQU 0x50050028,        4, base=16,    bitRange=8-15
 9078                           ;'DCMI_DR.Byte2`                       EQU 0x50050028,        4, base=16,    bitRange=16-23
 9079                           ;'DCMI_DR.Byte3`                       EQU 0x50050028,        4, base=16,    bitRange=24-31
 9080                           
 9081                           
 9082                           ;
 9083                           ;               Flash
 9084                           ;
 9085                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 9086                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 9087                           
 9088                           FLASH_ACR                           EQU 0x40023C00
 9089                           ;'FLASH_ACR.LATENCY`                   EQU 0x40023C00,        4, base=16,    bitRange=0-2
 9090                           ;'FLASH_ACR.PRFTEN`                    EQU 0x40023C00,        4, base=16,    bitRange=8-8
 9091                           ;'FLASH_ACR.ICEN`                      EQU 0x40023C00,        4, base=16,    bitRange=9-9
 9092                           ;'FLASH_ACR.DCEN`                      EQU 0x40023C00,        4, base=16,    bitRange=10-10
 9093                           ;'FLASH_ACR.ICRST`                     EQU 0x40023C00,        4, base=16,    bitRange=11-11
 9094                           ;'FLASH_ACR.DCRST`                     EQU 0x40023C00,        4, base=16,    bitRange=12-12
 9095                           
 9096                           FLASH_KEYR                          EQU 0x40023C04
 9097                           
 9098                           FLASH_OPTKEYR                       EQU 0x40023C08
 9099                           
 9100                           FLASH_SR                            EQU 0x40023C0C
 9101                           ;'FLASH_SR.EOP`                        EQU 0x40023C0C,        4, base=16,    bitRange=0-0
 9102                           ;'FLASH_SR.OPERR`                      EQU 0x40023C0C,        4, base=16,    bitRange=1-1
 9103                           ;'FLASH_SR.WRPERR`                     EQU 0x40023C0C,        4, base=16,    bitRange=4-4
 9104                           ;'FLASH_SR.PGAERR`                     EQU 0x40023C0C,        4, base=16,    bitRange=5-5
 9105                           ;'FLASH_SR.PGPERR`                     EQU 0x40023C0C,        4, base=16,    bitRange=6-6
 9106                           ;'FLASH_SR.PGSERR`                     EQU 0x40023C0C,        4, base=16,    bitRange=7-7
 9107                           ;'FLASH_SR.BSY`                        EQU 0x40023C0C,        4, base=16,    bitRange=16-16
 9108                           
 9109                           FLASH_CR                            EQU 0x40023C10
 9110                           ;'FLASH_CR.PG`                         EQU 0x40023C10,        4, base=16,    bitRange=0-0
 9111                           ;'FLASH_CR.SER`                        EQU 0x40023C10,        4, base=16,    bitRange=1-1
 9112                           ;'FLASH_CR.MER`                        EQU 0x40023C10,        4, base=16,    bitRange=2-2
 9113                           ;'FLASH_CR.SNB`                        EQU 0x40023C10,        4, base=16,    bitRange=3-6
 9114                           ;'FLASH_CR.PSIZE`                      EQU 0x40023C10,        4, base=16,    bitRange=8-9
 9115                           ;'FLASH_CR.STRT`                       EQU 0x40023C10,        4, base=16,    bitRange=16-16
 9116                           ;'FLASH_CR.EOPIE`                      EQU 0x40023C10,        4, base=16,    bitRange=24-24
 9117                           ;'FLASH_CR.ERRIE`                      EQU 0x40023C10,        4, base=16,    bitRange=25-25
 9118                           ;'FLASH_CR.LOCK`                       EQU 0x40023C10,        4, base=16,    bitRange=31-31
 9119                           
 9120                           FLASH_OPTCR                         EQU 0x40023C14
 9121                           ;'FLASH_OPTCR.OPTLOCK`                 EQU 0x40023C14,        4, base=16,    bitRange=0-0
 9122                           ;'FLASH_OPTCR.OPTSTRT`                 EQU 0x40023C14,        4, base=16,    bitRange=1-1
 9123                           ;'FLASH_OPTCR.BOR_LEV`                 EQU 0x40023C14,        4, base=16,    bitRange=2-3
 9124                           ;'FLASH_OPTCR.WDG_SW`                  EQU 0x40023C14,        4, base=16,    bitRange=5-5
 9125                           ;'FLASH_OPTCR.nRST_STOP`               EQU 0x40023C14,        4, base=16,    bitRange=6-6
 9126                           ;'FLASH_OPTCR.nRST_STDBY`              EQU 0x40023C14,        4, base=16,    bitRange=7-7
 9127                           ;'FLASH_OPTCR.RDP`                     EQU 0x40023C14,        4, base=16,    bitRange=8-15
 9128                           ;'FLASH_OPTCR.nWRP`                    EQU 0x40023C14,        4, base=16,    bitRange=16-27
 9129                           
 9130                           
 9131                           ;
 9132                           ;               CRC
 9133                           ;
 9134                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 9135                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 9136                           
 9137                           CRC_DR                              EQU 0x40023000
 9138                           
 9139                           CRC_IDR                             EQU 0x40023004
 9140                           ;'CRC_IDR.IDR`                         EQU 0x40023004,        4, base=16,    bitRange=0-7
 9141                           
 9142                           CRC_CR                              EQU 0x40023008
 9143                           ;'CRC_CR.RESET`                        EQU 0x40023008,        4, base=16,    bitRange=0-0
 9144                           
 9145                           
 9146                           ;
 9147                           ;               OTG_FS
 9148                           ;
 9149                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
 9150                           ;     ----                                    ----      -------     --------  -----------
                                 --------
 9151                           
 9152                           ;'OTG_FS_GOTGCTL`                      EQU 0x50000000,        4, base=16
 9153                           ;'OTG_FS_GOTGCTL.SRQSCS`               EQU 0x50000000,        4, base=16,    bitRange=0-0
 9154                           ;'OTG_FS_GOTGCTL.SRQ`                  EQU 0x50000000,        4, base=16,    bitRange=1-1
 9155                           ;'OTG_FS_GOTGCTL.HNGSCS`               EQU 0x50000000,        4, base=16,    bitRange=8-8
 9156                           ;'OTG_FS_GOTGCTL.HNPRQ`                EQU 0x50000000,        4, base=16,    bitRange=9-9
 9157                           ;'OTG_FS_GOTGCTL.HSHNPEN`              EQU 0x50000000,        4, base=16,    bitRange=10-10
 9158                           ;'OTG_FS_GOTGCTL.DHNPEN`               EQU 0x50000000,        4, base=16,    bitRange=11-11
 9159                           ;'OTG_FS_GOTGCTL.CIDSTS`               EQU 0x50000000,        4, base=16,    bitRange=16-16
 9160                           ;'OTG_FS_GOTGCTL.DBCT`                 EQU 0x50000000,        4, base=16,    bitRange=17-17
 9161                           ;'OTG_FS_GOTGCTL.ASVLD`                EQU 0x50000000,        4, base=16,    bitRange=18-18
 9162                           ;'OTG_FS_GOTGCTL.BSVLD`                EQU 0x50000000,        4, base=16,    bitRange=19-19
 9163                           
 9164                           ;'OTG_FS_GOTGINT`                      EQU 0x50000004,        4, base=16
 9165                           ;'OTG_FS_GOTGINT.SEDET`                EQU 0x50000004,        4, base=16,    bitRange=2-2
 9166                           ;'OTG_FS_GOTGINT.SRSSCHG`              EQU 0x50000004,        4, base=16,    bitRange=8-8
 9167                           ;'OTG_FS_GOTGINT.HNSSCHG`              EQU 0x50000004,        4, base=16,    bitRange=9-9
 9168                           ;'OTG_FS_GOTGINT.HNGDET`               EQU 0x50000004,        4, base=16,    bitRange=17-17
 9169                           ;'OTG_FS_GOTGINT.ADTOCHG`              EQU 0x50000004,        4, base=16,    bitRange=18-18
 9170                           ;'OTG_FS_GOTGINT.DBCDNE`               EQU 0x50000004,        4, base=16,    bitRange=19-19
 9171                           
 9172                           ;'OTG_FS_GAHBCFG`                      EQU 0x50000008,        4, base=16
 9173                           ;'OTG_FS_GAHBCFG.GINT`                 EQU 0x50000008,        4, base=16,    bitRange=0-0
 9174                           ;'OTG_FS_GAHBCFG.TXFELVL`              EQU 0x50000008,        4, base=16,    bitRange=7-7
 9175                           ;'OTG_FS_GAHBCFG.PTXFELVL`             EQU 0x50000008,        4, base=16,    bitRange=8-8
 9176                           
 9177                           ;'OTG_FS_GUSBCFG`                      EQU 0x5000000C,        4, base=16
 9178                           ;'OTG_FS_GUSBCFG.TOCAL`                EQU 0x5000000C,        4, base=16,    bitRange=0-2
 9179                           ;'OTG_FS_GUSBCFG.PHYSEL`               EQU 0x5000000C,        4, base=16,    bitRange=7-7
 9180                           ;'OTG_FS_GUSBCFG.SRPCAP`               EQU 0x5000000C,        4, base=16,    bitRange=8-8
 9181                           ;'OTG_FS_GUSBCFG.HNPCAP`               EQU 0x5000000C,        4, base=16,    bitRange=9-9
 9182                           ;'OTG_FS_GUSBCFG.TRDT`                 EQU 0x5000000C,        4, base=16,    bitRange=10-13
 9183                           ;'OTG_FS_GUSBCFG.FHMOD`                EQU 0x5000000C,        4, base=16,    bitRange=29-29
 9184                           ;'OTG_FS_GUSBCFG.FDMOD`                EQU 0x5000000C,        4, base=16,    bitRange=30-30
 9185                           ;'OTG_FS_GUSBCFG.CTXPKT`               EQU 0x5000000C,        4, base=16,    bitRange=31-31
 9186                           
 9187                           ;'OTG_FS_GRSTCTL`                      EQU 0x50000010,        4, base=16
 9188                           ;'OTG_FS_GRSTCTL.CSRST`                EQU 0x50000010,        4, base=16,    bitRange=0-0
 9189                           ;'OTG_FS_GRSTCTL.HSRST`                EQU 0x50000010,        4, base=16,    bitRange=1-1
 9190                           ;'OTG_FS_GRSTCTL.FCRST`                EQU 0x50000010,        4, base=16,    bitRange=2-2
 9191                           ;'OTG_FS_GRSTCTL.RXFFLSH`              EQU 0x50000010,        4, base=16,    bitRange=4-4
 9192                           ;'OTG_FS_GRSTCTL.TXFFLSH`              EQU 0x50000010,        4, base=16,    bitRange=5-5
 9193                           ;'OTG_FS_GRSTCTL.TXFNUM`               EQU 0x50000010,        4, base=16,    bitRange=6-10
 9194                           ;'OTG_FS_GRSTCTL.AHBIDL`               EQU 0x50000010,        4, base=16,    bitRange=31-31
 9195                           
 9196                           ;'OTG_FS_GINTSTS`                      EQU 0x50000014,        4, base=16
 9197                           ;'OTG_FS_GINTSTS.CMOD`                 EQU 0x50000014,        4, base=16,    bitRange=0-0
 9198                           ;'OTG_FS_GINTSTS.MMIS`                 EQU 0x50000014,        4, base=16,    bitRange=1-1
 9199                           ;'OTG_FS_GINTSTS.OTGINT`               EQU 0x50000014,        4, base=16,    bitRange=2-2
 9200                           ;'OTG_FS_GINTSTS.SOF`                  EQU 0x50000014,        4, base=16,    bitRange=3-3
 9201                           ;'OTG_FS_GINTSTS.RXFLVL`               EQU 0x50000014,        4, base=16,    bitRange=4-4
 9202                           ;'OTG_FS_GINTSTS.NPTXFE`               EQU 0x50000014,        4, base=16,    bitRange=5-5
 9203                           ;'OTG_FS_GINTSTS.GINAKEFF`             EQU 0x50000014,        4, base=16,    bitRange=6-6
 9204                           ;'OTG_FS_GINTSTS.GONAKEFF`             EQU 0x50000014,        4, base=16,    bitRange=7-7
 9205                           ;'OTG_FS_GINTSTS.ESUSP`                EQU 0x50000014,        4, base=16,    bitRange=10-10
 9206                           ;'OTG_FS_GINTSTS.USBSUSP`              EQU 0x50000014,        4, base=16,    bitRange=11-11
 9207                           ;'OTG_FS_GINTSTS.USBRST`               EQU 0x50000014,        4, base=16,    bitRange=12-12
 9208                           ;'OTG_FS_GINTSTS.ENUMDNE`              EQU 0x50000014,        4, base=16,    bitRange=13-13
 9209                           ;'OTG_FS_GINTSTS.ISOODRP`              EQU 0x50000014,        4, base=16,    bitRange=14-14
 9210                           ;'OTG_FS_GINTSTS.EOPF`                 EQU 0x50000014,        4, base=16,    bitRange=15-15
 9211                           ;'OTG_FS_GINTSTS.IEPINT`               EQU 0x50000014,        4, base=16,    bitRange=18-18
 9212                           ;'OTG_FS_GINTSTS.OEPINT`               EQU 0x50000014,        4, base=16,    bitRange=19-19
 9213                           ;'OTG_FS_GINTSTS.IISOIXFR`             EQU 0x50000014,        4, base=16,    bitRange=20-20
 9214                           ;'OTG_FS_GINTSTS.IPXFR`                EQU 0x50000014,        4, base=16,    bitRange=21-21
 9215                           ;'OTG_FS_GINTSTS.HPRTINT`              EQU 0x50000014,        4, base=16,    bitRange=24-24
 9216                           ;'OTG_FS_GINTSTS.HCINT`                EQU 0x50000014,        4, base=16,    bitRange=25-25
 9217                           ;'OTG_FS_GINTSTS.PTXFE`                EQU 0x50000014,        4, base=16,    bitRange=26-26
 9218                           ;'OTG_FS_GINTSTS.CIDSCHG`              EQU 0x50000014,        4, base=16,    bitRange=28-28
 9219                           ;'OTG_FS_GINTSTS.DISCINT`              EQU 0x50000014,        4, base=16,    bitRange=29-29
 9220                           ;'OTG_FS_GINTSTS.SRQINT`               EQU 0x50000014,        4, base=16,    bitRange=30-30
 9221                           ;'OTG_FS_GINTSTS.WKUINT`               EQU 0x50000014,        4, base=16,    bitRange=31-31
 9222                           
 9223                           ;'OTG_FS_GINTMSK`                      EQU 0x50000018,        4, base=16
 9224                           ;'OTG_FS_GINTMSK.MMISM`                EQU 0x50000018,        4, base=16,    bitRange=1-1
 9225                           ;'OTG_FS_GINTMSK.OTGINT`               EQU 0x50000018,        4, base=16,    bitRange=2-2
 9226                           ;'OTG_FS_GINTMSK.SOFM`                 EQU 0x50000018,        4, base=16,    bitRange=3-3
 9227                           ;'OTG_FS_GINTMSK.RXFLVLM`              EQU 0x50000018,        4, base=16,    bitRange=4-4
 9228                           ;'OTG_FS_GINTMSK.NPTXFEM`              EQU 0x50000018,        4, base=16,    bitRange=5-5
 9229                           ;'OTG_FS_GINTMSK.GINAKEFFM`            EQU 0x50000018,        4, base=16,    bitRange=6-6
 9230                           ;'OTG_FS_GINTMSK.GONAKEFFM`            EQU 0x50000018,        4, base=16,    bitRange=7-7
 9231                           ;'OTG_FS_GINTMSK.ESUSPM`               EQU 0x50000018,        4, base=16,    bitRange=10-10
 9232                           ;'OTG_FS_GINTMSK.USBSUSPM`             EQU 0x50000018,        4, base=16,    bitRange=11-11
 9233                           ;'OTG_FS_GINTMSK.USBRST`               EQU 0x50000018,        4, base=16,    bitRange=12-12
 9234                           ;'OTG_FS_GINTMSK.ENUMDNEM`             EQU 0x50000018,        4, base=16,    bitRange=13-13
 9235                           ;'OTG_FS_GINTMSK.ISOODRPM`             EQU 0x50000018,        4, base=16,    bitRange=14-14
 9236                           ;'OTG_FS_GINTMSK.EOPFM`                EQU 0x50000018,        4, base=16,    bitRange=15-15
 9237                           ;'OTG_FS_GINTMSK.EPMISM`               EQU 0x50000018,        4, base=16,    bitRange=17-17
 9238                           ;'OTG_FS_GINTMSK.IEPINT`               EQU 0x50000018,        4, base=16,    bitRange=18-18
 9239                           ;'OTG_FS_GINTMSK.OEPINT`               EQU 0x50000018,        4, base=16,    bitRange=19-19
 9240                           ;'OTG_FS_GINTMSK.IISOIXFRM`            EQU 0x50000018,        4, base=16,    bitRange=20-20
 9241                           ;'OTG_FS_GINTMSK.IPXFRM`               EQU 0x50000018,        4, base=16,    bitRange=21-21
 9242                           ;'OTG_FS_GINTMSK.FSUSPM`               EQU 0x50000018,        4, base=16,    bitRange=22-22
 9243                           ;'OTG_FS_GINTMSK.PRTIM`                EQU 0x50000018,        4, base=16,    bitRange=24-24
 9244                           ;'OTG_FS_GINTMSK.HCIM`                 EQU 0x50000018,        4, base=16,    bitRange=25-25
 9245                           ;'OTG_FS_GINTMSK.PTXFEM`               EQU 0x50000018,        4, base=16,    bitRange=26-26
 9246                           ;'OTG_FS_GINTMSK.CIDSCHGM`             EQU 0x50000018,        4, base=16,    bitRange=28-28
 9247                           ;'OTG_FS_GINTMSK.DISCINT`              EQU 0x50000018,        4, base=16,    bitRange=29-29
 9248                           ;'OTG_FS_GINTMSK.SRQIM`                EQU 0x50000018,        4, base=16,    bitRange=30-30
 9249                           ;'OTG_FS_GINTMSK.WUIM`                 EQU 0x50000018,        4, base=16,    bitRange=31-31
 9250                           
 9251                           ;'OTG_FS_GRXSTSR`                      EQU 0x5000001C,        4, base=16
 9252                           ;'OTG_FS_GRXSTSR.CHNUM`                EQU 0x5000001C,        4, base=16,    bitRange=0-3
 9253                           ;'OTG_FS_GRXSTSR.BCNT`                 EQU 0x5000001C,        4, base=16,    bitRange=4-14
 9254                           ;'OTG_FS_GRXSTSR.DPID`                 EQU 0x5000001C,        4, base=16,    bitRange=15-16
 9255                           ;'OTG_FS_GRXSTSR.PKTSTS`               EQU 0x5000001C,        4, base=16,    bitRange=17-20
 9256                           
 9257                           ;'OTG_FS_GRXSTSR_DEV`                  EQU 0x5000001C,        4, base=16
 9258                           ;'OTG_FS_GRXSTSR_DEV.CHNUM`            EQU 0x5000001C,        4, base=16,    bitRange=0-3
 9259                           ;'OTG_FS_GRXSTSR_DEV.BCNT`             EQU 0x5000001C,        4, base=16,    bitRange=4-14
 9260                           ;'OTG_FS_GRXSTSR_DEV.DPID`             EQU 0x5000001C,        4, base=16,    bitRange=15-16
 9261                           ;'OTG_FS_GRXSTSR_DEV.PKTSTS`           EQU 0x5000001C,        4, base=16,    bitRange=17-20
 9262                           
 9263                           ;'OTG_FS_GRXSTSP`                      EQU 0x50000020,        4, base=16
 9264                           ;'OTG_FS_GRXSTSP.CHNUM`                EQU 0x50000020,        4, base=16,    bitRange=0-3
 9265                           ;'OTG_FS_GRXSTSP.BCNT`                 EQU 0x50000020,        4, base=16,    bitRange=4-14
 9266                           ;'OTG_FS_GRXSTSP.DPID`                 EQU 0x50000020,        4, base=16,    bitRange=15-16
 9267                           ;'OTG_FS_GRXSTSP.PKTSTS`               EQU 0x50000020,        4, base=16,    bitRange=17-20
 9268                           
 9269                           ;'OTG_FS_GRXSTSP_DEV`                  EQU 0x50000020,        4, base=16
 9270                           ;'OTG_FS_GRXSTSP_DEV.CHNUM`            EQU 0x50000020,        4, base=16,    bitRange=0-3
 9271                           ;'OTG_FS_GRXSTSP_DEV.BCNT`             EQU 0x50000020,        4, base=16,    bitRange=4-14
 9272                           ;'OTG_FS_GRXSTSP_DEV.DPID`             EQU 0x50000020,        4, base=16,    bitRange=15-16
 9273                           ;'OTG_FS_GRXSTSP_DEV.PKTSTS`           EQU 0x50000020,        4, base=16,    bitRange=17-20
 9274                           
 9275                           ;'OTG_FS_GRXFSIZ`                      EQU 0x50000024,        4, base=16
 9276                           ;'OTG_FS_GRXFSIZ.RXFD`                 EQU 0x50000024,        4, base=16,    bitRange=0-15
 9277                           
 9278                           ;'OTG_FS_GNPTXFSIZ`                    EQU 0x50000028,        4, base=16
 9279                           ;'OTG_FS_GNPTXFSIZ.NPTXFSA`            EQU 0x50000028,        4, base=16,    bitRange=0-15
 9280                           ;'OTG_FS_GNPTXFSIZ.NPTXFD`             EQU 0x50000028,        4, base=16,    bitRange=16-31
 9281                           
 9282                           ;'OTG_FS_GNPTXSTS`                     EQU 0x5000002C,        4, base=16
 9283                           ;'OTG_FS_GNPTXSTS.NPTXFSAV`            EQU 0x5000002C,        4, base=16,    bitRange=0-15
 9284                           ;'OTG_FS_GNPTXSTS.NPTQXSAV`            EQU 0x5000002C,        4, base=16,    bitRange=16-23
 9285                           ;'OTG_FS_GNPTXSTS.NPTXQTOP`            EQU 0x5000002C,        4, base=16,    bitRange=24-30
 9286                           
 9287                           ;'OTG_FS_GCCFG`                        EQU 0x50000038,        4, base=16
 9288                           ;'OTG_FS_GCCFG.PWRDWN`                 EQU 0x50000038,        4, base=16,    bitRange=16-16
 9289                           ;'OTG_FS_GCCFG.VBUSASEN`               EQU 0x50000038,        4, base=16,    bitRange=18-18
 9290                           ;'OTG_FS_GCCFG.VBUSBSEN`               EQU 0x50000038,        4, base=16,    bitRange=19-19
 9291                           ;'OTG_FS_GCCFG.SOFOUTEN`               EQU 0x50000038,        4, base=16,    bitRange=20-20
 9292                           
 9293                           ;'OTG_FS_CID`                          EQU 0x5000003C,        4, base=16
 9294                           
 9295                           ;'OTG_FS_HPTXFSIZ`                     EQU 0x50000100,        4, base=16
 9296                           ;'OTG_FS_HPTXFSIZ.PTXSA`               EQU 0x50000100,        4, base=16,    bitRange=0-15
 9297                           ;'OTG_FS_HPTXFSIZ.PTXFSIZ`             EQU 0x50000100,        4, base=16,    bitRange=16-31
 9298                           
 9299                           ;'OTG_FS_DIEPTXF1`                     EQU 0x50000104,        4, base=16
 9300                           ;'OTG_FS_DIEPTXF1.INEPTXSA`            EQU 0x50000104,        4, base=16,    bitRange=0-15
 9301                           ;'OTG_FS_DIEPTXF1.INEPTXFD`            EQU 0x50000104,        4, base=16,    bitRange=16-31
 9302                           
 9303                           ;'OTG_FS_DIEPTXF2`                     EQU 0x50000108,        4, base=16
 9304                           ;'OTG_FS_DIEPTXF2.INEPTXSA`            EQU 0x50000108,        4, base=16,    bitRange=0-15
 9305                           ;'OTG_FS_DIEPTXF2.INEPTXFD`            EQU 0x50000108,        4, base=16,    bitRange=16-31
 9306                           
 9307                           ;'OTG_FS_DIEPTXF3`                     EQU 0x5000010C,        4, base=16
 9308                           ;'OTG_FS_DIEPTXF3.INEPTXSA`            EQU 0x5000010C,        4, base=16,    bitRange=0-15
 9309                           ;'OTG_FS_DIEPTXF3.INEPTXFD`            EQU 0x5000010C,        4, base=16,    bitRange=16-31
 9310                           
 9311                           ;'OTG_FS_DIEPTXF4`                     EQU 0x50000110,        4, base=16
 9312                           ;'OTG_FS_DIEPTXF4.INEPTXSA`            EQU 0x50000110,        4, base=16,    bitRange=0-15
 9313                           ;'OTG_FS_DIEPTXF4.INEPTXFD`            EQU 0x50000110,        4, base=16,    bitRange=16-31
 9314                           
 9315                           ;'OTG_FS_HCFG`                         EQU 0x50000400,        4, base=16
 9316                           ;'OTG_FS_HCFG.FSLSPCS`                 EQU 0x50000400,        4, base=16,    bitRange=0-1
 9317                           ;'OTG_FS_HCFG.FSLSS`                   EQU 0x50000400,        4, base=16,    bitRange=2-2
 9318                           
 9319                           ;'OTG_FS_HFIR`                         EQU 0x50000404,        4, base=16
 9320                           ;'OTG_FS_HFIR.FRIVL`                   EQU 0x50000404,        4, base=16,    bitRange=0-15
 9321                           
 9322                           ;'OTG_FS_HFNUM`                        EQU 0x50000408,        4, base=16
 9323                           ;'OTG_FS_HFNUM.FRNUM`                  EQU 0x50000408,        4, base=16,    bitRange=0-15
 9324                           ;'OTG_FS_HFNUM.FTREM`                  EQU 0x50000408,        4, base=16,    bitRange=16-31
 9325                           
 9326                           ;'OTG_FS_HPTXSTS`                      EQU 0x50000410,        4, base=16
 9327                           ;'OTG_FS_HPTXSTS.PTXFSAVL`             EQU 0x50000410,        4, base=16,    bitRange=0-15
 9328                           ;'OTG_FS_HPTXSTS.PTXQSAV`              EQU 0x50000410,        4, base=16,    bitRange=16-23
 9329                           ;'OTG_FS_HPTXSTS.PTXQTOP`              EQU 0x50000410,        4, base=16,    bitRange=24-31
 9330                           
 9331                           ;'OTG_FS_HAINT`                        EQU 0x50000414,        4, base=16
 9332                           ;'OTG_FS_HAINT.CHN0`                   EQU 0x50000414,        4, base=16,    bitRange=0-0
 9333                           ;'OTG_FS_HAINT.CHN1`                   EQU 0x50000414,        4, base=16,    bitRange=1-1
 9334                           ;'OTG_FS_HAINT.CHN2`                   EQU 0x50000414,        4, base=16,    bitRange=2-2
 9335                           ;'OTG_FS_HAINT.CHN3`                   EQU 0x50000414,        4, base=16,    bitRange=3-3
 9336                           ;'OTG_FS_HAINT.CHN4`                   EQU 0x50000414,        4, base=16,    bitRange=4-4
 9337                           ;'OTG_FS_HAINT.CHN5`                   EQU 0x50000414,        4, base=16,    bitRange=5-5
 9338                           ;'OTG_FS_HAINT.CHN6`                   EQU 0x50000414,        4, base=16,    bitRange=6-6
 9339                           ;'OTG_FS_HAINT.CHN7`                   EQU 0x50000414,        4, base=16,    bitRange=7-7
 9340                           ;'OTG_FS_HAINT.CHN8`                   EQU 0x50000414,        4, base=16,    bitRange=8-8
 9341                           ;'OTG_FS_HAINT.CHN9`                   EQU 0x50000414,        4, base=16,    bitRange=9-9
 9342                           ;'OTG_FS_HAINT.CHN10`                  EQU 0x50000414,        4, base=16,    bitRange=10-10
 9343                           ;'OTG_FS_HAINT.CHN11`                  EQU 0x50000414,        4, base=16,    bitRange=11-11
 9344                           ;'OTG_FS_HAINT.CHN12`                  EQU 0x50000414,        4, base=16,    bitRange=12-12
 9345                           ;'OTG_FS_HAINT.CHN13`                  EQU 0x50000414,        4, base=16,    bitRange=13-13
 9346                           ;'OTG_FS_HAINT.CHN14`                  EQU 0x50000414,        4, base=16,    bitRange=14-14
 9347                           ;'OTG_FS_HAINT.CHN15`                  EQU 0x50000414,        4, base=16,    bitRange=15-15
 9348                           
 9349                           ;'OTG_FS_HAINTMSK`                     EQU 0x50000418,        4, base=16
 9350                           ;'OTG_FS_HAINTMSK.CHN0M`               EQU 0x50000418,        4, base=16,    bitRange=0-0
 9351                           ;'OTG_FS_HAINTMSK.CHN1M`               EQU 0x50000418,        4, base=16,    bitRange=1-1
 9352                           ;'OTG_FS_HAINTMSK.CHN2M`               EQU 0x50000418,        4, base=16,    bitRange=2-2
 9353                           ;'OTG_FS_HAINTMSK.CHN3M`               EQU 0x50000418,        4, base=16,    bitRange=3-3
 9354                           ;'OTG_FS_HAINTMSK.CHN4M`               EQU 0x50000418,        4, base=16,    bitRange=4-4
 9355                           ;'OTG_FS_HAINTMSK.CHN5M`               EQU 0x50000418,        4, base=16,    bitRange=5-5
 9356                           ;'OTG_FS_HAINTMSK.CHN6M`               EQU 0x50000418,        4, base=16,    bitRange=6-6
 9357                           ;'OTG_FS_HAINTMSK.CHN7M`               EQU 0x50000418,        4, base=16,    bitRange=7-7
 9358                           ;'OTG_FS_HAINTMSK.CHN8M`               EQU 0x50000418,        4, base=16,    bitRange=8-8
 9359                           ;'OTG_FS_HAINTMSK.CHN9M`               EQU 0x50000418,        4, base=16,    bitRange=9-9
 9360                           ;'OTG_FS_HAINTMSK.CHN10M`              EQU 0x50000418,        4, base=16,    bitRange=10-10
 9361                           ;'OTG_FS_HAINTMSK.CHN11M`              EQU 0x50000418,        4, base=16,    bitRange=11-11
 9362                           ;'OTG_FS_HAINTMSK.CHN12M`              EQU 0x50000418,        4, base=16,    bitRange=12-12
 9363                           ;'OTG_FS_HAINTMSK.CHN13M`              EQU 0x50000418,        4, base=16,    bitRange=13-13
 9364                           ;'OTG_FS_HAINTMSK.CHN14M`              EQU 0x50000418,        4, base=16,    bitRange=14-14
 9365                           ;'OTG_FS_HAINTMSK.CHN15M`              EQU 0x50000418,        4, base=16,    bitRange=15-15
 9366                           
 9367                           ;'OTG_FS_HPRT`                         EQU 0x50000440,        4, base=16
 9368                           ;'OTG_FS_HPRT.PCSTS`                   EQU 0x50000440,        4, base=16,    bitRange=0-0
 9369                           ;'OTG_FS_HPRT.PCDET`                   EQU 0x50000440,        4, base=16,    bitRange=1-1
 9370                           ;'OTG_FS_HPRT.PENA`                    EQU 0x50000440,        4, base=16,    bitRange=2-2
 9371                           ;'OTG_FS_HPRT.PENCHNG`                 EQU 0x50000440,        4, base=16,    bitRange=3-3
 9372                           ;'OTG_FS_HPRT.POCA`                    EQU 0x50000440,        4, base=16,    bitRange=4-4
 9373                           ;'OTG_FS_HPRT.POCCHNG`                 EQU 0x50000440,        4, base=16,    bitRange=5-5
 9374                           ;'OTG_FS_HPRT.PRES`                    EQU 0x50000440,        4, base=16,    bitRange=6-6
 9375                           ;'OTG_FS_HPRT.PSUSP`                   EQU 0x50000440,        4, base=16,    bitRange=7-7
 9376                           ;'OTG_FS_HPRT.PRST`                    EQU 0x50000440,        4, base=16,    bitRange=8-8
 9377                           ;'OTG_FS_HPRT.PLSTS`                   EQU 0x50000440,        4, base=16,    bitRange=10-11
 9378                           ;'OTG_FS_HPRT.PPWR`                    EQU 0x50000440,        4, base=16,    bitRange=12-12
 9379                           ;'OTG_FS_HPRT.PTCTL`                   EQU 0x50000440,        4, base=16,    bitRange=13-16
 9380                           ;'OTG_FS_HPRT.PSPD`                    EQU 0x50000440,        4, base=16,    bitRange=17-18
 9381                           
 9382                           ;'OTG_FS_HCCHAR0`                      EQU 0x50000500,        4, base=16
 9383                           ;'OTG_FS_HCCHAR0.MPSIZ`                EQU 0x50000500,        4, base=16,    bitRange=0-10
 9384                           ;'OTG_FS_HCCHAR0.EPNUM`                EQU 0x50000500,        4, base=16,    bitRange=11-14
 9385                           ;'OTG_FS_HCCHAR0.EPDIR`                EQU 0x50000500,        4, base=16,    bitRange=15-15
 9386                           ;'OTG_FS_HCCHAR0.LSDEV`                EQU 0x50000500,        4, base=16,    bitRange=17-17
 9387                           ;'OTG_FS_HCCHAR0.EPTYP`                EQU 0x50000500,        4, base=16,    bitRange=18-19
 9388                           ;'OTG_FS_HCCHAR0.MCNT`                 EQU 0x50000500,        4, base=16,    bitRange=20-21
 9389                           ;'OTG_FS_HCCHAR0.DAD`                  EQU 0x50000500,        4, base=16,    bitRange=22-28
 9390                           ;'OTG_FS_HCCHAR0.ODDFRM`               EQU 0x50000500,        4, base=16,    bitRange=29-29
 9391                           ;'OTG_FS_HCCHAR0.CHDIS`                EQU 0x50000500,        4, base=16,    bitRange=30-30
 9392                           ;'OTG_FS_HCCHAR0.CHENA`                EQU 0x50000500,        4, base=16,    bitRange=31-31
 9393                           
 9394                           ;'OTG_FS_HCINT0`                       EQU 0x50000508,        4, base=16
 9395                           ;'OTG_FS_HCINT0.XFRC`                  EQU 0x50000508,        4, base=16,    bitRange=0-0
 9396                           ;'OTG_FS_HCINT0.CHH`                   EQU 0x50000508,        4, base=16,    bitRange=1-1
 9397                           ;'OTG_FS_HCINT0.STALL`                 EQU 0x50000508,        4, base=16,    bitRange=3-3
 9398                           ;'OTG_FS_HCINT0.NAK`                   EQU 0x50000508,        4, base=16,    bitRange=4-4
 9399                           ;'OTG_FS_HCINT0.ACK`                   EQU 0x50000508,        4, base=16,    bitRange=5-5
 9400                           ;'OTG_FS_HCINT0.TXERR`                 EQU 0x50000508,        4, base=16,    bitRange=7-7
 9401                           ;'OTG_FS_HCINT0.BBERR`                 EQU 0x50000508,        4, base=16,    bitRange=8-8
 9402                           ;'OTG_FS_HCINT0.FRMOR`                 EQU 0x50000508,        4, base=16,    bitRange=9-9
 9403                           ;'OTG_FS_HCINT0.DTERR`                 EQU 0x50000508,        4, base=16,    bitRange=10-10
 9404                           
 9405                           ;'OTG_FS_HCINTMSK0`                    EQU 0x5000050C,        4, base=16
 9406                           ;'OTG_FS_HCINTMSK0.XFRCM`              EQU 0x5000050C,        4, base=16,    bitRange=0-0
 9407                           ;'OTG_FS_HCINTMSK0.CHHM`               EQU 0x5000050C,        4, base=16,    bitRange=1-1
 9408                           ;'OTG_FS_HCINTMSK0.STALLM`             EQU 0x5000050C,        4, base=16,    bitRange=3-3
 9409                           ;'OTG_FS_HCINTMSK0.NAKM`               EQU 0x5000050C,        4, base=16,    bitRange=4-4
 9410                           ;'OTG_FS_HCINTMSK0.ACKM`               EQU 0x5000050C,        4, base=16,    bitRange=5-5
 9411                           ;'OTG_FS_HCINTMSK0.NYET`               EQU 0x5000050C,        4, base=16,    bitRange=6-6
 9412                           ;'OTG_FS_HCINTMSK0.TXERRM`             EQU 0x5000050C,        4, base=16,    bitRange=7-7
 9413                           ;'OTG_FS_HCINTMSK0.BBERRM`             EQU 0x5000050C,        4, base=16,    bitRange=8-8
 9414                           ;'OTG_FS_HCINTMSK0.FRMORM`             EQU 0x5000050C,        4, base=16,    bitRange=9-9
 9415                           ;'OTG_FS_HCINTMSK0.DTERRM`             EQU 0x5000050C,        4, base=16,    bitRange=10-10
 9416                           
 9417                           ;'OTG_FS_HCTSIZ0`                      EQU 0x50000510,        4, base=16
 9418                           ;'OTG_FS_HCTSIZ0.XFRSIZ`               EQU 0x50000510,        4, base=16,    bitRange=0-18
 9419                           ;'OTG_FS_HCTSIZ0.PKTCNT`               EQU 0x50000510,        4, base=16,    bitRange=19-28
 9420                           ;'OTG_FS_HCTSIZ0.DPID`                 EQU 0x50000510,        4, base=16,    bitRange=29-30
 9421                           
 9422                           ;'OTG_FS_HCCHAR1`                      EQU 0x50000520,        4, base=16
 9423                           ;'OTG_FS_HCCHAR1.MPSIZ`                EQU 0x50000520,        4, base=16,    bitRange=0-10
 9424                           ;'OTG_FS_HCCHAR1.EPNUM`                EQU 0x50000520,        4, base=16,    bitRange=11-14
 9425                           ;'OTG_FS_HCCHAR1.EPDIR`                EQU 0x50000520,        4, base=16,    bitRange=15-15
 9426                           ;'OTG_FS_HCCHAR1.LSDEV`                EQU 0x50000520,        4, base=16,    bitRange=17-17
 9427                           ;'OTG_FS_HCCHAR1.EPTYP`                EQU 0x50000520,        4, base=16,    bitRange=18-19
 9428                           ;'OTG_FS_HCCHAR1.MCNT`                 EQU 0x50000520,        4, base=16,    bitRange=20-21
 9429                           ;'OTG_FS_HCCHAR1.DAD`                  EQU 0x50000520,        4, base=16,    bitRange=22-28
 9430                           ;'OTG_FS_HCCHAR1.ODDFRM`               EQU 0x50000520,        4, base=16,    bitRange=29-29
 9431                           ;'OTG_FS_HCCHAR1.CHDIS`                EQU 0x50000520,        4, base=16,    bitRange=30-30
 9432                           ;'OTG_FS_HCCHAR1.CHENA`                EQU 0x50000520,        4, base=16,    bitRange=31-31
 9433                           
 9434                           ;'OTG_FS_HCINT1`                       EQU 0x50000528,        4, base=16
 9435                           ;'OTG_FS_HCINT1.XFRC`                  EQU 0x50000528,        4, base=16,    bitRange=0-0
 9436                           ;'OTG_FS_HCINT1.CHH`                   EQU 0x50000528,        4, base=16,    bitRange=1-1
 9437                           ;'OTG_FS_HCINT1.STALL`                 EQU 0x50000528,        4, base=16,    bitRange=3-3
 9438                           ;'OTG_FS_HCINT1.NAK`                   EQU 0x50000528,        4, base=16,    bitRange=4-4
 9439                           ;'OTG_FS_HCINT1.ACK`                   EQU 0x50000528,        4, base=16,    bitRange=5-5
 9440                           ;'OTG_FS_HCINT1.TXERR`                 EQU 0x50000528,        4, base=16,    bitRange=7-7
 9441                           ;'OTG_FS_HCINT1.BBERR`                 EQU 0x50000528,        4, base=16,    bitRange=8-8
 9442                           ;'OTG_FS_HCINT1.FRMOR`                 EQU 0x50000528,        4, base=16,    bitRange=9-9
 9443                           ;'OTG_FS_HCINT1.DTERR`                 EQU 0x50000528,        4, base=16,    bitRange=10-10
 9444                           
 9445                           ;'OTG_FS_HCINTMSK1`                    EQU 0x5000052C,        4, base=16
 9446                           ;'OTG_FS_HCINTMSK1.XFRCM`              EQU 0x5000052C,        4, base=16,    bitRange=0-0
 9447                           ;'OTG_FS_HCINTMSK1.CHHM`               EQU 0x5000052C,        4, base=16,    bitRange=1-1
 9448                           ;'OTG_FS_HCINTMSK1.STALLM`             EQU 0x5000052C,        4, base=16,    bitRange=3-3
 9449                           ;'OTG_FS_HCINTMSK1.NAKM`               EQU 0x5000052C,        4, base=16,    bitRange=4-4
 9450                           ;'OTG_FS_HCINTMSK1.ACKM`               EQU 0x5000052C,        4, base=16,    bitRange=5-5
 9451                           ;'OTG_FS_HCINTMSK1.NYET`               EQU 0x5000052C,        4, base=16,    bitRange=6-6
 9452                           ;'OTG_FS_HCINTMSK1.TXERRM`             EQU 0x5000052C,        4, base=16,    bitRange=7-7
 9453                           ;'OTG_FS_HCINTMSK1.BBERRM`             EQU 0x5000052C,        4, base=16,    bitRange=8-8
 9454                           ;'OTG_FS_HCINTMSK1.FRMORM`             EQU 0x5000052C,        4, base=16,    bitRange=9-9
 9455                           ;'OTG_FS_HCINTMSK1.DTERRM`             EQU 0x5000052C,        4, base=16,    bitRange=10-10
 9456                           
 9457                           ;'OTG_FS_HCTSIZ1`                      EQU 0x50000530,        4, base=16
 9458                           ;'OTG_FS_HCTSIZ1.XFRSIZ`               EQU 0x50000530,        4, base=16,    bitRange=0-18
 9459                           ;'OTG_FS_HCTSIZ1.PKTCNT`               EQU 0x50000530,        4, base=16,    bitRange=19-28
 9460                           ;'OTG_FS_HCTSIZ1.DPID`                 EQU 0x50000530,        4, base=16,    bitRange=29-30
 9461                           
 9462                           ;'OTG_FS_HCCHAR2`                      EQU 0x50000540,        4, base=16
 9463                           ;'OTG_FS_HCCHAR2.MPSIZ`                EQU 0x50000540,        4, base=16,    bitRange=0-10
 9464                           ;'OTG_FS_HCCHAR2.EPNUM`                EQU 0x50000540,        4, base=16,    bitRange=11-14
 9465                           ;'OTG_FS_HCCHAR2.EPDIR`                EQU 0x50000540,        4, base=16,    bitRange=15-15
 9466                           ;'OTG_FS_HCCHAR2.LSDEV`                EQU 0x50000540,        4, base=16,    bitRange=17-17
 9467                           ;'OTG_FS_HCCHAR2.EPTYP`                EQU 0x50000540,        4, base=16,    bitRange=18-19
 9468                           ;'OTG_FS_HCCHAR2.MCNT`                 EQU 0x50000540,        4, base=16,    bitRange=20-21
 9469                           ;'OTG_FS_HCCHAR2.DAD`                  EQU 0x50000540,        4, base=16,    bitRange=22-28
 9470                           ;'OTG_FS_HCCHAR2.ODDFRM`               EQU 0x50000540,        4, base=16,    bitRange=29-29
 9471                           ;'OTG_FS_HCCHAR2.CHDIS`                EQU 0x50000540,        4, base=16,    bitRange=30-30
 9472                           ;'OTG_FS_HCCHAR2.CHENA`                EQU 0x50000540,        4, base=16,    bitRange=31-31
 9473                           
 9474                           ;'OTG_FS_HCINT2`                       EQU 0x50000548,        4, base=16
 9475                           ;'OTG_FS_HCINT2.XFRC`                  EQU 0x50000548,        4, base=16,    bitRange=0-0
 9476                           ;'OTG_FS_HCINT2.CHH`                   EQU 0x50000548,        4, base=16,    bitRange=1-1
 9477                           ;'OTG_FS_HCINT2.STALL`                 EQU 0x50000548,        4, base=16,    bitRange=3-3
 9478                           ;'OTG_FS_HCINT2.NAK`                   EQU 0x50000548,        4, base=16,    bitRange=4-4
 9479                           ;'OTG_FS_HCINT2.ACK`                   EQU 0x50000548,        4, base=16,    bitRange=5-5
 9480                           ;'OTG_FS_HCINT2.TXERR`                 EQU 0x50000548,        4, base=16,    bitRange=7-7
 9481                           ;'OTG_FS_HCINT2.BBERR`                 EQU 0x50000548,        4, base=16,    bitRange=8-8
 9482                           ;'OTG_FS_HCINT2.FRMOR`                 EQU 0x50000548,        4, base=16,    bitRange=9-9
 9483                           ;'OTG_FS_HCINT2.DTERR`                 EQU 0x50000548,        4, base=16,    bitRange=10-10
 9484                           
 9485                           ;'OTG_FS_HCINTMSK2`                    EQU 0x5000054C,        4, base=16
 9486                           ;'OTG_FS_HCINTMSK2.XFRCM`              EQU 0x5000054C,        4, base=16,    bitRange=0-0
 9487                           ;'OTG_FS_HCINTMSK2.CHHM`               EQU 0x5000054C,        4, base=16,    bitRange=1-1
 9488                           ;'OTG_FS_HCINTMSK2.STALLM`             EQU 0x5000054C,        4, base=16,    bitRange=3-3
 9489                           ;'OTG_FS_HCINTMSK2.NAKM`               EQU 0x5000054C,        4, base=16,    bitRange=4-4
 9490                           ;'OTG_FS_HCINTMSK2.ACKM`               EQU 0x5000054C,        4, base=16,    bitRange=5-5
 9491                           ;'OTG_FS_HCINTMSK2.NYET`               EQU 0x5000054C,        4, base=16,    bitRange=6-6
 9492                           ;'OTG_FS_HCINTMSK2.TXERRM`             EQU 0x5000054C,        4, base=16,    bitRange=7-7
 9493                           ;'OTG_FS_HCINTMSK2.BBERRM`             EQU 0x5000054C,        4, base=16,    bitRange=8-8
 9494                           ;'OTG_FS_HCINTMSK2.FRMORM`             EQU 0x5000054C,        4, base=16,    bitRange=9-9
 9495                           ;'OTG_FS_HCINTMSK2.DTERRM`             EQU 0x5000054C,        4, base=16,    bitRange=10-10
 9496                           
 9497                           ;'OTG_FS_HCTSIZ2`                      EQU 0x50000550,        4, base=16
 9498                           ;'OTG_FS_HCTSIZ2.XFRSIZ`               EQU 0x50000550,        4, base=16,    bitRange=0-18
 9499                           ;'OTG_FS_HCTSIZ2.PKTCNT`               EQU 0x50000550,        4, base=16,    bitRange=19-28
 9500                           ;'OTG_FS_HCTSIZ2.DPID`                 EQU 0x50000550,        4, base=16,    bitRange=29-30
 9501                           
 9502                           ;'OTG_FS_HCCHAR3`                      EQU 0x50000560,        4, base=16
 9503                           ;'OTG_FS_HCCHAR3.MPSIZ`                EQU 0x50000560,        4, base=16,    bitRange=0-10
 9504                           ;'OTG_FS_HCCHAR3.EPNUM`                EQU 0x50000560,        4, base=16,    bitRange=11-14
 9505                           ;'OTG_FS_HCCHAR3.EPDIR`                EQU 0x50000560,        4, base=16,    bitRange=15-15
 9506                           ;'OTG_FS_HCCHAR3.LSDEV`                EQU 0x50000560,        4, base=16,    bitRange=17-17
 9507                           ;'OTG_FS_HCCHAR3.EPTYP`                EQU 0x50000560,        4, base=16,    bitRange=18-19
 9508                           ;'OTG_FS_HCCHAR3.MCNT`                 EQU 0x50000560,        4, base=16,    bitRange=20-21
 9509                           ;'OTG_FS_HCCHAR3.DAD`                  EQU 0x50000560,        4, base=16,    bitRange=22-28
 9510                           ;'OTG_FS_HCCHAR3.ODDFRM`               EQU 0x50000560,        4, base=16,    bitRange=29-29
 9511                           ;'OTG_FS_HCCHAR3.CHDIS`                EQU 0x50000560,        4, base=16,    bitRange=30-30
 9512                           ;'OTG_FS_HCCHAR3.CHENA`                EQU 0x50000560,        4, base=16,    bitRange=31-31
 9513                           
 9514                           ;'OTG_FS_HCINT3`                       EQU 0x50000568,        4, base=16
 9515                           ;'OTG_FS_HCINT3.XFRC`                  EQU 0x50000568,        4, base=16,    bitRange=0-0
 9516                           ;'OTG_FS_HCINT3.CHH`                   EQU 0x50000568,        4, base=16,    bitRange=1-1
 9517                           ;'OTG_FS_HCINT3.STALL`                 EQU 0x50000568,        4, base=16,    bitRange=3-3
 9518                           ;'OTG_FS_HCINT3.NAK`                   EQU 0x50000568,        4, base=16,    bitRange=4-4
 9519                           ;'OTG_FS_HCINT3.ACK`                   EQU 0x50000568,        4, base=16,    bitRange=5-5
 9520                           ;'OTG_FS_HCINT3.TXERR`                 EQU 0x50000568,        4, base=16,    bitRange=7-7
 9521                           ;'OTG_FS_HCINT3.BBERR`                 EQU 0x50000568,        4, base=16,    bitRange=8-8
 9522                           ;'OTG_FS_HCINT3.FRMOR`                 EQU 0x50000568,        4, base=16,    bitRange=9-9
 9523                           ;'OTG_FS_HCINT3.DTERR`                 EQU 0x50000568,        4, base=16,    bitRange=10-10
 9524                           
 9525                           ;'OTG_FS_HCINTMSK3`                    EQU 0x5000056C,        4, base=16
 9526                           ;'OTG_FS_HCINTMSK3.XFRCM`              EQU 0x5000056C,        4, base=16,    bitRange=0-0
 9527                           ;'OTG_FS_HCINTMSK3.CHHM`               EQU 0x5000056C,        4, base=16,    bitRange=1-1
 9528                           ;'OTG_FS_HCINTMSK3.STALLM`             EQU 0x5000056C,        4, base=16,    bitRange=3-3
 9529                           ;'OTG_FS_HCINTMSK3.NAKM`               EQU 0x5000056C,        4, base=16,    bitRange=4-4
 9530                           ;'OTG_FS_HCINTMSK3.ACKM`               EQU 0x5000056C,        4, base=16,    bitRange=5-5
 9531                           ;'OTG_FS_HCINTMSK3.NYET`               EQU 0x5000056C,        4, base=16,    bitRange=6-6
 9532                           ;'OTG_FS_HCINTMSK3.TXERRM`             EQU 0x5000056C,        4, base=16,    bitRange=7-7
 9533                           ;'OTG_FS_HCINTMSK3.BBERRM`             EQU 0x5000056C,        4, base=16,    bitRange=8-8
 9534                           ;'OTG_FS_HCINTMSK3.FRMORM`             EQU 0x5000056C,        4, base=16,    bitRange=9-9
 9535                           ;'OTG_FS_HCINTMSK3.DTERRM`             EQU 0x5000056C,        4, base=16,    bitRange=10-10
 9536                           
 9537                           ;'OTG_FS_HCTSIZ3`                      EQU 0x50000570,        4, base=16
 9538                           ;'OTG_FS_HCTSIZ3.XFRSIZ`               EQU 0x50000570,        4, base=16,    bitRange=0-18
 9539                           ;'OTG_FS_HCTSIZ3.PKTCNT`               EQU 0x50000570,        4, base=16,    bitRange=19-28
 9540                           ;'OTG_FS_HCTSIZ3.DPID`                 EQU 0x50000570,        4, base=16,    bitRange=29-30
 9541                           
 9542                           ;'OTG_FS_HCCHAR4`                      EQU 0x50000580,        4, base=16
 9543                           ;'OTG_FS_HCCHAR4.MPSIZ`                EQU 0x50000580,        4, base=16,    bitRange=0-10
 9544                           ;'OTG_FS_HCCHAR4.EPNUM`                EQU 0x50000580,        4, base=16,    bitRange=11-14
 9545                           ;'OTG_FS_HCCHAR4.EPDIR`                EQU 0x50000580,        4, base=16,    bitRange=15-15
 9546                           ;'OTG_FS_HCCHAR4.LSDEV`                EQU 0x50000580,        4, base=16,    bitRange=17-17
 9547                           ;'OTG_FS_HCCHAR4.EPTYP`                EQU 0x50000580,        4, base=16,    bitRange=18-19
 9548                           ;'OTG_FS_HCCHAR4.MCNT`                 EQU 0x50000580,        4, base=16,    bitRange=20-21
 9549                           ;'OTG_FS_HCCHAR4.DAD`                  EQU 0x50000580,        4, base=16,    bitRange=22-28
 9550                           ;'OTG_FS_HCCHAR4.ODDFRM`               EQU 0x50000580,        4, base=16,    bitRange=29-29
 9551                           ;'OTG_FS_HCCHAR4.CHDIS`                EQU 0x50000580,        4, base=16,    bitRange=30-30
 9552                           ;'OTG_FS_HCCHAR4.CHENA`                EQU 0x50000580,        4, base=16,    bitRange=31-31
 9553                           
 9554                           ;'OTG_FS_HCINT4`                       EQU 0x50000588,        4, base=16
 9555                           ;'OTG_FS_HCINT4.XFRC`                  EQU 0x50000588,        4, base=16,    bitRange=0-0
 9556                           ;'OTG_FS_HCINT4.CHH`                   EQU 0x50000588,        4, base=16,    bitRange=1-1
 9557                           ;'OTG_FS_HCINT4.STALL`                 EQU 0x50000588,        4, base=16,    bitRange=3-3
 9558                           ;'OTG_FS_HCINT4.NAK`                   EQU 0x50000588,        4, base=16,    bitRange=4-4
 9559                           ;'OTG_FS_HCINT4.ACK`                   EQU 0x50000588,        4, base=16,    bitRange=5-5
 9560                           ;'OTG_FS_HCINT4.TXERR`                 EQU 0x50000588,        4, base=16,    bitRange=7-7
 9561                           ;'OTG_FS_HCINT4.BBERR`                 EQU 0x50000588,        4, base=16,    bitRange=8-8
 9562                           ;'OTG_FS_HCINT4.FRMOR`                 EQU 0x50000588,        4, base=16,    bitRange=9-9
 9563                           ;'OTG_FS_HCINT4.DTERR`                 EQU 0x50000588,        4, base=16,    bitRange=10-10
 9564                           
 9565                           ;'OTG_FS_HCINTMSK4`                    EQU 0x5000058C,        4, base=16
 9566                           ;'OTG_FS_HCINTMSK4.XFRCM`              EQU 0x5000058C,        4, base=16,    bitRange=0-0
 9567                           ;'OTG_FS_HCINTMSK4.CHHM`               EQU 0x5000058C,        4, base=16,    bitRange=1-1
 9568                           ;'OTG_FS_HCINTMSK4.STALLM`             EQU 0x5000058C,        4, base=16,    bitRange=3-3
 9569                           ;'OTG_FS_HCINTMSK4.NAKM`               EQU 0x5000058C,        4, base=16,    bitRange=4-4
 9570                           ;'OTG_FS_HCINTMSK4.ACKM`               EQU 0x5000058C,        4, base=16,    bitRange=5-5
 9571                           ;'OTG_FS_HCINTMSK4.NYET`               EQU 0x5000058C,        4, base=16,    bitRange=6-6
 9572                           ;'OTG_FS_HCINTMSK4.TXERRM`             EQU 0x5000058C,        4, base=16,    bitRange=7-7
 9573                           ;'OTG_FS_HCINTMSK4.BBERRM`             EQU 0x5000058C,        4, base=16,    bitRange=8-8
 9574                           ;'OTG_FS_HCINTMSK4.FRMORM`             EQU 0x5000058C,        4, base=16,    bitRange=9-9
 9575                           ;'OTG_FS_HCINTMSK4.DTERRM`             EQU 0x5000058C,        4, base=16,    bitRange=10-10
 9576                           
 9577                           ;'OTG_FS_HCTSIZ4`                      EQU 0x50000590,        4, base=16
 9578                           ;'OTG_FS_HCTSIZ4.XFRSIZ`               EQU 0x50000590,        4, base=16,    bitRange=0-18
 9579                           ;'OTG_FS_HCTSIZ4.PKTCNT`               EQU 0x50000590,        4, base=16,    bitRange=19-28
 9580                           ;'OTG_FS_HCTSIZ4.DPID`                 EQU 0x50000590,        4, base=16,    bitRange=29-30
 9581                           
 9582                           ;'OTG_FS_HCCHAR5`                      EQU 0x500005A0,        4, base=16
 9583                           ;'OTG_FS_HCCHAR5.MPSIZ`                EQU 0x500005A0,        4, base=16,    bitRange=0-10
 9584                           ;'OTG_FS_HCCHAR5.EPNUM`                EQU 0x500005A0,        4, base=16,    bitRange=11-14
 9585                           ;'OTG_FS_HCCHAR5.EPDIR`                EQU 0x500005A0,        4, base=16,    bitRange=15-15
 9586                           ;'OTG_FS_HCCHAR5.LSDEV`                EQU 0x500005A0,        4, base=16,    bitRange=17-17
 9587                           ;'OTG_FS_HCCHAR5.EPTYP`                EQU 0x500005A0,        4, base=16,    bitRange=18-19
 9588                           ;'OTG_FS_HCCHAR5.MCNT`                 EQU 0x500005A0,        4, base=16,    bitRange=20-21
 9589                           ;'OTG_FS_HCCHAR5.DAD`                  EQU 0x500005A0,        4, base=16,    bitRange=22-28
 9590                           ;'OTG_FS_HCCHAR5.ODDFRM`               EQU 0x500005A0,        4, base=16,    bitRange=29-29
 9591                           ;'OTG_FS_HCCHAR5.CHDIS`                EQU 0x500005A0,        4, base=16,    bitRange=30-30
 9592                           ;'OTG_FS_HCCHAR5.CHENA`                EQU 0x500005A0,        4, base=16,    bitRange=31-31
 9593                           
 9594                           ;'OTG_FS_HCINT5`                       EQU 0x500005A8,        4, base=16
 9595                           ;'OTG_FS_HCINT5.XFRC`                  EQU 0x500005A8,        4, base=16,    bitRange=0-0
 9596                           ;'OTG_FS_HCINT5.CHH`                   EQU 0x500005A8,        4, base=16,    bitRange=1-1
 9597                           ;'OTG_FS_HCINT5.STALL`                 EQU 0x500005A8,        4, base=16,    bitRange=3-3
 9598                           ;'OTG_FS_HCINT5.NAK`                   EQU 0x500005A8,        4, base=16,    bitRange=4-4
 9599                           ;'OTG_FS_HCINT5.ACK`                   EQU 0x500005A8,        4, base=16,    bitRange=5-5
 9600                           ;'OTG_FS_HCINT5.TXERR`                 EQU 0x500005A8,        4, base=16,    bitRange=7-7
 9601                           ;'OTG_FS_HCINT5.BBERR`                 EQU 0x500005A8,        4, base=16,    bitRange=8-8
 9602                           ;'OTG_FS_HCINT5.FRMOR`                 EQU 0x500005A8,        4, base=16,    bitRange=9-9
 9603                           ;'OTG_FS_HCINT5.DTERR`                 EQU 0x500005A8,        4, base=16,    bitRange=10-10
 9604                           
 9605                           ;'OTG_FS_HCINTMSK5`                    EQU 0x500005AC,        4, base=16
 9606                           ;'OTG_FS_HCINTMSK5.XFRCM`              EQU 0x500005AC,        4, base=16,    bitRange=0-0
 9607                           ;'OTG_FS_HCINTMSK5.CHHM`               EQU 0x500005AC,        4, base=16,    bitRange=1-1
 9608                           ;'OTG_FS_HCINTMSK5.STALLM`             EQU 0x500005AC,        4, base=16,    bitRange=3-3
 9609                           ;'OTG_FS_HCINTMSK5.NAKM`               EQU 0x500005AC,        4, base=16,    bitRange=4-4
 9610                           ;'OTG_FS_HCINTMSK5.ACKM`               EQU 0x500005AC,        4, base=16,    bitRange=5-5
 9611                           ;'OTG_FS_HCINTMSK5.NYET`               EQU 0x500005AC,        4, base=16,    bitRange=6-6
 9612                           ;'OTG_FS_HCINTMSK5.TXERRM`             EQU 0x500005AC,        4, base=16,    bitRange=7-7
 9613                           ;'OTG_FS_HCINTMSK5.BBERRM`             EQU 0x500005AC,        4, base=16,    bitRange=8-8
 9614                           ;'OTG_FS_HCINTMSK5.FRMORM`             EQU 0x500005AC,        4, base=16,    bitRange=9-9
 9615                           ;'OTG_FS_HCINTMSK5.DTERRM`             EQU 0x500005AC,        4, base=16,    bitRange=10-10
 9616                           
 9617                           ;'OTG_FS_HCTSIZ5`                      EQU 0x500005B0,        4, base=16
 9618                           ;'OTG_FS_HCTSIZ5.XFRSIZ`               EQU 0x500005B0,        4, base=16,    bitRange=0-18
 9619                           ;'OTG_FS_HCTSIZ5.PKTCNT`               EQU 0x500005B0,        4, base=16,    bitRange=19-28
 9620                           ;'OTG_FS_HCTSIZ5.DPID`                 EQU 0x500005B0,        4, base=16,    bitRange=29-30
 9621                           
 9622                           ;'OTG_FS_HCCHAR6`                      EQU 0x500005C0,        4, base=16
 9623                           ;'OTG_FS_HCCHAR6.MPSIZ`                EQU 0x500005C0,        4, base=16,    bitRange=0-10
 9624                           ;'OTG_FS_HCCHAR6.EPNUM`                EQU 0x500005C0,        4, base=16,    bitRange=11-14
 9625                           ;'OTG_FS_HCCHAR6.EPDIR`                EQU 0x500005C0,        4, base=16,    bitRange=15-15
 9626                           ;'OTG_FS_HCCHAR6.LSDEV`                EQU 0x500005C0,        4, base=16,    bitRange=17-17
 9627                           ;'OTG_FS_HCCHAR6.EPTYP`                EQU 0x500005C0,        4, base=16,    bitRange=18-19
 9628                           ;'OTG_FS_HCCHAR6.MCNT`                 EQU 0x500005C0,        4, base=16,    bitRange=20-21
 9629                           ;'OTG_FS_HCCHAR6.DAD`                  EQU 0x500005C0,        4, base=16,    bitRange=22-28
 9630                           ;'OTG_FS_HCCHAR6.ODDFRM`               EQU 0x500005C0,        4, base=16,    bitRange=29-29
 9631                           ;'OTG_FS_HCCHAR6.CHDIS`                EQU 0x500005C0,        4, base=16,    bitRange=30-30
 9632                           ;'OTG_FS_HCCHAR6.CHENA`                EQU 0x500005C0,        4, base=16,    bitRange=31-31
 9633                           
 9634                           ;'OTG_FS_HCINT6`                       EQU 0x500005C8,        4, base=16
 9635                           ;'OTG_FS_HCINT6.XFRC`                  EQU 0x500005C8,        4, base=16,    bitRange=0-0
 9636                           ;'OTG_FS_HCINT6.CHH`                   EQU 0x500005C8,        4, base=16,    bitRange=1-1
 9637                           ;'OTG_FS_HCINT6.STALL`                 EQU 0x500005C8,        4, base=16,    bitRange=3-3
 9638                           ;'OTG_FS_HCINT6.NAK`                   EQU 0x500005C8,        4, base=16,    bitRange=4-4
 9639                           ;'OTG_FS_HCINT6.ACK`                   EQU 0x500005C8,        4, base=16,    bitRange=5-5
 9640                           ;'OTG_FS_HCINT6.TXERR`                 EQU 0x500005C8,        4, base=16,    bitRange=7-7
 9641                           ;'OTG_FS_HCINT6.BBERR`                 EQU 0x500005C8,        4, base=16,    bitRange=8-8
 9642                           ;'OTG_FS_HCINT6.FRMOR`                 EQU 0x500005C8,        4, base=16,    bitRange=9-9
 9643                           ;'OTG_FS_HCINT6.DTERR`                 EQU 0x500005C8,        4, base=16,    bitRange=10-10
 9644                           
 9645                           ;'OTG_FS_HCINTMSK6`                    EQU 0x500005CC,        4, base=16
 9646                           ;'OTG_FS_HCINTMSK6.XFRCM`              EQU 0x500005CC,        4, base=16,    bitRange=0-0
 9647                           ;'OTG_FS_HCINTMSK6.CHHM`               EQU 0x500005CC,        4, base=16,    bitRange=1-1
 9648                           ;'OTG_FS_HCINTMSK6.STALLM`             EQU 0x500005CC,        4, base=16,    bitRange=3-3
 9649                           ;'OTG_FS_HCINTMSK6.NAKM`               EQU 0x500005CC,        4, base=16,    bitRange=4-4
 9650                           ;'OTG_FS_HCINTMSK6.ACKM`               EQU 0x500005CC,        4, base=16,    bitRange=5-5
 9651                           ;'OTG_FS_HCINTMSK6.NYET`               EQU 0x500005CC,        4, base=16,    bitRange=6-6
 9652                           ;'OTG_FS_HCINTMSK6.TXERRM`             EQU 0x500005CC,        4, base=16,    bitRange=7-7
 9653                           ;'OTG_FS_HCINTMSK6.BBERRM`             EQU 0x500005CC,        4, base=16,    bitRange=8-8
 9654                           ;'OTG_FS_HCINTMSK6.FRMORM`             EQU 0x500005CC,        4, base=16,    bitRange=9-9
 9655                           ;'OTG_FS_HCINTMSK6.DTERRM`             EQU 0x500005CC,        4, base=16,    bitRange=10-10
 9656                           
 9657                           ;'OTG_FS_HCTSIZ6`                      EQU 0x500005D0,        4, base=16
 9658                           ;'OTG_FS_HCTSIZ6.XFRSIZ`               EQU 0x500005D0,        4, base=16,    bitRange=0-18
 9659                           ;'OTG_FS_HCTSIZ6.PKTCNT`               EQU 0x500005D0,        4, base=16,    bitRange=19-28
 9660                           ;'OTG_FS_HCTSIZ6.DPID`                 EQU 0x500005D0,        4, base=16,    bitRange=29-30
 9661                           
 9662                           ;'OTG_FS_HCCHAR7`                      EQU 0x500005E0,        4, base=16
 9663                           ;'OTG_FS_HCCHAR7.MPSIZ`                EQU 0x500005E0,        4, base=16,    bitRange=0-10
 9664                           ;'OTG_FS_HCCHAR7.EPNUM`                EQU 0x500005E0,        4, base=16,    bitRange=11-14
 9665                           ;'OTG_FS_HCCHAR7.EPDIR`                EQU 0x500005E0,        4, base=16,    bitRange=15-15
 9666                           ;'OTG_FS_HCCHAR7.LSDEV`                EQU 0x500005E0,        4, base=16,    bitRange=17-17
 9667                           ;'OTG_FS_HCCHAR7.EPTYP`                EQU 0x500005E0,        4, base=16,    bitRange=18-19
 9668                           ;'OTG_FS_HCCHAR7.MCNT`                 EQU 0x500005E0,        4, base=16,    bitRange=20-21
 9669                           ;'OTG_FS_HCCHAR7.DAD`                  EQU 0x500005E0,        4, base=16,    bitRange=22-28
 9670                           ;'OTG_FS_HCCHAR7.ODDFRM`               EQU 0x500005E0,        4, base=16,    bitRange=29-29
 9671                           ;'OTG_FS_HCCHAR7.CHDIS`                EQU 0x500005E0,        4, base=16,    bitRange=30-30
 9672                           ;'OTG_FS_HCCHAR7.CHENA`                EQU 0x500005E0,        4, base=16,    bitRange=31-31
 9673                           
 9674                           ;'OTG_FS_HCINT7`                       EQU 0x500005E8,        4, base=16
 9675                           ;'OTG_FS_HCINT7.XFRC`                  EQU 0x500005E8,        4, base=16,    bitRange=0-0
 9676                           ;'OTG_FS_HCINT7.CHH`                   EQU 0x500005E8,        4, base=16,    bitRange=1-1
 9677                           ;'OTG_FS_HCINT7.STALL`                 EQU 0x500005E8,        4, base=16,    bitRange=3-3
 9678                           ;'OTG_FS_HCINT7.NAK`                   EQU 0x500005E8,        4, base=16,    bitRange=4-4
 9679                           ;'OTG_FS_HCINT7.ACK`                   EQU 0x500005E8,        4, base=16,    bitRange=5-5
 9680                           ;'OTG_FS_HCINT7.TXERR`                 EQU 0x500005E8,        4, base=16,    bitRange=7-7
 9681                           ;'OTG_FS_HCINT7.BBERR`                 EQU 0x500005E8,        4, base=16,    bitRange=8-8
 9682                           ;'OTG_FS_HCINT7.FRMOR`                 EQU 0x500005E8,        4, base=16,    bitRange=9-9
 9683                           ;'OTG_FS_HCINT7.DTERR`                 EQU 0x500005E8,        4, base=16,    bitRange=10-10
 9684                           
 9685                           ;'OTG_FS_HCINTMSK7`                    EQU 0x500005EC,        4, base=16
 9686                           ;'OTG_FS_HCINTMSK7.XFRCM`              EQU 0x500005EC,        4, base=16,    bitRange=0-0
 9687                           ;'OTG_FS_HCINTMSK7.CHHM`               EQU 0x500005EC,        4, base=16,    bitRange=1-1
 9688                           ;'OTG_FS_HCINTMSK7.STALLM`             EQU 0x500005EC,        4, base=16,    bitRange=3-3
 9689                           ;'OTG_FS_HCINTMSK7.NAKM`               EQU 0x500005EC,        4, base=16,    bitRange=4-4
 9690                           ;'OTG_FS_HCINTMSK7.ACKM`               EQU 0x500005EC,        4, base=16,    bitRange=5-5
 9691                           ;'OTG_FS_HCINTMSK7.NYET`               EQU 0x500005EC,        4, base=16,    bitRange=6-6
 9692                           ;'OTG_FS_HCINTMSK7.TXERRM`             EQU 0x500005EC,        4, base=16,    bitRange=7-7
 9693                           ;'OTG_FS_HCINTMSK7.BBERRM`             EQU 0x500005EC,        4, base=16,    bitRange=8-8
 9694                           ;'OTG_FS_HCINTMSK7.FRMORM`             EQU 0x500005EC,        4, base=16,    bitRange=9-9
 9695                           ;'OTG_FS_HCINTMSK7.DTERRM`             EQU 0x500005EC,        4, base=16,    bitRange=10-10
 9696                           
 9697                           ;'OTG_FS_HCTSIZ7`                      EQU 0x500005F0,        4, base=16
 9698                           ;'OTG_FS_HCTSIZ7.XFRSIZ`               EQU 0x500005F0,        4, base=16,    bitRange=0-18
 9699                           ;'OTG_FS_HCTSIZ7.PKTCNT`               EQU 0x500005F0,        4, base=16,    bitRange=19-28
 9700                           ;'OTG_FS_HCTSIZ7.DPID`                 EQU 0x500005F0,        4, base=16,    bitRange=29-30
 9701                           
 9702                           ;'OTG_FS_HCCHAR8`                      EQU 0x50000600,        4, base=16
 9703                           ;'OTG_FS_HCCHAR8.MPSIZ`                EQU 0x50000600,        4, base=16,    bitRange=0-10
 9704                           ;'OTG_FS_HCCHAR8.EPNUM`                EQU 0x50000600,        4, base=16,    bitRange=11-14
 9705                           ;'OTG_FS_HCCHAR8.EPDIR`                EQU 0x50000600,        4, base=16,    bitRange=15-15
 9706                           ;'OTG_FS_HCCHAR8.LSDEV`                EQU 0x50000600,        4, base=16,    bitRange=17-17
 9707                           ;'OTG_FS_HCCHAR8.EPTYP`                EQU 0x50000600,        4, base=16,    bitRange=18-19
 9708                           ;'OTG_FS_HCCHAR8.MCNT`                 EQU 0x50000600,        4, base=16,    bitRange=20-21
 9709                           ;'OTG_FS_HCCHAR8.DAD`                  EQU 0x50000600,        4, base=16,    bitRange=22-28
 9710                           ;'OTG_FS_HCCHAR8.ODDFRM`               EQU 0x50000600,        4, base=16,    bitRange=29-29
 9711                           ;'OTG_FS_HCCHAR8.CHDIS`                EQU 0x50000600,        4, base=16,    bitRange=30-30
 9712                           ;'OTG_FS_HCCHAR8.CHENA`                EQU 0x50000600,        4, base=16,    bitRange=31-31
 9713                           
 9714                           ;'OTG_FS_HCINT8`                       EQU 0x50000608,        4, base=16
 9715                           ;'OTG_FS_HCINT8.XFRC`                  EQU 0x50000608,        4, base=16,    bitRange=0-0
 9716                           ;'OTG_FS_HCINT8.CHH`                   EQU 0x50000608,        4, base=16,    bitRange=1-1
 9717                           ;'OTG_FS_HCINT8.STALL`                 EQU 0x50000608,        4, base=16,    bitRange=3-3
 9718                           ;'OTG_FS_HCINT8.NAK`                   EQU 0x50000608,        4, base=16,    bitRange=4-4
 9719                           ;'OTG_FS_HCINT8.ACK`                   EQU 0x50000608,        4, base=16,    bitRange=5-5
 9720                           ;'OTG_FS_HCINT8.TXERR`                 EQU 0x50000608,        4, base=16,    bitRange=7-7
 9721                           ;'OTG_FS_HCINT8.BBERR`                 EQU 0x50000608,        4, base=16,    bitRange=8-8
 9722                           ;'OTG_FS_HCINT8.FRMOR`                 EQU 0x50000608,        4, base=16,    bitRange=9-9
 9723                           ;'OTG_FS_HCINT8.DTERR`                 EQU 0x50000608,        4, base=16,    bitRange=10-10
 9724                           
 9725                           ;'OTG_FS_HCINTMSK8`                    EQU 0x5000060C,        4, base=16
 9726                           ;'OTG_FS_HCINTMSK8.XFRCM`              EQU 0x5000060C,        4, base=16,    bitRange=0-0
 9727                           ;'OTG_FS_HCINTMSK8.CHHM`               EQU 0x5000060C,        4, base=16,    bitRange=1-1
 9728                           ;'OTG_FS_HCINTMSK8.STALLM`             EQU 0x5000060C,        4, base=16,    bitRange=3-3
 9729                           ;'OTG_FS_HCINTMSK8.NAKM`               EQU 0x5000060C,        4, base=16,    bitRange=4-4
 9730                           ;'OTG_FS_HCINTMSK8.ACKM`               EQU 0x5000060C,        4, base=16,    bitRange=5-5
 9731                           ;'OTG_FS_HCINTMSK8.NYET`               EQU 0x5000060C,        4, base=16,    bitRange=6-6
 9732                           ;'OTG_FS_HCINTMSK8.TXERRM`             EQU 0x5000060C,        4, base=16,    bitRange=7-7
 9733                           ;'OTG_FS_HCINTMSK8.BBERRM`             EQU 0x5000060C,        4, base=16,    bitRange=8-8
 9734                           ;'OTG_FS_HCINTMSK8.FRMORM`             EQU 0x5000060C,        4, base=16,    bitRange=9-9
 9735                           ;'OTG_FS_HCINTMSK8.DTERRM`             EQU 0x5000060C,        4, base=16,    bitRange=10-10
 9736                           
 9737                           ;'OTG_FS_HCTSIZ8`                      EQU 0x50000610,        4, base=16
 9738                           ;'OTG_FS_HCTSIZ8.XFRSIZ`               EQU 0x50000610,        4, base=16,    bitRange=0-18
 9739                           ;'OTG_FS_HCTSIZ8.PKTCNT`               EQU 0x50000610,        4, base=16,    bitRange=19-28
 9740                           ;'OTG_FS_HCTSIZ8.DPID`                 EQU 0x50000610,        4, base=16,    bitRange=29-30
 9741                           
 9742                           ;'OTG_FS_HCCHAR9`                      EQU 0x50000620,        4, base=16
 9743                           ;'OTG_FS_HCCHAR9.MPSIZ`                EQU 0x50000620,        4, base=16,    bitRange=0-10
 9744                           ;'OTG_FS_HCCHAR9.EPNUM`                EQU 0x50000620,        4, base=16,    bitRange=11-14
 9745                           ;'OTG_FS_HCCHAR9.EPDIR`                EQU 0x50000620,        4, base=16,    bitRange=15-15
 9746                           ;'OTG_FS_HCCHAR9.LSDEV`                EQU 0x50000620,        4, base=16,    bitRange=17-17
 9747                           ;'OTG_FS_HCCHAR9.EPTYP`                EQU 0x50000620,        4, base=16,    bitRange=18-19
 9748                           ;'OTG_FS_HCCHAR9.MCNT`                 EQU 0x50000620,        4, base=16,    bitRange=20-21
 9749                           ;'OTG_FS_HCCHAR9.DAD`                  EQU 0x50000620,        4, base=16,    bitRange=22-28
 9750                           ;'OTG_FS_HCCHAR9.ODDFRM`               EQU 0x50000620,        4, base=16,    bitRange=29-29
 9751                           ;'OTG_FS_HCCHAR9.CHDIS`                EQU 0x50000620,        4, base=16,    bitRange=30-30
 9752                           ;'OTG_FS_HCCHAR9.CHENA`                EQU 0x50000620,        4, base=16,    bitRange=31-31
 9753                           
 9754                           ;'OTG_FS_HCINT9`                       EQU 0x50000628,        4, base=16
 9755                           ;'OTG_FS_HCINT9.XFRC`                  EQU 0x50000628,        4, base=16,    bitRange=0-0
 9756                           ;'OTG_FS_HCINT9.CHH`                   EQU 0x50000628,        4, base=16,    bitRange=1-1
 9757                           ;'OTG_FS_HCINT9.STALL`                 EQU 0x50000628,        4, base=16,    bitRange=3-3
 9758                           ;'OTG_FS_HCINT9.NAK`                   EQU 0x50000628,        4, base=16,    bitRange=4-4
 9759                           ;'OTG_FS_HCINT9.ACK`                   EQU 0x50000628,        4, base=16,    bitRange=5-5
 9760                           ;'OTG_FS_HCINT9.TXERR`                 EQU 0x50000628,        4, base=16,    bitRange=7-7
 9761                           ;'OTG_FS_HCINT9.BBERR`                 EQU 0x50000628,        4, base=16,    bitRange=8-8
 9762                           ;'OTG_FS_HCINT9.FRMOR`                 EQU 0x50000628,        4, base=16,    bitRange=9-9
 9763                           ;'OTG_FS_HCINT9.DTERR`                 EQU 0x50000628,        4, base=16,    bitRange=10-10
 9764                           
 9765                           ;'OTG_FS_HCINTMSK9`                    EQU 0x5000062C,        4, base=16
 9766                           ;'OTG_FS_HCINTMSK9.XFRCM`              EQU 0x5000062C,        4, base=16,    bitRange=0-0
 9767                           ;'OTG_FS_HCINTMSK9.CHHM`               EQU 0x5000062C,        4, base=16,    bitRange=1-1
 9768                           ;'OTG_FS_HCINTMSK9.STALLM`             EQU 0x5000062C,        4, base=16,    bitRange=3-3
 9769                           ;'OTG_FS_HCINTMSK9.NAKM`               EQU 0x5000062C,        4, base=16,    bitRange=4-4
 9770                           ;'OTG_FS_HCINTMSK9.ACKM`               EQU 0x5000062C,        4, base=16,    bitRange=5-5
 9771                           ;'OTG_FS_HCINTMSK9.NYET`               EQU 0x5000062C,        4, base=16,    bitRange=6-6
 9772                           ;'OTG_FS_HCINTMSK9.TXERRM`             EQU 0x5000062C,        4, base=16,    bitRange=7-7
 9773                           ;'OTG_FS_HCINTMSK9.BBERRM`             EQU 0x5000062C,        4, base=16,    bitRange=8-8
 9774                           ;'OTG_FS_HCINTMSK9.FRMORM`             EQU 0x5000062C,        4, base=16,    bitRange=9-9
 9775                           ;'OTG_FS_HCINTMSK9.DTERRM`             EQU 0x5000062C,        4, base=16,    bitRange=10-10
 9776                           
 9777                           ;'OTG_FS_HCTSIZ9`                      EQU 0x50000630,        4, base=16
 9778                           ;'OTG_FS_HCTSIZ9.XFRSIZ`               EQU 0x50000630,        4, base=16,    bitRange=0-18
 9779                           ;'OTG_FS_HCTSIZ9.PKTCNT`               EQU 0x50000630,        4, base=16,    bitRange=19-28
 9780                           ;'OTG_FS_HCTSIZ9.DPID`                 EQU 0x50000630,        4, base=16,    bitRange=29-30
 9781                           
 9782                           ;'OTG_FS_HCCHAR10`                     EQU 0x50000640,        4, base=16
 9783                           ;'OTG_FS_HCCHAR10.MPSIZ`               EQU 0x50000640,        4, base=16,    bitRange=0-10
 9784                           ;'OTG_FS_HCCHAR10.EPNUM`               EQU 0x50000640,        4, base=16,    bitRange=11-14
 9785                           ;'OTG_FS_HCCHAR10.EPDIR`               EQU 0x50000640,        4, base=16,    bitRange=15-15
 9786                           ;'OTG_FS_HCCHAR10.LSDEV`               EQU 0x50000640,        4, base=16,    bitRange=17-17
 9787                           ;'OTG_FS_HCCHAR10.EPTYP`               EQU 0x50000640,        4, base=16,    bitRange=18-19
 9788                           ;'OTG_FS_HCCHAR10.MCNT`                EQU 0x50000640,        4, base=16,    bitRange=20-21
 9789                           ;'OTG_FS_HCCHAR10.DAD`                 EQU 0x50000640,        4, base=16,    bitRange=22-28
 9790                           ;'OTG_FS_HCCHAR10.ODDFRM`              EQU 0x50000640,        4, base=16,    bitRange=29-29
 9791                           ;'OTG_FS_HCCHAR10.CHDIS`               EQU 0x50000640,        4, base=16,    bitRange=30-30
 9792                           ;'OTG_FS_HCCHAR10.CHENA`               EQU 0x50000640,        4, base=16,    bitRange=31-31
 9793                           
 9794                           ;'OTG_FS_HCINT10`                      EQU 0x50000648,        4, base=16
 9795                           ;'OTG_FS_HCINT10.XFRC`                 EQU 0x50000648,        4, base=16,    bitRange=0-0
 9796                           ;'OTG_FS_HCINT10.CHH`                  EQU 0x50000648,        4, base=16,    bitRange=1-1
 9797                           ;'OTG_FS_HCINT10.STALL`                EQU 0x50000648,        4, base=16,    bitRange=3-3
 9798                           ;'OTG_FS_HCINT10.NAK`                  EQU 0x50000648,        4, base=16,    bitRange=4-4
 9799                           ;'OTG_FS_HCINT10.ACK`                  EQU 0x50000648,        4, base=16,    bitRange=5-5
 9800                           ;'OTG_FS_HCINT10.TXERR`                EQU 0x50000648,        4, base=16,    bitRange=7-7
 9801                           ;'OTG_FS_HCINT10.BBERR`                EQU 0x50000648,        4, base=16,    bitRange=8-8
 9802                           ;'OTG_FS_HCINT10.FRMOR`                EQU 0x50000648,        4, base=16,    bitRange=9-9
 9803                           ;'OTG_FS_HCINT10.DTERR`                EQU 0x50000648,        4, base=16,    bitRange=10-10
 9804                           
 9805                           ;'OTG_FS_HCINTMSK10`                   EQU 0x5000064C,        4, base=16
 9806                           ;'OTG_FS_HCINTMSK10.XFRCM`             EQU 0x5000064C,        4, base=16,    bitRange=0-0
 9807                           ;'OTG_FS_HCINTMSK10.CHHM`              EQU 0x5000064C,        4, base=16,    bitRange=1-1
 9808                           ;'OTG_FS_HCINTMSK10.STALLM`            EQU 0x5000064C,        4, base=16,    bitRange=3-3
 9809                           ;'OTG_FS_HCINTMSK10.NAKM`              EQU 0x5000064C,        4, base=16,    bitRange=4-4
 9810                           ;'OTG_FS_HCINTMSK10.ACKM`              EQU 0x5000064C,        4, base=16,    bitRange=5-5
 9811                           ;'OTG_FS_HCINTMSK10.NYET`              EQU 0x5000064C,        4, base=16,    bitRange=6-6
 9812                           ;'OTG_FS_HCINTMSK10.TXERRM`            EQU 0x5000064C,        4, base=16,    bitRange=7-7
 9813                           ;'OTG_FS_HCINTMSK10.BBERRM`            EQU 0x5000064C,        4, base=16,    bitRange=8-8
 9814                           ;'OTG_FS_HCINTMSK10.FRMORM`            EQU 0x5000064C,        4, base=16,    bitRange=9-9
 9815                           ;'OTG_FS_HCINTMSK10.DTERRM`            EQU 0x5000064C,        4, base=16,    bitRange=10-10
 9816                           
 9817                           ;'OTG_FS_HCTSIZ10`                     EQU 0x50000650,        4, base=16
 9818                           ;'OTG_FS_HCTSIZ10.XFRSIZ`              EQU 0x50000650,        4, base=16,    bitRange=0-18
 9819                           ;'OTG_FS_HCTSIZ10.PKTCNT`              EQU 0x50000650,        4, base=16,    bitRange=19-28
 9820                           ;'OTG_FS_HCTSIZ10.DPID`                EQU 0x50000650,        4, base=16,    bitRange=29-30
 9821                           
 9822                           ;'OTG_FS_HCCHAR11`                     EQU 0x50000660,        4, base=16
 9823                           ;'OTG_FS_HCCHAR11.MPSIZ`               EQU 0x50000660,        4, base=16,    bitRange=0-10
 9824                           ;'OTG_FS_HCCHAR11.EPNUM`               EQU 0x50000660,        4, base=16,    bitRange=11-14
 9825                           ;'OTG_FS_HCCHAR11.EPDIR`               EQU 0x50000660,        4, base=16,    bitRange=15-15
 9826                           ;'OTG_FS_HCCHAR11.LSDEV`               EQU 0x50000660,        4, base=16,    bitRange=17-17
 9827                           ;'OTG_FS_HCCHAR11.EPTYP`               EQU 0x50000660,        4, base=16,    bitRange=18-19
 9828                           ;'OTG_FS_HCCHAR11.MCNT`                EQU 0x50000660,        4, base=16,    bitRange=20-21
 9829                           ;'OTG_FS_HCCHAR11.DAD`                 EQU 0x50000660,        4, base=16,    bitRange=22-28
 9830                           ;'OTG_FS_HCCHAR11.ODDFRM`              EQU 0x50000660,        4, base=16,    bitRange=29-29
 9831                           ;'OTG_FS_HCCHAR11.CHDIS`               EQU 0x50000660,        4, base=16,    bitRange=30-30
 9832                           ;'OTG_FS_HCCHAR11.CHENA`               EQU 0x50000660,        4, base=16,    bitRange=31-31
 9833                           
 9834                           ;'OTG_FS_HCINT11`                      EQU 0x50000668,        4, base=16
 9835                           ;'OTG_FS_HCINT11.XFRC`                 EQU 0x50000668,        4, base=16,    bitRange=0-0
 9836                           ;'OTG_FS_HCINT11.CHH`                  EQU 0x50000668,        4, base=16,    bitRange=1-1
 9837                           ;'OTG_FS_HCINT11.STALL`                EQU 0x50000668,        4, base=16,    bitRange=3-3
 9838                           ;'OTG_FS_HCINT11.NAK`                  EQU 0x50000668,        4, base=16,    bitRange=4-4
 9839                           ;'OTG_FS_HCINT11.ACK`                  EQU 0x50000668,        4, base=16,    bitRange=5-5
 9840                           ;'OTG_FS_HCINT11.TXERR`                EQU 0x50000668,        4, base=16,    bitRange=7-7
 9841                           ;'OTG_FS_HCINT11.BBERR`                EQU 0x50000668,        4, base=16,    bitRange=8-8
 9842                           ;'OTG_FS_HCINT11.FRMOR`                EQU 0x50000668,        4, base=16,    bitRange=9-9
 9843                           ;'OTG_FS_HCINT11.DTERR`                EQU 0x50000668,        4, base=16,    bitRange=10-10
 9844                           
 9845                           ;'OTG_FS_HCINTMSK11`                   EQU 0x5000066C,        4, base=16
 9846                           ;'OTG_FS_HCINTMSK11.XFRCM`             EQU 0x5000066C,        4, base=16,    bitRange=0-0
 9847                           ;'OTG_FS_HCINTMSK11.CHHM`              EQU 0x5000066C,        4, base=16,    bitRange=1-1
 9848                           ;'OTG_FS_HCINTMSK11.STALLM`            EQU 0x5000066C,        4, base=16,    bitRange=3-3
 9849                           ;'OTG_FS_HCINTMSK11.NAKM`              EQU 0x5000066C,        4, base=16,    bitRange=4-4
 9850                           ;'OTG_FS_HCINTMSK11.ACKM`              EQU 0x5000066C,        4, base=16,    bitRange=5-5
 9851                           ;'OTG_FS_HCINTMSK11.NYET`              EQU 0x5000066C,        4, base=16,    bitRange=6-6
 9852                           ;'OTG_FS_HCINTMSK11.TXERRM`            EQU 0x5000066C,        4, base=16,    bitRange=7-7
 9853                           ;'OTG_FS_HCINTMSK11.BBERRM`            EQU 0x5000066C,        4, base=16,    bitRange=8-8
 9854                           ;'OTG_FS_HCINTMSK11.FRMORM`            EQU 0x5000066C,        4, base=16,    bitRange=9-9
 9855                           ;'OTG_FS_HCINTMSK11.DTERRM`            EQU 0x5000066C,        4, base=16,    bitRange=10-10
 9856                           
 9857                           ;'OTG_FS_HCTSIZ11`                     EQU 0x50000670,        4, base=16
 9858                           ;'OTG_FS_HCTSIZ11.XFRSIZ`              EQU 0x50000670,        4, base=16,    bitRange=0-18
 9859                           ;'OTG_FS_HCTSIZ11.PKTCNT`              EQU 0x50000670,        4, base=16,    bitRange=19-28
 9860                           ;'OTG_FS_HCTSIZ11.DPID`                EQU 0x50000670,        4, base=16,    bitRange=29-30
 9861                           
 9862                           ;'OTG_FS_HCCHAR12`                     EQU 0x50000680,        4, base=16
 9863                           ;'OTG_FS_HCCHAR12.MPSIZ`               EQU 0x50000680,        4, base=16,    bitRange=0-10
 9864                           ;'OTG_FS_HCCHAR12.EPNUM`               EQU 0x50000680,        4, base=16,    bitRange=11-14
 9865                           ;'OTG_FS_HCCHAR12.EPDIR`               EQU 0x50000680,        4, base=16,    bitRange=15-15
 9866                           ;'OTG_FS_HCCHAR12.LSDEV`               EQU 0x50000680,        4, base=16,    bitRange=17-17
 9867                           ;'OTG_FS_HCCHAR12.EPTYP`               EQU 0x50000680,        4, base=16,    bitRange=18-19
 9868                           ;'OTG_FS_HCCHAR12.MCNT`                EQU 0x50000680,        4, base=16,    bitRange=20-21
 9869                           ;'OTG_FS_HCCHAR12.DAD`                 EQU 0x50000680,        4, base=16,    bitRange=22-28
 9870                           ;'OTG_FS_HCCHAR12.ODDFRM`              EQU 0x50000680,        4, base=16,    bitRange=29-29
 9871                           ;'OTG_FS_HCCHAR12.CHDIS`               EQU 0x50000680,        4, base=16,    bitRange=30-30
 9872                           ;'OTG_FS_HCCHAR12.CHENA`               EQU 0x50000680,        4, base=16,    bitRange=31-31
 9873                           
 9874                           ;'OTG_FS_HCINT12`                      EQU 0x50000688,        4, base=16
 9875                           ;'OTG_FS_HCINT12.XFRC`                 EQU 0x50000688,        4, base=16,    bitRange=0-0
 9876                           ;'OTG_FS_HCINT12.CHH`                  EQU 0x50000688,        4, base=16,    bitRange=1-1
 9877                           ;'OTG_FS_HCINT12.STALL`                EQU 0x50000688,        4, base=16,    bitRange=3-3
 9878                           ;'OTG_FS_HCINT12.NAK`                  EQU 0x50000688,        4, base=16,    bitRange=4-4
 9879                           ;'OTG_FS_HCINT12.ACK`                  EQU 0x50000688,        4, base=16,    bitRange=5-5
 9880                           ;'OTG_FS_HCINT12.TXERR`                EQU 0x50000688,        4, base=16,    bitRange=7-7
 9881                           ;'OTG_FS_HCINT12.BBERR`                EQU 0x50000688,        4, base=16,    bitRange=8-8
 9882                           ;'OTG_FS_HCINT12.FRMOR`                EQU 0x50000688,        4, base=16,    bitRange=9-9
 9883                           ;'OTG_FS_HCINT12.DTERR`                EQU 0x50000688,        4, base=16,    bitRange=10-10
 9884                           
 9885                           ;'OTG_FS_HCINTMSK12`                   EQU 0x5000068C,        4, base=16
 9886                           ;'OTG_FS_HCINTMSK12.XFRCM`             EQU 0x5000068C,        4, base=16,    bitRange=0-0
 9887                           ;'OTG_FS_HCINTMSK12.CHHM`              EQU 0x5000068C,        4, base=16,    bitRange=1-1
 9888                           ;'OTG_FS_HCINTMSK12.STALLM`            EQU 0x5000068C,        4, base=16,    bitRange=3-3
 9889                           ;'OTG_FS_HCINTMSK12.NAKM`              EQU 0x5000068C,        4, base=16,    bitRange=4-4
 9890                           ;'OTG_FS_HCINTMSK12.ACKM`              EQU 0x5000068C,        4, base=16,    bitRange=5-5
 9891                           ;'OTG_FS_HCINTMSK12.NYET`              EQU 0x5000068C,        4, base=16,    bitRange=6-6
 9892                           ;'OTG_FS_HCINTMSK12.TXERRM`            EQU 0x5000068C,        4, base=16,    bitRange=7-7
 9893                           ;'OTG_FS_HCINTMSK12.BBERRM`            EQU 0x5000068C,        4, base=16,    bitRange=8-8
 9894                           ;'OTG_FS_HCINTMSK12.FRMORM`            EQU 0x5000068C,        4, base=16,    bitRange=9-9
 9895                           ;'OTG_FS_HCINTMSK12.DTERRM`            EQU 0x5000068C,        4, base=16,    bitRange=10-10
 9896                           
 9897                           ;'OTG_FS_HCTSIZ12`                     EQU 0x50000690,        4, base=16
 9898                           ;'OTG_FS_HCTSIZ12.XFRSIZ`              EQU 0x50000690,        4, base=16,    bitRange=0-18
 9899                           ;'OTG_FS_HCTSIZ12.PKTCNT`              EQU 0x50000690,        4, base=16,    bitRange=19-28
 9900                           ;'OTG_FS_HCTSIZ12.DPID`                EQU 0x50000690,        4, base=16,    bitRange=29-30
 9901                           
 9902                           ;'OTG_FS_HCCHAR13`                     EQU 0x500006A0,        4, base=16
 9903                           ;'OTG_FS_HCCHAR13.MPSIZ`               EQU 0x500006A0,        4, base=16,    bitRange=0-10
 9904                           ;'OTG_FS_HCCHAR13.EPNUM`               EQU 0x500006A0,        4, base=16,    bitRange=11-14
 9905                           ;'OTG_FS_HCCHAR13.EPDIR`               EQU 0x500006A0,        4, base=16,    bitRange=15-15
 9906                           ;'OTG_FS_HCCHAR13.LSDEV`               EQU 0x500006A0,        4, base=16,    bitRange=17-17
 9907                           ;'OTG_FS_HCCHAR13.EPTYP`               EQU 0x500006A0,        4, base=16,    bitRange=18-19
 9908                           ;'OTG_FS_HCCHAR13.MCNT`                EQU 0x500006A0,        4, base=16,    bitRange=20-21
 9909                           ;'OTG_FS_HCCHAR13.DAD`                 EQU 0x500006A0,        4, base=16,    bitRange=22-28
 9910                           ;'OTG_FS_HCCHAR13.ODDFRM`              EQU 0x500006A0,        4, base=16,    bitRange=29-29
 9911                           ;'OTG_FS_HCCHAR13.CHDIS`               EQU 0x500006A0,        4, base=16,    bitRange=30-30
 9912                           ;'OTG_FS_HCCHAR13.CHENA`               EQU 0x500006A0,        4, base=16,    bitRange=31-31
 9913                           
 9914                           ;'OTG_FS_HCINT13`                      EQU 0x500006A8,        4, base=16
 9915                           ;'OTG_FS_HCINT13.XFRC`                 EQU 0x500006A8,        4, base=16,    bitRange=0-0
 9916                           ;'OTG_FS_HCINT13.CHH`                  EQU 0x500006A8,        4, base=16,    bitRange=1-1
 9917                           ;'OTG_FS_HCINT13.STALL`                EQU 0x500006A8,        4, base=16,    bitRange=3-3
 9918                           ;'OTG_FS_HCINT13.NAK`                  EQU 0x500006A8,        4, base=16,    bitRange=4-4
 9919                           ;'OTG_FS_HCINT13.ACK`                  EQU 0x500006A8,        4, base=16,    bitRange=5-5
 9920                           ;'OTG_FS_HCINT13.TXERR`                EQU 0x500006A8,        4, base=16,    bitRange=7-7
 9921                           ;'OTG_FS_HCINT13.BBERR`                EQU 0x500006A8,        4, base=16,    bitRange=8-8
 9922                           ;'OTG_FS_HCINT13.FRMOR`                EQU 0x500006A8,        4, base=16,    bitRange=9-9
 9923                           ;'OTG_FS_HCINT13.DTERR`                EQU 0x500006A8,        4, base=16,    bitRange=10-10
 9924                           
 9925                           ;'OTG_FS_HCINTMSK13`                   EQU 0x500006AC,        4, base=16
 9926                           ;'OTG_FS_HCINTMSK13.XFRCM`             EQU 0x500006AC,        4, base=16,    bitRange=0-0
 9927                           ;'OTG_FS_HCINTMSK13.CHHM`              EQU 0x500006AC,        4, base=16,    bitRange=1-1
 9928                           ;'OTG_FS_HCINTMSK13.STALLM`            EQU 0x500006AC,        4, base=16,    bitRange=3-3
 9929                           ;'OTG_FS_HCINTMSK13.NAKM`              EQU 0x500006AC,        4, base=16,    bitRange=4-4
 9930                           ;'OTG_FS_HCINTMSK13.ACKM`              EQU 0x500006AC,        4, base=16,    bitRange=5-5
 9931                           ;'OTG_FS_HCINTMSK13.NYET`              EQU 0x500006AC,        4, base=16,    bitRange=6-6
 9932                           ;'OTG_FS_HCINTMSK13.TXERRM`            EQU 0x500006AC,        4, base=16,    bitRange=7-7
 9933                           ;'OTG_FS_HCINTMSK13.BBERRM`            EQU 0x500006AC,        4, base=16,    bitRange=8-8
 9934                           ;'OTG_FS_HCINTMSK13.FRMORM`            EQU 0x500006AC,        4, base=16,    bitRange=9-9
 9935                           ;'OTG_FS_HCINTMSK13.DTERRM`            EQU 0x500006AC,        4, base=16,    bitRange=10-10
 9936                           
 9937                           ;'OTG_FS_HCTSIZ13`                     EQU 0x500006B0,        4, base=16
 9938                           ;'OTG_FS_HCTSIZ13.XFRSIZ`              EQU 0x500006B0,        4, base=16,    bitRange=0-18
 9939                           ;'OTG_FS_HCTSIZ13.PKTCNT`              EQU 0x500006B0,        4, base=16,    bitRange=19-28
 9940                           ;'OTG_FS_HCTSIZ13.DPID`                EQU 0x500006B0,        4, base=16,    bitRange=29-30
 9941                           
 9942                           ;'OTG_FS_HCCHAR14`                     EQU 0x500006C0,        4, base=16
 9943                           ;'OTG_FS_HCCHAR14.MPSIZ`               EQU 0x500006C0,        4, base=16,    bitRange=0-10
 9944                           ;'OTG_FS_HCCHAR14.EPNUM`               EQU 0x500006C0,        4, base=16,    bitRange=11-14
 9945                           ;'OTG_FS_HCCHAR14.EPDIR`               EQU 0x500006C0,        4, base=16,    bitRange=15-15
 9946                           ;'OTG_FS_HCCHAR14.LSDEV`               EQU 0x500006C0,        4, base=16,    bitRange=17-17
 9947                           ;'OTG_FS_HCCHAR14.EPTYP`               EQU 0x500006C0,        4, base=16,    bitRange=18-19
 9948                           ;'OTG_FS_HCCHAR14.MCNT`                EQU 0x500006C0,        4, base=16,    bitRange=20-21
 9949                           ;'OTG_FS_HCCHAR14.DAD`                 EQU 0x500006C0,        4, base=16,    bitRange=22-28
 9950                           ;'OTG_FS_HCCHAR14.ODDFRM`              EQU 0x500006C0,        4, base=16,    bitRange=29-29
 9951                           ;'OTG_FS_HCCHAR14.CHDIS`               EQU 0x500006C0,        4, base=16,    bitRange=30-30
 9952                           ;'OTG_FS_HCCHAR14.CHENA`               EQU 0x500006C0,        4, base=16,    bitRange=31-31
 9953                           
 9954                           ;'OTG_FS_HCINT14`                      EQU 0x500006C8,        4, base=16
 9955                           ;'OTG_FS_HCINT14.XFRC`                 EQU 0x500006C8,        4, base=16,    bitRange=0-0
 9956                           ;'OTG_FS_HCINT14.CHH`                  EQU 0x500006C8,        4, base=16,    bitRange=1-1
 9957                           ;'OTG_FS_HCINT14.STALL`                EQU 0x500006C8,        4, base=16,    bitRange=3-3
 9958                           ;'OTG_FS_HCINT14.NAK`                  EQU 0x500006C8,        4, base=16,    bitRange=4-4
 9959                           ;'OTG_FS_HCINT14.ACK`                  EQU 0x500006C8,        4, base=16,    bitRange=5-5
 9960                           ;'OTG_FS_HCINT14.TXERR`                EQU 0x500006C8,        4, base=16,    bitRange=7-7
 9961                           ;'OTG_FS_HCINT14.BBERR`                EQU 0x500006C8,        4, base=16,    bitRange=8-8
 9962                           ;'OTG_FS_HCINT14.FRMOR`                EQU 0x500006C8,        4, base=16,    bitRange=9-9
 9963                           ;'OTG_FS_HCINT14.DTERR`                EQU 0x500006C8,        4, base=16,    bitRange=10-10
 9964                           
 9965                           ;'OTG_FS_HCINTMSK14`                   EQU 0x500006CC,        4, base=16
 9966                           ;'OTG_FS_HCINTMSK14.XFRCM`             EQU 0x500006CC,        4, base=16,    bitRange=0-0
 9967                           ;'OTG_FS_HCINTMSK14.CHHM`              EQU 0x500006CC,        4, base=16,    bitRange=1-1
 9968                           ;'OTG_FS_HCINTMSK14.STALLM`            EQU 0x500006CC,        4, base=16,    bitRange=3-3
 9969                           ;'OTG_FS_HCINTMSK14.NAKM`              EQU 0x500006CC,        4, base=16,    bitRange=4-4
 9970                           ;'OTG_FS_HCINTMSK14.ACKM`              EQU 0x500006CC,        4, base=16,    bitRange=5-5
 9971                           ;'OTG_FS_HCINTMSK14.NYET`              EQU 0x500006CC,        4, base=16,    bitRange=6-6
 9972                           ;'OTG_FS_HCINTMSK14.TXERRM`            EQU 0x500006CC,        4, base=16,    bitRange=7-7
 9973                           ;'OTG_FS_HCINTMSK14.BBERRM`            EQU 0x500006CC,        4, base=16,    bitRange=8-8
 9974                           ;'OTG_FS_HCINTMSK14.FRMORM`            EQU 0x500006CC,        4, base=16,    bitRange=9-9
 9975                           ;'OTG_FS_HCINTMSK14.DTERRM`            EQU 0x500006CC,        4, base=16,    bitRange=10-10
 9976                           
 9977                           ;'OTG_FS_HCTSIZ14`                     EQU 0x500006D0,        4, base=16
 9978                           ;'OTG_FS_HCTSIZ14.XFRSIZ`              EQU 0x500006D0,        4, base=16,    bitRange=0-18
 9979                           ;'OTG_FS_HCTSIZ14.PKTCNT`              EQU 0x500006D0,        4, base=16,    bitRange=19-28
 9980                           ;'OTG_FS_HCTSIZ14.DPID`                EQU 0x500006D0,        4, base=16,    bitRange=29-30
 9981                           
 9982                           ;'OTG_FS_HCCHAR15`                     EQU 0x500006E0,        4, base=16
 9983                           ;'OTG_FS_HCCHAR15.MPSIZ`               EQU 0x500006E0,        4, base=16,    bitRange=0-10
 9984                           ;'OTG_FS_HCCHAR15.EPNUM`               EQU 0x500006E0,        4, base=16,    bitRange=11-14
 9985                           ;'OTG_FS_HCCHAR15.EPDIR`               EQU 0x500006E0,        4, base=16,    bitRange=15-15
 9986                           ;'OTG_FS_HCCHAR15.LSDEV`               EQU 0x500006E0,        4, base=16,    bitRange=17-17
 9987                           ;'OTG_FS_HCCHAR15.EPTYP`               EQU 0x500006E0,        4, base=16,    bitRange=18-19
 9988                           ;'OTG_FS_HCCHAR15.MCNT`                EQU 0x500006E0,        4, base=16,    bitRange=20-21
 9989                           ;'OTG_FS_HCCHAR15.DAD`                 EQU 0x500006E0,        4, base=16,    bitRange=22-28
 9990                           ;'OTG_FS_HCCHAR15.ODDFRM`              EQU 0x500006E0,        4, base=16,    bitRange=29-29
 9991                           ;'OTG_FS_HCCHAR15.CHDIS`               EQU 0x500006E0,        4, base=16,    bitRange=30-30
 9992                           ;'OTG_FS_HCCHAR15.CHENA`               EQU 0x500006E0,        4, base=16,    bitRange=31-31
 9993                           
 9994                           ;'OTG_FS_HCINT15`                      EQU 0x500006E8,        4, base=16
 9995                           ;'OTG_FS_HCINT15.XFRC`                 EQU 0x500006E8,        4, base=16,    bitRange=0-0
 9996                           ;'OTG_FS_HCINT15.CHH`                  EQU 0x500006E8,        4, base=16,    bitRange=1-1
 9997                           ;'OTG_FS_HCINT15.STALL`                EQU 0x500006E8,        4, base=16,    bitRange=3-3
 9998                           ;'OTG_FS_HCINT15.NAK`                  EQU 0x500006E8,        4, base=16,    bitRange=4-4
 9999                           ;'OTG_FS_HCINT15.ACK`                  EQU 0x500006E8,        4, base=16,    bitRange=5-5
10000                           ;'OTG_FS_HCINT15.TXERR`                EQU 0x500006E8,        4, base=16,    bitRange=7-7
10001                           ;'OTG_FS_HCINT15.BBERR`                EQU 0x500006E8,        4, base=16,    bitRange=8-8
10002                           ;'OTG_FS_HCINT15.FRMOR`                EQU 0x500006E8,        4, base=16,    bitRange=9-9
10003                           ;'OTG_FS_HCINT15.DTERR`                EQU 0x500006E8,        4, base=16,    bitRange=10-10
10004                           
10005                           ;'OTG_FS_HCINTMSK15`                   EQU 0x500006EC,        4, base=16
10006                           ;'OTG_FS_HCINTMSK15.XFRCM`             EQU 0x500006EC,        4, base=16,    bitRange=0-0
10007                           ;'OTG_FS_HCINTMSK15.CHHM`              EQU 0x500006EC,        4, base=16,    bitRange=1-1
10008                           ;'OTG_FS_HCINTMSK15.STALLM`            EQU 0x500006EC,        4, base=16,    bitRange=3-3
10009                           ;'OTG_FS_HCINTMSK15.NAKM`              EQU 0x500006EC,        4, base=16,    bitRange=4-4
10010                           ;'OTG_FS_HCINTMSK15.ACKM`              EQU 0x500006EC,        4, base=16,    bitRange=5-5
10011                           ;'OTG_FS_HCINTMSK15.NYET`              EQU 0x500006EC,        4, base=16,    bitRange=6-6
10012                           ;'OTG_FS_HCINTMSK15.TXERRM`            EQU 0x500006EC,        4, base=16,    bitRange=7-7
10013                           ;'OTG_FS_HCINTMSK15.BBERRM`            EQU 0x500006EC,        4, base=16,    bitRange=8-8
10014                           ;'OTG_FS_HCINTMSK15.FRMORM`            EQU 0x500006EC,        4, base=16,    bitRange=9-9
10015                           ;'OTG_FS_HCINTMSK15.DTERRM`            EQU 0x500006EC,        4, base=16,    bitRange=10-10
10016                           
10017                           ;'OTG_FS_HCTSIZ15`                     EQU 0x500006F0,        4, base=16
10018                           ;'OTG_FS_HCTSIZ15.XFRSIZ`              EQU 0x500006F0,        4, base=16,    bitRange=0-18
10019                           ;'OTG_FS_HCTSIZ15.PKTCNT`              EQU 0x500006F0,        4, base=16,    bitRange=19-28
10020                           ;'OTG_FS_HCTSIZ15.DPID`                EQU 0x500006F0,        4, base=16,    bitRange=29-30
10021                           
10022                           ;'OTG_FS_DCFG`                         EQU 0x50000800,        4, base=16
10023                           ;'OTG_FS_DCFG.DSPD`                    EQU 0x50000800,        4, base=16,    bitRange=0-1
10024                           ;'OTG_FS_DCFG.NZLSOHSK`                EQU 0x50000800,        4, base=16,    bitRange=2-2
10025                           ;'OTG_FS_DCFG.DAD`                     EQU 0x50000800,        4, base=16,    bitRange=4-10
10026                           ;'OTG_FS_DCFG.PFIVL`                   EQU 0x50000800,        4, base=16,    bitRange=11-12
10027                           
10028                           ;'OTG_FS_DCTL`                         EQU 0x50000804,        4, base=16
10029                           ;'OTG_FS_DCTL.RWUSIG`                  EQU 0x50000804,        4, base=16,    bitRange=0-0
10030                           ;'OTG_FS_DCTL.SDIS`                    EQU 0x50000804,        4, base=16,    bitRange=1-1
10031                           ;'OTG_FS_DCTL.GINSTS`                  EQU 0x50000804,        4, base=16,    bitRange=2-2
10032                           ;'OTG_FS_DCTL.GONSTS`                  EQU 0x50000804,        4, base=16,    bitRange=3-3
10033                           ;'OTG_FS_DCTL.TCTL`                    EQU 0x50000804,        4, base=16,    bitRange=4-6
10034                           ;'OTG_FS_DCTL.SGINAK`                  EQU 0x50000804,        4, base=16,    bitRange=7-7
10035                           ;'OTG_FS_DCTL.CGINAK`                  EQU 0x50000804,        4, base=16,    bitRange=8-8
10036                           ;'OTG_FS_DCTL.SGONAK`                  EQU 0x50000804,        4, base=16,    bitRange=9-9
10037                           ;'OTG_FS_DCTL.CGONAK`                  EQU 0x50000804,        4, base=16,    bitRange=10-10
10038                           ;'OTG_FS_DCTL.POPRGDNE`                EQU 0x50000804,        4, base=16,    bitRange=11-11
10039                           
10040                           ;'OTG_FS_DSTS`                         EQU 0x50000808,        4, base=16
10041                           ;'OTG_FS_DSTS.SUSPSTS`                 EQU 0x50000808,        4, base=16,    bitRange=0-0
10042                           ;'OTG_FS_DSTS.ENUMSPD`                 EQU 0x50000808,        4, base=16,    bitRange=1-2
10043                           ;'OTG_FS_DSTS.EERR`                    EQU 0x50000808,        4, base=16,    bitRange=3-3
10044                           ;'OTG_FS_DSTS.FNSOF`                   EQU 0x50000808,        4, base=16,    bitRange=8-21
10045                           
10046                           ;'OTG_FS_DIEPMSK`                      EQU 0x50000810,        4, base=16
10047                           ;'OTG_FS_DIEPMSK.XFRCM`                EQU 0x50000810,        4, base=16,    bitRange=0-0
10048                           ;'OTG_FS_DIEPMSK.EPDM`                 EQU 0x50000810,        4, base=16,    bitRange=1-1
10049                           ;'OTG_FS_DIEPMSK.TOM`                  EQU 0x50000810,        4, base=16,    bitRange=3-3
10050                           ;'OTG_FS_DIEPMSK.ITTXFEMSK`            EQU 0x50000810,        4, base=16,    bitRange=4-4
10051                           ;'OTG_FS_DIEPMSK.INEPNMM`              EQU 0x50000810,        4, base=16,    bitRange=5-5
10052                           ;'OTG_FS_DIEPMSK.INEPNEM`              EQU 0x50000810,        4, base=16,    bitRange=6-6
10053                           
10054                           ;'OTG_FS_DOEPMSK`                      EQU 0x50000814,        4, base=16
10055                           ;'OTG_FS_DOEPMSK.XFRCM`                EQU 0x50000814,        4, base=16,    bitRange=0-0
10056                           ;'OTG_FS_DOEPMSK.EPDM`                 EQU 0x50000814,        4, base=16,    bitRange=1-1
10057                           ;'OTG_FS_DOEPMSK.STUPM`                EQU 0x50000814,        4, base=16,    bitRange=3-3
10058                           ;'OTG_FS_DOEPMSK.OTEPDM`               EQU 0x50000814,        4, base=16,    bitRange=4-4
10059                           
10060                           ;'OTG_FS_DAINT`                        EQU 0x50000818,        4, base=16
10061                           ;'OTG_FS_DAINT.IEP0`                   EQU 0x50000818,        4, base=16,    bitRange=0-0
10062                           ;'OTG_FS_DAINT.IEP1`                   EQU 0x50000818,        4, base=16,    bitRange=1-1
10063                           ;'OTG_FS_DAINT.IEP2`                   EQU 0x50000818,        4, base=16,    bitRange=2-2
10064                           ;'OTG_FS_DAINT.IEP3`                   EQU 0x50000818,        4, base=16,    bitRange=3-3
10065                           ;'OTG_FS_DAINT.IEP4`                   EQU 0x50000818,        4, base=16,    bitRange=4-4
10066                           ;'OTG_FS_DAINT.IEP5`                   EQU 0x50000818,        4, base=16,    bitRange=5-5
10067                           ;'OTG_FS_DAINT.IEP6`                   EQU 0x50000818,        4, base=16,    bitRange=6-6
10068                           ;'OTG_FS_DAINT.IEP7`                   EQU 0x50000818,        4, base=16,    bitRange=7-7
10069                           ;'OTG_FS_DAINT.IEP8`                   EQU 0x50000818,        4, base=16,    bitRange=8-8
10070                           ;'OTG_FS_DAINT.IEP9`                   EQU 0x50000818,        4, base=16,    bitRange=9-9
10071                           ;'OTG_FS_DAINT.IEP10`                  EQU 0x50000818,        4, base=16,    bitRange=10-10
10072                           ;'OTG_FS_DAINT.IEP11`                  EQU 0x50000818,        4, base=16,    bitRange=11-11
10073                           ;'OTG_FS_DAINT.IEP12`                  EQU 0x50000818,        4, base=16,    bitRange=12-12
10074                           ;'OTG_FS_DAINT.IEP13`                  EQU 0x50000818,        4, base=16,    bitRange=13-13
10075                           ;'OTG_FS_DAINT.IEP14`                  EQU 0x50000818,        4, base=16,    bitRange=14-14
10076                           ;'OTG_FS_DAINT.IEP15`                  EQU 0x50000818,        4, base=16,    bitRange=15-15
10077                           ;'OTG_FS_DAINT.OEP0`                   EQU 0x50000818,        4, base=16,    bitRange=16-16
10078                           ;'OTG_FS_DAINT.OEP1`                   EQU 0x50000818,        4, base=16,    bitRange=17-17
10079                           ;'OTG_FS_DAINT.OEP2`                   EQU 0x50000818,        4, base=16,    bitRange=18-18
10080                           ;'OTG_FS_DAINT.OEP3`                   EQU 0x50000818,        4, base=16,    bitRange=19-19
10081                           ;'OTG_FS_DAINT.OEP4`                   EQU 0x50000818,        4, base=16,    bitRange=20-20
10082                           ;'OTG_FS_DAINT.OEP5`                   EQU 0x50000818,        4, base=16,    bitRange=21-21
10083                           ;'OTG_FS_DAINT.OEP6`                   EQU 0x50000818,        4, base=16,    bitRange=22-22
10084                           ;'OTG_FS_DAINT.OEP7`                   EQU 0x50000818,        4, base=16,    bitRange=23-23
10085                           ;'OTG_FS_DAINT.OEP8`                   EQU 0x50000818,        4, base=16,    bitRange=24-24
10086                           ;'OTG_FS_DAINT.OEP9`                   EQU 0x50000818,        4, base=16,    bitRange=25-25
10087                           ;'OTG_FS_DAINT.OEP10`                  EQU 0x50000818,        4, base=16,    bitRange=26-26
10088                           ;'OTG_FS_DAINT.OEP11`                  EQU 0x50000818,        4, base=16,    bitRange=27-27
10089                           ;'OTG_FS_DAINT.OEP12`                  EQU 0x50000818,        4, base=16,    bitRange=28-28
10090                           ;'OTG_FS_DAINT.OEP13`                  EQU 0x50000818,        4, base=16,    bitRange=29-29
10091                           ;'OTG_FS_DAINT.OEP14`                  EQU 0x50000818,        4, base=16,    bitRange=30-30
10092                           ;'OTG_FS_DAINT.OEP15`                  EQU 0x50000818,        4, base=16,    bitRange=31-31
10093                           
10094                           ;'OTG_FS_DAINTMSK`                     EQU 0x5000081C,        4, base=16
10095                           ;'OTG_FS_DAINTMSK.IEP0M`               EQU 0x5000081C,        4, base=16,    bitRange=0-0
10096                           ;'OTG_FS_DAINTMSK.IEP1M`               EQU 0x5000081C,        4, base=16,    bitRange=1-1
10097                           ;'OTG_FS_DAINTMSK.IEP2M`               EQU 0x5000081C,        4, base=16,    bitRange=2-2
10098                           ;'OTG_FS_DAINTMSK.IEP3M`               EQU 0x5000081C,        4, base=16,    bitRange=3-3
10099                           ;'OTG_FS_DAINTMSK.IEP4M`               EQU 0x5000081C,        4, base=16,    bitRange=4-4
10100                           ;'OTG_FS_DAINTMSK.IEP5M`               EQU 0x5000081C,        4, base=16,    bitRange=5-5
10101                           ;'OTG_FS_DAINTMSK.IEP6M`               EQU 0x5000081C,        4, base=16,    bitRange=6-6
10102                           ;'OTG_FS_DAINTMSK.IEP7M`               EQU 0x5000081C,        4, base=16,    bitRange=7-7
10103                           ;'OTG_FS_DAINTMSK.IEP8M`               EQU 0x5000081C,        4, base=16,    bitRange=8-8
10104                           ;'OTG_FS_DAINTMSK.IEP9M`               EQU 0x5000081C,        4, base=16,    bitRange=9-9
10105                           ;'OTG_FS_DAINTMSK.IEP10M`              EQU 0x5000081C,        4, base=16,    bitRange=10-10
10106                           ;'OTG_FS_DAINTMSK.IEP11M`              EQU 0x5000081C,        4, base=16,    bitRange=11-11
10107                           ;'OTG_FS_DAINTMSK.IEP12M`              EQU 0x5000081C,        4, base=16,    bitRange=12-12
10108                           ;'OTG_FS_DAINTMSK.IEP13M`              EQU 0x5000081C,        4, base=16,    bitRange=13-13
10109                           ;'OTG_FS_DAINTMSK.IEP14M`              EQU 0x5000081C,        4, base=16,    bitRange=14-14
10110                           ;'OTG_FS_DAINTMSK.IEP15M`              EQU 0x5000081C,        4, base=16,    bitRange=15-15
10111                           ;'OTG_FS_DAINTMSK.OEP0M`               EQU 0x5000081C,        4, base=16,    bitRange=16-16
10112                           ;'OTG_FS_DAINTMSK.OEP1M`               EQU 0x5000081C,        4, base=16,    bitRange=17-17
10113                           ;'OTG_FS_DAINTMSK.OEP2M`               EQU 0x5000081C,        4, base=16,    bitRange=18-18
10114                           ;'OTG_FS_DAINTMSK.OEP3M`               EQU 0x5000081C,        4, base=16,    bitRange=19-19
10115                           ;'OTG_FS_DAINTMSK.OEP4M`               EQU 0x5000081C,        4, base=16,    bitRange=20-20
10116                           ;'OTG_FS_DAINTMSK.OEP5M`               EQU 0x5000081C,        4, base=16,    bitRange=21-21
10117                           ;'OTG_FS_DAINTMSK.OEP6M`               EQU 0x5000081C,        4, base=16,    bitRange=22-22
10118                           ;'OTG_FS_DAINTMSK.OEP7M`               EQU 0x5000081C,        4, base=16,    bitRange=23-23
10119                           ;'OTG_FS_DAINTMSK.OEP8M`               EQU 0x5000081C,        4, base=16,    bitRange=24-24
10120                           ;'OTG_FS_DAINTMSK.OEP9M`               EQU 0x5000081C,        4, base=16,    bitRange=25-25
10121                           ;'OTG_FS_DAINTMSK.OEP10M`              EQU 0x5000081C,        4, base=16,    bitRange=26-26
10122                           ;'OTG_FS_DAINTMSK.OEP11M`              EQU 0x5000081C,        4, base=16,    bitRange=27-27
10123                           ;'OTG_FS_DAINTMSK.OEP12M`              EQU 0x5000081C,        4, base=16,    bitRange=28-28
10124                           ;'OTG_FS_DAINTMSK.OEP13M`              EQU 0x5000081C,        4, base=16,    bitRange=29-29
10125                           ;'OTG_FS_DAINTMSK.OEP14M`              EQU 0x5000081C,        4, base=16,    bitRange=30-30
10126                           ;'OTG_FS_DAINTMSK.OEP15M`              EQU 0x5000081C,        4, base=16,    bitRange=31-31
10127                           
10128                           ;'OTG_FS_DVBUSDIS`                     EQU 0x50000828,        4, base=16
10129                           ;'OTG_FS_DVBUSDIS.VBUSDT`              EQU 0x50000828,        4, base=16,    bitRange=0-15
10130                           
10131                           ;'OTG_FS_DVBUSPULSE`                   EQU 0x5000082C,        4, base=16
10132                           ;'OTG_FS_DVBUSPULSE.DVBUSP`            EQU 0x5000082C,        4, base=16,    bitRange=0-11
10133                           
10134                           ;'OTG_FS_DIEPEMPMSK`                   EQU 0x50000834,        4, base=16
10135                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM0`        EQU 0x50000834,        4, base=16,    bitRange=0-0
10136                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM1`        EQU 0x50000834,        4, base=16,    bitRange=1-1
10137                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM2`        EQU 0x50000834,        4, base=16,    bitRange=2-2
10138                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM3`        EQU 0x50000834,        4, base=16,    bitRange=3-3
10139                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM4`        EQU 0x50000834,        4, base=16,    bitRange=4-4
10140                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM5`        EQU 0x50000834,        4, base=16,    bitRange=5-5
10141                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM6`        EQU 0x50000834,        4, base=16,    bitRange=6-6
10142                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM7`        EQU 0x50000834,        4, base=16,    bitRange=7-7
10143                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM8`        EQU 0x50000834,        4, base=16,    bitRange=8-8
10144                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM9`        EQU 0x50000834,        4, base=16,    bitRange=9-9
10145                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM10`       EQU 0x50000834,        4, base=16,    bitRange=10-10
10146                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM11`       EQU 0x50000834,        4, base=16,    bitRange=11-11
10147                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM12`       EQU 0x50000834,        4, base=16,    bitRange=12-12
10148                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM13`       EQU 0x50000834,        4, base=16,    bitRange=13-13
10149                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM14`       EQU 0x50000834,        4, base=16,    bitRange=14-14
10150                           ;'OTG_FS_DIEPEMPMSK.INEPTXFEM15`       EQU 0x50000834,        4, base=16,    bitRange=15-15
10151                           
10152                           ;'OTG_FS_DIEPCTL0`                     EQU 0x50000900,        4, base=16
10153                           ;'OTG_FS_DIEPCTL0.MPSIZ`               EQU 0x50000900,        4, base=16,    bitRange=0-1
10154                           ;'OTG_FS_DIEPCTL0.USBAEP`              EQU 0x50000900,        4, base=16,    bitRange=15-15
10155                           ;'OTG_FS_DIEPCTL0.NAKSTS`              EQU 0x50000900,        4, base=16,    bitRange=17-17
10156                           ;'OTG_FS_DIEPCTL0.EPTYP`               EQU 0x50000900,        4, base=16,    bitRange=18-19
10157                           ;'OTG_FS_DIEPCTL0.STALL`               EQU 0x50000900,        4, base=16,    bitRange=21-21
10158                           ;'OTG_FS_DIEPCTL0.TXFNUM`              EQU 0x50000900,        4, base=16,    bitRange=22-25
10159                           ;'OTG_FS_DIEPCTL0.CNAK`                EQU 0x50000900,        4, base=16,    bitRange=26-26
10160                           ;'OTG_FS_DIEPCTL0.SNAK`                EQU 0x50000900,        4, base=16,    bitRange=27-27
10161                           ;'OTG_FS_DIEPCTL0.EPDIS`               EQU 0x50000900,        4, base=16,    bitRange=30-30
10162                           ;'OTG_FS_DIEPCTL0.EPENA`               EQU 0x50000900,        4, base=16,    bitRange=31-31
10163                           
10164                           ;'OTG_FS_DIEPINT0`                     EQU 0x50000908,        4, base=16
10165                           ;'OTG_FS_DIEPINT0.XFRC`                EQU 0x50000908,        4, base=16,    bitRange=0-0
10166                           ;'OTG_FS_DIEPINT0.EPDISD`              EQU 0x50000908,        4, base=16,    bitRange=1-1
10167                           ;'OTG_FS_DIEPINT0.TOC`                 EQU 0x50000908,        4, base=16,    bitRange=3-3
10168                           ;'OTG_FS_DIEPINT0.ITTXFE`              EQU 0x50000908,        4, base=16,    bitRange=4-4
10169                           ;'OTG_FS_DIEPINT0.INEPNE`              EQU 0x50000908,        4, base=16,    bitRange=6-6
10170                           ;'OTG_FS_DIEPINT0.TXFE`                EQU 0x50000908,        4, base=16,    bitRange=7-7
10171                           
10172                           ;'OTG_FS_DIEPTSIZ0`                    EQU 0x50000910,        4, base=16
10173                           ;'OTG_FS_DIEPTSIZ0.XFRSIZ`             EQU 0x50000910,        4, base=16,    bitRange=0-6
10174                           ;'OTG_FS_DIEPTSIZ0.PKTCNT`             EQU 0x50000910,        4, base=16,    bitRange=19-20
10175                           
10176                           ;'OTG_FS_DTXFSTS0`                     EQU 0x50000918,        4, base=16
10177                           ;'OTG_FS_DTXFSTS0.INEPTFSAV`           EQU 0x50000918,        4, base=16,    bitRange=0-15
10178                           
10179                           ;'OTG_FS_DIEPCTL1`                     EQU 0x50000920,        4, base=16
10180                           ;'OTG_FS_DIEPCTL1.MPSIZ`               EQU 0x50000920,        4, base=16,    bitRange=0-10
10181                           ;'OTG_FS_DIEPCTL1.USBAEP`              EQU 0x50000920,        4, base=16,    bitRange=15-15
10182                           ;'OTG_FS_DIEPCTL1.EONUM_DPID`          EQU 0x50000920,        4, base=16,    bitRange=16-16
10183                           ;'OTG_FS_DIEPCTL1.NAKSTS`              EQU 0x50000920,        4, base=16,    bitRange=17-17
10184                           ;'OTG_FS_DIEPCTL1.EPTYP`               EQU 0x50000920,        4, base=16,    bitRange=18-19
10185                           ;'OTG_FS_DIEPCTL1.STALL`               EQU 0x50000920,        4, base=16,    bitRange=21-21
10186                           ;'OTG_FS_DIEPCTL1.TXFNUM`              EQU 0x50000920,        4, base=16,    bitRange=22-25
10187                           ;'OTG_FS_DIEPCTL1.CNAK`                EQU 0x50000920,        4, base=16,    bitRange=26-26
10188                           ;'OTG_FS_DIEPCTL1.SNAK`                EQU 0x50000920,        4, base=16,    bitRange=27-27
10189                           ;'OTG_FS_DIEPCTL1.SD0PID_SEVNFRM`      EQU 0x50000920,        4, base=16,    bitRange=28-28
10190                           ;'OTG_FS_DIEPCTL1.SODDFRM`             EQU 0x50000920,        4, base=16,    bitRange=29-29
10191                           ;'OTG_FS_DIEPCTL1.EPDIS`               EQU 0x50000920,        4, base=16,    bitRange=30-30
10192                           ;'OTG_FS_DIEPCTL1.EPENA`               EQU 0x50000920,        4, base=16,    bitRange=31-31
10193                           
10194                           ;'OTG_FS_DIEPINT1`                     EQU 0x50000928,        4, base=16
10195                           ;'OTG_FS_DIEPINT1.XFRC`                EQU 0x50000928,        4, base=16,    bitRange=0-0
10196                           ;'OTG_FS_DIEPINT1.EPDISD`              EQU 0x50000928,        4, base=16,    bitRange=1-1
10197                           ;'OTG_FS_DIEPINT1.TOC`                 EQU 0x50000928,        4, base=16,    bitRange=3-3
10198                           ;'OTG_FS_DIEPINT1.ITTXFE`              EQU 0x50000928,        4, base=16,    bitRange=4-4
10199                           ;'OTG_FS_DIEPINT1.INEPNE`              EQU 0x50000928,        4, base=16,    bitRange=6-6
10200                           ;'OTG_FS_DIEPINT1.TXFE`                EQU 0x50000928,        4, base=16,    bitRange=7-7
10201                           
10202                           ;'OTG_FS_DIEPTSIZ1`                    EQU 0x50000930,        4, base=16
10203                           ;'OTG_FS_DIEPTSIZ1.XFRSIZ`             EQU 0x50000930,        4, base=16,    bitRange=0-18
10204                           ;'OTG_FS_DIEPTSIZ1.PKTCNT`             EQU 0x50000930,        4, base=16,    bitRange=19-28
10205                           ;'OTG_FS_DIEPTSIZ1.MCNT`               EQU 0x50000930,        4, base=16,    bitRange=29-30
10206                           
10207                           ;'OTG_FS_DTXFSTS1`                     EQU 0x50000938,        4, base=16
10208                           ;'OTG_FS_DTXFSTS1.INEPTFSAV`           EQU 0x50000938,        4, base=16,    bitRange=0-15
10209                           
10210                           ;'OTG_FS_DIEPCTL2`                     EQU 0x50000940,        4, base=16
10211                           ;'OTG_FS_DIEPCTL2.MPSIZ`               EQU 0x50000940,        4, base=16,    bitRange=0-10
10212                           ;'OTG_FS_DIEPCTL2.USBAEP`              EQU 0x50000940,        4, base=16,    bitRange=15-15
10213                           ;'OTG_FS_DIEPCTL2.EONUM_DPID`          EQU 0x50000940,        4, base=16,    bitRange=16-16
10214                           ;'OTG_FS_DIEPCTL2.NAKSTS`              EQU 0x50000940,        4, base=16,    bitRange=17-17
10215                           ;'OTG_FS_DIEPCTL2.EPTYP`               EQU 0x50000940,        4, base=16,    bitRange=18-19
10216                           ;'OTG_FS_DIEPCTL2.STALL`               EQU 0x50000940,        4, base=16,    bitRange=21-21
10217                           ;'OTG_FS_DIEPCTL2.TXFNUM`              EQU 0x50000940,        4, base=16,    bitRange=22-25
10218                           ;'OTG_FS_DIEPCTL2.CNAK`                EQU 0x50000940,        4, base=16,    bitRange=26-26
10219                           ;'OTG_FS_DIEPCTL2.SNAK`                EQU 0x50000940,        4, base=16,    bitRange=27-27
10220                           ;'OTG_FS_DIEPCTL2.SD0PID_SEVNFRM`      EQU 0x50000940,        4, base=16,    bitRange=28-28
10221                           ;'OTG_FS_DIEPCTL2.SODDFRM`             EQU 0x50000940,        4, base=16,    bitRange=29-29
10222                           ;'OTG_FS_DIEPCTL2.EPDIS`               EQU 0x50000940,        4, base=16,    bitRange=30-30
10223                           ;'OTG_FS_DIEPCTL2.EPENA`               EQU 0x50000940,        4, base=16,    bitRange=31-31
10224                           
10225                           ;'OTG_FS_DIEPINT2`                     EQU 0x50000948,        4, base=16
10226                           ;'OTG_FS_DIEPINT2.XFRC`                EQU 0x50000948,        4, base=16,    bitRange=0-0
10227                           ;'OTG_FS_DIEPINT2.EPDISD`              EQU 0x50000948,        4, base=16,    bitRange=1-1
10228                           ;'OTG_FS_DIEPINT2.TOC`                 EQU 0x50000948,        4, base=16,    bitRange=3-3
10229                           ;'OTG_FS_DIEPINT2.ITTXFE`              EQU 0x50000948,        4, base=16,    bitRange=4-4
10230                           ;'OTG_FS_DIEPINT2.INEPNE`              EQU 0x50000948,        4, base=16,    bitRange=6-6
10231                           ;'OTG_FS_DIEPINT2.TXFE`                EQU 0x50000948,        4, base=16,    bitRange=7-7
10232                           
10233                           ;'OTG_FS_DIEPTSIZ2`                    EQU 0x50000950,        4, base=16
10234                           ;'OTG_FS_DIEPTSIZ2.XFRSIZ`             EQU 0x50000950,        4, base=16,    bitRange=0-18
10235                           ;'OTG_FS_DIEPTSIZ2.PKTCNT`             EQU 0x50000950,        4, base=16,    bitRange=19-28
10236                           ;'OTG_FS_DIEPTSIZ2.MCNT`               EQU 0x50000950,        4, base=16,    bitRange=29-30
10237                           
10238                           ;'OTG_FS_DTXFSTS2`                     EQU 0x50000958,        4, base=16
10239                           ;'OTG_FS_DTXFSTS2.INEPTFSAV`           EQU 0x50000958,        4, base=16,    bitRange=0-15
10240                           
10241                           ;'OTG_FS_DIEPCTL3`                     EQU 0x50000960,        4, base=16
10242                           ;'OTG_FS_DIEPCTL3.MPSIZ`               EQU 0x50000960,        4, base=16,    bitRange=0-10
10243                           ;'OTG_FS_DIEPCTL3.USBAEP`              EQU 0x50000960,        4, base=16,    bitRange=15-15
10244                           ;'OTG_FS_DIEPCTL3.EONUM_DPID`          EQU 0x50000960,        4, base=16,    bitRange=16-16
10245                           ;'OTG_FS_DIEPCTL3.NAKSTS`              EQU 0x50000960,        4, base=16,    bitRange=17-17
10246                           ;'OTG_FS_DIEPCTL3.EPTYP`               EQU 0x50000960,        4, base=16,    bitRange=18-19
10247                           ;'OTG_FS_DIEPCTL3.STALL`               EQU 0x50000960,        4, base=16,    bitRange=21-21
10248                           ;'OTG_FS_DIEPCTL3.TXFNUM`              EQU 0x50000960,        4, base=16,    bitRange=22-25
10249                           ;'OTG_FS_DIEPCTL3.CNAK`                EQU 0x50000960,        4, base=16,    bitRange=26-26
10250                           ;'OTG_FS_DIEPCTL3.SNAK`                EQU 0x50000960,        4, base=16,    bitRange=27-27
10251                           ;'OTG_FS_DIEPCTL3.SD0PID_SEVNFRM`      EQU 0x50000960,        4, base=16,    bitRange=28-28
10252                           ;'OTG_FS_DIEPCTL3.SODDFRM`             EQU 0x50000960,        4, base=16,    bitRange=29-29
10253                           ;'OTG_FS_DIEPCTL3.EPDIS`               EQU 0x50000960,        4, base=16,    bitRange=30-30
10254                           ;'OTG_FS_DIEPCTL3.EPENA`               EQU 0x50000960,        4, base=16,    bitRange=31-31
10255                           
10256                           ;'OTG_FS_DIEPINT3`                     EQU 0x50000968,        4, base=16
10257                           ;'OTG_FS_DIEPINT3.XFRC`                EQU 0x50000968,        4, base=16,    bitRange=0-0
10258                           ;'OTG_FS_DIEPINT3.EPDISD`              EQU 0x50000968,        4, base=16,    bitRange=1-1
10259                           ;'OTG_FS_DIEPINT3.TOC`                 EQU 0x50000968,        4, base=16,    bitRange=3-3
10260                           ;'OTG_FS_DIEPINT3.ITTXFE`              EQU 0x50000968,        4, base=16,    bitRange=4-4
10261                           ;'OTG_FS_DIEPINT3.INEPNE`              EQU 0x50000968,        4, base=16,    bitRange=6-6
10262                           ;'OTG_FS_DIEPINT3.TXFE`                EQU 0x50000968,        4, base=16,    bitRange=7-7
10263                           
10264                           ;'OTG_FS_DIEPTSIZ3`                    EQU 0x50000970,        4, base=16
10265                           ;'OTG_FS_DIEPTSIZ3.XFRSIZ`             EQU 0x50000970,        4, base=16,    bitRange=0-18
10266                           ;'OTG_FS_DIEPTSIZ3.PKTCNT`             EQU 0x50000970,        4, base=16,    bitRange=19-28
10267                           ;'OTG_FS_DIEPTSIZ3.MCNT`               EQU 0x50000970,        4, base=16,    bitRange=29-30
10268                           
10269                           ;'OTG_FS_DTXFSTS3`                     EQU 0x50000978,        4, base=16
10270                           ;'OTG_FS_DTXFSTS3.INEPTFSAV`           EQU 0x50000978,        4, base=16,    bitRange=0-15
10271                           
10272                           ;'OTG_FS_DIEPCTL4`                     EQU 0x50000980,        4, base=16
10273                           ;'OTG_FS_DIEPCTL4.MPSIZ`               EQU 0x50000980,        4, base=16,    bitRange=0-10
10274                           ;'OTG_FS_DIEPCTL4.USBAEP`              EQU 0x50000980,        4, base=16,    bitRange=15-15
10275                           ;'OTG_FS_DIEPCTL4.EONUM_DPID`          EQU 0x50000980,        4, base=16,    bitRange=16-16
10276                           ;'OTG_FS_DIEPCTL4.NAKSTS`              EQU 0x50000980,        4, base=16,    bitRange=17-17
10277                           ;'OTG_FS_DIEPCTL4.EPTYP`               EQU 0x50000980,        4, base=16,    bitRange=18-19
10278                           ;'OTG_FS_DIEPCTL4.STALL`               EQU 0x50000980,        4, base=16,    bitRange=21-21
10279                           ;'OTG_FS_DIEPCTL4.TXFNUM`              EQU 0x50000980,        4, base=16,    bitRange=22-25
10280                           ;'OTG_FS_DIEPCTL4.CNAK`                EQU 0x50000980,        4, base=16,    bitRange=26-26
10281                           ;'OTG_FS_DIEPCTL4.SNAK`                EQU 0x50000980,        4, base=16,    bitRange=27-27
10282                           ;'OTG_FS_DIEPCTL4.SD0PID_SEVNFRM`      EQU 0x50000980,        4, base=16,    bitRange=28-28
10283                           ;'OTG_FS_DIEPCTL4.SODDFRM`             EQU 0x50000980,        4, base=16,    bitRange=29-29
10284                           ;'OTG_FS_DIEPCTL4.EPDIS`               EQU 0x50000980,        4, base=16,    bitRange=30-30
10285                           ;'OTG_FS_DIEPCTL4.EPENA`               EQU 0x50000980,        4, base=16,    bitRange=31-31
10286                           
10287                           ;'OTG_FS_DIEPINT4`                     EQU 0x50000988,        4, base=16
10288                           ;'OTG_FS_DIEPINT4.XFRC`                EQU 0x50000988,        4, base=16,    bitRange=0-0
10289                           ;'OTG_FS_DIEPINT4.EPDISD`              EQU 0x50000988,        4, base=16,    bitRange=1-1
10290                           ;'OTG_FS_DIEPINT4.TOC`                 EQU 0x50000988,        4, base=16,    bitRange=3-3
10291                           ;'OTG_FS_DIEPINT4.ITTXFE`              EQU 0x50000988,        4, base=16,    bitRange=4-4
10292                           ;'OTG_FS_DIEPINT4.INEPNE`              EQU 0x50000988,        4, base=16,    bitRange=6-6
10293                           ;'OTG_FS_DIEPINT4.TXFE`                EQU 0x50000988,        4, base=16,    bitRange=7-7
10294                           
10295                           ;'OTG_FS_DIEPTSIZ4`                    EQU 0x50000990,        4, base=16
10296                           ;'OTG_FS_DIEPTSIZ4.XFRSIZ`             EQU 0x50000990,        4, base=16,    bitRange=0-18
10297                           ;'OTG_FS_DIEPTSIZ4.PKTCNT`             EQU 0x50000990,        4, base=16,    bitRange=19-28
10298                           ;'OTG_FS_DIEPTSIZ4.MCNT`               EQU 0x50000990,        4, base=16,    bitRange=29-30
10299                           
10300                           ;'OTG_FS_DTXFSTS4`                     EQU 0x50000998,        4, base=16
10301                           ;'OTG_FS_DTXFSTS4.INEPTFSAV`           EQU 0x50000998,        4, base=16,    bitRange=0-15
10302                           
10303                           ;'OTG_FS_DIEPCTL5`                     EQU 0x500009A0,        4, base=16
10304                           ;'OTG_FS_DIEPCTL5.MPSIZ`               EQU 0x500009A0,        4, base=16,    bitRange=0-10
10305                           ;'OTG_FS_DIEPCTL5.USBAEP`              EQU 0x500009A0,        4, base=16,    bitRange=15-15
10306                           ;'OTG_FS_DIEPCTL5.EONUM_DPID`          EQU 0x500009A0,        4, base=16,    bitRange=16-16
10307                           ;'OTG_FS_DIEPCTL5.NAKSTS`              EQU 0x500009A0,        4, base=16,    bitRange=17-17
10308                           ;'OTG_FS_DIEPCTL5.EPTYP`               EQU 0x500009A0,        4, base=16,    bitRange=18-19
10309                           ;'OTG_FS_DIEPCTL5.STALL`               EQU 0x500009A0,        4, base=16,    bitRange=21-21
10310                           ;'OTG_FS_DIEPCTL5.TXFNUM`              EQU 0x500009A0,        4, base=16,    bitRange=22-25
10311                           ;'OTG_FS_DIEPCTL5.CNAK`                EQU 0x500009A0,        4, base=16,    bitRange=26-26
10312                           ;'OTG_FS_DIEPCTL5.SNAK`                EQU 0x500009A0,        4, base=16,    bitRange=27-27
10313                           ;'OTG_FS_DIEPCTL5.SD0PID_SEVNFRM`      EQU 0x500009A0,        4, base=16,    bitRange=28-28
10314                           ;'OTG_FS_DIEPCTL5.SODDFRM`             EQU 0x500009A0,        4, base=16,    bitRange=29-29
10315                           ;'OTG_FS_DIEPCTL5.EPDIS`               EQU 0x500009A0,        4, base=16,    bitRange=30-30
10316                           ;'OTG_FS_DIEPCTL5.EPENA`               EQU 0x500009A0,        4, base=16,    bitRange=31-31
10317                           
10318                           ;'OTG_FS_DIEPINT5`                     EQU 0x500009A8,        4, base=16
10319                           ;'OTG_FS_DIEPINT5.XFRC`                EQU 0x500009A8,        4, base=16,    bitRange=0-0
10320                           ;'OTG_FS_DIEPINT5.EPDISD`              EQU 0x500009A8,        4, base=16,    bitRange=1-1
10321                           ;'OTG_FS_DIEPINT5.TOC`                 EQU 0x500009A8,        4, base=16,    bitRange=3-3
10322                           ;'OTG_FS_DIEPINT5.ITTXFE`              EQU 0x500009A8,        4, base=16,    bitRange=4-4
10323                           ;'OTG_FS_DIEPINT5.INEPNE`              EQU 0x500009A8,        4, base=16,    bitRange=6-6
10324                           ;'OTG_FS_DIEPINT5.TXFE`                EQU 0x500009A8,        4, base=16,    bitRange=7-7
10325                           
10326                           ;'OTG_FS_DIEPTSIZ5`                    EQU 0x500009B0,        4, base=16
10327                           ;'OTG_FS_DIEPTSIZ5.XFRSIZ`             EQU 0x500009B0,        4, base=16,    bitRange=0-18
10328                           ;'OTG_FS_DIEPTSIZ5.PKTCNT`             EQU 0x500009B0,        4, base=16,    bitRange=19-28
10329                           ;'OTG_FS_DIEPTSIZ5.MCNT`               EQU 0x500009B0,        4, base=16,    bitRange=29-30
10330                           
10331                           ;'OTG_FS_DIEPCTL6`                     EQU 0x500009C0,        4, base=16
10332                           ;'OTG_FS_DIEPCTL6.MPSIZ`               EQU 0x500009C0,        4, base=16,    bitRange=0-10
10333                           ;'OTG_FS_DIEPCTL6.USBAEP`              EQU 0x500009C0,        4, base=16,    bitRange=15-15
10334                           ;'OTG_FS_DIEPCTL6.EONUM_DPID`          EQU 0x500009C0,        4, base=16,    bitRange=16-16
10335                           ;'OTG_FS_DIEPCTL6.NAKSTS`              EQU 0x500009C0,        4, base=16,    bitRange=17-17
10336                           ;'OTG_FS_DIEPCTL6.EPTYP`               EQU 0x500009C0,        4, base=16,    bitRange=18-19
10337                           ;'OTG_FS_DIEPCTL6.STALL`               EQU 0x500009C0,        4, base=16,    bitRange=21-21
10338                           ;'OTG_FS_DIEPCTL6.TXFNUM`              EQU 0x500009C0,        4, base=16,    bitRange=22-25
10339                           ;'OTG_FS_DIEPCTL6.CNAK`                EQU 0x500009C0,        4, base=16,    bitRange=26-26
10340                           ;'OTG_FS_DIEPCTL6.SNAK`                EQU 0x500009C0,        4, base=16,    bitRange=27-27
10341                           ;'OTG_FS_DIEPCTL6.SD0PID_SEVNFRM`      EQU 0x500009C0,        4, base=16,    bitRange=28-28
10342                           ;'OTG_FS_DIEPCTL6.SODDFRM`             EQU 0x500009C0,        4, base=16,    bitRange=29-29
10343                           ;'OTG_FS_DIEPCTL6.EPDIS`               EQU 0x500009C0,        4, base=16,    bitRange=30-30
10344                           ;'OTG_FS_DIEPCTL6.EPENA`               EQU 0x500009C0,        4, base=16,    bitRange=31-31
10345                           
10346                           ;'OTG_FS_DIEPINT6`                     EQU 0x500009C8,        4, base=16
10347                           ;'OTG_FS_DIEPINT6.XFRC`                EQU 0x500009C8,        4, base=16,    bitRange=0-0
10348                           ;'OTG_FS_DIEPINT6.EPDISD`              EQU 0x500009C8,        4, base=16,    bitRange=1-1
10349                           ;'OTG_FS_DIEPINT6.TOC`                 EQU 0x500009C8,        4, base=16,    bitRange=3-3
10350                           ;'OTG_FS_DIEPINT6.ITTXFE`              EQU 0x500009C8,        4, base=16,    bitRange=4-4
10351                           ;'OTG_FS_DIEPINT6.INEPNE`              EQU 0x500009C8,        4, base=16,    bitRange=6-6
10352                           ;'OTG_FS_DIEPINT6.TXFE`                EQU 0x500009C8,        4, base=16,    bitRange=7-7
10353                           
10354                           ;'OTG_FS_DIEPTSIZ6`                    EQU 0x500009D0,        4, base=16
10355                           ;'OTG_FS_DIEPTSIZ6.XFRSIZ`             EQU 0x500009D0,        4, base=16,    bitRange=0-18
10356                           ;'OTG_FS_DIEPTSIZ6.PKTCNT`             EQU 0x500009D0,        4, base=16,    bitRange=19-28
10357                           ;'OTG_FS_DIEPTSIZ6.MCNT`               EQU 0x500009D0,        4, base=16,    bitRange=29-30
10358                           
10359                           ;'OTG_FS_DIEPCTL7`                     EQU 0x500009E0,        4, base=16
10360                           ;'OTG_FS_DIEPCTL7.MPSIZ`               EQU 0x500009E0,        4, base=16,    bitRange=0-10
10361                           ;'OTG_FS_DIEPCTL7.USBAEP`              EQU 0x500009E0,        4, base=16,    bitRange=15-15
10362                           ;'OTG_FS_DIEPCTL7.EONUM_DPID`          EQU 0x500009E0,        4, base=16,    bitRange=16-16
10363                           ;'OTG_FS_DIEPCTL7.NAKSTS`              EQU 0x500009E0,        4, base=16,    bitRange=17-17
10364                           ;'OTG_FS_DIEPCTL7.EPTYP`               EQU 0x500009E0,        4, base=16,    bitRange=18-19
10365                           ;'OTG_FS_DIEPCTL7.STALL`               EQU 0x500009E0,        4, base=16,    bitRange=21-21
10366                           ;'OTG_FS_DIEPCTL7.TXFNUM`              EQU 0x500009E0,        4, base=16,    bitRange=22-25
10367                           ;'OTG_FS_DIEPCTL7.CNAK`                EQU 0x500009E0,        4, base=16,    bitRange=26-26
10368                           ;'OTG_FS_DIEPCTL7.SNAK`                EQU 0x500009E0,        4, base=16,    bitRange=27-27
10369                           ;'OTG_FS_DIEPCTL7.SD0PID_SEVNFRM`      EQU 0x500009E0,        4, base=16,    bitRange=28-28
10370                           ;'OTG_FS_DIEPCTL7.SODDFRM`             EQU 0x500009E0,        4, base=16,    bitRange=29-29
10371                           ;'OTG_FS_DIEPCTL7.EPDIS`               EQU 0x500009E0,        4, base=16,    bitRange=30-30
10372                           ;'OTG_FS_DIEPCTL7.EPENA`               EQU 0x500009E0,        4, base=16,    bitRange=31-31
10373                           
10374                           ;'OTG_FS_DIEPINT7`                     EQU 0x500009E8,        4, base=16
10375                           ;'OTG_FS_DIEPINT7.XFRC`                EQU 0x500009E8,        4, base=16,    bitRange=0-0
10376                           ;'OTG_FS_DIEPINT7.EPDISD`              EQU 0x500009E8,        4, base=16,    bitRange=1-1
10377                           ;'OTG_FS_DIEPINT7.TOC`                 EQU 0x500009E8,        4, base=16,    bitRange=3-3
10378                           ;'OTG_FS_DIEPINT7.ITTXFE`              EQU 0x500009E8,        4, base=16,    bitRange=4-4
10379                           ;'OTG_FS_DIEPINT7.INEPNE`              EQU 0x500009E8,        4, base=16,    bitRange=6-6
10380                           ;'OTG_FS_DIEPINT7.TXFE`                EQU 0x500009E8,        4, base=16,    bitRange=7-7
10381                           
10382                           ;'OTG_FS_DIEPTSIZ7`                    EQU 0x500009F0,        4, base=16
10383                           ;'OTG_FS_DIEPTSIZ7.XFRSIZ`             EQU 0x500009F0,        4, base=16,    bitRange=0-18
10384                           ;'OTG_FS_DIEPTSIZ7.PKTCNT`             EQU 0x500009F0,        4, base=16,    bitRange=19-28
10385                           ;'OTG_FS_DIEPTSIZ7.MCNT`               EQU 0x500009F0,        4, base=16,    bitRange=29-30
10386                           
10387                           ;'OTG_FS_DIEPCTL8`                     EQU 0x50000A00,        4, base=16
10388                           ;'OTG_FS_DIEPCTL8.MPSIZ`               EQU 0x50000A00,        4, base=16,    bitRange=0-10
10389                           ;'OTG_FS_DIEPCTL8.USBAEP`              EQU 0x50000A00,        4, base=16,    bitRange=15-15
10390                           ;'OTG_FS_DIEPCTL8.EONUM_DPID`          EQU 0x50000A00,        4, base=16,    bitRange=16-16
10391                           ;'OTG_FS_DIEPCTL8.NAKSTS`              EQU 0x50000A00,        4, base=16,    bitRange=17-17
10392                           ;'OTG_FS_DIEPCTL8.EPTYP`               EQU 0x50000A00,        4, base=16,    bitRange=18-19
10393                           ;'OTG_FS_DIEPCTL8.STALL`               EQU 0x50000A00,        4, base=16,    bitRange=21-21
10394                           ;'OTG_FS_DIEPCTL8.TXFNUM`              EQU 0x50000A00,        4, base=16,    bitRange=22-25
10395                           ;'OTG_FS_DIEPCTL8.CNAK`                EQU 0x50000A00,        4, base=16,    bitRange=26-26
10396                           ;'OTG_FS_DIEPCTL8.SNAK`                EQU 0x50000A00,        4, base=16,    bitRange=27-27
10397                           ;'OTG_FS_DIEPCTL8.SD0PID_SEVNFRM`      EQU 0x50000A00,        4, base=16,    bitRange=28-28
10398                           ;'OTG_FS_DIEPCTL8.SODDFRM`             EQU 0x50000A00,        4, base=16,    bitRange=29-29
10399                           ;'OTG_FS_DIEPCTL8.EPDIS`               EQU 0x50000A00,        4, base=16,    bitRange=30-30
10400                           ;'OTG_FS_DIEPCTL8.EPENA`               EQU 0x50000A00,        4, base=16,    bitRange=31-31
10401                           
10402                           ;'OTG_FS_DIEPINT8`                     EQU 0x50000A08,        4, base=16
10403                           ;'OTG_FS_DIEPINT8.XFRC`                EQU 0x50000A08,        4, base=16,    bitRange=0-0
10404                           ;'OTG_FS_DIEPINT8.EPDISD`              EQU 0x50000A08,        4, base=16,    bitRange=1-1
10405                           ;'OTG_FS_DIEPINT8.TOC`                 EQU 0x50000A08,        4, base=16,    bitRange=3-3
10406                           ;'OTG_FS_DIEPINT8.ITTXFE`              EQU 0x50000A08,        4, base=16,    bitRange=4-4
10407                           ;'OTG_FS_DIEPINT8.INEPNE`              EQU 0x50000A08,        4, base=16,    bitRange=6-6
10408                           ;'OTG_FS_DIEPINT8.TXFE`                EQU 0x50000A08,        4, base=16,    bitRange=7-7
10409                           
10410                           ;'OTG_FS_DIEPTSIZ8`                    EQU 0x50000A10,        4, base=16
10411                           ;'OTG_FS_DIEPTSIZ8.XFRSIZ`             EQU 0x50000A10,        4, base=16,    bitRange=0-18
10412                           ;'OTG_FS_DIEPTSIZ8.PKTCNT`             EQU 0x50000A10,        4, base=16,    bitRange=19-28
10413                           ;'OTG_FS_DIEPTSIZ8.MCNT`               EQU 0x50000A10,        4, base=16,    bitRange=29-30
10414                           
10415                           ;'OTG_FS_DIEPCTL9`                     EQU 0x50000A20,        4, base=16
10416                           ;'OTG_FS_DIEPCTL9.MPSIZ`               EQU 0x50000A20,        4, base=16,    bitRange=0-10
10417                           ;'OTG_FS_DIEPCTL9.USBAEP`              EQU 0x50000A20,        4, base=16,    bitRange=15-15
10418                           ;'OTG_FS_DIEPCTL9.EONUM_DPID`          EQU 0x50000A20,        4, base=16,    bitRange=16-16
10419                           ;'OTG_FS_DIEPCTL9.NAKSTS`              EQU 0x50000A20,        4, base=16,    bitRange=17-17
10420                           ;'OTG_FS_DIEPCTL9.EPTYP`               EQU 0x50000A20,        4, base=16,    bitRange=18-19
10421                           ;'OTG_FS_DIEPCTL9.STALL`               EQU 0x50000A20,        4, base=16,    bitRange=21-21
10422                           ;'OTG_FS_DIEPCTL9.TXFNUM`              EQU 0x50000A20,        4, base=16,    bitRange=22-25
10423                           ;'OTG_FS_DIEPCTL9.CNAK`                EQU 0x50000A20,        4, base=16,    bitRange=26-26
10424                           ;'OTG_FS_DIEPCTL9.SNAK`                EQU 0x50000A20,        4, base=16,    bitRange=27-27
10425                           ;'OTG_FS_DIEPCTL9.SD0PID_SEVNFRM`      EQU 0x50000A20,        4, base=16,    bitRange=28-28
10426                           ;'OTG_FS_DIEPCTL9.SODDFRM`             EQU 0x50000A20,        4, base=16,    bitRange=29-29
10427                           ;'OTG_FS_DIEPCTL9.EPDIS`               EQU 0x50000A20,        4, base=16,    bitRange=30-30
10428                           ;'OTG_FS_DIEPCTL9.EPENA`               EQU 0x50000A20,        4, base=16,    bitRange=31-31
10429                           
10430                           ;'OTG_FS_DIEPINT9`                     EQU 0x50000A28,        4, base=16
10431                           ;'OTG_FS_DIEPINT9.XFRC`                EQU 0x50000A28,        4, base=16,    bitRange=0-0
10432                           ;'OTG_FS_DIEPINT9.EPDISD`              EQU 0x50000A28,        4, base=16,    bitRange=1-1
10433                           ;'OTG_FS_DIEPINT9.TOC`                 EQU 0x50000A28,        4, base=16,    bitRange=3-3
10434                           ;'OTG_FS_DIEPINT9.ITTXFE`              EQU 0x50000A28,        4, base=16,    bitRange=4-4
10435                           ;'OTG_FS_DIEPINT9.INEPNE`              EQU 0x50000A28,        4, base=16,    bitRange=6-6
10436                           ;'OTG_FS_DIEPINT9.TXFE`                EQU 0x50000A28,        4, base=16,    bitRange=7-7
10437                           
10438                           ;'OTG_FS_DIEPTSIZ9`                    EQU 0x50000A30,        4, base=16
10439                           ;'OTG_FS_DIEPTSIZ9.XFRSIZ`             EQU 0x50000A30,        4, base=16,    bitRange=0-18
10440                           ;'OTG_FS_DIEPTSIZ9.PKTCNT`             EQU 0x50000A30,        4, base=16,    bitRange=19-28
10441                           ;'OTG_FS_DIEPTSIZ9.MCNT`               EQU 0x50000A30,        4, base=16,    bitRange=29-30
10442                           
10443                           ;'OTG_FS_DIEPCTL10`                    EQU 0x50000A40,        4, base=16
10444                           ;'OTG_FS_DIEPCTL10.MPSIZ`              EQU 0x50000A40,        4, base=16,    bitRange=0-10
10445                           ;'OTG_FS_DIEPCTL10.USBAEP`             EQU 0x50000A40,        4, base=16,    bitRange=15-15
10446                           ;'OTG_FS_DIEPCTL10.EONUM_DPID`         EQU 0x50000A40,        4, base=16,    bitRange=16-16
10447                           ;'OTG_FS_DIEPCTL10.NAKSTS`             EQU 0x50000A40,        4, base=16,    bitRange=17-17
10448                           ;'OTG_FS_DIEPCTL10.EPTYP`              EQU 0x50000A40,        4, base=16,    bitRange=18-19
10449                           ;'OTG_FS_DIEPCTL10.STALL`              EQU 0x50000A40,        4, base=16,    bitRange=21-21
10450                           ;'OTG_FS_DIEPCTL10.TXFNUM`             EQU 0x50000A40,        4, base=16,    bitRange=22-25
10451                           ;'OTG_FS_DIEPCTL10.CNAK`               EQU 0x50000A40,        4, base=16,    bitRange=26-26
10452                           ;'OTG_FS_DIEPCTL10.SNAK`               EQU 0x50000A40,        4, base=16,    bitRange=27-27
10453                           ;'OTG_FS_DIEPCTL10.SD0PID_SEVNFRM`     EQU 0x50000A40,        4, base=16,    bitRange=28-28
10454                           ;'OTG_FS_DIEPCTL10.SODDFRM`            EQU 0x50000A40,        4, base=16,    bitRange=29-29
10455                           ;'OTG_FS_DIEPCTL10.EPDIS`              EQU 0x50000A40,        4, base=16,    bitRange=30-30
10456                           ;'OTG_FS_DIEPCTL10.EPENA`              EQU 0x50000A40,        4, base=16,    bitRange=31-31
10457                           
10458                           ;'OTG_FS_DIEPINT10`                    EQU 0x50000A48,        4, base=16
10459                           ;'OTG_FS_DIEPINT10.XFRC`               EQU 0x50000A48,        4, base=16,    bitRange=0-0
10460                           ;'OTG_FS_DIEPINT10.EPDISD`             EQU 0x50000A48,        4, base=16,    bitRange=1-1
10461                           ;'OTG_FS_DIEPINT10.TOC`                EQU 0x50000A48,        4, base=16,    bitRange=3-3
10462                           ;'OTG_FS_DIEPINT10.ITTXFE`             EQU 0x50000A48,        4, base=16,    bitRange=4-4
10463                           ;'OTG_FS_DIEPINT10.INEPNE`             EQU 0x50000A48,        4, base=16,    bitRange=6-6
10464                           ;'OTG_FS_DIEPINT10.TXFE`               EQU 0x50000A48,        4, base=16,    bitRange=7-7
10465                           
10466                           ;'OTG_FS_DIEPTSIZ10`                   EQU 0x50000A50,        4, base=16
10467                           ;'OTG_FS_DIEPTSIZ10.XFRSIZ`            EQU 0x50000A50,        4, base=16,    bitRange=0-18
10468                           ;'OTG_FS_DIEPTSIZ10.PKTCNT`            EQU 0x50000A50,        4, base=16,    bitRange=19-28
10469                           ;'OTG_FS_DIEPTSIZ10.MCNT`              EQU 0x50000A50,        4, base=16,    bitRange=29-30
10470                           
10471                           ;'OTG_FS_DIEPCTL11`                    EQU 0x50000A60,        4, base=16
10472                           ;'OTG_FS_DIEPCTL11.MPSIZ`              EQU 0x50000A60,        4, base=16,    bitRange=0-10
10473                           ;'OTG_FS_DIEPCTL11.USBAEP`             EQU 0x50000A60,        4, base=16,    bitRange=15-15
10474                           ;'OTG_FS_DIEPCTL11.EONUM_DPID`         EQU 0x50000A60,        4, base=16,    bitRange=16-16
10475                           ;'OTG_FS_DIEPCTL11.NAKSTS`             EQU 0x50000A60,        4, base=16,    bitRange=17-17
10476                           ;'OTG_FS_DIEPCTL11.EPTYP`              EQU 0x50000A60,        4, base=16,    bitRange=18-19
10477                           ;'OTG_FS_DIEPCTL11.STALL`              EQU 0x50000A60,        4, base=16,    bitRange=21-21
10478                           ;'OTG_FS_DIEPCTL11.TXFNUM`             EQU 0x50000A60,        4, base=16,    bitRange=22-25
10479                           ;'OTG_FS_DIEPCTL11.CNAK`               EQU 0x50000A60,        4, base=16,    bitRange=26-26
10480                           ;'OTG_FS_DIEPCTL11.SNAK`               EQU 0x50000A60,        4, base=16,    bitRange=27-27
10481                           ;'OTG_FS_DIEPCTL11.SD0PID_SEVNFRM`     EQU 0x50000A60,        4, base=16,    bitRange=28-28
10482                           ;'OTG_FS_DIEPCTL11.SODDFRM`            EQU 0x50000A60,        4, base=16,    bitRange=29-29
10483                           ;'OTG_FS_DIEPCTL11.EPDIS`              EQU 0x50000A60,        4, base=16,    bitRange=30-30
10484                           ;'OTG_FS_DIEPCTL11.EPENA`              EQU 0x50000A60,        4, base=16,    bitRange=31-31
10485                           
10486                           ;'OTG_FS_DIEPINT11`                    EQU 0x50000A68,        4, base=16
10487                           ;'OTG_FS_DIEPINT11.XFRC`               EQU 0x50000A68,        4, base=16,    bitRange=0-0
10488                           ;'OTG_FS_DIEPINT11.EPDISD`             EQU 0x50000A68,        4, base=16,    bitRange=1-1
10489                           ;'OTG_FS_DIEPINT11.TOC`                EQU 0x50000A68,        4, base=16,    bitRange=3-3
10490                           ;'OTG_FS_DIEPINT11.ITTXFE`             EQU 0x50000A68,        4, base=16,    bitRange=4-4
10491                           ;'OTG_FS_DIEPINT11.INEPNE`             EQU 0x50000A68,        4, base=16,    bitRange=6-6
10492                           ;'OTG_FS_DIEPINT11.TXFE`               EQU 0x50000A68,        4, base=16,    bitRange=7-7
10493                           
10494                           ;'OTG_FS_DIEPTSIZ11`                   EQU 0x50000A70,        4, base=16
10495                           ;'OTG_FS_DIEPTSIZ11.XFRSIZ`            EQU 0x50000A70,        4, base=16,    bitRange=0-18
10496                           ;'OTG_FS_DIEPTSIZ11.PKTCNT`            EQU 0x50000A70,        4, base=16,    bitRange=19-28
10497                           ;'OTG_FS_DIEPTSIZ11.MCNT`              EQU 0x50000A70,        4, base=16,    bitRange=29-30
10498                           
10499                           ;'OTG_FS_DIEPCTL12`                    EQU 0x50000A80,        4, base=16
10500                           ;'OTG_FS_DIEPCTL12.MPSIZ`              EQU 0x50000A80,        4, base=16,    bitRange=0-10
10501                           ;'OTG_FS_DIEPCTL12.USBAEP`             EQU 0x50000A80,        4, base=16,    bitRange=15-15
10502                           ;'OTG_FS_DIEPCTL12.EONUM_DPID`         EQU 0x50000A80,        4, base=16,    bitRange=16-16
10503                           ;'OTG_FS_DIEPCTL12.NAKSTS`             EQU 0x50000A80,        4, base=16,    bitRange=17-17
10504                           ;'OTG_FS_DIEPCTL12.EPTYP`              EQU 0x50000A80,        4, base=16,    bitRange=18-19
10505                           ;'OTG_FS_DIEPCTL12.STALL`              EQU 0x50000A80,        4, base=16,    bitRange=21-21
10506                           ;'OTG_FS_DIEPCTL12.TXFNUM`             EQU 0x50000A80,        4, base=16,    bitRange=22-25
10507                           ;'OTG_FS_DIEPCTL12.CNAK`               EQU 0x50000A80,        4, base=16,    bitRange=26-26
10508                           ;'OTG_FS_DIEPCTL12.SNAK`               EQU 0x50000A80,        4, base=16,    bitRange=27-27
10509                           ;'OTG_FS_DIEPCTL12.SD0PID_SEVNFRM`     EQU 0x50000A80,        4, base=16,    bitRange=28-28
10510                           ;'OTG_FS_DIEPCTL12.SODDFRM`            EQU 0x50000A80,        4, base=16,    bitRange=29-29
10511                           ;'OTG_FS_DIEPCTL12.EPDIS`              EQU 0x50000A80,        4, base=16,    bitRange=30-30
10512                           ;'OTG_FS_DIEPCTL12.EPENA`              EQU 0x50000A80,        4, base=16,    bitRange=31-31
10513                           
10514                           ;'OTG_FS_DIEPINT12`                    EQU 0x50000A88,        4, base=16
10515                           ;'OTG_FS_DIEPINT12.XFRC`               EQU 0x50000A88,        4, base=16,    bitRange=0-0
10516                           ;'OTG_FS_DIEPINT12.EPDISD`             EQU 0x50000A88,        4, base=16,    bitRange=1-1
10517                           ;'OTG_FS_DIEPINT12.TOC`                EQU 0x50000A88,        4, base=16,    bitRange=3-3
10518                           ;'OTG_FS_DIEPINT12.ITTXFE`             EQU 0x50000A88,        4, base=16,    bitRange=4-4
10519                           ;'OTG_FS_DIEPINT12.INEPNE`             EQU 0x50000A88,        4, base=16,    bitRange=6-6
10520                           ;'OTG_FS_DIEPINT12.TXFE`               EQU 0x50000A88,        4, base=16,    bitRange=7-7
10521                           
10522                           ;'OTG_FS_DIEPTSIZ12`                   EQU 0x50000A90,        4, base=16
10523                           ;'OTG_FS_DIEPTSIZ12.XFRSIZ`            EQU 0x50000A90,        4, base=16,    bitRange=0-18
10524                           ;'OTG_FS_DIEPTSIZ12.PKTCNT`            EQU 0x50000A90,        4, base=16,    bitRange=19-28
10525                           ;'OTG_FS_DIEPTSIZ12.MCNT`              EQU 0x50000A90,        4, base=16,    bitRange=29-30
10526                           
10527                           ;'OTG_FS_DIEPCTL13`                    EQU 0x50000AA0,        4, base=16
10528                           ;'OTG_FS_DIEPCTL13.MPSIZ`              EQU 0x50000AA0,        4, base=16,    bitRange=0-10
10529                           ;'OTG_FS_DIEPCTL13.USBAEP`             EQU 0x50000AA0,        4, base=16,    bitRange=15-15
10530                           ;'OTG_FS_DIEPCTL13.EONUM_DPID`         EQU 0x50000AA0,        4, base=16,    bitRange=16-16
10531                           ;'OTG_FS_DIEPCTL13.NAKSTS`             EQU 0x50000AA0,        4, base=16,    bitRange=17-17
10532                           ;'OTG_FS_DIEPCTL13.EPTYP`              EQU 0x50000AA0,        4, base=16,    bitRange=18-19
10533                           ;'OTG_FS_DIEPCTL13.STALL`              EQU 0x50000AA0,        4, base=16,    bitRange=21-21
10534                           ;'OTG_FS_DIEPCTL13.TXFNUM`             EQU 0x50000AA0,        4, base=16,    bitRange=22-25
10535                           ;'OTG_FS_DIEPCTL13.CNAK`               EQU 0x50000AA0,        4, base=16,    bitRange=26-26
10536                           ;'OTG_FS_DIEPCTL13.SNAK`               EQU 0x50000AA0,        4, base=16,    bitRange=27-27
10537                           ;'OTG_FS_DIEPCTL13.SD0PID_SEVNFRM`     EQU 0x50000AA0,        4, base=16,    bitRange=28-28
10538                           ;'OTG_FS_DIEPCTL13.SODDFRM`            EQU 0x50000AA0,        4, base=16,    bitRange=29-29
10539                           ;'OTG_FS_DIEPCTL13.EPDIS`              EQU 0x50000AA0,        4, base=16,    bitRange=30-30
10540                           ;'OTG_FS_DIEPCTL13.EPENA`              EQU 0x50000AA0,        4, base=16,    bitRange=31-31
10541                           
10542                           ;'OTG_FS_DIEPINT13`                    EQU 0x50000AA8,        4, base=16
10543                           ;'OTG_FS_DIEPINT13.XFRC`               EQU 0x50000AA8,        4, base=16,    bitRange=0-0
10544                           ;'OTG_FS_DIEPINT13.EPDISD`             EQU 0x50000AA8,        4, base=16,    bitRange=1-1
10545                           ;'OTG_FS_DIEPINT13.TOC`                EQU 0x50000AA8,        4, base=16,    bitRange=3-3
10546                           ;'OTG_FS_DIEPINT13.ITTXFE`             EQU 0x50000AA8,        4, base=16,    bitRange=4-4
10547                           ;'OTG_FS_DIEPINT13.INEPNE`             EQU 0x50000AA8,        4, base=16,    bitRange=6-6
10548                           ;'OTG_FS_DIEPINT13.TXFE`               EQU 0x50000AA8,        4, base=16,    bitRange=7-7
10549                           
10550                           ;'OTG_FS_DIEPTSIZ13`                   EQU 0x50000AB0,        4, base=16
10551                           ;'OTG_FS_DIEPTSIZ13.XFRSIZ`            EQU 0x50000AB0,        4, base=16,    bitRange=0-18
10552                           ;'OTG_FS_DIEPTSIZ13.PKTCNT`            EQU 0x50000AB0,        4, base=16,    bitRange=19-28
10553                           ;'OTG_FS_DIEPTSIZ13.MCNT`              EQU 0x50000AB0,        4, base=16,    bitRange=29-30
10554                           
10555                           ;'OTG_FS_DIEPCTL14`                    EQU 0x50000AC0,        4, base=16
10556                           ;'OTG_FS_DIEPCTL14.MPSIZ`              EQU 0x50000AC0,        4, base=16,    bitRange=0-10
10557                           ;'OTG_FS_DIEPCTL14.USBAEP`             EQU 0x50000AC0,        4, base=16,    bitRange=15-15
10558                           ;'OTG_FS_DIEPCTL14.EONUM_DPID`         EQU 0x50000AC0,        4, base=16,    bitRange=16-16
10559                           ;'OTG_FS_DIEPCTL14.NAKSTS`             EQU 0x50000AC0,        4, base=16,    bitRange=17-17
10560                           ;'OTG_FS_DIEPCTL14.EPTYP`              EQU 0x50000AC0,        4, base=16,    bitRange=18-19
10561                           ;'OTG_FS_DIEPCTL14.STALL`              EQU 0x50000AC0,        4, base=16,    bitRange=21-21
10562                           ;'OTG_FS_DIEPCTL14.TXFNUM`             EQU 0x50000AC0,        4, base=16,    bitRange=22-25
10563                           ;'OTG_FS_DIEPCTL14.CNAK`               EQU 0x50000AC0,        4, base=16,    bitRange=26-26
10564                           ;'OTG_FS_DIEPCTL14.SNAK`               EQU 0x50000AC0,        4, base=16,    bitRange=27-27
10565                           ;'OTG_FS_DIEPCTL14.SD0PID_SEVNFRM`     EQU 0x50000AC0,        4, base=16,    bitRange=28-28
10566                           ;'OTG_FS_DIEPCTL14.SODDFRM`            EQU 0x50000AC0,        4, base=16,    bitRange=29-29
10567                           ;'OTG_FS_DIEPCTL14.EPDIS`              EQU 0x50000AC0,        4, base=16,    bitRange=30-30
10568                           ;'OTG_FS_DIEPCTL14.EPENA`              EQU 0x50000AC0,        4, base=16,    bitRange=31-31
10569                           
10570                           ;'OTG_FS_DIEPINT14`                    EQU 0x50000AC8,        4, base=16
10571                           ;'OTG_FS_DIEPINT14.XFRC`               EQU 0x50000AC8,        4, base=16,    bitRange=0-0
10572                           ;'OTG_FS_DIEPINT14.EPDISD`             EQU 0x50000AC8,        4, base=16,    bitRange=1-1
10573                           ;'OTG_FS_DIEPINT14.TOC`                EQU 0x50000AC8,        4, base=16,    bitRange=3-3
10574                           ;'OTG_FS_DIEPINT14.ITTXFE`             EQU 0x50000AC8,        4, base=16,    bitRange=4-4
10575                           ;'OTG_FS_DIEPINT14.INEPNE`             EQU 0x50000AC8,        4, base=16,    bitRange=6-6
10576                           ;'OTG_FS_DIEPINT14.TXFE`               EQU 0x50000AC8,        4, base=16,    bitRange=7-7
10577                           
10578                           ;'OTG_FS_DIEPTSIZ14`                   EQU 0x50000AD0,        4, base=16
10579                           ;'OTG_FS_DIEPTSIZ14.XFRSIZ`            EQU 0x50000AD0,        4, base=16,    bitRange=0-18
10580                           ;'OTG_FS_DIEPTSIZ14.PKTCNT`            EQU 0x50000AD0,        4, base=16,    bitRange=19-28
10581                           ;'OTG_FS_DIEPTSIZ14.MCNT`              EQU 0x50000AD0,        4, base=16,    bitRange=29-30
10582                           
10583                           ;'OTG_FS_DIEPCTL15`                    EQU 0x50000AE0,        4, base=16
10584                           ;'OTG_FS_DIEPCTL15.MPSIZ`              EQU 0x50000AE0,        4, base=16,    bitRange=0-10
10585                           ;'OTG_FS_DIEPCTL15.USBAEP`             EQU 0x50000AE0,        4, base=16,    bitRange=15-15
10586                           ;'OTG_FS_DIEPCTL15.EONUM_DPID`         EQU 0x50000AE0,        4, base=16,    bitRange=16-16
10587                           ;'OTG_FS_DIEPCTL15.NAKSTS`             EQU 0x50000AE0,        4, base=16,    bitRange=17-17
10588                           ;'OTG_FS_DIEPCTL15.EPTYP`              EQU 0x50000AE0,        4, base=16,    bitRange=18-19
10589                           ;'OTG_FS_DIEPCTL15.STALL`              EQU 0x50000AE0,        4, base=16,    bitRange=21-21
10590                           ;'OTG_FS_DIEPCTL15.TXFNUM`             EQU 0x50000AE0,        4, base=16,    bitRange=22-25
10591                           ;'OTG_FS_DIEPCTL15.CNAK`               EQU 0x50000AE0,        4, base=16,    bitRange=26-26
10592                           ;'OTG_FS_DIEPCTL15.SNAK`               EQU 0x50000AE0,        4, base=16,    bitRange=27-27
10593                           ;'OTG_FS_DIEPCTL15.SD0PID_SEVNFRM`     EQU 0x50000AE0,        4, base=16,    bitRange=28-28
10594                           ;'OTG_FS_DIEPCTL15.SODDFRM`            EQU 0x50000AE0,        4, base=16,    bitRange=29-29
10595                           ;'OTG_FS_DIEPCTL15.EPDIS`              EQU 0x50000AE0,        4, base=16,    bitRange=30-30
10596                           ;'OTG_FS_DIEPCTL15.EPENA`              EQU 0x50000AE0,        4, base=16,    bitRange=31-31
10597                           
10598                           ;'OTG_FS_DIEPINT15`                    EQU 0x50000AE8,        4, base=16
10599                           ;'OTG_FS_DIEPINT15.XFRC`               EQU 0x50000AE8,        4, base=16,    bitRange=0-0
10600                           ;'OTG_FS_DIEPINT15.EPDISD`             EQU 0x50000AE8,        4, base=16,    bitRange=1-1
10601                           ;'OTG_FS_DIEPINT15.TOC`                EQU 0x50000AE8,        4, base=16,    bitRange=3-3
10602                           ;'OTG_FS_DIEPINT15.ITTXFE`             EQU 0x50000AE8,        4, base=16,    bitRange=4-4
10603                           ;'OTG_FS_DIEPINT15.INEPNE`             EQU 0x50000AE8,        4, base=16,    bitRange=6-6
10604                           ;'OTG_FS_DIEPINT15.TXFE`               EQU 0x50000AE8,        4, base=16,    bitRange=7-7
10605                           
10606                           ;'OTG_FS_DIEPTSIZ15`                   EQU 0x50000AF0,        4, base=16
10607                           ;'OTG_FS_DIEPTSIZ15.XFRSIZ`            EQU 0x50000AF0,        4, base=16,    bitRange=0-18
10608                           ;'OTG_FS_DIEPTSIZ15.PKTCNT`            EQU 0x50000AF0,        4, base=16,    bitRange=19-28
10609                           ;'OTG_FS_DIEPTSIZ15.MCNT`              EQU 0x50000AF0,        4, base=16,    bitRange=29-30
10610                           
10611                           ;'OTG_FS_DOEPCTL0`                     EQU 0x50000B00,        4, base=16
10612                           ;'OTG_FS_DOEPCTL0.MPSIZ`               EQU 0x50000B00,        4, base=16,    bitRange=0-1
10613                           ;'OTG_FS_DOEPCTL0.USBAEP`              EQU 0x50000B00,        4, base=16,    bitRange=15-15
10614                           ;'OTG_FS_DOEPCTL0.NAKSTS`              EQU 0x50000B00,        4, base=16,    bitRange=17-17
10615                           ;'OTG_FS_DOEPCTL0.EPTYP`               EQU 0x50000B00,        4, base=16,    bitRange=18-19
10616                           ;'OTG_FS_DOEPCTL0.SNPM`                EQU 0x50000B00,        4, base=16,    bitRange=20-20
10617                           ;'OTG_FS_DOEPCTL0.STALL`               EQU 0x50000B00,        4, base=16,    bitRange=21-21
10618                           ;'OTG_FS_DOEPCTL0.CNAK`                EQU 0x50000B00,        4, base=16,    bitRange=26-26
10619                           ;'OTG_FS_DOEPCTL0.SNAK`                EQU 0x50000B00,        4, base=16,    bitRange=27-27
10620                           ;'OTG_FS_DOEPCTL0.EPDIS`               EQU 0x50000B00,        4, base=16,    bitRange=30-30
10621                           ;'OTG_FS_DOEPCTL0.EPENA`               EQU 0x50000B00,        4, base=16,    bitRange=31-31
10622                           
10623                           ;'OTG_FS_DOEPINT0`                     EQU 0x50000B08,        4, base=16
10624                           ;'OTG_FS_DOEPINT0.XFRC`                EQU 0x50000B08,        4, base=16,    bitRange=0-0
10625                           ;'OTG_FS_DOEPINT0.EPDISD`              EQU 0x50000B08,        4, base=16,    bitRange=1-1
10626                           ;'OTG_FS_DOEPINT0.STUP`                EQU 0x50000B08,        4, base=16,    bitRange=3-3
10627                           ;'OTG_FS_DOEPINT0.OTEPDIS`             EQU 0x50000B08,        4, base=16,    bitRange=4-4
10628                           ;'OTG_FS_DOEPINT0.B2BSTUP`             EQU 0x50000B08,        4, base=16,    bitRange=6-6
10629                           
10630                           ;'OTG_FS_DOEPTSIZ0`                    EQU 0x50000B10,        4, base=16
10631                           ;'OTG_FS_DOEPTSIZ0.XFRSIZ`             EQU 0x50000B10,        4, base=16,    bitRange=0-6
10632                           ;'OTG_FS_DOEPTSIZ0.PKTCNT`             EQU 0x50000B10,        4, base=16,    bitRange=19-19
10633                           ;'OTG_FS_DOEPTSIZ0.STUPCNT`            EQU 0x50000B10,        4, base=16,    bitRange=29-30
10634                           
10635                           ;'OTG_FS_DOEPCTL1`                     EQU 0x50000B20,        4, base=16
10636                           ;'OTG_FS_DOEPCTL1.MPSIZ`               EQU 0x50000B20,        4, base=16,    bitRange=0-10
10637                           ;'OTG_FS_DOEPCTL1.USBAEP`              EQU 0x50000B20,        4, base=16,    bitRange=15-15
10638                           ;'OTG_FS_DOEPCTL1.EONUM_DPID`          EQU 0x50000B20,        4, base=16,    bitRange=16-16
10639                           ;'OTG_FS_DOEPCTL1.NAKSTS`              EQU 0x50000B20,        4, base=16,    bitRange=17-17
10640                           ;'OTG_FS_DOEPCTL1.EPTYP`               EQU 0x50000B20,        4, base=16,    bitRange=18-19
10641                           ;'OTG_FS_DOEPCTL1.SNPM`                EQU 0x50000B20,        4, base=16,    bitRange=20-20
10642                           ;'OTG_FS_DOEPCTL1.STALL`               EQU 0x50000B20,        4, base=16,    bitRange=21-21
10643                           ;'OTG_FS_DOEPCTL1.CNAK`                EQU 0x50000B20,        4, base=16,    bitRange=26-26
10644                           ;'OTG_FS_DOEPCTL1.SNAK`                EQU 0x50000B20,        4, base=16,    bitRange=27-27
10645                           ;'OTG_FS_DOEPCTL1.SD0PID_SEVNFRM`      EQU 0x50000B20,        4, base=16,    bitRange=28-28
10646                           ;'OTG_FS_DOEPCTL1.SODDFRM`             EQU 0x50000B20,        4, base=16,    bitRange=29-29
10647                           ;'OTG_FS_DOEPCTL1.EPDIS`               EQU 0x50000B20,        4, base=16,    bitRange=30-30
10648                           ;'OTG_FS_DOEPCTL1.EPENA`               EQU 0x50000B20,        4, base=16,    bitRange=31-31
10649                           
10650                           ;'OTG_FS_DOEPINT1`                     EQU 0x50000B28,        4, base=16
10651                           ;'OTG_FS_DOEPINT1.XFRC`                EQU 0x50000B28,        4, base=16,    bitRange=0-0
10652                           ;'OTG_FS_DOEPINT1.EPDISD`              EQU 0x50000B28,        4, base=16,    bitRange=1-1
10653                           ;'OTG_FS_DOEPINT1.STUP`                EQU 0x50000B28,        4, base=16,    bitRange=3-3
10654                           ;'OTG_FS_DOEPINT1.OTEPDIS`             EQU 0x50000B28,        4, base=16,    bitRange=4-4
10655                           ;'OTG_FS_DOEPINT1.B2BSTUP`             EQU 0x50000B28,        4, base=16,    bitRange=6-6
10656                           
10657                           ;'OTG_FS_DOEPTSIZ1`                    EQU 0x50000B30,        4, base=16
10658                           ;'OTG_FS_DOEPTSIZ1.XFRSIZ`             EQU 0x50000B30,        4, base=16,    bitRange=0-18
10659                           ;'OTG_FS_DOEPTSIZ1.PKTCNT`             EQU 0x50000B30,        4, base=16,    bitRange=19-28
10660                           ;'OTG_FS_DOEPTSIZ1.RXDPID_STUPCNT`     EQU 0x50000B30,        4, base=16,    bitRange=29-30
10661                           
10662                           ;'OTG_FS_DOEPCTL2`                     EQU 0x50000B40,        4, base=16
10663                           ;'OTG_FS_DOEPCTL2.MPSIZ`               EQU 0x50000B40,        4, base=16,    bitRange=0-10
10664                           ;'OTG_FS_DOEPCTL2.USBAEP`              EQU 0x50000B40,        4, base=16,    bitRange=15-15
10665                           ;'OTG_FS_DOEPCTL2.EONUM_DPID`          EQU 0x50000B40,        4, base=16,    bitRange=16-16
10666                           ;'OTG_FS_DOEPCTL2.NAKSTS`              EQU 0x50000B40,        4, base=16,    bitRange=17-17
10667                           ;'OTG_FS_DOEPCTL2.EPTYP`               EQU 0x50000B40,        4, base=16,    bitRange=18-19
10668                           ;'OTG_FS_DOEPCTL2.SNPM`                EQU 0x50000B40,        4, base=16,    bitRange=20-20
10669                           ;'OTG_FS_DOEPCTL2.STALL`               EQU 0x50000B40,        4, base=16,    bitRange=21-21
10670                           ;'OTG_FS_DOEPCTL2.CNAK`                EQU 0x50000B40,        4, base=16,    bitRange=26-26
10671                           ;'OTG_FS_DOEPCTL2.SNAK`                EQU 0x50000B40,        4, base=16,    bitRange=27-27
10672                           ;'OTG_FS_DOEPCTL2.SD0PID_SEVNFRM`      EQU 0x50000B40,        4, base=16,    bitRange=28-28
10673                           ;'OTG_FS_DOEPCTL2.SODDFRM`             EQU 0x50000B40,        4, base=16,    bitRange=29-29
10674                           ;'OTG_FS_DOEPCTL2.EPDIS`               EQU 0x50000B40,        4, base=16,    bitRange=30-30
10675                           ;'OTG_FS_DOEPCTL2.EPENA`               EQU 0x50000B40,        4, base=16,    bitRange=31-31
10676                           
10677                           ;'OTG_FS_DOEPINT2`                     EQU 0x50000B48,        4, base=16
10678                           ;'OTG_FS_DOEPINT2.XFRC`                EQU 0x50000B48,        4, base=16,    bitRange=0-0
10679                           ;'OTG_FS_DOEPINT2.EPDISD`              EQU 0x50000B48,        4, base=16,    bitRange=1-1
10680                           ;'OTG_FS_DOEPINT2.STUP`                EQU 0x50000B48,        4, base=16,    bitRange=3-3
10681                           ;'OTG_FS_DOEPINT2.OTEPDIS`             EQU 0x50000B48,        4, base=16,    bitRange=4-4
10682                           ;'OTG_FS_DOEPINT2.B2BSTUP`             EQU 0x50000B48,        4, base=16,    bitRange=6-6
10683                           
10684                           ;'OTG_FS_DOEPTSIZ2`                    EQU 0x50000B50,        4, base=16
10685                           ;'OTG_FS_DOEPTSIZ2.XFRSIZ`             EQU 0x50000B50,        4, base=16,    bitRange=0-18
10686                           ;'OTG_FS_DOEPTSIZ2.PKTCNT`             EQU 0x50000B50,        4, base=16,    bitRange=19-28
10687                           ;'OTG_FS_DOEPTSIZ2.RXDPID_STUPCNT`     EQU 0x50000B50,        4, base=16,    bitRange=29-30
10688                           
10689                           ;'OTG_FS_DOEPCTL3`                     EQU 0x50000B60,        4, base=16
10690                           ;'OTG_FS_DOEPCTL3.MPSIZ`               EQU 0x50000B60,        4, base=16,    bitRange=0-10
10691                           ;'OTG_FS_DOEPCTL3.USBAEP`              EQU 0x50000B60,        4, base=16,    bitRange=15-15
10692                           ;'OTG_FS_DOEPCTL3.EONUM_DPID`          EQU 0x50000B60,        4, base=16,    bitRange=16-16
10693                           ;'OTG_FS_DOEPCTL3.NAKSTS`              EQU 0x50000B60,        4, base=16,    bitRange=17-17
10694                           ;'OTG_FS_DOEPCTL3.EPTYP`               EQU 0x50000B60,        4, base=16,    bitRange=18-19
10695                           ;'OTG_FS_DOEPCTL3.SNPM`                EQU 0x50000B60,        4, base=16,    bitRange=20-20
10696                           ;'OTG_FS_DOEPCTL3.STALL`               EQU 0x50000B60,        4, base=16,    bitRange=21-21
10697                           ;'OTG_FS_DOEPCTL3.CNAK`                EQU 0x50000B60,        4, base=16,    bitRange=26-26
10698                           ;'OTG_FS_DOEPCTL3.SNAK`                EQU 0x50000B60,        4, base=16,    bitRange=27-27
10699                           ;'OTG_FS_DOEPCTL3.SD0PID_SEVNFRM`      EQU 0x50000B60,        4, base=16,    bitRange=28-28
10700                           ;'OTG_FS_DOEPCTL3.SODDFRM`             EQU 0x50000B60,        4, base=16,    bitRange=29-29
10701                           ;'OTG_FS_DOEPCTL3.EPDIS`               EQU 0x50000B60,        4, base=16,    bitRange=30-30
10702                           ;'OTG_FS_DOEPCTL3.EPENA`               EQU 0x50000B60,        4, base=16,    bitRange=31-31
10703                           
10704                           ;'OTG_FS_DOEPINT3`                     EQU 0x50000B68,        4, base=16
10705                           ;'OTG_FS_DOEPINT3.XFRC`                EQU 0x50000B68,        4, base=16,    bitRange=0-0
10706                           ;'OTG_FS_DOEPINT3.EPDISD`              EQU 0x50000B68,        4, base=16,    bitRange=1-1
10707                           ;'OTG_FS_DOEPINT3.STUP`                EQU 0x50000B68,        4, base=16,    bitRange=3-3
10708                           ;'OTG_FS_DOEPINT3.OTEPDIS`             EQU 0x50000B68,        4, base=16,    bitRange=4-4
10709                           ;'OTG_FS_DOEPINT3.B2BSTUP`             EQU 0x50000B68,        4, base=16,    bitRange=6-6
10710                           
10711                           ;'OTG_FS_DOEPTSIZ3`                    EQU 0x50000B70,        4, base=16
10712                           ;'OTG_FS_DOEPTSIZ3.XFRSIZ`             EQU 0x50000B70,        4, base=16,    bitRange=0-18
10713                           ;'OTG_FS_DOEPTSIZ3.PKTCNT`             EQU 0x50000B70,        4, base=16,    bitRange=19-28
10714                           ;'OTG_FS_DOEPTSIZ3.RXDPID_STUPCNT`     EQU 0x50000B70,        4, base=16,    bitRange=29-30
10715                           
10716                           ;'OTG_FS_DOEPCTL4`                     EQU 0x50000B80,        4, base=16
10717                           ;'OTG_FS_DOEPCTL4.MPSIZ`               EQU 0x50000B80,        4, base=16,    bitRange=0-10
10718                           ;'OTG_FS_DOEPCTL4.USBAEP`              EQU 0x50000B80,        4, base=16,    bitRange=15-15
10719                           ;'OTG_FS_DOEPCTL4.EONUM_DPID`          EQU 0x50000B80,        4, base=16,    bitRange=16-16
10720                           ;'OTG_FS_DOEPCTL4.NAKSTS`              EQU 0x50000B80,        4, base=16,    bitRange=17-17
10721                           ;'OTG_FS_DOEPCTL4.EPTYP`               EQU 0x50000B80,        4, base=16,    bitRange=18-19
10722                           ;'OTG_FS_DOEPCTL4.SNPM`                EQU 0x50000B80,        4, base=16,    bitRange=20-20
10723                           ;'OTG_FS_DOEPCTL4.STALL`               EQU 0x50000B80,        4, base=16,    bitRange=21-21
10724                           ;'OTG_FS_DOEPCTL4.CNAK`                EQU 0x50000B80,        4, base=16,    bitRange=26-26
10725                           ;'OTG_FS_DOEPCTL4.SNAK`                EQU 0x50000B80,        4, base=16,    bitRange=27-27
10726                           ;'OTG_FS_DOEPCTL4.SD0PID_SEVNFRM`      EQU 0x50000B80,        4, base=16,    bitRange=28-28
10727                           ;'OTG_FS_DOEPCTL4.SODDFRM`             EQU 0x50000B80,        4, base=16,    bitRange=29-29
10728                           ;'OTG_FS_DOEPCTL4.EPDIS`               EQU 0x50000B80,        4, base=16,    bitRange=30-30
10729                           ;'OTG_FS_DOEPCTL4.EPENA`               EQU 0x50000B80,        4, base=16,    bitRange=31-31
10730                           
10731                           ;'OTG_FS_DOEPINT4`                     EQU 0x50000B88,        4, base=16
10732                           ;'OTG_FS_DOEPINT4.XFRC`                EQU 0x50000B88,        4, base=16,    bitRange=0-0
10733                           ;'OTG_FS_DOEPINT4.EPDISD`              EQU 0x50000B88,        4, base=16,    bitRange=1-1
10734                           ;'OTG_FS_DOEPINT4.STUP`                EQU 0x50000B88,        4, base=16,    bitRange=3-3
10735                           ;'OTG_FS_DOEPINT4.OTEPDIS`             EQU 0x50000B88,        4, base=16,    bitRange=4-4
10736                           ;'OTG_FS_DOEPINT4.B2BSTUP`             EQU 0x50000B88,        4, base=16,    bitRange=6-6
10737                           
10738                           ;'OTG_FS_DOEPTSIZ4`                    EQU 0x50000B90,        4, base=16
10739                           ;'OTG_FS_DOEPTSIZ4.XFRSIZ`             EQU 0x50000B90,        4, base=16,    bitRange=0-18
10740                           ;'OTG_FS_DOEPTSIZ4.PKTCNT`             EQU 0x50000B90,        4, base=16,    bitRange=19-28
10741                           ;'OTG_FS_DOEPTSIZ4.RXDPID_STUPCNT`     EQU 0x50000B90,        4, base=16,    bitRange=29-30
10742                           
10743                           ;'OTG_FS_DOEPCTL5`                     EQU 0x50000BA0,        4, base=16
10744                           ;'OTG_FS_DOEPCTL5.MPSIZ`               EQU 0x50000BA0,        4, base=16,    bitRange=0-10
10745                           ;'OTG_FS_DOEPCTL5.USBAEP`              EQU 0x50000BA0,        4, base=16,    bitRange=15-15
10746                           ;'OTG_FS_DOEPCTL5.EONUM_DPID`          EQU 0x50000BA0,        4, base=16,    bitRange=16-16
10747                           ;'OTG_FS_DOEPCTL5.NAKSTS`              EQU 0x50000BA0,        4, base=16,    bitRange=17-17
10748                           ;'OTG_FS_DOEPCTL5.EPTYP`               EQU 0x50000BA0,        4, base=16,    bitRange=18-19
10749                           ;'OTG_FS_DOEPCTL5.SNPM`                EQU 0x50000BA0,        4, base=16,    bitRange=20-20
10750                           ;'OTG_FS_DOEPCTL5.STALL`               EQU 0x50000BA0,        4, base=16,    bitRange=21-21
10751                           ;'OTG_FS_DOEPCTL5.CNAK`                EQU 0x50000BA0,        4, base=16,    bitRange=26-26
10752                           ;'OTG_FS_DOEPCTL5.SNAK`                EQU 0x50000BA0,        4, base=16,    bitRange=27-27
10753                           ;'OTG_FS_DOEPCTL5.SD0PID_SEVNFRM`      EQU 0x50000BA0,        4, base=16,    bitRange=28-28
10754                           ;'OTG_FS_DOEPCTL5.SODDFRM`             EQU 0x50000BA0,        4, base=16,    bitRange=29-29
10755                           ;'OTG_FS_DOEPCTL5.EPDIS`               EQU 0x50000BA0,        4, base=16,    bitRange=30-30
10756                           ;'OTG_FS_DOEPCTL5.EPENA`               EQU 0x50000BA0,        4, base=16,    bitRange=31-31
10757                           
10758                           ;'OTG_FS_DOEPINT5`                     EQU 0x50000BA8,        4, base=16
10759                           ;'OTG_FS_DOEPINT5.XFRC`                EQU 0x50000BA8,        4, base=16,    bitRange=0-0
10760                           ;'OTG_FS_DOEPINT5.EPDISD`              EQU 0x50000BA8,        4, base=16,    bitRange=1-1
10761                           ;'OTG_FS_DOEPINT5.STUP`                EQU 0x50000BA8,        4, base=16,    bitRange=3-3
10762                           ;'OTG_FS_DOEPINT5.OTEPDIS`             EQU 0x50000BA8,        4, base=16,    bitRange=4-4
10763                           ;'OTG_FS_DOEPINT5.B2BSTUP`             EQU 0x50000BA8,        4, base=16,    bitRange=6-6
10764                           
10765                           ;'OTG_FS_DOEPTSIZ5`                    EQU 0x50000BB0,        4, base=16
10766                           ;'OTG_FS_DOEPTSIZ5.XFRSIZ`             EQU 0x50000BB0,        4, base=16,    bitRange=0-18
10767                           ;'OTG_FS_DOEPTSIZ5.PKTCNT`             EQU 0x50000BB0,        4, base=16,    bitRange=19-28
10768                           ;'OTG_FS_DOEPTSIZ5.RXDPID_STUPCNT`     EQU 0x50000BB0,        4, base=16,    bitRange=29-30
10769                           
10770                           ;'OTG_FS_DOEPCTL6`                     EQU 0x50000BC0,        4, base=16
10771                           ;'OTG_FS_DOEPCTL6.MPSIZ`               EQU 0x50000BC0,        4, base=16,    bitRange=0-10
10772                           ;'OTG_FS_DOEPCTL6.USBAEP`              EQU 0x50000BC0,        4, base=16,    bitRange=15-15
10773                           ;'OTG_FS_DOEPCTL6.EONUM_DPID`          EQU 0x50000BC0,        4, base=16,    bitRange=16-16
10774                           ;'OTG_FS_DOEPCTL6.NAKSTS`              EQU 0x50000BC0,        4, base=16,    bitRange=17-17
10775                           ;'OTG_FS_DOEPCTL6.EPTYP`               EQU 0x50000BC0,        4, base=16,    bitRange=18-19
10776                           ;'OTG_FS_DOEPCTL6.SNPM`                EQU 0x50000BC0,        4, base=16,    bitRange=20-20
10777                           ;'OTG_FS_DOEPCTL6.STALL`               EQU 0x50000BC0,        4, base=16,    bitRange=21-21
10778                           ;'OTG_FS_DOEPCTL6.CNAK`                EQU 0x50000BC0,        4, base=16,    bitRange=26-26
10779                           ;'OTG_FS_DOEPCTL6.SNAK`                EQU 0x50000BC0,        4, base=16,    bitRange=27-27
10780                           ;'OTG_FS_DOEPCTL6.SD0PID_SEVNFRM`      EQU 0x50000BC0,        4, base=16,    bitRange=28-28
10781                           ;'OTG_FS_DOEPCTL6.SODDFRM`             EQU 0x50000BC0,        4, base=16,    bitRange=29-29
10782                           ;'OTG_FS_DOEPCTL6.EPDIS`               EQU 0x50000BC0,        4, base=16,    bitRange=30-30
10783                           ;'OTG_FS_DOEPCTL6.EPENA`               EQU 0x50000BC0,        4, base=16,    bitRange=31-31
10784                           
10785                           ;'OTG_FS_DOEPINT6`                     EQU 0x50000BC8,        4, base=16
10786                           ;'OTG_FS_DOEPINT6.XFRC`                EQU 0x50000BC8,        4, base=16,    bitRange=0-0
10787                           ;'OTG_FS_DOEPINT6.EPDISD`              EQU 0x50000BC8,        4, base=16,    bitRange=1-1
10788                           ;'OTG_FS_DOEPINT6.STUP`                EQU 0x50000BC8,        4, base=16,    bitRange=3-3
10789                           ;'OTG_FS_DOEPINT6.OTEPDIS`             EQU 0x50000BC8,        4, base=16,    bitRange=4-4
10790                           ;'OTG_FS_DOEPINT6.B2BSTUP`             EQU 0x50000BC8,        4, base=16,    bitRange=6-6
10791                           
10792                           ;'OTG_FS_DOEPTSIZ6`                    EQU 0x50000BD0,        4, base=16
10793                           ;'OTG_FS_DOEPTSIZ6.XFRSIZ`             EQU 0x50000BD0,        4, base=16,    bitRange=0-18
10794                           ;'OTG_FS_DOEPTSIZ6.PKTCNT`             EQU 0x50000BD0,        4, base=16,    bitRange=19-28
10795                           ;'OTG_FS_DOEPTSIZ6.RXDPID_STUPCNT`     EQU 0x50000BD0,        4, base=16,    bitRange=29-30
10796                           
10797                           ;'OTG_FS_DOEPCTL7`                     EQU 0x50000BE0,        4, base=16
10798                           ;'OTG_FS_DOEPCTL7.MPSIZ`               EQU 0x50000BE0,        4, base=16,    bitRange=0-10
10799                           ;'OTG_FS_DOEPCTL7.USBAEP`              EQU 0x50000BE0,        4, base=16,    bitRange=15-15
10800                           ;'OTG_FS_DOEPCTL7.EONUM_DPID`          EQU 0x50000BE0,        4, base=16,    bitRange=16-16
10801                           ;'OTG_FS_DOEPCTL7.NAKSTS`              EQU 0x50000BE0,        4, base=16,    bitRange=17-17
10802                           ;'OTG_FS_DOEPCTL7.EPTYP`               EQU 0x50000BE0,        4, base=16,    bitRange=18-19
10803                           ;'OTG_FS_DOEPCTL7.SNPM`                EQU 0x50000BE0,        4, base=16,    bitRange=20-20
10804                           ;'OTG_FS_DOEPCTL7.STALL`               EQU 0x50000BE0,        4, base=16,    bitRange=21-21
10805                           ;'OTG_FS_DOEPCTL7.CNAK`                EQU 0x50000BE0,        4, base=16,    bitRange=26-26
10806                           ;'OTG_FS_DOEPCTL7.SNAK`                EQU 0x50000BE0,        4, base=16,    bitRange=27-27
10807                           ;'OTG_FS_DOEPCTL7.SD0PID_SEVNFRM`      EQU 0x50000BE0,        4, base=16,    bitRange=28-28
10808                           ;'OTG_FS_DOEPCTL7.SODDFRM`             EQU 0x50000BE0,        4, base=16,    bitRange=29-29
10809                           ;'OTG_FS_DOEPCTL7.EPDIS`               EQU 0x50000BE0,        4, base=16,    bitRange=30-30
10810                           ;'OTG_FS_DOEPCTL7.EPENA`               EQU 0x50000BE0,        4, base=16,    bitRange=31-31
10811                           
10812                           ;'OTG_FS_DOEPINT7`                     EQU 0x50000BE8,        4, base=16
10813                           ;'OTG_FS_DOEPINT7.XFRC`                EQU 0x50000BE8,        4, base=16,    bitRange=0-0
10814                           ;'OTG_FS_DOEPINT7.EPDISD`              EQU 0x50000BE8,        4, base=16,    bitRange=1-1
10815                           ;'OTG_FS_DOEPINT7.STUP`                EQU 0x50000BE8,        4, base=16,    bitRange=3-3
10816                           ;'OTG_FS_DOEPINT7.OTEPDIS`             EQU 0x50000BE8,        4, base=16,    bitRange=4-4
10817                           ;'OTG_FS_DOEPINT7.B2BSTUP`             EQU 0x50000BE8,        4, base=16,    bitRange=6-6
10818                           
10819                           ;'OTG_FS_DOEPTSIZ7`                    EQU 0x50000BF0,        4, base=16
10820                           ;'OTG_FS_DOEPTSIZ7.XFRSIZ`             EQU 0x50000BF0,        4, base=16,    bitRange=0-18
10821                           ;'OTG_FS_DOEPTSIZ7.PKTCNT`             EQU 0x50000BF0,        4, base=16,    bitRange=19-28
10822                           ;'OTG_FS_DOEPTSIZ7.RXDPID_STUPCNT`     EQU 0x50000BF0,        4, base=16,    bitRange=29-30
10823                           
10824                           ;'OTG_FS_DOEPCTL8`                     EQU 0x50000C00,        4, base=16
10825                           ;'OTG_FS_DOEPCTL8.MPSIZ`               EQU 0x50000C00,        4, base=16,    bitRange=0-10
10826                           ;'OTG_FS_DOEPCTL8.USBAEP`              EQU 0x50000C00,        4, base=16,    bitRange=15-15
10827                           ;'OTG_FS_DOEPCTL8.EONUM_DPID`          EQU 0x50000C00,        4, base=16,    bitRange=16-16
10828                           ;'OTG_FS_DOEPCTL8.NAKSTS`              EQU 0x50000C00,        4, base=16,    bitRange=17-17
10829                           ;'OTG_FS_DOEPCTL8.EPTYP`               EQU 0x50000C00,        4, base=16,    bitRange=18-19
10830                           ;'OTG_FS_DOEPCTL8.SNPM`                EQU 0x50000C00,        4, base=16,    bitRange=20-20
10831                           ;'OTG_FS_DOEPCTL8.STALL`               EQU 0x50000C00,        4, base=16,    bitRange=21-21
10832                           ;'OTG_FS_DOEPCTL8.CNAK`                EQU 0x50000C00,        4, base=16,    bitRange=26-26
10833                           ;'OTG_FS_DOEPCTL8.SNAK`                EQU 0x50000C00,        4, base=16,    bitRange=27-27
10834                           ;'OTG_FS_DOEPCTL8.SD0PID_SEVNFRM`      EQU 0x50000C00,        4, base=16,    bitRange=28-28
10835                           ;'OTG_FS_DOEPCTL8.SODDFRM`             EQU 0x50000C00,        4, base=16,    bitRange=29-29
10836                           ;'OTG_FS_DOEPCTL8.EPDIS`               EQU 0x50000C00,        4, base=16,    bitRange=30-30
10837                           ;'OTG_FS_DOEPCTL8.EPENA`               EQU 0x50000C00,        4, base=16,    bitRange=31-31
10838                           
10839                           ;'OTG_FS_DOEPINT8`                     EQU 0x50000C08,        4, base=16
10840                           ;'OTG_FS_DOEPINT8.XFRC`                EQU 0x50000C08,        4, base=16,    bitRange=0-0
10841                           ;'OTG_FS_DOEPINT8.EPDISD`              EQU 0x50000C08,        4, base=16,    bitRange=1-1
10842                           ;'OTG_FS_DOEPINT8.STUP`                EQU 0x50000C08,        4, base=16,    bitRange=3-3
10843                           ;'OTG_FS_DOEPINT8.OTEPDIS`             EQU 0x50000C08,        4, base=16,    bitRange=4-4
10844                           ;'OTG_FS_DOEPINT8.B2BSTUP`             EQU 0x50000C08,        4, base=16,    bitRange=6-6
10845                           
10846                           ;'OTG_FS_DOEPTSIZ8`                    EQU 0x50000C10,        4, base=16
10847                           ;'OTG_FS_DOEPTSIZ8.XFRSIZ`             EQU 0x50000C10,        4, base=16,    bitRange=0-18
10848                           ;'OTG_FS_DOEPTSIZ8.PKTCNT`             EQU 0x50000C10,        4, base=16,    bitRange=19-28
10849                           ;'OTG_FS_DOEPTSIZ8.RXDPID_STUPCNT`     EQU 0x50000C10,        4, base=16,    bitRange=29-30
10850                           
10851                           ;'OTG_FS_DOEPCTL9`                     EQU 0x50000C20,        4, base=16
10852                           ;'OTG_FS_DOEPCTL9.MPSIZ`               EQU 0x50000C20,        4, base=16,    bitRange=0-10
10853                           ;'OTG_FS_DOEPCTL9.USBAEP`              EQU 0x50000C20,        4, base=16,    bitRange=15-15
10854                           ;'OTG_FS_DOEPCTL9.EONUM_DPID`          EQU 0x50000C20,        4, base=16,    bitRange=16-16
10855                           ;'OTG_FS_DOEPCTL9.NAKSTS`              EQU 0x50000C20,        4, base=16,    bitRange=17-17
10856                           ;'OTG_FS_DOEPCTL9.EPTYP`               EQU 0x50000C20,        4, base=16,    bitRange=18-19
10857                           ;'OTG_FS_DOEPCTL9.SNPM`                EQU 0x50000C20,        4, base=16,    bitRange=20-20
10858                           ;'OTG_FS_DOEPCTL9.STALL`               EQU 0x50000C20,        4, base=16,    bitRange=21-21
10859                           ;'OTG_FS_DOEPCTL9.CNAK`                EQU 0x50000C20,        4, base=16,    bitRange=26-26
10860                           ;'OTG_FS_DOEPCTL9.SNAK`                EQU 0x50000C20,        4, base=16,    bitRange=27-27
10861                           ;'OTG_FS_DOEPCTL9.SD0PID_SEVNFRM`      EQU 0x50000C20,        4, base=16,    bitRange=28-28
10862                           ;'OTG_FS_DOEPCTL9.SODDFRM`             EQU 0x50000C20,        4, base=16,    bitRange=29-29
10863                           ;'OTG_FS_DOEPCTL9.EPDIS`               EQU 0x50000C20,        4, base=16,    bitRange=30-30
10864                           ;'OTG_FS_DOEPCTL9.EPENA`               EQU 0x50000C20,        4, base=16,    bitRange=31-31
10865                           
10866                           ;'OTG_FS_DOEPINT9`                     EQU 0x50000C28,        4, base=16
10867                           ;'OTG_FS_DOEPINT9.XFRC`                EQU 0x50000C28,        4, base=16,    bitRange=0-0
10868                           ;'OTG_FS_DOEPINT9.EPDISD`              EQU 0x50000C28,        4, base=16,    bitRange=1-1
10869                           ;'OTG_FS_DOEPINT9.STUP`                EQU 0x50000C28,        4, base=16,    bitRange=3-3
10870                           ;'OTG_FS_DOEPINT9.OTEPDIS`             EQU 0x50000C28,        4, base=16,    bitRange=4-4
10871                           ;'OTG_FS_DOEPINT9.B2BSTUP`             EQU 0x50000C28,        4, base=16,    bitRange=6-6
10872                           
10873                           ;'OTG_FS_DOEPTSIZ9`                    EQU 0x50000C30,        4, base=16
10874                           ;'OTG_FS_DOEPTSIZ9.XFRSIZ`             EQU 0x50000C30,        4, base=16,    bitRange=0-18
10875                           ;'OTG_FS_DOEPTSIZ9.PKTCNT`             EQU 0x50000C30,        4, base=16,    bitRange=19-28
10876                           ;'OTG_FS_DOEPTSIZ9.RXDPID_STUPCNT`     EQU 0x50000C30,        4, base=16,    bitRange=29-30
10877                           
10878                           ;'OTG_FS_DOEPCTL10`                    EQU 0x50000C40,        4, base=16
10879                           ;'OTG_FS_DOEPCTL10.MPSIZ`              EQU 0x50000C40,        4, base=16,    bitRange=0-10
10880                           ;'OTG_FS_DOEPCTL10.USBAEP`             EQU 0x50000C40,        4, base=16,    bitRange=15-15
10881                           ;'OTG_FS_DOEPCTL10.EONUM_DPID`         EQU 0x50000C40,        4, base=16,    bitRange=16-16
10882                           ;'OTG_FS_DOEPCTL10.NAKSTS`             EQU 0x50000C40,        4, base=16,    bitRange=17-17
10883                           ;'OTG_FS_DOEPCTL10.EPTYP`              EQU 0x50000C40,        4, base=16,    bitRange=18-19
10884                           ;'OTG_FS_DOEPCTL10.SNPM`               EQU 0x50000C40,        4, base=16,    bitRange=20-20
10885                           ;'OTG_FS_DOEPCTL10.STALL`              EQU 0x50000C40,        4, base=16,    bitRange=21-21
10886                           ;'OTG_FS_DOEPCTL10.CNAK`               EQU 0x50000C40,        4, base=16,    bitRange=26-26
10887                           ;'OTG_FS_DOEPCTL10.SNAK`               EQU 0x50000C40,        4, base=16,    bitRange=27-27
10888                           ;'OTG_FS_DOEPCTL10.SD0PID_SEVNFRM`     EQU 0x50000C40,        4, base=16,    bitRange=28-28
10889                           ;'OTG_FS_DOEPCTL10.SODDFRM`            EQU 0x50000C40,        4, base=16,    bitRange=29-29
10890                           ;'OTG_FS_DOEPCTL10.EPDIS`              EQU 0x50000C40,        4, base=16,    bitRange=30-30
10891                           ;'OTG_FS_DOEPCTL10.EPENA`              EQU 0x50000C40,        4, base=16,    bitRange=31-31
10892                           
10893                           ;'OTG_FS_DOEPINT10`                    EQU 0x50000C48,        4, base=16
10894                           ;'OTG_FS_DOEPINT10.XFRC`               EQU 0x50000C48,        4, base=16,    bitRange=0-0
10895                           ;'OTG_FS_DOEPINT10.EPDISD`             EQU 0x50000C48,        4, base=16,    bitRange=1-1
10896                           ;'OTG_FS_DOEPINT10.STUP`               EQU 0x50000C48,        4, base=16,    bitRange=3-3
10897                           ;'OTG_FS_DOEPINT10.OTEPDIS`            EQU 0x50000C48,        4, base=16,    bitRange=4-4
10898                           ;'OTG_FS_DOEPINT10.B2BSTUP`            EQU 0x50000C48,        4, base=16,    bitRange=6-6
10899                           
10900                           ;'OTG_FS_DOEPTSIZ10`                   EQU 0x50000C50,        4, base=16
10901                           ;'OTG_FS_DOEPTSIZ10.XFRSIZ`            EQU 0x50000C50,        4, base=16,    bitRange=0-18
10902                           ;'OTG_FS_DOEPTSIZ10.PKTCNT`            EQU 0x50000C50,        4, base=16,    bitRange=19-28
10903                           ;'OTG_FS_DOEPTSIZ10.RXDPID_STUPCNT`    EQU 0x50000C50,        4, base=16,    bitRange=29-30
10904                           
10905                           ;'OTG_FS_DOEPCTL11`                    EQU 0x50000C60,        4, base=16
10906                           ;'OTG_FS_DOEPCTL11.MPSIZ`              EQU 0x50000C60,        4, base=16,    bitRange=0-10
10907                           ;'OTG_FS_DOEPCTL11.USBAEP`             EQU 0x50000C60,        4, base=16,    bitRange=15-15
10908                           ;'OTG_FS_DOEPCTL11.EONUM_DPID`         EQU 0x50000C60,        4, base=16,    bitRange=16-16
10909                           ;'OTG_FS_DOEPCTL11.NAKSTS`             EQU 0x50000C60,        4, base=16,    bitRange=17-17
10910                           ;'OTG_FS_DOEPCTL11.EPTYP`              EQU 0x50000C60,        4, base=16,    bitRange=18-19
10911                           ;'OTG_FS_DOEPCTL11.SNPM`               EQU 0x50000C60,        4, base=16,    bitRange=20-20
10912                           ;'OTG_FS_DOEPCTL11.STALL`              EQU 0x50000C60,        4, base=16,    bitRange=21-21
10913                           ;'OTG_FS_DOEPCTL11.CNAK`               EQU 0x50000C60,        4, base=16,    bitRange=26-26
10914                           ;'OTG_FS_DOEPCTL11.SNAK`               EQU 0x50000C60,        4, base=16,    bitRange=27-27
10915                           ;'OTG_FS_DOEPCTL11.SD0PID_SEVNFRM`     EQU 0x50000C60,        4, base=16,    bitRange=28-28
10916                           ;'OTG_FS_DOEPCTL11.SODDFRM`            EQU 0x50000C60,        4, base=16,    bitRange=29-29
10917                           ;'OTG_FS_DOEPCTL11.EPDIS`              EQU 0x50000C60,        4, base=16,    bitRange=30-30
10918                           ;'OTG_FS_DOEPCTL11.EPENA`              EQU 0x50000C60,        4, base=16,    bitRange=31-31
10919                           
10920                           ;'OTG_FS_DOEPINT11`                    EQU 0x50000C68,        4, base=16
10921                           ;'OTG_FS_DOEPINT11.XFRC`               EQU 0x50000C68,        4, base=16,    bitRange=0-0
10922                           ;'OTG_FS_DOEPINT11.EPDISD`             EQU 0x50000C68,        4, base=16,    bitRange=1-1
10923                           ;'OTG_FS_DOEPINT11.STUP`               EQU 0x50000C68,        4, base=16,    bitRange=3-3
10924                           ;'OTG_FS_DOEPINT11.OTEPDIS`            EQU 0x50000C68,        4, base=16,    bitRange=4-4
10925                           ;'OTG_FS_DOEPINT11.B2BSTUP`            EQU 0x50000C68,        4, base=16,    bitRange=6-6
10926                           
10927                           ;'OTG_FS_DOEPTSIZ11`                   EQU 0x50000C70,        4, base=16
10928                           ;'OTG_FS_DOEPTSIZ11.XFRSIZ`            EQU 0x50000C70,        4, base=16,    bitRange=0-18
10929                           ;'OTG_FS_DOEPTSIZ11.PKTCNT`            EQU 0x50000C70,        4, base=16,    bitRange=19-28
10930                           ;'OTG_FS_DOEPTSIZ11.RXDPID_STUPCNT`    EQU 0x50000C70,        4, base=16,    bitRange=29-30
10931                           
10932                           ;'OTG_FS_DOEPCTL12`                    EQU 0x50000C80,        4, base=16
10933                           ;'OTG_FS_DOEPCTL12.MPSIZ`              EQU 0x50000C80,        4, base=16,    bitRange=0-10
10934                           ;'OTG_FS_DOEPCTL12.USBAEP`             EQU 0x50000C80,        4, base=16,    bitRange=15-15
10935                           ;'OTG_FS_DOEPCTL12.EONUM_DPID`         EQU 0x50000C80,        4, base=16,    bitRange=16-16
10936                           ;'OTG_FS_DOEPCTL12.NAKSTS`             EQU 0x50000C80,        4, base=16,    bitRange=17-17
10937                           ;'OTG_FS_DOEPCTL12.EPTYP`              EQU 0x50000C80,        4, base=16,    bitRange=18-19
10938                           ;'OTG_FS_DOEPCTL12.SNPM`               EQU 0x50000C80,        4, base=16,    bitRange=20-20
10939                           ;'OTG_FS_DOEPCTL12.STALL`              EQU 0x50000C80,        4, base=16,    bitRange=21-21
10940                           ;'OTG_FS_DOEPCTL12.CNAK`               EQU 0x50000C80,        4, base=16,    bitRange=26-26
10941                           ;'OTG_FS_DOEPCTL12.SNAK`               EQU 0x50000C80,        4, base=16,    bitRange=27-27
10942                           ;'OTG_FS_DOEPCTL12.SD0PID_SEVNFRM`     EQU 0x50000C80,        4, base=16,    bitRange=28-28
10943                           ;'OTG_FS_DOEPCTL12.SODDFRM`            EQU 0x50000C80,        4, base=16,    bitRange=29-29
10944                           ;'OTG_FS_DOEPCTL12.EPDIS`              EQU 0x50000C80,        4, base=16,    bitRange=30-30
10945                           ;'OTG_FS_DOEPCTL12.EPENA`              EQU 0x50000C80,        4, base=16,    bitRange=31-31
10946                           
10947                           ;'OTG_FS_DOEPINT12`                    EQU 0x50000C88,        4, base=16
10948                           ;'OTG_FS_DOEPINT12.XFRC`               EQU 0x50000C88,        4, base=16,    bitRange=0-0
10949                           ;'OTG_FS_DOEPINT12.EPDISD`             EQU 0x50000C88,        4, base=16,    bitRange=1-1
10950                           ;'OTG_FS_DOEPINT12.STUP`               EQU 0x50000C88,        4, base=16,    bitRange=3-3
10951                           ;'OTG_FS_DOEPINT12.OTEPDIS`            EQU 0x50000C88,        4, base=16,    bitRange=4-4
10952                           ;'OTG_FS_DOEPINT12.B2BSTUP`            EQU 0x50000C88,        4, base=16,    bitRange=6-6
10953                           
10954                           ;'OTG_FS_DOEPTSIZ12`                   EQU 0x50000C90,        4, base=16
10955                           ;'OTG_FS_DOEPTSIZ12.XFRSIZ`            EQU 0x50000C90,        4, base=16,    bitRange=0-18
10956                           ;'OTG_FS_DOEPTSIZ12.PKTCNT`            EQU 0x50000C90,        4, base=16,    bitRange=19-28
10957                           ;'OTG_FS_DOEPTSIZ12.RXDPID_STUPCNT`    EQU 0x50000C90,        4, base=16,    bitRange=29-30
10958                           
10959                           ;'OTG_FS_DOEPCTL13`                    EQU 0x50000CA0,        4, base=16
10960                           ;'OTG_FS_DOEPCTL13.MPSIZ`              EQU 0x50000CA0,        4, base=16,    bitRange=0-10
10961                           ;'OTG_FS_DOEPCTL13.USBAEP`             EQU 0x50000CA0,        4, base=16,    bitRange=15-15
10962                           ;'OTG_FS_DOEPCTL13.EONUM_DPID`         EQU 0x50000CA0,        4, base=16,    bitRange=16-16
10963                           ;'OTG_FS_DOEPCTL13.NAKSTS`             EQU 0x50000CA0,        4, base=16,    bitRange=17-17
10964                           ;'OTG_FS_DOEPCTL13.EPTYP`              EQU 0x50000CA0,        4, base=16,    bitRange=18-19
10965                           ;'OTG_FS_DOEPCTL13.SNPM`               EQU 0x50000CA0,        4, base=16,    bitRange=20-20
10966                           ;'OTG_FS_DOEPCTL13.STALL`              EQU 0x50000CA0,        4, base=16,    bitRange=21-21
10967                           ;'OTG_FS_DOEPCTL13.CNAK`               EQU 0x50000CA0,        4, base=16,    bitRange=26-26
10968                           ;'OTG_FS_DOEPCTL13.SNAK`               EQU 0x50000CA0,        4, base=16,    bitRange=27-27
10969                           ;'OTG_FS_DOEPCTL13.SD0PID_SEVNFRM`     EQU 0x50000CA0,        4, base=16,    bitRange=28-28
10970                           ;'OTG_FS_DOEPCTL13.SODDFRM`            EQU 0x50000CA0,        4, base=16,    bitRange=29-29
10971                           ;'OTG_FS_DOEPCTL13.EPDIS`              EQU 0x50000CA0,        4, base=16,    bitRange=30-30
10972                           ;'OTG_FS_DOEPCTL13.EPENA`              EQU 0x50000CA0,        4, base=16,    bitRange=31-31
10973                           
10974                           ;'OTG_FS_DOEPINT13`                    EQU 0x50000CA8,        4, base=16
10975                           ;'OTG_FS_DOEPINT13.XFRC`               EQU 0x50000CA8,        4, base=16,    bitRange=0-0
10976                           ;'OTG_FS_DOEPINT13.EPDISD`             EQU 0x50000CA8,        4, base=16,    bitRange=1-1
10977                           ;'OTG_FS_DOEPINT13.STUP`               EQU 0x50000CA8,        4, base=16,    bitRange=3-3
10978                           ;'OTG_FS_DOEPINT13.OTEPDIS`            EQU 0x50000CA8,        4, base=16,    bitRange=4-4
10979                           ;'OTG_FS_DOEPINT13.B2BSTUP`            EQU 0x50000CA8,        4, base=16,    bitRange=6-6
10980                           
10981                           ;'OTG_FS_DOEPTSIZ13`                   EQU 0x50000CB0,        4, base=16
10982                           ;'OTG_FS_DOEPTSIZ13.XFRSIZ`            EQU 0x50000CB0,        4, base=16,    bitRange=0-18
10983                           ;'OTG_FS_DOEPTSIZ13.PKTCNT`            EQU 0x50000CB0,        4, base=16,    bitRange=19-28
10984                           ;'OTG_FS_DOEPTSIZ13.RXDPID_STUPCNT`    EQU 0x50000CB0,        4, base=16,    bitRange=29-30
10985                           
10986                           ;'OTG_FS_DOEPCTL14`                    EQU 0x50000CC0,        4, base=16
10987                           ;'OTG_FS_DOEPCTL14.MPSIZ`              EQU 0x50000CC0,        4, base=16,    bitRange=0-10
10988                           ;'OTG_FS_DOEPCTL14.USBAEP`             EQU 0x50000CC0,        4, base=16,    bitRange=15-15
10989                           ;'OTG_FS_DOEPCTL14.EONUM_DPID`         EQU 0x50000CC0,        4, base=16,    bitRange=16-16
10990                           ;'OTG_FS_DOEPCTL14.NAKSTS`             EQU 0x50000CC0,        4, base=16,    bitRange=17-17
10991                           ;'OTG_FS_DOEPCTL14.EPTYP`              EQU 0x50000CC0,        4, base=16,    bitRange=18-19
10992                           ;'OTG_FS_DOEPCTL14.SNPM`               EQU 0x50000CC0,        4, base=16,    bitRange=20-20
10993                           ;'OTG_FS_DOEPCTL14.STALL`              EQU 0x50000CC0,        4, base=16,    bitRange=21-21
10994                           ;'OTG_FS_DOEPCTL14.CNAK`               EQU 0x50000CC0,        4, base=16,    bitRange=26-26
10995                           ;'OTG_FS_DOEPCTL14.SNAK`               EQU 0x50000CC0,        4, base=16,    bitRange=27-27
10996                           ;'OTG_FS_DOEPCTL14.SD0PID_SEVNFRM`     EQU 0x50000CC0,        4, base=16,    bitRange=28-28
10997                           ;'OTG_FS_DOEPCTL14.SODDFRM`            EQU 0x50000CC0,        4, base=16,    bitRange=29-29
10998                           ;'OTG_FS_DOEPCTL14.EPDIS`              EQU 0x50000CC0,        4, base=16,    bitRange=30-30
10999                           ;'OTG_FS_DOEPCTL14.EPENA`              EQU 0x50000CC0,        4, base=16,    bitRange=31-31
11000                           
11001                           ;'OTG_FS_DOEPINT14`                    EQU 0x50000CC8,        4, base=16
11002                           ;'OTG_FS_DOEPINT14.XFRC`               EQU 0x50000CC8,        4, base=16,    bitRange=0-0
11003                           ;'OTG_FS_DOEPINT14.EPDISD`             EQU 0x50000CC8,        4, base=16,    bitRange=1-1
11004                           ;'OTG_FS_DOEPINT14.STUP`               EQU 0x50000CC8,        4, base=16,    bitRange=3-3
11005                           ;'OTG_FS_DOEPINT14.OTEPDIS`            EQU 0x50000CC8,        4, base=16,    bitRange=4-4
11006                           ;'OTG_FS_DOEPINT14.B2BSTUP`            EQU 0x50000CC8,        4, base=16,    bitRange=6-6
11007                           
11008                           ;'OTG_FS_DOEPTSIZ14`                   EQU 0x50000CD0,        4, base=16
11009                           ;'OTG_FS_DOEPTSIZ14.XFRSIZ`            EQU 0x50000CD0,        4, base=16,    bitRange=0-18
11010                           ;'OTG_FS_DOEPTSIZ14.PKTCNT`            EQU 0x50000CD0,        4, base=16,    bitRange=19-28
11011                           ;'OTG_FS_DOEPTSIZ14.RXDPID_STUPCNT`    EQU 0x50000CD0,        4, base=16,    bitRange=29-30
11012                           
11013                           ;'OTG_FS_DOEPCTL15`                    EQU 0x50000CE0,        4, base=16
11014                           ;'OTG_FS_DOEPCTL15.MPSIZ`              EQU 0x50000CE0,        4, base=16,    bitRange=0-10
11015                           ;'OTG_FS_DOEPCTL15.USBAEP`             EQU 0x50000CE0,        4, base=16,    bitRange=15-15
11016                           ;'OTG_FS_DOEPCTL15.EONUM_DPID`         EQU 0x50000CE0,        4, base=16,    bitRange=16-16
11017                           ;'OTG_FS_DOEPCTL15.NAKSTS`             EQU 0x50000CE0,        4, base=16,    bitRange=17-17
11018                           ;'OTG_FS_DOEPCTL15.EPTYP`              EQU 0x50000CE0,        4, base=16,    bitRange=18-19
11019                           ;'OTG_FS_DOEPCTL15.SNPM`               EQU 0x50000CE0,        4, base=16,    bitRange=20-20
11020                           ;'OTG_FS_DOEPCTL15.STALL`              EQU 0x50000CE0,        4, base=16,    bitRange=21-21
11021                           ;'OTG_FS_DOEPCTL15.CNAK`               EQU 0x50000CE0,        4, base=16,    bitRange=26-26
11022                           ;'OTG_FS_DOEPCTL15.SNAK`               EQU 0x50000CE0,        4, base=16,    bitRange=27-27
11023                           ;'OTG_FS_DOEPCTL15.SD0PID_SEVNFRM`     EQU 0x50000CE0,        4, base=16,    bitRange=28-28
11024                           ;'OTG_FS_DOEPCTL15.SODDFRM`            EQU 0x50000CE0,        4, base=16,    bitRange=29-29
11025                           ;'OTG_FS_DOEPCTL15.EPDIS`              EQU 0x50000CE0,        4, base=16,    bitRange=30-30
11026                           ;'OTG_FS_DOEPCTL15.EPENA`              EQU 0x50000CE0,        4, base=16,    bitRange=31-31
11027                           
11028                           ;'OTG_FS_DOEPINT15`                    EQU 0x50000CE8,        4, base=16
11029                           ;'OTG_FS_DOEPINT15.XFRC`               EQU 0x50000CE8,        4, base=16,    bitRange=0-0
11030                           ;'OTG_FS_DOEPINT15.EPDISD`             EQU 0x50000CE8,        4, base=16,    bitRange=1-1
11031                           ;'OTG_FS_DOEPINT15.STUP`               EQU 0x50000CE8,        4, base=16,    bitRange=3-3
11032                           ;'OTG_FS_DOEPINT15.OTEPDIS`            EQU 0x50000CE8,        4, base=16,    bitRange=4-4
11033                           ;'OTG_FS_DOEPINT15.B2BSTUP`            EQU 0x50000CE8,        4, base=16,    bitRange=6-6
11034                           
11035                           ;'OTG_FS_DOEPTSIZ15`                   EQU 0x50000CF0,        4, base=16
11036                           ;'OTG_FS_DOEPTSIZ15.XFRSIZ`            EQU 0x50000CF0,        4, base=16,    bitRange=0-18
11037                           ;'OTG_FS_DOEPTSIZ15.PKTCNT`            EQU 0x50000CF0,        4, base=16,    bitRange=19-28
11038                           ;'OTG_FS_DOEPTSIZ15.RXDPID_STUPCNT`    EQU 0x50000CF0,        4, base=16,    bitRange=29-30
11039                           
11040                           ;'OTG_FS_PCGCCTL`                      EQU 0x50000E00,        4, base=16
11041                           ;'OTG_FS_PCGCCTL.STPPCLK`              EQU 0x50000E00,        4, base=16,    bitRange=0-0
11042                           ;'OTG_FS_PCGCCTL.GATEHCLK`             EQU 0x50000E00,        4, base=16,    bitRange=1-1
11043                           ;'OTG_FS_PCGCCTL.PHYSUSP`              EQU 0x50000E00,        4, base=16,    bitRange=4-4
11044                           
11045                           
11046                           ;
11047                           ;               OTG_HS
11048                           ;
11049                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
11050                           ;     ----                                    ----      -------     --------  -----------
                                 --------
11051                           
11052                           ;'OTG_HS_GOTGCTL`                      EQU 0x40040000,        4, base=16
11053                           ;'OTG_HS_GOTGCTL.SRQSCS`               EQU 0x40040000,        4, base=16,    bitRange=0-0
11054                           ;'OTG_HS_GOTGCTL.SRQ`                  EQU 0x40040000,        4, base=16,    bitRange=1-1
11055                           ;'OTG_HS_GOTGCTL.HNGSCS`               EQU 0x40040000,        4, base=16,    bitRange=8-8
11056                           ;'OTG_HS_GOTGCTL.HNPRQ`                EQU 0x40040000,        4, base=16,    bitRange=9-9
11057                           ;'OTG_HS_GOTGCTL.HSHNPEN`              EQU 0x40040000,        4, base=16,    bitRange=10-10
11058                           ;'OTG_HS_GOTGCTL.DHNPEN`               EQU 0x40040000,        4, base=16,    bitRange=11-11
11059                           ;'OTG_HS_GOTGCTL.CIDSTS`               EQU 0x40040000,        4, base=16,    bitRange=16-16
11060                           ;'OTG_HS_GOTGCTL.DBCT`                 EQU 0x40040000,        4, base=16,    bitRange=17-17
11061                           ;'OTG_HS_GOTGCTL.ASVLD`                EQU 0x40040000,        4, base=16,    bitRange=18-18
11062                           ;'OTG_HS_GOTGCTL.BSVLD`                EQU 0x40040000,        4, base=16,    bitRange=19-19
11063                           
11064                           ;'OTG_HS_GOTGINT`                      EQU 0x40040004,        4, base=16
11065                           ;'OTG_HS_GOTGINT.SEDET`                EQU 0x40040004,        4, base=16,    bitRange=2-2
11066                           ;'OTG_HS_GOTGINT.SRSSCHG`              EQU 0x40040004,        4, base=16,    bitRange=8-8
11067                           ;'OTG_HS_GOTGINT.HNSSCHG`              EQU 0x40040004,        4, base=16,    bitRange=9-9
11068                           ;'OTG_HS_GOTGINT.HNGDET`               EQU 0x40040004,        4, base=16,    bitRange=17-17
11069                           ;'OTG_HS_GOTGINT.ADTOCHG`              EQU 0x40040004,        4, base=16,    bitRange=18-18
11070                           ;'OTG_HS_GOTGINT.DBCDNE`               EQU 0x40040004,        4, base=16,    bitRange=19-19
11071                           
11072                           ;'OTG_HS_GAHBCFG`                      EQU 0x40040008,        4, base=16
11073                           ;'OTG_HS_GAHBCFG.GINT`                 EQU 0x40040008,        4, base=16,    bitRange=0-0
11074                           ;'OTG_HS_GAHBCFG.HBSTLEN`              EQU 0x40040008,        4, base=16,    bitRange=1-4
11075                           ;'OTG_HS_GAHBCFG.DMAEN`                EQU 0x40040008,        4, base=16,    bitRange=5-5
11076                           ;'OTG_HS_GAHBCFG.TXFELVL`              EQU 0x40040008,        4, base=16,    bitRange=7-7
11077                           ;'OTG_HS_GAHBCFG.PTXFELVL`             EQU 0x40040008,        4, base=16,    bitRange=8-8
11078                           
11079                           ;'OTG_HS_GUSBCFG`                      EQU 0x4004000C,        4, base=16
11080                           ;'OTG_HS_GUSBCFG.TOCAL`                EQU 0x4004000C,        4, base=16,    bitRange=0-2
11081                           ;'OTG_HS_GUSBCFG.SRPCAP`               EQU 0x4004000C,        4, base=16,    bitRange=8-8
11082                           ;'OTG_HS_GUSBCFG.HNPCAP`               EQU 0x4004000C,        4, base=16,    bitRange=9-9
11083                           ;'OTG_HS_GUSBCFG.TRDT`                 EQU 0x4004000C,        4, base=16,    bitRange=10-13
11084                           ;'OTG_HS_GUSBCFG.PHYLPCS`              EQU 0x4004000C,        4, base=16,    bitRange=15-15
11085                           ;'OTG_HS_GUSBCFG.ULPIFSLS`             EQU 0x4004000C,        4, base=16,    bitRange=17-17
11086                           ;'OTG_HS_GUSBCFG.ULPIAR`               EQU 0x4004000C,        4, base=16,    bitRange=18-18
11087                           ;'OTG_HS_GUSBCFG.ULPICSM`              EQU 0x4004000C,        4, base=16,    bitRange=19-19
11088                           ;'OTG_HS_GUSBCFG.ULPIEVBUSD`           EQU 0x4004000C,        4, base=16,    bitRange=20-20
11089                           ;'OTG_HS_GUSBCFG.ULPIEVBUSI`           EQU 0x4004000C,        4, base=16,    bitRange=21-21
11090                           ;'OTG_HS_GUSBCFG.TSDPS`                EQU 0x4004000C,        4, base=16,    bitRange=22-22
11091                           ;'OTG_HS_GUSBCFG.PCCI`                 EQU 0x4004000C,        4, base=16,    bitRange=23-23
11092                           ;'OTG_HS_GUSBCFG.PTCI`                 EQU 0x4004000C,        4, base=16,    bitRange=24-24
11093                           ;'OTG_HS_GUSBCFG.ULPIIPD`              EQU 0x4004000C,        4, base=16,    bitRange=25-25
11094                           ;'OTG_HS_GUSBCFG.FHMOD`                EQU 0x4004000C,        4, base=16,    bitRange=29-29
11095                           ;'OTG_HS_GUSBCFG.FDMOD`                EQU 0x4004000C,        4, base=16,    bitRange=30-30
11096                           ;'OTG_HS_GUSBCFG.CTXPKT`               EQU 0x4004000C,        4, base=16,    bitRange=31-31
11097                           
11098                           ;'OTG_HS_GRSTCTL`                      EQU 0x40040010,        4, base=16
11099                           ;'OTG_HS_GRSTCTL.CSRST`                EQU 0x40040010,        4, base=16,    bitRange=0-0
11100                           ;'OTG_HS_GRSTCTL.HSRST`                EQU 0x40040010,        4, base=16,    bitRange=1-1
11101                           ;'OTG_HS_GRSTCTL.FCRST`                EQU 0x40040010,        4, base=16,    bitRange=2-2
11102                           ;'OTG_HS_GRSTCTL.RXFFLSH`              EQU 0x40040010,        4, base=16,    bitRange=4-4
11103                           ;'OTG_HS_GRSTCTL.TXFFLSH`              EQU 0x40040010,        4, base=16,    bitRange=5-5
11104                           ;'OTG_HS_GRSTCTL.TXFNUM`               EQU 0x40040010,        4, base=16,    bitRange=6-10
11105                           ;'OTG_HS_GRSTCTL.DMAREQ`               EQU 0x40040010,        4, base=16,    bitRange=30-30
11106                           ;'OTG_HS_GRSTCTL.AHBIDL`               EQU 0x40040010,        4, base=16,    bitRange=31-31
11107                           
11108                           ;'OTG_HS_GINTSTS`                      EQU 0x40040014,        4, base=16
11109                           ;'OTG_HS_GINTSTS.CMOD`                 EQU 0x40040014,        4, base=16,    bitRange=0-0
11110                           ;'OTG_HS_GINTSTS.MMIS`                 EQU 0x40040014,        4, base=16,    bitRange=1-1
11111                           ;'OTG_HS_GINTSTS.OTGINT`               EQU 0x40040014,        4, base=16,    bitRange=2-2
11112                           ;'OTG_HS_GINTSTS.SOF`                  EQU 0x40040014,        4, base=16,    bitRange=3-3
11113                           ;'OTG_HS_GINTSTS.RXFLVL`               EQU 0x40040014,        4, base=16,    bitRange=4-4
11114                           ;'OTG_HS_GINTSTS.GINAKEFF`             EQU 0x40040014,        4, base=16,    bitRange=6-6
11115                           ;'OTG_HS_GINTSTS.BOUTNAKEFF`           EQU 0x40040014,        4, base=16,    bitRange=7-7
11116                           ;'OTG_HS_GINTSTS.ESUSP`                EQU 0x40040014,        4, base=16,    bitRange=10-10
11117                           ;'OTG_HS_GINTSTS.USBSUSP`              EQU 0x40040014,        4, base=16,    bitRange=11-11
11118                           ;'OTG_HS_GINTSTS.USBRST`               EQU 0x40040014,        4, base=16,    bitRange=12-12
11119                           ;'OTG_HS_GINTSTS.ENUMDNE`              EQU 0x40040014,        4, base=16,    bitRange=13-13
11120                           ;'OTG_HS_GINTSTS.ISOODRP`              EQU 0x40040014,        4, base=16,    bitRange=14-14
11121                           ;'OTG_HS_GINTSTS.EOPF`                 EQU 0x40040014,        4, base=16,    bitRange=15-15
11122                           ;'OTG_HS_GINTSTS.IEPINT`               EQU 0x40040014,        4, base=16,    bitRange=18-18
11123                           ;'OTG_HS_GINTSTS.OEPINT`               EQU 0x40040014,        4, base=16,    bitRange=19-19
11124                           ;'OTG_HS_GINTSTS.IISOIXFR`             EQU 0x40040014,        4, base=16,    bitRange=20-20
11125                           ;'OTG_HS_GINTSTS.IPXFR`                EQU 0x40040014,        4, base=16,    bitRange=21-21
11126                           ;'OTG_HS_GINTSTS.DATAFSUSP`            EQU 0x40040014,        4, base=16,    bitRange=22-22
11127                           ;'OTG_HS_GINTSTS.HPRTINT`              EQU 0x40040014,        4, base=16,    bitRange=24-24
11128                           ;'OTG_HS_GINTSTS.HCINT`                EQU 0x40040014,        4, base=16,    bitRange=25-25
11129                           ;'OTG_HS_GINTSTS.PTXFE`                EQU 0x40040014,        4, base=16,    bitRange=26-26
11130                           ;'OTG_HS_GINTSTS.CIDSCHG`              EQU 0x40040014,        4, base=16,    bitRange=28-28
11131                           ;'OTG_HS_GINTSTS.DISCINT`              EQU 0x40040014,        4, base=16,    bitRange=29-29
11132                           ;'OTG_HS_GINTSTS.SRQINT`               EQU 0x40040014,        4, base=16,    bitRange=30-30
11133                           ;'OTG_HS_GINTSTS.WKUINT`               EQU 0x40040014,        4, base=16,    bitRange=31-31
11134                           
11135                           ;'OTG_HS_GINTMSK`                      EQU 0x40040018,        4, base=16
11136                           ;'OTG_HS_GINTMSK.MMISM`                EQU 0x40040018,        4, base=16,    bitRange=1-1
11137                           ;'OTG_HS_GINTMSK.OTGINT`               EQU 0x40040018,        4, base=16,    bitRange=2-2
11138                           ;'OTG_HS_GINTMSK.SOFM`                 EQU 0x40040018,        4, base=16,    bitRange=3-3
11139                           ;'OTG_HS_GINTMSK.RXFLVLM`              EQU 0x40040018,        4, base=16,    bitRange=4-4
11140                           ;'OTG_HS_GINTMSK.NPTXFEM`              EQU 0x40040018,        4, base=16,    bitRange=5-5
11141                           ;'OTG_HS_GINTMSK.GINAKEFFM`            EQU 0x40040018,        4, base=16,    bitRange=6-6
11142                           ;'OTG_HS_GINTMSK.GONAKEFFM`            EQU 0x40040018,        4, base=16,    bitRange=7-7
11143                           ;'OTG_HS_GINTMSK.ESUSPM`               EQU 0x40040018,        4, base=16,    bitRange=10-10
11144                           ;'OTG_HS_GINTMSK.USBSUSPM`             EQU 0x40040018,        4, base=16,    bitRange=11-11
11145                           ;'OTG_HS_GINTMSK.USBRST`               EQU 0x40040018,        4, base=16,    bitRange=12-12
11146                           ;'OTG_HS_GINTMSK.ENUMDNEM`             EQU 0x40040018,        4, base=16,    bitRange=13-13
11147                           ;'OTG_HS_GINTMSK.ISOODRPM`             EQU 0x40040018,        4, base=16,    bitRange=14-14
11148                           ;'OTG_HS_GINTMSK.EOPFM`                EQU 0x40040018,        4, base=16,    bitRange=15-15
11149                           ;'OTG_HS_GINTMSK.EPMISM`               EQU 0x40040018,        4, base=16,    bitRange=17-17
11150                           ;'OTG_HS_GINTMSK.IEPINT`               EQU 0x40040018,        4, base=16,    bitRange=18-18
11151                           ;'OTG_HS_GINTMSK.OEPINT`               EQU 0x40040018,        4, base=16,    bitRange=19-19
11152                           ;'OTG_HS_GINTMSK.IISOIXFRM`            EQU 0x40040018,        4, base=16,    bitRange=20-20
11153                           ;'OTG_HS_GINTMSK.IPXFRM`               EQU 0x40040018,        4, base=16,    bitRange=21-21
11154                           ;'OTG_HS_GINTMSK.FSUSPM`               EQU 0x40040018,        4, base=16,    bitRange=22-22
11155                           ;'OTG_HS_GINTMSK.PRTIM`                EQU 0x40040018,        4, base=16,    bitRange=24-24
11156                           ;'OTG_HS_GINTMSK.HCIM`                 EQU 0x40040018,        4, base=16,    bitRange=25-25
11157                           ;'OTG_HS_GINTMSK.PTXFEM`               EQU 0x40040018,        4, base=16,    bitRange=26-26
11158                           ;'OTG_HS_GINTMSK.CIDSCHGM`             EQU 0x40040018,        4, base=16,    bitRange=28-28
11159                           ;'OTG_HS_GINTMSK.DISCINT`              EQU 0x40040018,        4, base=16,    bitRange=29-29
11160                           ;'OTG_HS_GINTMSK.SRQIM`                EQU 0x40040018,        4, base=16,    bitRange=30-30
11161                           ;'OTG_HS_GINTMSK.WUIM`                 EQU 0x40040018,        4, base=16,    bitRange=31-31
11162                           
11163                           ;'OTG_HS_GRXSTSR`                      EQU 0x4004001C,        4, base=16
11164                           ;'OTG_HS_GRXSTSR.CHNUM`                EQU 0x4004001C,        4, base=16,    bitRange=0-3
11165                           ;'OTG_HS_GRXSTSR.BCNT`                 EQU 0x4004001C,        4, base=16,    bitRange=4-14
11166                           ;'OTG_HS_GRXSTSR.DPID`                 EQU 0x4004001C,        4, base=16,    bitRange=15-16
11167                           ;'OTG_HS_GRXSTSR.PKTSTS`               EQU 0x4004001C,        4, base=16,    bitRange=17-20
11168                           ;'OTG_HS_GRXSTSR.FRMNUM`               EQU 0x4004001C,        4, base=16,    bitRange=21-24
11169                           
11170                           ;'OTG_HS_GRXSTSP`                      EQU 0x40040020,        4, base=16
11171                           ;'OTG_HS_GRXSTSP.CHNUM`                EQU 0x40040020,        4, base=16,    bitRange=0-3
11172                           ;'OTG_HS_GRXSTSP.BCNT`                 EQU 0x40040020,        4, base=16,    bitRange=4-14
11173                           ;'OTG_HS_GRXSTSP.DPID`                 EQU 0x40040020,        4, base=16,    bitRange=15-16
11174                           ;'OTG_HS_GRXSTSP.PKTSTS`               EQU 0x40040020,        4, base=16,    bitRange=17-20
11175                           ;'OTG_HS_GRXSTSP.FRMNUM`               EQU 0x40040020,        4, base=16,    bitRange=21-24
11176                           
11177                           ;'OTG_HS_GRXFSIZ`                      EQU 0x40040024,        4, base=16
11178                           ;'OTG_HS_GRXFSIZ.RXFD`                 EQU 0x40040024,        4, base=16,    bitRange=0-15
11179                           
11180                           ;'OTG_HS_GNPTXFSIZ`                    EQU 0x40040028,        4, base=16
11181                           ;'OTG_HS_GNPTXFSIZ.NPTXFSA`            EQU 0x40040028,        4, base=16,    bitRange=0-15
11182                           ;'OTG_HS_GNPTXFSIZ.NPTXFD`             EQU 0x40040028,        4, base=16,    bitRange=16-31
11183                           
11184                           ;'OTG_HS_TX0FSIZ`                      EQU 0x40040028,        4, base=16
11185                           ;'OTG_HS_TX0FSIZ.TX0FSA`               EQU 0x40040028,        4, base=16,    bitRange=0-15
11186                           ;'OTG_HS_TX0FSIZ.TX0FD`                EQU 0x40040028,        4, base=16,    bitRange=16-31
11187                           
11188                           ;'OTG_HS_GNPTXSTS`                     EQU 0x4004002C,        4, base=16
11189                           ;'OTG_HS_GNPTXSTS.NPTXFSAV`            EQU 0x4004002C,        4, base=16,    bitRange=0-15
11190                           ;'OTG_HS_GNPTXSTS.NPTQXSAV`            EQU 0x4004002C,        4, base=16,    bitRange=16-23
11191                           ;'OTG_HS_GNPTXSTS.NPTXQTOP`            EQU 0x4004002C,        4, base=16,    bitRange=24-30
11192                           
11193                           ;'OTG_HS_GI2CCTL`                      EQU 0x40040030,        4, base=16
11194                           ;'OTG_HS_GI2CCTL.RWDATA`               EQU 0x40040030,        4, base=16,    bitRange=0-7
11195                           ;'OTG_HS_GI2CCTL.REGADDR`              EQU 0x40040030,        4, base=16,    bitRange=8-15
11196                           ;'OTG_HS_GI2CCTL.ADDR`                 EQU 0x40040030,        4, base=16,    bitRange=16-22
11197                           ;'OTG_HS_GI2CCTL.I2CEN`                EQU 0x40040030,        4, base=16,    bitRange=23-23
11198                           ;'OTG_HS_GI2CCTL.ACK`                  EQU 0x40040030,        4, base=16,    bitRange=24-24
11199                           ;'OTG_HS_GI2CCTL.I2CDEVADR`            EQU 0x40040030,        4, base=16,    bitRange=26-27
11200                           ;'OTG_HS_GI2CCTL.I2CDATSE0`            EQU 0x40040030,        4, base=16,    bitRange=28-28
11201                           ;'OTG_HS_GI2CCTL.RW`                   EQU 0x40040030,        4, base=16,    bitRange=30-30
11202                           ;'OTG_HS_GI2CCTL.BSYDNE`               EQU 0x40040030,        4, base=16,    bitRange=31-31
11203                           
11204                           ;'OTG_HS_GCCFG`                        EQU 0x40040038,        4, base=16
11205                           ;'OTG_HS_GCCFG.PWRDWN`                 EQU 0x40040038,        4, base=16,    bitRange=16-16
11206                           ;'OTG_HS_GCCFG.I2CPADEN`               EQU 0x40040038,        4, base=16,    bitRange=17-17
11207                           ;'OTG_HS_GCCFG.VBUSASEN`               EQU 0x40040038,        4, base=16,    bitRange=18-18
11208                           ;'OTG_HS_GCCFG.VBUSBSEN`               EQU 0x40040038,        4, base=16,    bitRange=19-19
11209                           ;'OTG_HS_GCCFG.SOFOUTEN`               EQU 0x40040038,        4, base=16,    bitRange=20-20
11210                           
11211                           ;'OTG_HS_CID`                          EQU 0x4004003C,        4, base=16
11212                           
11213                           ;'OTG_HS_HPTXFSIZ`                     EQU 0x40040100,        4, base=16
11214                           ;'OTG_HS_HPTXFSIZ.PTXSA`               EQU 0x40040100,        4, base=16,    bitRange=0-15
11215                           ;'OTG_HS_HPTXFSIZ.PTXFD`               EQU 0x40040100,        4, base=16,    bitRange=16-31
11216                           
11217                           ;'OTG_HS_DIEPTXF1`                     EQU 0x40040104,        4, base=16
11218                           ;'OTG_HS_DIEPTXF1.INEPTXSA`            EQU 0x40040104,        4, base=16,    bitRange=0-15
11219                           ;'OTG_HS_DIEPTXF1.INEPTXFD`            EQU 0x40040104,        4, base=16,    bitRange=16-31
11220                           
11221                           ;'OTG_HS_DIEPTXF2`                     EQU 0x40040108,        4, base=16
11222                           ;'OTG_HS_DIEPTXF2.INEPTXSA`            EQU 0x40040108,        4, base=16,    bitRange=0-15
11223                           ;'OTG_HS_DIEPTXF2.INEPTXFD`            EQU 0x40040108,        4, base=16,    bitRange=16-31
11224                           
11225                           ;'OTG_HS_DIEPTXF3`                     EQU 0x4004010C,        4, base=16
11226                           ;'OTG_HS_DIEPTXF3.INEPTXSA`            EQU 0x4004010C,        4, base=16,    bitRange=0-15
11227                           ;'OTG_HS_DIEPTXF3.INEPTXFD`            EQU 0x4004010C,        4, base=16,    bitRange=16-31
11228                           
11229                           ;'OTG_HS_DIEPTXF4`                     EQU 0x40040110,        4, base=16
11230                           ;'OTG_HS_DIEPTXF4.INEPTXSA`            EQU 0x40040110,        4, base=16,    bitRange=0-15
11231                           ;'OTG_HS_DIEPTXF4.INEPTXFD`            EQU 0x40040110,        4, base=16,    bitRange=16-31
11232                           
11233                           ;'OTG_HS_HCFG`                         EQU 0x40040400,        4, base=16
11234                           ;'OTG_HS_HCFG.FSLSPCS`                 EQU 0x40040400,        4, base=16,    bitRange=0-1
11235                           ;'OTG_HS_HCFG.FSLSS`                   EQU 0x40040400,        4, base=16,    bitRange=2-2
11236                           
11237                           ;'OTG_HS_HFIR`                         EQU 0x40040404,        4, base=16
11238                           ;'OTG_HS_HFIR.FRIVL`                   EQU 0x40040404,        4, base=16,    bitRange=0-15
11239                           
11240                           ;'OTG_HS_HFNUM`                        EQU 0x40040408,        4, base=16
11241                           ;'OTG_HS_HFNUM.FRNUM`                  EQU 0x40040408,        4, base=16,    bitRange=0-15
11242                           ;'OTG_HS_HFNUM.FTREM`                  EQU 0x40040408,        4, base=16,    bitRange=16-31
11243                           
11244                           ;'OTG_HS_HPTXSTS`                      EQU 0x40040410,        4, base=16
11245                           ;'OTG_HS_HPTXSTS.PTXFSAVL`             EQU 0x40040410,        4, base=16,    bitRange=0-15
11246                           ;'OTG_HS_HPTXSTS.PTXQSAV`              EQU 0x40040410,        4, base=16,    bitRange=16-23
11247                           ;'OTG_HS_HPTXSTS.PTXQTOP`              EQU 0x40040410,        4, base=16,    bitRange=24-31
11248                           
11249                           ;'OTG_HS_HAINT`                        EQU 0x40040414,        4, base=16
11250                           ;'OTG_HS_HAINT.HAINT0`                 EQU 0x40040414,        4, base=16,    bitRange=0-0
11251                           ;'OTG_HS_HAINT.HAINT1`                 EQU 0x40040414,        4, base=16,    bitRange=1-1
11252                           ;'OTG_HS_HAINT.HAINT2`                 EQU 0x40040414,        4, base=16,    bitRange=2-2
11253                           ;'OTG_HS_HAINT.HAINT3`                 EQU 0x40040414,        4, base=16,    bitRange=3-3
11254                           ;'OTG_HS_HAINT.HAINT4`                 EQU 0x40040414,        4, base=16,    bitRange=4-4
11255                           ;'OTG_HS_HAINT.HAINT5`                 EQU 0x40040414,        4, base=16,    bitRange=5-5
11256                           ;'OTG_HS_HAINT.HAINT6`                 EQU 0x40040414,        4, base=16,    bitRange=6-6
11257                           ;'OTG_HS_HAINT.HAINT7`                 EQU 0x40040414,        4, base=16,    bitRange=7-7
11258                           ;'OTG_HS_HAINT.HAINT8`                 EQU 0x40040414,        4, base=16,    bitRange=8-8
11259                           ;'OTG_HS_HAINT.HAINT9`                 EQU 0x40040414,        4, base=16,    bitRange=9-9
11260                           ;'OTG_HS_HAINT.HAINT10`                EQU 0x40040414,        4, base=16,    bitRange=10-10
11261                           ;'OTG_HS_HAINT.HAINT11`                EQU 0x40040414,        4, base=16,    bitRange=11-11
11262                           ;'OTG_HS_HAINT.HAINT12`                EQU 0x40040414,        4, base=16,    bitRange=12-12
11263                           ;'OTG_HS_HAINT.HAINT13`                EQU 0x40040414,        4, base=16,    bitRange=13-13
11264                           ;'OTG_HS_HAINT.HAINT14`                EQU 0x40040414,        4, base=16,    bitRange=14-14
11265                           ;'OTG_HS_HAINT.HAINT15`                EQU 0x40040414,        4, base=16,    bitRange=15-15
11266                           
11267                           ;'OTG_HS_HAINTMSK`                     EQU 0x40040418,        4, base=16
11268                           ;'OTG_HS_HAINTMSK.HAINTM0`             EQU 0x40040418,        4, base=16,    bitRange=0-0
11269                           ;'OTG_HS_HAINTMSK.HAINTM1`             EQU 0x40040418,        4, base=16,    bitRange=1-1
11270                           ;'OTG_HS_HAINTMSK.HAINTM2`             EQU 0x40040418,        4, base=16,    bitRange=2-2
11271                           ;'OTG_HS_HAINTMSK.HAINTM3`             EQU 0x40040418,        4, base=16,    bitRange=3-3
11272                           ;'OTG_HS_HAINTMSK.HAINTM4`             EQU 0x40040418,        4, base=16,    bitRange=4-4
11273                           ;'OTG_HS_HAINTMSK.HAINTM5`             EQU 0x40040418,        4, base=16,    bitRange=5-5
11274                           ;'OTG_HS_HAINTMSK.HAINTM6`             EQU 0x40040418,        4, base=16,    bitRange=6-6
11275                           ;'OTG_HS_HAINTMSK.HAINTM7`             EQU 0x40040418,        4, base=16,    bitRange=7-7
11276                           ;'OTG_HS_HAINTMSK.HAINTM8`             EQU 0x40040418,        4, base=16,    bitRange=8-8
11277                           ;'OTG_HS_HAINTMSK.HAINTM9`             EQU 0x40040418,        4, base=16,    bitRange=9-9
11278                           ;'OTG_HS_HAINTMSK.HAINTM10`            EQU 0x40040418,        4, base=16,    bitRange=10-10
11279                           ;'OTG_HS_HAINTMSK.HAINTM11`            EQU 0x40040418,        4, base=16,    bitRange=11-11
11280                           ;'OTG_HS_HAINTMSK.HAINTM12`            EQU 0x40040418,        4, base=16,    bitRange=12-12
11281                           ;'OTG_HS_HAINTMSK.HAINTM13`            EQU 0x40040418,        4, base=16,    bitRange=13-13
11282                           ;'OTG_HS_HAINTMSK.HAINTM14`            EQU 0x40040418,        4, base=16,    bitRange=14-14
11283                           ;'OTG_HS_HAINTMSK.HAINTM15`            EQU 0x40040418,        4, base=16,    bitRange=15-15
11284                           
11285                           ;'OTG_HS_HPRT`                         EQU 0x40040440,        4, base=16
11286                           ;'OTG_HS_HPRT.PCSTS`                   EQU 0x40040440,        4, base=16,    bitRange=0-0
11287                           ;'OTG_HS_HPRT.PCDET`                   EQU 0x40040440,        4, base=16,    bitRange=1-1
11288                           ;'OTG_HS_HPRT.PENA`                    EQU 0x40040440,        4, base=16,    bitRange=2-2
11289                           ;'OTG_HS_HPRT.PENCHNG`                 EQU 0x40040440,        4, base=16,    bitRange=3-3
11290                           ;'OTG_HS_HPRT.POCA`                    EQU 0x40040440,        4, base=16,    bitRange=4-4
11291                           ;'OTG_HS_HPRT.POCCHNG`                 EQU 0x40040440,        4, base=16,    bitRange=5-5
11292                           ;'OTG_HS_HPRT.PRES`                    EQU 0x40040440,        4, base=16,    bitRange=6-6
11293                           ;'OTG_HS_HPRT.PSUSP`                   EQU 0x40040440,        4, base=16,    bitRange=7-7
11294                           ;'OTG_HS_HPRT.PRST`                    EQU 0x40040440,        4, base=16,    bitRange=8-8
11295                           ;'OTG_HS_HPRT.PLSTS`                   EQU 0x40040440,        4, base=16,    bitRange=10-11
11296                           ;'OTG_HS_HPRT.PPWR`                    EQU 0x40040440,        4, base=16,    bitRange=12-12
11297                           ;'OTG_HS_HPRT.PTCTL`                   EQU 0x40040440,        4, base=16,    bitRange=13-16
11298                           ;'OTG_HS_HPRT.PSPD`                    EQU 0x40040440,        4, base=16,    bitRange=17-18
11299                           
11300                           ;'OTG_HS_HCCHAR0`                      EQU 0x40040500,        4, base=16
11301                           ;'OTG_HS_HCCHAR0.MPSIZ`                EQU 0x40040500,        4, base=16,    bitRange=0-10
11302                           ;'OTG_HS_HCCHAR0.EPNUM`                EQU 0x40040500,        4, base=16,    bitRange=11-14
11303                           ;'OTG_HS_HCCHAR0.EPDIR`                EQU 0x40040500,        4, base=16,    bitRange=15-15
11304                           ;'OTG_HS_HCCHAR0.LSDEV`                EQU 0x40040500,        4, base=16,    bitRange=17-17
11305                           ;'OTG_HS_HCCHAR0.EPTYP`                EQU 0x40040500,        4, base=16,    bitRange=18-19
11306                           ;'OTG_HS_HCCHAR0.MC`                   EQU 0x40040500,        4, base=16,    bitRange=20-21
11307                           ;'OTG_HS_HCCHAR0.DAD`                  EQU 0x40040500,        4, base=16,    bitRange=22-28
11308                           ;'OTG_HS_HCCHAR0.ODDFRM`               EQU 0x40040500,        4, base=16,    bitRange=29-29
11309                           ;'OTG_HS_HCCHAR0.CHDIS`                EQU 0x40040500,        4, base=16,    bitRange=30-30
11310                           ;'OTG_HS_HCCHAR0.CHENA`                EQU 0x40040500,        4, base=16,    bitRange=31-31
11311                           
11312                           ;'OTG_HS_HCSPLT0`                      EQU 0x40040504,        4, base=16
11313                           ;'OTG_HS_HCSPLT0.PRTADDR`              EQU 0x40040504,        4, base=16,    bitRange=0-6
11314                           ;'OTG_HS_HCSPLT0.HUBADDR`              EQU 0x40040504,        4, base=16,    bitRange=7-13
11315                           ;'OTG_HS_HCSPLT0.XACTPOS`              EQU 0x40040504,        4, base=16,    bitRange=14-15
11316                           ;'OTG_HS_HCSPLT0.COMPLSPLT`            EQU 0x40040504,        4, base=16,    bitRange=16-16
11317                           ;'OTG_HS_HCSPLT0.SPLITEN`              EQU 0x40040504,        4, base=16,    bitRange=31-31
11318                           
11319                           ;'OTG_HS_HCINT0`                       EQU 0x40040508,        4, base=16
11320                           ;'OTG_HS_HCINT0.XFRC`                  EQU 0x40040508,        4, base=16,    bitRange=0-0
11321                           ;'OTG_HS_HCINT0.CHH`                   EQU 0x40040508,        4, base=16,    bitRange=1-1
11322                           ;'OTG_HS_HCINT0.STALL`                 EQU 0x40040508,        4, base=16,    bitRange=3-3
11323                           ;'OTG_HS_HCINT0.NAK`                   EQU 0x40040508,        4, base=16,    bitRange=4-4
11324                           ;'OTG_HS_HCINT0.ACK`                   EQU 0x40040508,        4, base=16,    bitRange=5-5
11325                           ;'OTG_HS_HCINT0.NYET`                  EQU 0x40040508,        4, base=16,    bitRange=6-6
11326                           ;'OTG_HS_HCINT0.TXERR`                 EQU 0x40040508,        4, base=16,    bitRange=7-7
11327                           ;'OTG_HS_HCINT0.BBERR`                 EQU 0x40040508,        4, base=16,    bitRange=8-8
11328                           ;'OTG_HS_HCINT0.FRMOR`                 EQU 0x40040508,        4, base=16,    bitRange=9-9
11329                           ;'OTG_HS_HCINT0.DTERR`                 EQU 0x40040508,        4, base=16,    bitRange=10-10
11330                           
11331                           ;'OTG_HS_HCINTMSK0`                    EQU 0x4004050C,        4, base=16
11332                           ;'OTG_HS_HCINTMSK0.XFRCM`              EQU 0x4004050C,        4, base=16,    bitRange=0-0
11333                           ;'OTG_HS_HCINTMSK0.CHHM`               EQU 0x4004050C,        4, base=16,    bitRange=1-1
11334                           ;'OTG_HS_HCINTMSK0.AHBERR`             EQU 0x4004050C,        4, base=16,    bitRange=2-2
11335                           ;'OTG_HS_HCINTMSK0.STALLM`             EQU 0x4004050C,        4, base=16,    bitRange=3-3
11336                           ;'OTG_HS_HCINTMSK0.NAKM`               EQU 0x4004050C,        4, base=16,    bitRange=4-4
11337                           ;'OTG_HS_HCINTMSK0.ACKM`               EQU 0x4004050C,        4, base=16,    bitRange=5-5
11338                           ;'OTG_HS_HCINTMSK0.NYET`               EQU 0x4004050C,        4, base=16,    bitRange=6-6
11339                           ;'OTG_HS_HCINTMSK0.TXERRM`             EQU 0x4004050C,        4, base=16,    bitRange=7-7
11340                           ;'OTG_HS_HCINTMSK0.BBERRM`             EQU 0x4004050C,        4, base=16,    bitRange=8-8
11341                           ;'OTG_HS_HCINTMSK0.FRMORM`             EQU 0x4004050C,        4, base=16,    bitRange=9-9
11342                           ;'OTG_HS_HCINTMSK0.DTERRM`             EQU 0x4004050C,        4, base=16,    bitRange=10-10
11343                           
11344                           ;'OTG_HS_HCTSIZ0`                      EQU 0x40040510,        4, base=16
11345                           ;'OTG_HS_HCTSIZ0.XFRSIZ`               EQU 0x40040510,        4, base=16,    bitRange=0-18
11346                           ;'OTG_HS_HCTSIZ0.PKTCNT`               EQU 0x40040510,        4, base=16,    bitRange=19-28
11347                           ;'OTG_HS_HCTSIZ0.DPID`                 EQU 0x40040510,        4, base=16,    bitRange=29-30
11348                           
11349                           ;'OTG_HS_HCDMA0`                       EQU 0x40040514,        4, base=16
11350                           
11351                           ;'OTG_HS_HCCHAR1`                      EQU 0x40040520,        4, base=16
11352                           ;'OTG_HS_HCCHAR1.MPSIZ`                EQU 0x40040520,        4, base=16,    bitRange=0-10
11353                           ;'OTG_HS_HCCHAR1.EPNUM`                EQU 0x40040520,        4, base=16,    bitRange=11-14
11354                           ;'OTG_HS_HCCHAR1.EPDIR`                EQU 0x40040520,        4, base=16,    bitRange=15-15
11355                           ;'OTG_HS_HCCHAR1.LSDEV`                EQU 0x40040520,        4, base=16,    bitRange=17-17
11356                           ;'OTG_HS_HCCHAR1.EPTYP`                EQU 0x40040520,        4, base=16,    bitRange=18-19
11357                           ;'OTG_HS_HCCHAR1.MC`                   EQU 0x40040520,        4, base=16,    bitRange=20-21
11358                           ;'OTG_HS_HCCHAR1.DAD`                  EQU 0x40040520,        4, base=16,    bitRange=22-28
11359                           ;'OTG_HS_HCCHAR1.ODDFRM`               EQU 0x40040520,        4, base=16,    bitRange=29-29
11360                           ;'OTG_HS_HCCHAR1.CHDIS`                EQU 0x40040520,        4, base=16,    bitRange=30-30
11361                           ;'OTG_HS_HCCHAR1.CHENA`                EQU 0x40040520,        4, base=16,    bitRange=31-31
11362                           
11363                           ;'OTG_HS_HCSPLT1`                      EQU 0x40040524,        4, base=16
11364                           ;'OTG_HS_HCSPLT1.PRTADDR`              EQU 0x40040524,        4, base=16,    bitRange=0-6
11365                           ;'OTG_HS_HCSPLT1.HUBADDR`              EQU 0x40040524,        4, base=16,    bitRange=7-13
11366                           ;'OTG_HS_HCSPLT1.XACTPOS`              EQU 0x40040524,        4, base=16,    bitRange=14-15
11367                           ;'OTG_HS_HCSPLT1.COMPLSPLT`            EQU 0x40040524,        4, base=16,    bitRange=16-16
11368                           ;'OTG_HS_HCSPLT1.SPLITEN`              EQU 0x40040524,        4, base=16,    bitRange=31-31
11369                           
11370                           ;'OTG_HS_HCINT1`                       EQU 0x40040528,        4, base=16
11371                           ;'OTG_HS_HCINT1.XFRC`                  EQU 0x40040528,        4, base=16,    bitRange=0-0
11372                           ;'OTG_HS_HCINT1.CHH`                   EQU 0x40040528,        4, base=16,    bitRange=1-1
11373                           ;'OTG_HS_HCINT1.STALL`                 EQU 0x40040528,        4, base=16,    bitRange=3-3
11374                           ;'OTG_HS_HCINT1.NAK`                   EQU 0x40040528,        4, base=16,    bitRange=4-4
11375                           ;'OTG_HS_HCINT1.ACK`                   EQU 0x40040528,        4, base=16,    bitRange=5-5
11376                           ;'OTG_HS_HCINT1.NYET`                  EQU 0x40040528,        4, base=16,    bitRange=6-6
11377                           ;'OTG_HS_HCINT1.TXERR`                 EQU 0x40040528,        4, base=16,    bitRange=7-7
11378                           ;'OTG_HS_HCINT1.BBERR`                 EQU 0x40040528,        4, base=16,    bitRange=8-8
11379                           ;'OTG_HS_HCINT1.FRMOR`                 EQU 0x40040528,        4, base=16,    bitRange=9-9
11380                           ;'OTG_HS_HCINT1.DTERR`                 EQU 0x40040528,        4, base=16,    bitRange=10-10
11381                           
11382                           ;'OTG_HS_HCINTMSK1`                    EQU 0x4004052C,        4, base=16
11383                           ;'OTG_HS_HCINTMSK1.XFRCM`              EQU 0x4004052C,        4, base=16,    bitRange=0-0
11384                           ;'OTG_HS_HCINTMSK1.CHHM`               EQU 0x4004052C,        4, base=16,    bitRange=1-1
11385                           ;'OTG_HS_HCINTMSK1.AHBERR`             EQU 0x4004052C,        4, base=16,    bitRange=2-2
11386                           ;'OTG_HS_HCINTMSK1.STALLM`             EQU 0x4004052C,        4, base=16,    bitRange=3-3
11387                           ;'OTG_HS_HCINTMSK1.NAKM`               EQU 0x4004052C,        4, base=16,    bitRange=4-4
11388                           ;'OTG_HS_HCINTMSK1.ACKM`               EQU 0x4004052C,        4, base=16,    bitRange=5-5
11389                           ;'OTG_HS_HCINTMSK1.NYET`               EQU 0x4004052C,        4, base=16,    bitRange=6-6
11390                           ;'OTG_HS_HCINTMSK1.TXERRM`             EQU 0x4004052C,        4, base=16,    bitRange=7-7
11391                           ;'OTG_HS_HCINTMSK1.BBERRM`             EQU 0x4004052C,        4, base=16,    bitRange=8-8
11392                           ;'OTG_HS_HCINTMSK1.FRMORM`             EQU 0x4004052C,        4, base=16,    bitRange=9-9
11393                           ;'OTG_HS_HCINTMSK1.DTERRM`             EQU 0x4004052C,        4, base=16,    bitRange=10-10
11394                           
11395                           ;'OTG_HS_HCTSIZ1`                      EQU 0x40040530,        4, base=16
11396                           ;'OTG_HS_HCTSIZ1.XFRSIZ`               EQU 0x40040530,        4, base=16,    bitRange=0-18
11397                           ;'OTG_HS_HCTSIZ1.PKTCNT`               EQU 0x40040530,        4, base=16,    bitRange=19-28
11398                           ;'OTG_HS_HCTSIZ1.DPID`                 EQU 0x40040530,        4, base=16,    bitRange=29-30
11399                           
11400                           ;'OTG_HS_HCDMA1`                       EQU 0x40040534,        4, base=16
11401                           
11402                           ;'OTG_HS_HCCHAR2`                      EQU 0x40040540,        4, base=16
11403                           ;'OTG_HS_HCCHAR2.MPSIZ`                EQU 0x40040540,        4, base=16,    bitRange=0-10
11404                           ;'OTG_HS_HCCHAR2.EPNUM`                EQU 0x40040540,        4, base=16,    bitRange=11-14
11405                           ;'OTG_HS_HCCHAR2.EPDIR`                EQU 0x40040540,        4, base=16,    bitRange=15-15
11406                           ;'OTG_HS_HCCHAR2.LSDEV`                EQU 0x40040540,        4, base=16,    bitRange=17-17
11407                           ;'OTG_HS_HCCHAR2.EPTYP`                EQU 0x40040540,        4, base=16,    bitRange=18-19
11408                           ;'OTG_HS_HCCHAR2.MC`                   EQU 0x40040540,        4, base=16,    bitRange=20-21
11409                           ;'OTG_HS_HCCHAR2.DAD`                  EQU 0x40040540,        4, base=16,    bitRange=22-28
11410                           ;'OTG_HS_HCCHAR2.ODDFRM`               EQU 0x40040540,        4, base=16,    bitRange=29-29
11411                           ;'OTG_HS_HCCHAR2.CHDIS`                EQU 0x40040540,        4, base=16,    bitRange=30-30
11412                           ;'OTG_HS_HCCHAR2.CHENA`                EQU 0x40040540,        4, base=16,    bitRange=31-31
11413                           
11414                           ;'OTG_HS_HCSPLT2`                      EQU 0x40040544,        4, base=16
11415                           ;'OTG_HS_HCSPLT2.PRTADDR`              EQU 0x40040544,        4, base=16,    bitRange=0-6
11416                           ;'OTG_HS_HCSPLT2.HUBADDR`              EQU 0x40040544,        4, base=16,    bitRange=7-13
11417                           ;'OTG_HS_HCSPLT2.XACTPOS`              EQU 0x40040544,        4, base=16,    bitRange=14-15
11418                           ;'OTG_HS_HCSPLT2.COMPLSPLT`            EQU 0x40040544,        4, base=16,    bitRange=16-16
11419                           ;'OTG_HS_HCSPLT2.SPLITEN`              EQU 0x40040544,        4, base=16,    bitRange=31-31
11420                           
11421                           ;'OTG_HS_HCINT2`                       EQU 0x40040548,        4, base=16
11422                           ;'OTG_HS_HCINT2.XFRC`                  EQU 0x40040548,        4, base=16,    bitRange=0-0
11423                           ;'OTG_HS_HCINT2.CHH`                   EQU 0x40040548,        4, base=16,    bitRange=1-1
11424                           ;'OTG_HS_HCINT2.STALL`                 EQU 0x40040548,        4, base=16,    bitRange=3-3
11425                           ;'OTG_HS_HCINT2.NAK`                   EQU 0x40040548,        4, base=16,    bitRange=4-4
11426                           ;'OTG_HS_HCINT2.ACK`                   EQU 0x40040548,        4, base=16,    bitRange=5-5
11427                           ;'OTG_HS_HCINT2.NYET`                  EQU 0x40040548,        4, base=16,    bitRange=6-6
11428                           ;'OTG_HS_HCINT2.TXERR`                 EQU 0x40040548,        4, base=16,    bitRange=7-7
11429                           ;'OTG_HS_HCINT2.BBERR`                 EQU 0x40040548,        4, base=16,    bitRange=8-8
11430                           ;'OTG_HS_HCINT2.FRMOR`                 EQU 0x40040548,        4, base=16,    bitRange=9-9
11431                           ;'OTG_HS_HCINT2.DTERR`                 EQU 0x40040548,        4, base=16,    bitRange=10-10
11432                           
11433                           ;'OTG_HS_HCINTMSK2`                    EQU 0x4004054C,        4, base=16
11434                           ;'OTG_HS_HCINTMSK2.XFRCM`              EQU 0x4004054C,        4, base=16,    bitRange=0-0
11435                           ;'OTG_HS_HCINTMSK2.CHHM`               EQU 0x4004054C,        4, base=16,    bitRange=1-1
11436                           ;'OTG_HS_HCINTMSK2.AHBERR`             EQU 0x4004054C,        4, base=16,    bitRange=2-2
11437                           ;'OTG_HS_HCINTMSK2.STALLM`             EQU 0x4004054C,        4, base=16,    bitRange=3-3
11438                           ;'OTG_HS_HCINTMSK2.NAKM`               EQU 0x4004054C,        4, base=16,    bitRange=4-4
11439                           ;'OTG_HS_HCINTMSK2.ACKM`               EQU 0x4004054C,        4, base=16,    bitRange=5-5
11440                           ;'OTG_HS_HCINTMSK2.NYET`               EQU 0x4004054C,        4, base=16,    bitRange=6-6
11441                           ;'OTG_HS_HCINTMSK2.TXERRM`             EQU 0x4004054C,        4, base=16,    bitRange=7-7
11442                           ;'OTG_HS_HCINTMSK2.BBERRM`             EQU 0x4004054C,        4, base=16,    bitRange=8-8
11443                           ;'OTG_HS_HCINTMSK2.FRMORM`             EQU 0x4004054C,        4, base=16,    bitRange=9-9
11444                           ;'OTG_HS_HCINTMSK2.DTERRM`             EQU 0x4004054C,        4, base=16,    bitRange=10-10
11445                           
11446                           ;'OTG_HS_HCTSIZ2`                      EQU 0x40040550,        4, base=16
11447                           ;'OTG_HS_HCTSIZ2.XFRSIZ`               EQU 0x40040550,        4, base=16,    bitRange=0-18
11448                           ;'OTG_HS_HCTSIZ2.PKTCNT`               EQU 0x40040550,        4, base=16,    bitRange=19-28
11449                           ;'OTG_HS_HCTSIZ2.DPID`                 EQU 0x40040550,        4, base=16,    bitRange=29-30
11450                           
11451                           ;'OTG_HS_HCDMA2`                       EQU 0x40040554,        4, base=16
11452                           
11453                           ;'OTG_HS_HCCHAR3`                      EQU 0x40040560,        4, base=16
11454                           ;'OTG_HS_HCCHAR3.MPSIZ`                EQU 0x40040560,        4, base=16,    bitRange=0-10
11455                           ;'OTG_HS_HCCHAR3.EPNUM`                EQU 0x40040560,        4, base=16,    bitRange=11-14
11456                           ;'OTG_HS_HCCHAR3.EPDIR`                EQU 0x40040560,        4, base=16,    bitRange=15-15
11457                           ;'OTG_HS_HCCHAR3.LSDEV`                EQU 0x40040560,        4, base=16,    bitRange=17-17
11458                           ;'OTG_HS_HCCHAR3.EPTYP`                EQU 0x40040560,        4, base=16,    bitRange=18-19
11459                           ;'OTG_HS_HCCHAR3.MC`                   EQU 0x40040560,        4, base=16,    bitRange=20-21
11460                           ;'OTG_HS_HCCHAR3.DAD`                  EQU 0x40040560,        4, base=16,    bitRange=22-28
11461                           ;'OTG_HS_HCCHAR3.ODDFRM`               EQU 0x40040560,        4, base=16,    bitRange=29-29
11462                           ;'OTG_HS_HCCHAR3.CHDIS`                EQU 0x40040560,        4, base=16,    bitRange=30-30
11463                           ;'OTG_HS_HCCHAR3.CHENA`                EQU 0x40040560,        4, base=16,    bitRange=31-31
11464                           
11465                           ;'OTG_HS_HCSPLT3`                      EQU 0x40040564,        4, base=16
11466                           ;'OTG_HS_HCSPLT3.PRTADDR`              EQU 0x40040564,        4, base=16,    bitRange=0-6
11467                           ;'OTG_HS_HCSPLT3.HUBADDR`              EQU 0x40040564,        4, base=16,    bitRange=7-13
11468                           ;'OTG_HS_HCSPLT3.XACTPOS`              EQU 0x40040564,        4, base=16,    bitRange=14-15
11469                           ;'OTG_HS_HCSPLT3.COMPLSPLT`            EQU 0x40040564,        4, base=16,    bitRange=16-16
11470                           ;'OTG_HS_HCSPLT3.SPLITEN`              EQU 0x40040564,        4, base=16,    bitRange=31-31
11471                           
11472                           ;'OTG_HS_HCINT3`                       EQU 0x40040568,        4, base=16
11473                           ;'OTG_HS_HCINT3.XFRC`                  EQU 0x40040568,        4, base=16,    bitRange=0-0
11474                           ;'OTG_HS_HCINT3.CHH`                   EQU 0x40040568,        4, base=16,    bitRange=1-1
11475                           ;'OTG_HS_HCINT3.STALL`                 EQU 0x40040568,        4, base=16,    bitRange=3-3
11476                           ;'OTG_HS_HCINT3.NAK`                   EQU 0x40040568,        4, base=16,    bitRange=4-4
11477                           ;'OTG_HS_HCINT3.ACK`                   EQU 0x40040568,        4, base=16,    bitRange=5-5
11478                           ;'OTG_HS_HCINT3.NYET`                  EQU 0x40040568,        4, base=16,    bitRange=6-6
11479                           ;'OTG_HS_HCINT3.TXERR`                 EQU 0x40040568,        4, base=16,    bitRange=7-7
11480                           ;'OTG_HS_HCINT3.BBERR`                 EQU 0x40040568,        4, base=16,    bitRange=8-8
11481                           ;'OTG_HS_HCINT3.FRMOR`                 EQU 0x40040568,        4, base=16,    bitRange=9-9
11482                           ;'OTG_HS_HCINT3.DTERR`                 EQU 0x40040568,        4, base=16,    bitRange=10-10
11483                           
11484                           ;'OTG_HS_HCINTMSK3`                    EQU 0x4004056C,        4, base=16
11485                           ;'OTG_HS_HCINTMSK3.XFRCM`              EQU 0x4004056C,        4, base=16,    bitRange=0-0
11486                           ;'OTG_HS_HCINTMSK3.CHHM`               EQU 0x4004056C,        4, base=16,    bitRange=1-1
11487                           ;'OTG_HS_HCINTMSK3.AHBERR`             EQU 0x4004056C,        4, base=16,    bitRange=2-2
11488                           ;'OTG_HS_HCINTMSK3.STALLM`             EQU 0x4004056C,        4, base=16,    bitRange=3-3
11489                           ;'OTG_HS_HCINTMSK3.NAKM`               EQU 0x4004056C,        4, base=16,    bitRange=4-4
11490                           ;'OTG_HS_HCINTMSK3.ACKM`               EQU 0x4004056C,        4, base=16,    bitRange=5-5
11491                           ;'OTG_HS_HCINTMSK3.NYET`               EQU 0x4004056C,        4, base=16,    bitRange=6-6
11492                           ;'OTG_HS_HCINTMSK3.TXERRM`             EQU 0x4004056C,        4, base=16,    bitRange=7-7
11493                           ;'OTG_HS_HCINTMSK3.BBERRM`             EQU 0x4004056C,        4, base=16,    bitRange=8-8
11494                           ;'OTG_HS_HCINTMSK3.FRMORM`             EQU 0x4004056C,        4, base=16,    bitRange=9-9
11495                           ;'OTG_HS_HCINTMSK3.DTERRM`             EQU 0x4004056C,        4, base=16,    bitRange=10-10
11496                           
11497                           ;'OTG_HS_HCTSIZ3`                      EQU 0x40040570,        4, base=16
11498                           ;'OTG_HS_HCTSIZ3.XFRSIZ`               EQU 0x40040570,        4, base=16,    bitRange=0-18
11499                           ;'OTG_HS_HCTSIZ3.PKTCNT`               EQU 0x40040570,        4, base=16,    bitRange=19-28
11500                           ;'OTG_HS_HCTSIZ3.DPID`                 EQU 0x40040570,        4, base=16,    bitRange=29-30
11501                           
11502                           ;'OTG_HS_HCDMA3`                       EQU 0x40040574,        4, base=16
11503                           
11504                           ;'OTG_HS_HCCHAR4`                      EQU 0x40040580,        4, base=16
11505                           ;'OTG_HS_HCCHAR4.MPSIZ`                EQU 0x40040580,        4, base=16,    bitRange=0-10
11506                           ;'OTG_HS_HCCHAR4.EPNUM`                EQU 0x40040580,        4, base=16,    bitRange=11-14
11507                           ;'OTG_HS_HCCHAR4.EPDIR`                EQU 0x40040580,        4, base=16,    bitRange=15-15
11508                           ;'OTG_HS_HCCHAR4.LSDEV`                EQU 0x40040580,        4, base=16,    bitRange=17-17
11509                           ;'OTG_HS_HCCHAR4.EPTYP`                EQU 0x40040580,        4, base=16,    bitRange=18-19
11510                           ;'OTG_HS_HCCHAR4.MC`                   EQU 0x40040580,        4, base=16,    bitRange=20-21
11511                           ;'OTG_HS_HCCHAR4.DAD`                  EQU 0x40040580,        4, base=16,    bitRange=22-28
11512                           ;'OTG_HS_HCCHAR4.ODDFRM`               EQU 0x40040580,        4, base=16,    bitRange=29-29
11513                           ;'OTG_HS_HCCHAR4.CHDIS`                EQU 0x40040580,        4, base=16,    bitRange=30-30
11514                           ;'OTG_HS_HCCHAR4.CHENA`                EQU 0x40040580,        4, base=16,    bitRange=31-31
11515                           
11516                           ;'OTG_HS_HCSPLT4`                      EQU 0x40040584,        4, base=16
11517                           ;'OTG_HS_HCSPLT4.PRTADDR`              EQU 0x40040584,        4, base=16,    bitRange=0-6
11518                           ;'OTG_HS_HCSPLT4.HUBADDR`              EQU 0x40040584,        4, base=16,    bitRange=7-13
11519                           ;'OTG_HS_HCSPLT4.XACTPOS`              EQU 0x40040584,        4, base=16,    bitRange=14-15
11520                           ;'OTG_HS_HCSPLT4.COMPLSPLT`            EQU 0x40040584,        4, base=16,    bitRange=16-16
11521                           ;'OTG_HS_HCSPLT4.SPLITEN`              EQU 0x40040584,        4, base=16,    bitRange=31-31
11522                           
11523                           ;'OTG_HS_HCINT4`                       EQU 0x40040588,        4, base=16
11524                           ;'OTG_HS_HCINT4.XFRC`                  EQU 0x40040588,        4, base=16,    bitRange=0-0
11525                           ;'OTG_HS_HCINT4.CHH`                   EQU 0x40040588,        4, base=16,    bitRange=1-1
11526                           ;'OTG_HS_HCINT4.STALL`                 EQU 0x40040588,        4, base=16,    bitRange=3-3
11527                           ;'OTG_HS_HCINT4.NAK`                   EQU 0x40040588,        4, base=16,    bitRange=4-4
11528                           ;'OTG_HS_HCINT4.ACK`                   EQU 0x40040588,        4, base=16,    bitRange=5-5
11529                           ;'OTG_HS_HCINT4.NYET`                  EQU 0x40040588,        4, base=16,    bitRange=6-6
11530                           ;'OTG_HS_HCINT4.TXERR`                 EQU 0x40040588,        4, base=16,    bitRange=7-7
11531                           ;'OTG_HS_HCINT4.BBERR`                 EQU 0x40040588,        4, base=16,    bitRange=8-8
11532                           ;'OTG_HS_HCINT4.FRMOR`                 EQU 0x40040588,        4, base=16,    bitRange=9-9
11533                           ;'OTG_HS_HCINT4.DTERR`                 EQU 0x40040588,        4, base=16,    bitRange=10-10
11534                           
11535                           ;'OTG_HS_HCINTMSK4`                    EQU 0x4004058C,        4, base=16
11536                           ;'OTG_HS_HCINTMSK4.XFRCM`              EQU 0x4004058C,        4, base=16,    bitRange=0-0
11537                           ;'OTG_HS_HCINTMSK4.CHHM`               EQU 0x4004058C,        4, base=16,    bitRange=1-1
11538                           ;'OTG_HS_HCINTMSK4.AHBERR`             EQU 0x4004058C,        4, base=16,    bitRange=2-2
11539                           ;'OTG_HS_HCINTMSK4.STALLM`             EQU 0x4004058C,        4, base=16,    bitRange=3-3
11540                           ;'OTG_HS_HCINTMSK4.NAKM`               EQU 0x4004058C,        4, base=16,    bitRange=4-4
11541                           ;'OTG_HS_HCINTMSK4.ACKM`               EQU 0x4004058C,        4, base=16,    bitRange=5-5
11542                           ;'OTG_HS_HCINTMSK4.NYET`               EQU 0x4004058C,        4, base=16,    bitRange=6-6
11543                           ;'OTG_HS_HCINTMSK4.TXERRM`             EQU 0x4004058C,        4, base=16,    bitRange=7-7
11544                           ;'OTG_HS_HCINTMSK4.BBERRM`             EQU 0x4004058C,        4, base=16,    bitRange=8-8
11545                           ;'OTG_HS_HCINTMSK4.FRMORM`             EQU 0x4004058C,        4, base=16,    bitRange=9-9
11546                           ;'OTG_HS_HCINTMSK4.DTERRM`             EQU 0x4004058C,        4, base=16,    bitRange=10-10
11547                           
11548                           ;'OTG_HS_HCTSIZ4`                      EQU 0x40040590,        4, base=16
11549                           ;'OTG_HS_HCTSIZ4.XFRSIZ`               EQU 0x40040590,        4, base=16,    bitRange=0-18
11550                           ;'OTG_HS_HCTSIZ4.PKTCNT`               EQU 0x40040590,        4, base=16,    bitRange=19-28
11551                           ;'OTG_HS_HCTSIZ4.DPID`                 EQU 0x40040590,        4, base=16,    bitRange=29-30
11552                           
11553                           ;'OTG_HS_HCDMA4`                       EQU 0x40040594,        4, base=16
11554                           
11555                           ;'OTG_HS_HCCHAR5`                      EQU 0x400405A0,        4, base=16
11556                           ;'OTG_HS_HCCHAR5.MPSIZ`                EQU 0x400405A0,        4, base=16,    bitRange=0-10
11557                           ;'OTG_HS_HCCHAR5.EPNUM`                EQU 0x400405A0,        4, base=16,    bitRange=11-14
11558                           ;'OTG_HS_HCCHAR5.EPDIR`                EQU 0x400405A0,        4, base=16,    bitRange=15-15
11559                           ;'OTG_HS_HCCHAR5.LSDEV`                EQU 0x400405A0,        4, base=16,    bitRange=17-17
11560                           ;'OTG_HS_HCCHAR5.EPTYP`                EQU 0x400405A0,        4, base=16,    bitRange=18-19
11561                           ;'OTG_HS_HCCHAR5.MC`                   EQU 0x400405A0,        4, base=16,    bitRange=20-21
11562                           ;'OTG_HS_HCCHAR5.DAD`                  EQU 0x400405A0,        4, base=16,    bitRange=22-28
11563                           ;'OTG_HS_HCCHAR5.ODDFRM`               EQU 0x400405A0,        4, base=16,    bitRange=29-29
11564                           ;'OTG_HS_HCCHAR5.CHDIS`                EQU 0x400405A0,        4, base=16,    bitRange=30-30
11565                           ;'OTG_HS_HCCHAR5.CHENA`                EQU 0x400405A0,        4, base=16,    bitRange=31-31
11566                           
11567                           ;'OTG_HS_HCSPLT5`                      EQU 0x400405A4,        4, base=16
11568                           ;'OTG_HS_HCSPLT5.PRTADDR`              EQU 0x400405A4,        4, base=16,    bitRange=0-6
11569                           ;'OTG_HS_HCSPLT5.HUBADDR`              EQU 0x400405A4,        4, base=16,    bitRange=7-13
11570                           ;'OTG_HS_HCSPLT5.XACTPOS`              EQU 0x400405A4,        4, base=16,    bitRange=14-15
11571                           ;'OTG_HS_HCSPLT5.COMPLSPLT`            EQU 0x400405A4,        4, base=16,    bitRange=16-16
11572                           ;'OTG_HS_HCSPLT5.SPLITEN`              EQU 0x400405A4,        4, base=16,    bitRange=31-31
11573                           
11574                           ;'OTG_HS_HCINT5`                       EQU 0x400405A8,        4, base=16
11575                           ;'OTG_HS_HCINT5.XFRC`                  EQU 0x400405A8,        4, base=16,    bitRange=0-0
11576                           ;'OTG_HS_HCINT5.CHH`                   EQU 0x400405A8,        4, base=16,    bitRange=1-1
11577                           ;'OTG_HS_HCINT5.STALL`                 EQU 0x400405A8,        4, base=16,    bitRange=3-3
11578                           ;'OTG_HS_HCINT5.NAK`                   EQU 0x400405A8,        4, base=16,    bitRange=4-4
11579                           ;'OTG_HS_HCINT5.ACK`                   EQU 0x400405A8,        4, base=16,    bitRange=5-5
11580                           ;'OTG_HS_HCINT5.NYET`                  EQU 0x400405A8,        4, base=16,    bitRange=6-6
11581                           ;'OTG_HS_HCINT5.TXERR`                 EQU 0x400405A8,        4, base=16,    bitRange=7-7
11582                           ;'OTG_HS_HCINT5.BBERR`                 EQU 0x400405A8,        4, base=16,    bitRange=8-8
11583                           ;'OTG_HS_HCINT5.FRMOR`                 EQU 0x400405A8,        4, base=16,    bitRange=9-9
11584                           ;'OTG_HS_HCINT5.DTERR`                 EQU 0x400405A8,        4, base=16,    bitRange=10-10
11585                           
11586                           ;'OTG_HS_HCINTMSK5`                    EQU 0x400405AC,        4, base=16
11587                           ;'OTG_HS_HCINTMSK5.XFRCM`              EQU 0x400405AC,        4, base=16,    bitRange=0-0
11588                           ;'OTG_HS_HCINTMSK5.CHHM`               EQU 0x400405AC,        4, base=16,    bitRange=1-1
11589                           ;'OTG_HS_HCINTMSK5.AHBERR`             EQU 0x400405AC,        4, base=16,    bitRange=2-2
11590                           ;'OTG_HS_HCINTMSK5.STALLM`             EQU 0x400405AC,        4, base=16,    bitRange=3-3
11591                           ;'OTG_HS_HCINTMSK5.NAKM`               EQU 0x400405AC,        4, base=16,    bitRange=4-4
11592                           ;'OTG_HS_HCINTMSK5.ACKM`               EQU 0x400405AC,        4, base=16,    bitRange=5-5
11593                           ;'OTG_HS_HCINTMSK5.NYET`               EQU 0x400405AC,        4, base=16,    bitRange=6-6
11594                           ;'OTG_HS_HCINTMSK5.TXERRM`             EQU 0x400405AC,        4, base=16,    bitRange=7-7
11595                           ;'OTG_HS_HCINTMSK5.BBERRM`             EQU 0x400405AC,        4, base=16,    bitRange=8-8
11596                           ;'OTG_HS_HCINTMSK5.FRMORM`             EQU 0x400405AC,        4, base=16,    bitRange=9-9
11597                           ;'OTG_HS_HCINTMSK5.DTERRM`             EQU 0x400405AC,        4, base=16,    bitRange=10-10
11598                           
11599                           ;'OTG_HS_HCTSIZ5`                      EQU 0x400405B0,        4, base=16
11600                           ;'OTG_HS_HCTSIZ5.XFRSIZ`               EQU 0x400405B0,        4, base=16,    bitRange=0-18
11601                           ;'OTG_HS_HCTSIZ5.PKTCNT`               EQU 0x400405B0,        4, base=16,    bitRange=19-28
11602                           ;'OTG_HS_HCTSIZ5.DPID`                 EQU 0x400405B0,        4, base=16,    bitRange=29-30
11603                           
11604                           ;'OTG_HS_HCDMA5`                       EQU 0x400405B4,        4, base=16
11605                           
11606                           ;'OTG_HS_HCCHAR6`                      EQU 0x400405C0,        4, base=16
11607                           ;'OTG_HS_HCCHAR6.MPSIZ`                EQU 0x400405C0,        4, base=16,    bitRange=0-10
11608                           ;'OTG_HS_HCCHAR6.EPNUM`                EQU 0x400405C0,        4, base=16,    bitRange=11-14
11609                           ;'OTG_HS_HCCHAR6.EPDIR`                EQU 0x400405C0,        4, base=16,    bitRange=15-15
11610                           ;'OTG_HS_HCCHAR6.LSDEV`                EQU 0x400405C0,        4, base=16,    bitRange=17-17
11611                           ;'OTG_HS_HCCHAR6.EPTYP`                EQU 0x400405C0,        4, base=16,    bitRange=18-19
11612                           ;'OTG_HS_HCCHAR6.MC`                   EQU 0x400405C0,        4, base=16,    bitRange=20-21
11613                           ;'OTG_HS_HCCHAR6.DAD`                  EQU 0x400405C0,        4, base=16,    bitRange=22-28
11614                           ;'OTG_HS_HCCHAR6.ODDFRM`               EQU 0x400405C0,        4, base=16,    bitRange=29-29
11615                           ;'OTG_HS_HCCHAR6.CHDIS`                EQU 0x400405C0,        4, base=16,    bitRange=30-30
11616                           ;'OTG_HS_HCCHAR6.CHENA`                EQU 0x400405C0,        4, base=16,    bitRange=31-31
11617                           
11618                           ;'OTG_HS_HCSPLT6`                      EQU 0x400405C4,        4, base=16
11619                           ;'OTG_HS_HCSPLT6.PRTADDR`              EQU 0x400405C4,        4, base=16,    bitRange=0-6
11620                           ;'OTG_HS_HCSPLT6.HUBADDR`              EQU 0x400405C4,        4, base=16,    bitRange=7-13
11621                           ;'OTG_HS_HCSPLT6.XACTPOS`              EQU 0x400405C4,        4, base=16,    bitRange=14-15
11622                           ;'OTG_HS_HCSPLT6.COMPLSPLT`            EQU 0x400405C4,        4, base=16,    bitRange=16-16
11623                           ;'OTG_HS_HCSPLT6.SPLITEN`              EQU 0x400405C4,        4, base=16,    bitRange=31-31
11624                           
11625                           ;'OTG_HS_HCINT6`                       EQU 0x400405C8,        4, base=16
11626                           ;'OTG_HS_HCINT6.XFRC`                  EQU 0x400405C8,        4, base=16,    bitRange=0-0
11627                           ;'OTG_HS_HCINT6.CHH`                   EQU 0x400405C8,        4, base=16,    bitRange=1-1
11628                           ;'OTG_HS_HCINT6.STALL`                 EQU 0x400405C8,        4, base=16,    bitRange=3-3
11629                           ;'OTG_HS_HCINT6.NAK`                   EQU 0x400405C8,        4, base=16,    bitRange=4-4
11630                           ;'OTG_HS_HCINT6.ACK`                   EQU 0x400405C8,        4, base=16,    bitRange=5-5
11631                           ;'OTG_HS_HCINT6.NYET`                  EQU 0x400405C8,        4, base=16,    bitRange=6-6
11632                           ;'OTG_HS_HCINT6.TXERR`                 EQU 0x400405C8,        4, base=16,    bitRange=7-7
11633                           ;'OTG_HS_HCINT6.BBERR`                 EQU 0x400405C8,        4, base=16,    bitRange=8-8
11634                           ;'OTG_HS_HCINT6.FRMOR`                 EQU 0x400405C8,        4, base=16,    bitRange=9-9
11635                           ;'OTG_HS_HCINT6.DTERR`                 EQU 0x400405C8,        4, base=16,    bitRange=10-10
11636                           
11637                           ;'OTG_HS_HCINTMSK6`                    EQU 0x400405CC,        4, base=16
11638                           ;'OTG_HS_HCINTMSK6.XFRCM`              EQU 0x400405CC,        4, base=16,    bitRange=0-0
11639                           ;'OTG_HS_HCINTMSK6.CHHM`               EQU 0x400405CC,        4, base=16,    bitRange=1-1
11640                           ;'OTG_HS_HCINTMSK6.AHBERR`             EQU 0x400405CC,        4, base=16,    bitRange=2-2
11641                           ;'OTG_HS_HCINTMSK6.STALLM`             EQU 0x400405CC,        4, base=16,    bitRange=3-3
11642                           ;'OTG_HS_HCINTMSK6.NAKM`               EQU 0x400405CC,        4, base=16,    bitRange=4-4
11643                           ;'OTG_HS_HCINTMSK6.ACKM`               EQU 0x400405CC,        4, base=16,    bitRange=5-5
11644                           ;'OTG_HS_HCINTMSK6.NYET`               EQU 0x400405CC,        4, base=16,    bitRange=6-6
11645                           ;'OTG_HS_HCINTMSK6.TXERRM`             EQU 0x400405CC,        4, base=16,    bitRange=7-7
11646                           ;'OTG_HS_HCINTMSK6.BBERRM`             EQU 0x400405CC,        4, base=16,    bitRange=8-8
11647                           ;'OTG_HS_HCINTMSK6.FRMORM`             EQU 0x400405CC,        4, base=16,    bitRange=9-9
11648                           ;'OTG_HS_HCINTMSK6.DTERRM`             EQU 0x400405CC,        4, base=16,    bitRange=10-10
11649                           
11650                           ;'OTG_HS_HCTSIZ6`                      EQU 0x400405D0,        4, base=16
11651                           ;'OTG_HS_HCTSIZ6.XFRSIZ`               EQU 0x400405D0,        4, base=16,    bitRange=0-18
11652                           ;'OTG_HS_HCTSIZ6.PKTCNT`               EQU 0x400405D0,        4, base=16,    bitRange=19-28
11653                           ;'OTG_HS_HCTSIZ6.DPID`                 EQU 0x400405D0,        4, base=16,    bitRange=29-30
11654                           
11655                           ;'OTG_HS_HCDMA6`                       EQU 0x400405D4,        4, base=16
11656                           
11657                           ;'OTG_HS_HCCHAR7`                      EQU 0x400405E0,        4, base=16
11658                           ;'OTG_HS_HCCHAR7.MPSIZ`                EQU 0x400405E0,        4, base=16,    bitRange=0-10
11659                           ;'OTG_HS_HCCHAR7.EPNUM`                EQU 0x400405E0,        4, base=16,    bitRange=11-14
11660                           ;'OTG_HS_HCCHAR7.EPDIR`                EQU 0x400405E0,        4, base=16,    bitRange=15-15
11661                           ;'OTG_HS_HCCHAR7.LSDEV`                EQU 0x400405E0,        4, base=16,    bitRange=17-17
11662                           ;'OTG_HS_HCCHAR7.EPTYP`                EQU 0x400405E0,        4, base=16,    bitRange=18-19
11663                           ;'OTG_HS_HCCHAR7.MC`                   EQU 0x400405E0,        4, base=16,    bitRange=20-21
11664                           ;'OTG_HS_HCCHAR7.DAD`                  EQU 0x400405E0,        4, base=16,    bitRange=22-28
11665                           ;'OTG_HS_HCCHAR7.ODDFRM`               EQU 0x400405E0,        4, base=16,    bitRange=29-29
11666                           ;'OTG_HS_HCCHAR7.CHDIS`                EQU 0x400405E0,        4, base=16,    bitRange=30-30
11667                           ;'OTG_HS_HCCHAR7.CHENA`                EQU 0x400405E0,        4, base=16,    bitRange=31-31
11668                           
11669                           ;'OTG_HS_HCSPLT7`                      EQU 0x400405E4,        4, base=16
11670                           ;'OTG_HS_HCSPLT7.PRTADDR`              EQU 0x400405E4,        4, base=16,    bitRange=0-6
11671                           ;'OTG_HS_HCSPLT7.HUBADDR`              EQU 0x400405E4,        4, base=16,    bitRange=7-13
11672                           ;'OTG_HS_HCSPLT7.XACTPOS`              EQU 0x400405E4,        4, base=16,    bitRange=14-15
11673                           ;'OTG_HS_HCSPLT7.COMPLSPLT`            EQU 0x400405E4,        4, base=16,    bitRange=16-16
11674                           ;'OTG_HS_HCSPLT7.SPLITEN`              EQU 0x400405E4,        4, base=16,    bitRange=31-31
11675                           
11676                           ;'OTG_HS_HCINT7`                       EQU 0x400405E8,        4, base=16
11677                           ;'OTG_HS_HCINT7.XFRC`                  EQU 0x400405E8,        4, base=16,    bitRange=0-0
11678                           ;'OTG_HS_HCINT7.CHH`                   EQU 0x400405E8,        4, base=16,    bitRange=1-1
11679                           ;'OTG_HS_HCINT7.STALL`                 EQU 0x400405E8,        4, base=16,    bitRange=3-3
11680                           ;'OTG_HS_HCINT7.NAK`                   EQU 0x400405E8,        4, base=16,    bitRange=4-4
11681                           ;'OTG_HS_HCINT7.ACK`                   EQU 0x400405E8,        4, base=16,    bitRange=5-5
11682                           ;'OTG_HS_HCINT7.NYET`                  EQU 0x400405E8,        4, base=16,    bitRange=6-6
11683                           ;'OTG_HS_HCINT7.TXERR`                 EQU 0x400405E8,        4, base=16,    bitRange=7-7
11684                           ;'OTG_HS_HCINT7.BBERR`                 EQU 0x400405E8,        4, base=16,    bitRange=8-8
11685                           ;'OTG_HS_HCINT7.FRMOR`                 EQU 0x400405E8,        4, base=16,    bitRange=9-9
11686                           ;'OTG_HS_HCINT7.DTERR`                 EQU 0x400405E8,        4, base=16,    bitRange=10-10
11687                           
11688                           ;'OTG_HS_HCINTMSK7`                    EQU 0x400405EC,        4, base=16
11689                           ;'OTG_HS_HCINTMSK7.XFRCM`              EQU 0x400405EC,        4, base=16,    bitRange=0-0
11690                           ;'OTG_HS_HCINTMSK7.CHHM`               EQU 0x400405EC,        4, base=16,    bitRange=1-1
11691                           ;'OTG_HS_HCINTMSK7.AHBERR`             EQU 0x400405EC,        4, base=16,    bitRange=2-2
11692                           ;'OTG_HS_HCINTMSK7.STALLM`             EQU 0x400405EC,        4, base=16,    bitRange=3-3
11693                           ;'OTG_HS_HCINTMSK7.NAKM`               EQU 0x400405EC,        4, base=16,    bitRange=4-4
11694                           ;'OTG_HS_HCINTMSK7.ACKM`               EQU 0x400405EC,        4, base=16,    bitRange=5-5
11695                           ;'OTG_HS_HCINTMSK7.NYET`               EQU 0x400405EC,        4, base=16,    bitRange=6-6
11696                           ;'OTG_HS_HCINTMSK7.TXERRM`             EQU 0x400405EC,        4, base=16,    bitRange=7-7
11697                           ;'OTG_HS_HCINTMSK7.BBERRM`             EQU 0x400405EC,        4, base=16,    bitRange=8-8
11698                           ;'OTG_HS_HCINTMSK7.FRMORM`             EQU 0x400405EC,        4, base=16,    bitRange=9-9
11699                           ;'OTG_HS_HCINTMSK7.DTERRM`             EQU 0x400405EC,        4, base=16,    bitRange=10-10
11700                           
11701                           ;'OTG_HS_HCTSIZ7`                      EQU 0x400405F0,        4, base=16
11702                           ;'OTG_HS_HCTSIZ7.XFRSIZ`               EQU 0x400405F0,        4, base=16,    bitRange=0-18
11703                           ;'OTG_HS_HCTSIZ7.PKTCNT`               EQU 0x400405F0,        4, base=16,    bitRange=19-28
11704                           ;'OTG_HS_HCTSIZ7.DPID`                 EQU 0x400405F0,        4, base=16,    bitRange=29-30
11705                           
11706                           ;'OTG_HS_HCDMA7`                       EQU 0x400405F4,        4, base=16
11707                           
11708                           ;'OTG_HS_HCCHAR8`                      EQU 0x40040600,        4, base=16
11709                           ;'OTG_HS_HCCHAR8.MPSIZ`                EQU 0x40040600,        4, base=16,    bitRange=0-10
11710                           ;'OTG_HS_HCCHAR8.EPNUM`                EQU 0x40040600,        4, base=16,    bitRange=11-14
11711                           ;'OTG_HS_HCCHAR8.EPDIR`                EQU 0x40040600,        4, base=16,    bitRange=15-15
11712                           ;'OTG_HS_HCCHAR8.LSDEV`                EQU 0x40040600,        4, base=16,    bitRange=17-17
11713                           ;'OTG_HS_HCCHAR8.EPTYP`                EQU 0x40040600,        4, base=16,    bitRange=18-19
11714                           ;'OTG_HS_HCCHAR8.MC`                   EQU 0x40040600,        4, base=16,    bitRange=20-21
11715                           ;'OTG_HS_HCCHAR8.DAD`                  EQU 0x40040600,        4, base=16,    bitRange=22-28
11716                           ;'OTG_HS_HCCHAR8.ODDFRM`               EQU 0x40040600,        4, base=16,    bitRange=29-29
11717                           ;'OTG_HS_HCCHAR8.CHDIS`                EQU 0x40040600,        4, base=16,    bitRange=30-30
11718                           ;'OTG_HS_HCCHAR8.CHENA`                EQU 0x40040600,        4, base=16,    bitRange=31-31
11719                           
11720                           ;'OTG_HS_HCSPLT8`                      EQU 0x40040604,        4, base=16
11721                           ;'OTG_HS_HCSPLT8.PRTADDR`              EQU 0x40040604,        4, base=16,    bitRange=0-6
11722                           ;'OTG_HS_HCSPLT8.HUBADDR`              EQU 0x40040604,        4, base=16,    bitRange=7-13
11723                           ;'OTG_HS_HCSPLT8.XACTPOS`              EQU 0x40040604,        4, base=16,    bitRange=14-15
11724                           ;'OTG_HS_HCSPLT8.COMPLSPLT`            EQU 0x40040604,        4, base=16,    bitRange=16-16
11725                           ;'OTG_HS_HCSPLT8.SPLITEN`              EQU 0x40040604,        4, base=16,    bitRange=31-31
11726                           
11727                           ;'OTG_HS_HCINT8`                       EQU 0x40040608,        4, base=16
11728                           ;'OTG_HS_HCINT8.XFRC`                  EQU 0x40040608,        4, base=16,    bitRange=0-0
11729                           ;'OTG_HS_HCINT8.CHH`                   EQU 0x40040608,        4, base=16,    bitRange=1-1
11730                           ;'OTG_HS_HCINT8.STALL`                 EQU 0x40040608,        4, base=16,    bitRange=3-3
11731                           ;'OTG_HS_HCINT8.NAK`                   EQU 0x40040608,        4, base=16,    bitRange=4-4
11732                           ;'OTG_HS_HCINT8.ACK`                   EQU 0x40040608,        4, base=16,    bitRange=5-5
11733                           ;'OTG_HS_HCINT8.NYET`                  EQU 0x40040608,        4, base=16,    bitRange=6-6
11734                           ;'OTG_HS_HCINT8.TXERR`                 EQU 0x40040608,        4, base=16,    bitRange=7-7
11735                           ;'OTG_HS_HCINT8.BBERR`                 EQU 0x40040608,        4, base=16,    bitRange=8-8
11736                           ;'OTG_HS_HCINT8.FRMOR`                 EQU 0x40040608,        4, base=16,    bitRange=9-9
11737                           ;'OTG_HS_HCINT8.DTERR`                 EQU 0x40040608,        4, base=16,    bitRange=10-10
11738                           
11739                           ;'OTG_HS_HCINTMSK8`                    EQU 0x4004060C,        4, base=16
11740                           ;'OTG_HS_HCINTMSK8.XFRCM`              EQU 0x4004060C,        4, base=16,    bitRange=0-0
11741                           ;'OTG_HS_HCINTMSK8.CHHM`               EQU 0x4004060C,        4, base=16,    bitRange=1-1
11742                           ;'OTG_HS_HCINTMSK8.AHBERR`             EQU 0x4004060C,        4, base=16,    bitRange=2-2
11743                           ;'OTG_HS_HCINTMSK8.STALLM`             EQU 0x4004060C,        4, base=16,    bitRange=3-3
11744                           ;'OTG_HS_HCINTMSK8.NAKM`               EQU 0x4004060C,        4, base=16,    bitRange=4-4
11745                           ;'OTG_HS_HCINTMSK8.ACKM`               EQU 0x4004060C,        4, base=16,    bitRange=5-5
11746                           ;'OTG_HS_HCINTMSK8.NYET`               EQU 0x4004060C,        4, base=16,    bitRange=6-6
11747                           ;'OTG_HS_HCINTMSK8.TXERRM`             EQU 0x4004060C,        4, base=16,    bitRange=7-7
11748                           ;'OTG_HS_HCINTMSK8.BBERRM`             EQU 0x4004060C,        4, base=16,    bitRange=8-8
11749                           ;'OTG_HS_HCINTMSK8.FRMORM`             EQU 0x4004060C,        4, base=16,    bitRange=9-9
11750                           ;'OTG_HS_HCINTMSK8.DTERRM`             EQU 0x4004060C,        4, base=16,    bitRange=10-10
11751                           
11752                           ;'OTG_HS_HCTSIZ8`                      EQU 0x40040610,        4, base=16
11753                           ;'OTG_HS_HCTSIZ8.XFRSIZ`               EQU 0x40040610,        4, base=16,    bitRange=0-18
11754                           ;'OTG_HS_HCTSIZ8.PKTCNT`               EQU 0x40040610,        4, base=16,    bitRange=19-28
11755                           ;'OTG_HS_HCTSIZ8.DPID`                 EQU 0x40040610,        4, base=16,    bitRange=29-30
11756                           
11757                           ;'OTG_HS_HCDMA8`                       EQU 0x40040614,        4, base=16
11758                           
11759                           ;'OTG_HS_HCCHAR9`                      EQU 0x40040620,        4, base=16
11760                           ;'OTG_HS_HCCHAR9.MPSIZ`                EQU 0x40040620,        4, base=16,    bitRange=0-10
11761                           ;'OTG_HS_HCCHAR9.EPNUM`                EQU 0x40040620,        4, base=16,    bitRange=11-14
11762                           ;'OTG_HS_HCCHAR9.EPDIR`                EQU 0x40040620,        4, base=16,    bitRange=15-15
11763                           ;'OTG_HS_HCCHAR9.LSDEV`                EQU 0x40040620,        4, base=16,    bitRange=17-17
11764                           ;'OTG_HS_HCCHAR9.EPTYP`                EQU 0x40040620,        4, base=16,    bitRange=18-19
11765                           ;'OTG_HS_HCCHAR9.MC`                   EQU 0x40040620,        4, base=16,    bitRange=20-21
11766                           ;'OTG_HS_HCCHAR9.DAD`                  EQU 0x40040620,        4, base=16,    bitRange=22-28
11767                           ;'OTG_HS_HCCHAR9.ODDFRM`               EQU 0x40040620,        4, base=16,    bitRange=29-29
11768                           ;'OTG_HS_HCCHAR9.CHDIS`                EQU 0x40040620,        4, base=16,    bitRange=30-30
11769                           ;'OTG_HS_HCCHAR9.CHENA`                EQU 0x40040620,        4, base=16,    bitRange=31-31
11770                           
11771                           ;'OTG_HS_HCSPLT9`                      EQU 0x40040624,        4, base=16
11772                           ;'OTG_HS_HCSPLT9.PRTADDR`              EQU 0x40040624,        4, base=16,    bitRange=0-6
11773                           ;'OTG_HS_HCSPLT9.HUBADDR`              EQU 0x40040624,        4, base=16,    bitRange=7-13
11774                           ;'OTG_HS_HCSPLT9.XACTPOS`              EQU 0x40040624,        4, base=16,    bitRange=14-15
11775                           ;'OTG_HS_HCSPLT9.COMPLSPLT`            EQU 0x40040624,        4, base=16,    bitRange=16-16
11776                           ;'OTG_HS_HCSPLT9.SPLITEN`              EQU 0x40040624,        4, base=16,    bitRange=31-31
11777                           
11778                           ;'OTG_HS_HCINT9`                       EQU 0x40040628,        4, base=16
11779                           ;'OTG_HS_HCINT9.XFRC`                  EQU 0x40040628,        4, base=16,    bitRange=0-0
11780                           ;'OTG_HS_HCINT9.CHH`                   EQU 0x40040628,        4, base=16,    bitRange=1-1
11781                           ;'OTG_HS_HCINT9.STALL`                 EQU 0x40040628,        4, base=16,    bitRange=3-3
11782                           ;'OTG_HS_HCINT9.NAK`                   EQU 0x40040628,        4, base=16,    bitRange=4-4
11783                           ;'OTG_HS_HCINT9.ACK`                   EQU 0x40040628,        4, base=16,    bitRange=5-5
11784                           ;'OTG_HS_HCINT9.NYET`                  EQU 0x40040628,        4, base=16,    bitRange=6-6
11785                           ;'OTG_HS_HCINT9.TXERR`                 EQU 0x40040628,        4, base=16,    bitRange=7-7
11786                           ;'OTG_HS_HCINT9.BBERR`                 EQU 0x40040628,        4, base=16,    bitRange=8-8
11787                           ;'OTG_HS_HCINT9.FRMOR`                 EQU 0x40040628,        4, base=16,    bitRange=9-9
11788                           ;'OTG_HS_HCINT9.DTERR`                 EQU 0x40040628,        4, base=16,    bitRange=10-10
11789                           
11790                           ;'OTG_HS_HCINTMSK9`                    EQU 0x4004062C,        4, base=16
11791                           ;'OTG_HS_HCINTMSK9.XFRCM`              EQU 0x4004062C,        4, base=16,    bitRange=0-0
11792                           ;'OTG_HS_HCINTMSK9.CHHM`               EQU 0x4004062C,        4, base=16,    bitRange=1-1
11793                           ;'OTG_HS_HCINTMSK9.AHBERR`             EQU 0x4004062C,        4, base=16,    bitRange=2-2
11794                           ;'OTG_HS_HCINTMSK9.STALLM`             EQU 0x4004062C,        4, base=16,    bitRange=3-3
11795                           ;'OTG_HS_HCINTMSK9.NAKM`               EQU 0x4004062C,        4, base=16,    bitRange=4-4
11796                           ;'OTG_HS_HCINTMSK9.ACKM`               EQU 0x4004062C,        4, base=16,    bitRange=5-5
11797                           ;'OTG_HS_HCINTMSK9.NYET`               EQU 0x4004062C,        4, base=16,    bitRange=6-6
11798                           ;'OTG_HS_HCINTMSK9.TXERRM`             EQU 0x4004062C,        4, base=16,    bitRange=7-7
11799                           ;'OTG_HS_HCINTMSK9.BBERRM`             EQU 0x4004062C,        4, base=16,    bitRange=8-8
11800                           ;'OTG_HS_HCINTMSK9.FRMORM`             EQU 0x4004062C,        4, base=16,    bitRange=9-9
11801                           ;'OTG_HS_HCINTMSK9.DTERRM`             EQU 0x4004062C,        4, base=16,    bitRange=10-10
11802                           
11803                           ;'OTG_HS_HCTSIZ9`                      EQU 0x40040630,        4, base=16
11804                           ;'OTG_HS_HCTSIZ9.XFRSIZ`               EQU 0x40040630,        4, base=16,    bitRange=0-18
11805                           ;'OTG_HS_HCTSIZ9.PKTCNT`               EQU 0x40040630,        4, base=16,    bitRange=19-28
11806                           ;'OTG_HS_HCTSIZ9.DPID`                 EQU 0x40040630,        4, base=16,    bitRange=29-30
11807                           
11808                           ;'OTG_HS_HCDMA9`                       EQU 0x40040634,        4, base=16
11809                           
11810                           ;'OTG_HS_HCCHAR10`                     EQU 0x40040640,        4, base=16
11811                           ;'OTG_HS_HCCHAR10.MPSIZ`               EQU 0x40040640,        4, base=16,    bitRange=0-10
11812                           ;'OTG_HS_HCCHAR10.EPNUM`               EQU 0x40040640,        4, base=16,    bitRange=11-14
11813                           ;'OTG_HS_HCCHAR10.EPDIR`               EQU 0x40040640,        4, base=16,    bitRange=15-15
11814                           ;'OTG_HS_HCCHAR10.LSDEV`               EQU 0x40040640,        4, base=16,    bitRange=17-17
11815                           ;'OTG_HS_HCCHAR10.EPTYP`               EQU 0x40040640,        4, base=16,    bitRange=18-19
11816                           ;'OTG_HS_HCCHAR10.MC`                  EQU 0x40040640,        4, base=16,    bitRange=20-21
11817                           ;'OTG_HS_HCCHAR10.DAD`                 EQU 0x40040640,        4, base=16,    bitRange=22-28
11818                           ;'OTG_HS_HCCHAR10.ODDFRM`              EQU 0x40040640,        4, base=16,    bitRange=29-29
11819                           ;'OTG_HS_HCCHAR10.CHDIS`               EQU 0x40040640,        4, base=16,    bitRange=30-30
11820                           ;'OTG_HS_HCCHAR10.CHENA`               EQU 0x40040640,        4, base=16,    bitRange=31-31
11821                           
11822                           ;'OTG_HS_HCSPLT10`                     EQU 0x40040644,        4, base=16
11823                           ;'OTG_HS_HCSPLT10.PRTADDR`             EQU 0x40040644,        4, base=16,    bitRange=0-6
11824                           ;'OTG_HS_HCSPLT10.HUBADDR`             EQU 0x40040644,        4, base=16,    bitRange=7-13
11825                           ;'OTG_HS_HCSPLT10.XACTPOS`             EQU 0x40040644,        4, base=16,    bitRange=14-15
11826                           ;'OTG_HS_HCSPLT10.COMPLSPLT`           EQU 0x40040644,        4, base=16,    bitRange=16-16
11827                           ;'OTG_HS_HCSPLT10.SPLITEN`             EQU 0x40040644,        4, base=16,    bitRange=31-31
11828                           
11829                           ;'OTG_HS_HCINT10`                      EQU 0x40040648,        4, base=16
11830                           ;'OTG_HS_HCINT10.XFRC`                 EQU 0x40040648,        4, base=16,    bitRange=0-0
11831                           ;'OTG_HS_HCINT10.CHH`                  EQU 0x40040648,        4, base=16,    bitRange=1-1
11832                           ;'OTG_HS_HCINT10.STALL`                EQU 0x40040648,        4, base=16,    bitRange=3-3
11833                           ;'OTG_HS_HCINT10.NAK`                  EQU 0x40040648,        4, base=16,    bitRange=4-4
11834                           ;'OTG_HS_HCINT10.ACK`                  EQU 0x40040648,        4, base=16,    bitRange=5-5
11835                           ;'OTG_HS_HCINT10.NYET`                 EQU 0x40040648,        4, base=16,    bitRange=6-6
11836                           ;'OTG_HS_HCINT10.TXERR`                EQU 0x40040648,        4, base=16,    bitRange=7-7
11837                           ;'OTG_HS_HCINT10.BBERR`                EQU 0x40040648,        4, base=16,    bitRange=8-8
11838                           ;'OTG_HS_HCINT10.FRMOR`                EQU 0x40040648,        4, base=16,    bitRange=9-9
11839                           ;'OTG_HS_HCINT10.DTERR`                EQU 0x40040648,        4, base=16,    bitRange=10-10
11840                           
11841                           ;'OTG_HS_HCINTMSK10`                   EQU 0x4004064C,        4, base=16
11842                           ;'OTG_HS_HCINTMSK10.XFRCM`             EQU 0x4004064C,        4, base=16,    bitRange=0-0
11843                           ;'OTG_HS_HCINTMSK10.CHHM`              EQU 0x4004064C,        4, base=16,    bitRange=1-1
11844                           ;'OTG_HS_HCINTMSK10.AHBERR`            EQU 0x4004064C,        4, base=16,    bitRange=2-2
11845                           ;'OTG_HS_HCINTMSK10.STALLM`            EQU 0x4004064C,        4, base=16,    bitRange=3-3
11846                           ;'OTG_HS_HCINTMSK10.NAKM`              EQU 0x4004064C,        4, base=16,    bitRange=4-4
11847                           ;'OTG_HS_HCINTMSK10.ACKM`              EQU 0x4004064C,        4, base=16,    bitRange=5-5
11848                           ;'OTG_HS_HCINTMSK10.NYET`              EQU 0x4004064C,        4, base=16,    bitRange=6-6
11849                           ;'OTG_HS_HCINTMSK10.TXERRM`            EQU 0x4004064C,        4, base=16,    bitRange=7-7
11850                           ;'OTG_HS_HCINTMSK10.BBERRM`            EQU 0x4004064C,        4, base=16,    bitRange=8-8
11851                           ;'OTG_HS_HCINTMSK10.FRMORM`            EQU 0x4004064C,        4, base=16,    bitRange=9-9
11852                           ;'OTG_HS_HCINTMSK10.DTERRM`            EQU 0x4004064C,        4, base=16,    bitRange=10-10
11853                           
11854                           ;'OTG_HS_HCTSIZ10`                     EQU 0x40040650,        4, base=16
11855                           ;'OTG_HS_HCTSIZ10.XFRSIZ`              EQU 0x40040650,        4, base=16,    bitRange=0-18
11856                           ;'OTG_HS_HCTSIZ10.PKTCNT`              EQU 0x40040650,        4, base=16,    bitRange=19-28
11857                           ;'OTG_HS_HCTSIZ10.DPID`                EQU 0x40040650,        4, base=16,    bitRange=29-30
11858                           
11859                           ;'OTG_HS_HCDMA10`                      EQU 0x40040654,        4, base=16
11860                           
11861                           ;'OTG_HS_HCCHAR11`                     EQU 0x40040660,        4, base=16
11862                           ;'OTG_HS_HCCHAR11.MPSIZ`               EQU 0x40040660,        4, base=16,    bitRange=0-10
11863                           ;'OTG_HS_HCCHAR11.EPNUM`               EQU 0x40040660,        4, base=16,    bitRange=11-14
11864                           ;'OTG_HS_HCCHAR11.EPDIR`               EQU 0x40040660,        4, base=16,    bitRange=15-15
11865                           ;'OTG_HS_HCCHAR11.LSDEV`               EQU 0x40040660,        4, base=16,    bitRange=17-17
11866                           ;'OTG_HS_HCCHAR11.EPTYP`               EQU 0x40040660,        4, base=16,    bitRange=18-19
11867                           ;'OTG_HS_HCCHAR11.MC`                  EQU 0x40040660,        4, base=16,    bitRange=20-21
11868                           ;'OTG_HS_HCCHAR11.DAD`                 EQU 0x40040660,        4, base=16,    bitRange=22-28
11869                           ;'OTG_HS_HCCHAR11.ODDFRM`              EQU 0x40040660,        4, base=16,    bitRange=29-29
11870                           ;'OTG_HS_HCCHAR11.CHDIS`               EQU 0x40040660,        4, base=16,    bitRange=30-30
11871                           ;'OTG_HS_HCCHAR11.CHENA`               EQU 0x40040660,        4, base=16,    bitRange=31-31
11872                           
11873                           ;'OTG_HS_HCSPLT11`                     EQU 0x40040664,        4, base=16
11874                           ;'OTG_HS_HCSPLT11.PRTADDR`             EQU 0x40040664,        4, base=16,    bitRange=0-6
11875                           ;'OTG_HS_HCSPLT11.HUBADDR`             EQU 0x40040664,        4, base=16,    bitRange=7-13
11876                           ;'OTG_HS_HCSPLT11.XACTPOS`             EQU 0x40040664,        4, base=16,    bitRange=14-15
11877                           ;'OTG_HS_HCSPLT11.COMPLSPLT`           EQU 0x40040664,        4, base=16,    bitRange=16-16
11878                           ;'OTG_HS_HCSPLT11.SPLITEN`             EQU 0x40040664,        4, base=16,    bitRange=31-31
11879                           
11880                           ;'OTG_HS_HCINT11`                      EQU 0x40040668,        4, base=16
11881                           ;'OTG_HS_HCINT11.XFRC`                 EQU 0x40040668,        4, base=16,    bitRange=0-0
11882                           ;'OTG_HS_HCINT11.CHH`                  EQU 0x40040668,        4, base=16,    bitRange=1-1
11883                           ;'OTG_HS_HCINT11.STALL`                EQU 0x40040668,        4, base=16,    bitRange=3-3
11884                           ;'OTG_HS_HCINT11.NAK`                  EQU 0x40040668,        4, base=16,    bitRange=4-4
11885                           ;'OTG_HS_HCINT11.ACK`                  EQU 0x40040668,        4, base=16,    bitRange=5-5
11886                           ;'OTG_HS_HCINT11.NYET`                 EQU 0x40040668,        4, base=16,    bitRange=6-6
11887                           ;'OTG_HS_HCINT11.TXERR`                EQU 0x40040668,        4, base=16,    bitRange=7-7
11888                           ;'OTG_HS_HCINT11.BBERR`                EQU 0x40040668,        4, base=16,    bitRange=8-8
11889                           ;'OTG_HS_HCINT11.FRMOR`                EQU 0x40040668,        4, base=16,    bitRange=9-9
11890                           ;'OTG_HS_HCINT11.DTERR`                EQU 0x40040668,        4, base=16,    bitRange=10-10
11891                           
11892                           ;'OTG_HS_HCINTMSK11`                   EQU 0x4004066C,        4, base=16
11893                           ;'OTG_HS_HCINTMSK11.XFRCM`             EQU 0x4004066C,        4, base=16,    bitRange=0-0
11894                           ;'OTG_HS_HCINTMSK11.CHHM`              EQU 0x4004066C,        4, base=16,    bitRange=1-1
11895                           ;'OTG_HS_HCINTMSK11.AHBERR`            EQU 0x4004066C,        4, base=16,    bitRange=2-2
11896                           ;'OTG_HS_HCINTMSK11.STALLM`            EQU 0x4004066C,        4, base=16,    bitRange=3-3
11897                           ;'OTG_HS_HCINTMSK11.NAKM`              EQU 0x4004066C,        4, base=16,    bitRange=4-4
11898                           ;'OTG_HS_HCINTMSK11.ACKM`              EQU 0x4004066C,        4, base=16,    bitRange=5-5
11899                           ;'OTG_HS_HCINTMSK11.NYET`              EQU 0x4004066C,        4, base=16,    bitRange=6-6
11900                           ;'OTG_HS_HCINTMSK11.TXERRM`            EQU 0x4004066C,        4, base=16,    bitRange=7-7
11901                           ;'OTG_HS_HCINTMSK11.BBERRM`            EQU 0x4004066C,        4, base=16,    bitRange=8-8
11902                           ;'OTG_HS_HCINTMSK11.FRMORM`            EQU 0x4004066C,        4, base=16,    bitRange=9-9
11903                           ;'OTG_HS_HCINTMSK11.DTERRM`            EQU 0x4004066C,        4, base=16,    bitRange=10-10
11904                           
11905                           ;'OTG_HS_HCTSIZ11`                     EQU 0x40040670,        4, base=16
11906                           ;'OTG_HS_HCTSIZ11.XFRSIZ`              EQU 0x40040670,        4, base=16,    bitRange=0-18
11907                           ;'OTG_HS_HCTSIZ11.PKTCNT`              EQU 0x40040670,        4, base=16,    bitRange=19-28
11908                           ;'OTG_HS_HCTSIZ11.DPID`                EQU 0x40040670,        4, base=16,    bitRange=29-30
11909                           
11910                           ;'OTG_HS_HCDMA11`                      EQU 0x40040674,        4, base=16
11911                           
11912                           ;'OTG_HS_DCFG`                         EQU 0x40040800,        4, base=16
11913                           ;'OTG_HS_DCFG.DSPD`                    EQU 0x40040800,        4, base=16,    bitRange=0-1
11914                           ;'OTG_HS_DCFG.NZLSOHSK`                EQU 0x40040800,        4, base=16,    bitRange=2-2
11915                           ;'OTG_HS_DCFG.DAD`                     EQU 0x40040800,        4, base=16,    bitRange=4-10
11916                           ;'OTG_HS_DCFG.PFIVL`                   EQU 0x40040800,        4, base=16,    bitRange=11-12
11917                           ;'OTG_HS_DCFG.DMAEN`                   EQU 0x40040800,        4, base=16,    bitRange=23-23
11918                           ;'OTG_HS_DCFG.PERSCHIVL`               EQU 0x40040800,        4, base=16,    bitRange=24-25
11919                           
11920                           ;'OTG_HS_DCTL`                         EQU 0x40040804,        4, base=16
11921                           ;'OTG_HS_DCTL.RWUSIG`                  EQU 0x40040804,        4, base=16,    bitRange=0-0
11922                           ;'OTG_HS_DCTL.SDIS`                    EQU 0x40040804,        4, base=16,    bitRange=1-1
11923                           ;'OTG_HS_DCTL.GINSTS`                  EQU 0x40040804,        4, base=16,    bitRange=2-2
11924                           ;'OTG_HS_DCTL.GONSTS`                  EQU 0x40040804,        4, base=16,    bitRange=3-3
11925                           ;'OTG_HS_DCTL.TCTL`                    EQU 0x40040804,        4, base=16,    bitRange=4-6
11926                           ;'OTG_HS_DCTL.SGINAK`                  EQU 0x40040804,        4, base=16,    bitRange=7-7
11927                           ;'OTG_HS_DCTL.CGINAK`                  EQU 0x40040804,        4, base=16,    bitRange=8-8
11928                           ;'OTG_HS_DCTL.SGONAK`                  EQU 0x40040804,        4, base=16,    bitRange=9-9
11929                           ;'OTG_HS_DCTL.CGONAK`                  EQU 0x40040804,        4, base=16,    bitRange=10-10
11930                           ;'OTG_HS_DCTL.POPRGDNE`                EQU 0x40040804,        4, base=16,    bitRange=11-11
11931                           
11932                           ;'OTG_HS_DSTS`                         EQU 0x40040808,        4, base=16
11933                           ;'OTG_HS_DSTS.SUSPSTS`                 EQU 0x40040808,        4, base=16,    bitRange=0-0
11934                           ;'OTG_HS_DSTS.ENUMSPD`                 EQU 0x40040808,        4, base=16,    bitRange=1-2
11935                           ;'OTG_HS_DSTS.EERR`                    EQU 0x40040808,        4, base=16,    bitRange=3-3
11936                           ;'OTG_HS_DSTS.FNSOF`                   EQU 0x40040808,        4, base=16,    bitRange=8-21
11937                           
11938                           ;'OTG_HS_DIEPMSK`                      EQU 0x40040810,        4, base=16
11939                           ;'OTG_HS_DIEPMSK.XFRCM`                EQU 0x40040810,        4, base=16,    bitRange=0-0
11940                           ;'OTG_HS_DIEPMSK.EPDM`                 EQU 0x40040810,        4, base=16,    bitRange=1-1
11941                           ;'OTG_HS_DIEPMSK.TOM`                  EQU 0x40040810,        4, base=16,    bitRange=3-3
11942                           ;'OTG_HS_DIEPMSK.ITTXFEMSK`            EQU 0x40040810,        4, base=16,    bitRange=4-4
11943                           ;'OTG_HS_DIEPMSK.INEPNMM`              EQU 0x40040810,        4, base=16,    bitRange=5-5
11944                           ;'OTG_HS_DIEPMSK.INEPNEM`              EQU 0x40040810,        4, base=16,    bitRange=6-6
11945                           ;'OTG_HS_DIEPMSK.TXFURM`               EQU 0x40040810,        4, base=16,    bitRange=8-8
11946                           ;'OTG_HS_DIEPMSK.BIM`                  EQU 0x40040810,        4, base=16,    bitRange=9-9
11947                           
11948                           ;'OTG_HS_DOEPMSK`                      EQU 0x40040814,        4, base=16
11949                           ;'OTG_HS_DOEPMSK.XFRCM`                EQU 0x40040814,        4, base=16,    bitRange=0-0
11950                           ;'OTG_HS_DOEPMSK.EPDM`                 EQU 0x40040814,        4, base=16,    bitRange=1-1
11951                           ;'OTG_HS_DOEPMSK.STUPM`                EQU 0x40040814,        4, base=16,    bitRange=3-3
11952                           ;'OTG_HS_DOEPMSK.OTEPDM`               EQU 0x40040814,        4, base=16,    bitRange=4-4
11953                           ;'OTG_HS_DOEPMSK.B2BSTUP`              EQU 0x40040814,        4, base=16,    bitRange=6-6
11954                           ;'OTG_HS_DOEPMSK.OPEM`                 EQU 0x40040814,        4, base=16,    bitRange=8-8
11955                           ;'OTG_HS_DOEPMSK.BOIM`                 EQU 0x40040814,        4, base=16,    bitRange=9-9
11956                           
11957                           ;'OTG_HS_DAINT`                        EQU 0x40040818,        4, base=16
11958                           ;'OTG_HS_DAINT.IEPINT0`                EQU 0x40040818,        4, base=16,    bitRange=0-0
11959                           ;'OTG_HS_DAINT.IEPINT1`                EQU 0x40040818,        4, base=16,    bitRange=1-1
11960                           ;'OTG_HS_DAINT.IEPINT2`                EQU 0x40040818,        4, base=16,    bitRange=2-2
11961                           ;'OTG_HS_DAINT.IEPINT3`                EQU 0x40040818,        4, base=16,    bitRange=3-3
11962                           ;'OTG_HS_DAINT.IEPINT4`                EQU 0x40040818,        4, base=16,    bitRange=4-4
11963                           ;'OTG_HS_DAINT.IEPINT5`                EQU 0x40040818,        4, base=16,    bitRange=5-5
11964                           ;'OTG_HS_DAINT.IEPINT6`                EQU 0x40040818,        4, base=16,    bitRange=6-6
11965                           ;'OTG_HS_DAINT.IEPINT7`                EQU 0x40040818,        4, base=16,    bitRange=7-7
11966                           ;'OTG_HS_DAINT.IEPINT8`                EQU 0x40040818,        4, base=16,    bitRange=8-8
11967                           ;'OTG_HS_DAINT.IEPINT9`                EQU 0x40040818,        4, base=16,    bitRange=9-9
11968                           ;'OTG_HS_DAINT.IEPINT10`               EQU 0x40040818,        4, base=16,    bitRange=10-10
11969                           ;'OTG_HS_DAINT.IEPINT11`               EQU 0x40040818,        4, base=16,    bitRange=11-11
11970                           ;'OTG_HS_DAINT.IEPINT12`               EQU 0x40040818,        4, base=16,    bitRange=12-12
11971                           ;'OTG_HS_DAINT.IEPINT13`               EQU 0x40040818,        4, base=16,    bitRange=13-13
11972                           ;'OTG_HS_DAINT.IEPINT14`               EQU 0x40040818,        4, base=16,    bitRange=14-14
11973                           ;'OTG_HS_DAINT.IEPINT15`               EQU 0x40040818,        4, base=16,    bitRange=15-15
11974                           ;'OTG_HS_DAINT.OEPINT0`                EQU 0x40040818,        4, base=16,    bitRange=16-16
11975                           ;'OTG_HS_DAINT.OEPINT1`                EQU 0x40040818,        4, base=16,    bitRange=17-17
11976                           ;'OTG_HS_DAINT.OEPINT2`                EQU 0x40040818,        4, base=16,    bitRange=18-18
11977                           ;'OTG_HS_DAINT.OEPINT3`                EQU 0x40040818,        4, base=16,    bitRange=19-19
11978                           ;'OTG_HS_DAINT.OEPINT4`                EQU 0x40040818,        4, base=16,    bitRange=20-20
11979                           ;'OTG_HS_DAINT.OEPINT5`                EQU 0x40040818,        4, base=16,    bitRange=21-21
11980                           ;'OTG_HS_DAINT.OEPINT6`                EQU 0x40040818,        4, base=16,    bitRange=22-22
11981                           ;'OTG_HS_DAINT.OEPINT7`                EQU 0x40040818,        4, base=16,    bitRange=23-23
11982                           ;'OTG_HS_DAINT.OEPINT8`                EQU 0x40040818,        4, base=16,    bitRange=24-24
11983                           ;'OTG_HS_DAINT.OEPINT9`                EQU 0x40040818,        4, base=16,    bitRange=25-25
11984                           ;'OTG_HS_DAINT.OEPINT10`               EQU 0x40040818,        4, base=16,    bitRange=26-26
11985                           ;'OTG_HS_DAINT.OEPINT11`               EQU 0x40040818,        4, base=16,    bitRange=27-27
11986                           ;'OTG_HS_DAINT.OEPINT12`               EQU 0x40040818,        4, base=16,    bitRange=28-28
11987                           ;'OTG_HS_DAINT.OEPINT13`               EQU 0x40040818,        4, base=16,    bitRange=29-29
11988                           ;'OTG_HS_DAINT.OEPINT14`               EQU 0x40040818,        4, base=16,    bitRange=30-30
11989                           ;'OTG_HS_DAINT.OEPINT15`               EQU 0x40040818,        4, base=16,    bitRange=31-31
11990                           
11991                           ;'OTG_HS_DAINTMSK`                     EQU 0x4004081C,        4, base=16
11992                           ;'OTG_HS_DAINTMSK.IEPM0`               EQU 0x4004081C,        4, base=16,    bitRange=0-0
11993                           ;'OTG_HS_DAINTMSK.IEPM1`               EQU 0x4004081C,        4, base=16,    bitRange=1-1
11994                           ;'OTG_HS_DAINTMSK.IEPM2`               EQU 0x4004081C,        4, base=16,    bitRange=2-2
11995                           ;'OTG_HS_DAINTMSK.IEPM3`               EQU 0x4004081C,        4, base=16,    bitRange=3-3
11996                           ;'OTG_HS_DAINTMSK.IEPM4`               EQU 0x4004081C,        4, base=16,    bitRange=4-4
11997                           ;'OTG_HS_DAINTMSK.IEPM5`               EQU 0x4004081C,        4, base=16,    bitRange=5-5
11998                           ;'OTG_HS_DAINTMSK.IEPM6`               EQU 0x4004081C,        4, base=16,    bitRange=6-6
11999                           ;'OTG_HS_DAINTMSK.IEPM7`               EQU 0x4004081C,        4, base=16,    bitRange=7-7
12000                           ;'OTG_HS_DAINTMSK.IEPM8`               EQU 0x4004081C,        4, base=16,    bitRange=8-8
12001                           ;'OTG_HS_DAINTMSK.IEPM9`               EQU 0x4004081C,        4, base=16,    bitRange=9-9
12002                           ;'OTG_HS_DAINTMSK.IEPM10`              EQU 0x4004081C,        4, base=16,    bitRange=10-10
12003                           ;'OTG_HS_DAINTMSK.IEPM11`              EQU 0x4004081C,        4, base=16,    bitRange=11-11
12004                           ;'OTG_HS_DAINTMSK.IEPM12`              EQU 0x4004081C,        4, base=16,    bitRange=12-12
12005                           ;'OTG_HS_DAINTMSK.IEPM13`              EQU 0x4004081C,        4, base=16,    bitRange=13-13
12006                           ;'OTG_HS_DAINTMSK.IEPM14`              EQU 0x4004081C,        4, base=16,    bitRange=14-14
12007                           ;'OTG_HS_DAINTMSK.IEPM15`              EQU 0x4004081C,        4, base=16,    bitRange=15-15
12008                           ;'OTG_HS_DAINTMSK.OEPM0`               EQU 0x4004081C,        4, base=16,    bitRange=16-16
12009                           ;'OTG_HS_DAINTMSK.OEPM1`               EQU 0x4004081C,        4, base=16,    bitRange=17-17
12010                           ;'OTG_HS_DAINTMSK.OEPM2`               EQU 0x4004081C,        4, base=16,    bitRange=18-18
12011                           ;'OTG_HS_DAINTMSK.OEPM3`               EQU 0x4004081C,        4, base=16,    bitRange=19-19
12012                           ;'OTG_HS_DAINTMSK.OEPM4`               EQU 0x4004081C,        4, base=16,    bitRange=20-20
12013                           ;'OTG_HS_DAINTMSK.OEPM5`               EQU 0x4004081C,        4, base=16,    bitRange=21-21
12014                           ;'OTG_HS_DAINTMSK.OEPM6`               EQU 0x4004081C,        4, base=16,    bitRange=22-22
12015                           ;'OTG_HS_DAINTMSK.OEPM7`               EQU 0x4004081C,        4, base=16,    bitRange=23-23
12016                           ;'OTG_HS_DAINTMSK.OEPM8`               EQU 0x4004081C,        4, base=16,    bitRange=24-24
12017                           ;'OTG_HS_DAINTMSK.OEPM9`               EQU 0x4004081C,        4, base=16,    bitRange=25-25
12018                           ;'OTG_HS_DAINTMSK.OEPM10`              EQU 0x4004081C,        4, base=16,    bitRange=26-26
12019                           ;'OTG_HS_DAINTMSK.OEPM11`              EQU 0x4004081C,        4, base=16,    bitRange=27-27
12020                           ;'OTG_HS_DAINTMSK.OEPM12`              EQU 0x4004081C,        4, base=16,    bitRange=28-28
12021                           ;'OTG_HS_DAINTMSK.OEPM13`              EQU 0x4004081C,        4, base=16,    bitRange=29-29
12022                           ;'OTG_HS_DAINTMSK.OEPM14`              EQU 0x4004081C,        4, base=16,    bitRange=30-30
12023                           ;'OTG_HS_DAINTMSK.OEPM15`              EQU 0x4004081C,        4, base=16,    bitRange=31-31
12024                           
12025                           ;'OTG_HS_DVBUSDIS`                     EQU 0x40040828,        4, base=16
12026                           ;'OTG_HS_DVBUSDIS.VBUSDT`              EQU 0x40040828,        4, base=16,    bitRange=0-15
12027                           
12028                           ;'OTG_HS_DVBUSPULSE`                   EQU 0x4004082C,        4, base=16
12029                           ;'OTG_HS_DVBUSPULSE.DVBUSP`            EQU 0x4004082C,        4, base=16,    bitRange=0-11
12030                           
12031                           ;'OTG_HS_DTHRCTL`                      EQU 0x40040830,        4, base=16
12032                           ;'OTG_HS_DTHRCTL.NONISOTHREN`          EQU 0x40040830,        4, base=16,    bitRange=0-0
12033                           ;'OTG_HS_DTHRCTL.ISOTHREN`             EQU 0x40040830,        4, base=16,    bitRange=1-1
12034                           ;'OTG_HS_DTHRCTL.TXTHRLEN`             EQU 0x40040830,        4, base=16,    bitRange=2-10
12035                           ;'OTG_HS_DTHRCTL.RXTHREN`              EQU 0x40040830,        4, base=16,    bitRange=16-16
12036                           ;'OTG_HS_DTHRCTL.RXTHRLEN`             EQU 0x40040830,        4, base=16,    bitRange=17-25
12037                           ;'OTG_HS_DTHRCTL.ARPEN`                EQU 0x40040830,        4, base=16,    bitRange=27-27
12038                           
12039                           ;'OTG_HS_DIEPEMPMSK`                   EQU 0x40040834,        4, base=16
12040                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM0`        EQU 0x40040834,        4, base=16,    bitRange=0-0
12041                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM1`        EQU 0x40040834,        4, base=16,    bitRange=1-1
12042                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM2`        EQU 0x40040834,        4, base=16,    bitRange=2-2
12043                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM3`        EQU 0x40040834,        4, base=16,    bitRange=3-3
12044                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM4`        EQU 0x40040834,        4, base=16,    bitRange=4-4
12045                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM5`        EQU 0x40040834,        4, base=16,    bitRange=5-5
12046                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM6`        EQU 0x40040834,        4, base=16,    bitRange=6-6
12047                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM7`        EQU 0x40040834,        4, base=16,    bitRange=7-7
12048                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM8`        EQU 0x40040834,        4, base=16,    bitRange=8-8
12049                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM9`        EQU 0x40040834,        4, base=16,    bitRange=9-9
12050                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM10`       EQU 0x40040834,        4, base=16,    bitRange=10-10
12051                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM11`       EQU 0x40040834,        4, base=16,    bitRange=11-11
12052                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM12`       EQU 0x40040834,        4, base=16,    bitRange=12-12
12053                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM13`       EQU 0x40040834,        4, base=16,    bitRange=13-13
12054                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM14`       EQU 0x40040834,        4, base=16,    bitRange=14-14
12055                           ;'OTG_HS_DIEPEMPMSK.INEPTXFEM15`       EQU 0x40040834,        4, base=16,    bitRange=15-15
12056                           
12057                           ;'OTG_HS_DEACHINT`                     EQU 0x40040838,        4, base=16
12058                           ;'OTG_HS_DEACHINT.IEP1INT`             EQU 0x40040838,        4, base=16,    bitRange=1-1
12059                           ;'OTG_HS_DEACHINT.OEP1INT`             EQU 0x40040838,        4, base=16,    bitRange=17-17
12060                           
12061                           ;'OTG_HS_DEACHINTMSK`                  EQU 0x4004083C,        4, base=16
12062                           ;'OTG_HS_DEACHINTMSK.IEP1INTM`         EQU 0x4004083C,        4, base=16,    bitRange=1-1
12063                           ;'OTG_HS_DEACHINTMSK.OEP1INTM`         EQU 0x4004083C,        4, base=16,    bitRange=17-17
12064                           
12065                           ;'OTG_HS_DIEPEACHMSK1`                 EQU 0x40040840,        4, base=16
12066                           ;'OTG_HS_DIEPEACHMSK1.XFRCM`           EQU 0x40040840,        4, base=16,    bitRange=0-0
12067                           ;'OTG_HS_DIEPEACHMSK1.EPDM`            EQU 0x40040840,        4, base=16,    bitRange=1-1
12068                           ;'OTG_HS_DIEPEACHMSK1.TOM`             EQU 0x40040840,        4, base=16,    bitRange=3-3
12069                           ;'OTG_HS_DIEPEACHMSK1.ITTXFEMSK`       EQU 0x40040840,        4, base=16,    bitRange=4-4
12070                           ;'OTG_HS_DIEPEACHMSK1.INEPNMM`         EQU 0x40040840,        4, base=16,    bitRange=5-5
12071                           ;'OTG_HS_DIEPEACHMSK1.INEPNEM`         EQU 0x40040840,        4, base=16,    bitRange=6-6
12072                           ;'OTG_HS_DIEPEACHMSK1.TXFURM`          EQU 0x40040840,        4, base=16,    bitRange=8-8
12073                           ;'OTG_HS_DIEPEACHMSK1.BIM`             EQU 0x40040840,        4, base=16,    bitRange=9-9
12074                           ;'OTG_HS_DIEPEACHMSK1.NAKM`            EQU 0x40040840,        4, base=16,    bitRange=13-13
12075                           
12076                           ;'OTG_HS_DOEPEACHMSK1`                 EQU 0x40040880,        4, base=16
12077                           ;'OTG_HS_DOEPEACHMSK1.XFRCM`           EQU 0x40040880,        4, base=16,    bitRange=0-0
12078                           ;'OTG_HS_DOEPEACHMSK1.EPDM`            EQU 0x40040880,        4, base=16,    bitRange=1-1
12079                           ;'OTG_HS_DOEPEACHMSK1.TOM`             EQU 0x40040880,        4, base=16,    bitRange=3-3
12080                           ;'OTG_HS_DOEPEACHMSK1.ITTXFEMSK`       EQU 0x40040880,        4, base=16,    bitRange=4-4
12081                           ;'OTG_HS_DOEPEACHMSK1.INEPNMM`         EQU 0x40040880,        4, base=16,    bitRange=5-5
12082                           ;'OTG_HS_DOEPEACHMSK1.INEPNEM`         EQU 0x40040880,        4, base=16,    bitRange=6-6
12083                           ;'OTG_HS_DOEPEACHMSK1.TXFURM`          EQU 0x40040880,        4, base=16,    bitRange=8-8
12084                           ;'OTG_HS_DOEPEACHMSK1.BIM`             EQU 0x40040880,        4, base=16,    bitRange=9-9
12085                           ;'OTG_HS_DOEPEACHMSK1.BERRM`           EQU 0x40040880,        4, base=16,    bitRange=12-12
12086                           ;'OTG_HS_DOEPEACHMSK1.NAKM`            EQU 0x40040880,        4, base=16,    bitRange=13-13
12087                           ;'OTG_HS_DOEPEACHMSK1.NYETM`           EQU 0x40040880,        4, base=16,    bitRange=14-14
12088                           
12089                           ;'OTG_HS_DIEPCTL0`                     EQU 0x40040900,        4, base=16
12090                           ;'OTG_HS_DIEPCTL0.MPSIZ`               EQU 0x40040900,        4, base=16,    bitRange=0-10
12091                           ;'OTG_HS_DIEPCTL0.USBAEP`              EQU 0x40040900,        4, base=16,    bitRange=15-15
12092                           ;'OTG_HS_DIEPCTL0.EONUM`               EQU 0x40040900,        4, base=16,    bitRange=16-16
12093                           ;'OTG_HS_DIEPCTL0.NAKSTS`              EQU 0x40040900,        4, base=16,    bitRange=17-17
12094                           ;'OTG_HS_DIEPCTL0.EPTYP`               EQU 0x40040900,        4, base=16,    bitRange=18-19
12095                           ;'OTG_HS_DIEPCTL0.Stall`               EQU 0x40040900,        4, base=16,    bitRange=21-21
12096                           ;'OTG_HS_DIEPCTL0.TXFNUM`              EQU 0x40040900,        4, base=16,    bitRange=22-25
12097                           ;'OTG_HS_DIEPCTL0.CNAK`                EQU 0x40040900,        4, base=16,    bitRange=26-26
12098                           ;'OTG_HS_DIEPCTL0.SNAK`                EQU 0x40040900,        4, base=16,    bitRange=27-27
12099                           ;'OTG_HS_DIEPCTL0.SD0PID`              EQU 0x40040900,        4, base=16,    bitRange=28-28
12100                           ;'OTG_HS_DIEPCTL0.SODDFRM`             EQU 0x40040900,        4, base=16,    bitRange=29-29
12101                           ;'OTG_HS_DIEPCTL0.EPDIS`               EQU 0x40040900,        4, base=16,    bitRange=30-30
12102                           ;'OTG_HS_DIEPCTL0.EPENA`               EQU 0x40040900,        4, base=16,    bitRange=31-31
12103                           
12104                           ;'OTG_HS_DTXFSTS0`                     EQU 0x40040918,        4, base=16
12105                           ;'OTG_HS_DTXFSTS0.INEPTFSAV`           EQU 0x40040918,        4, base=16,    bitRange=0-15
12106                           
12107                           ;'OTG_HS_DIEPCTL1`                     EQU 0x40040920,        4, base=16
12108                           ;'OTG_HS_DIEPCTL1.MPSIZ`               EQU 0x40040920,        4, base=16,    bitRange=0-10
12109                           ;'OTG_HS_DIEPCTL1.USBAEP`              EQU 0x40040920,        4, base=16,    bitRange=15-15
12110                           ;'OTG_HS_DIEPCTL1.EONUM`               EQU 0x40040920,        4, base=16,    bitRange=16-16
12111                           ;'OTG_HS_DIEPCTL1.NAKSTS`              EQU 0x40040920,        4, base=16,    bitRange=17-17
12112                           ;'OTG_HS_DIEPCTL1.EPTYP`               EQU 0x40040920,        4, base=16,    bitRange=18-19
12113                           ;'OTG_HS_DIEPCTL1.Stall`               EQU 0x40040920,        4, base=16,    bitRange=21-21
12114                           ;'OTG_HS_DIEPCTL1.TXFNUM`              EQU 0x40040920,        4, base=16,    bitRange=22-25
12115                           ;'OTG_HS_DIEPCTL1.CNAK`                EQU 0x40040920,        4, base=16,    bitRange=26-26
12116                           ;'OTG_HS_DIEPCTL1.SNAK`                EQU 0x40040920,        4, base=16,    bitRange=27-27
12117                           ;'OTG_HS_DIEPCTL1.SD0PID`              EQU 0x40040920,        4, base=16,    bitRange=28-28
12118                           ;'OTG_HS_DIEPCTL1.SODDFRM`             EQU 0x40040920,        4, base=16,    bitRange=29-29
12119                           ;'OTG_HS_DIEPCTL1.EPDIS`               EQU 0x40040920,        4, base=16,    bitRange=30-30
12120                           ;'OTG_HS_DIEPCTL1.EPENA`               EQU 0x40040920,        4, base=16,    bitRange=31-31
12121                           
12122                           ;'OTG_HS_DTXFSTS1`                     EQU 0x40040938,        4, base=16
12123                           ;'OTG_HS_DTXFSTS1.INEPTFSAV`           EQU 0x40040938,        4, base=16,    bitRange=0-15
12124                           
12125                           ;'OTG_HS_DIEPCTL2`                     EQU 0x40040940,        4, base=16
12126                           ;'OTG_HS_DIEPCTL2.MPSIZ`               EQU 0x40040940,        4, base=16,    bitRange=0-10
12127                           ;'OTG_HS_DIEPCTL2.USBAEP`              EQU 0x40040940,        4, base=16,    bitRange=15-15
12128                           ;'OTG_HS_DIEPCTL2.EONUM`               EQU 0x40040940,        4, base=16,    bitRange=16-16
12129                           ;'OTG_HS_DIEPCTL2.NAKSTS`              EQU 0x40040940,        4, base=16,    bitRange=17-17
12130                           ;'OTG_HS_DIEPCTL2.EPTYP`               EQU 0x40040940,        4, base=16,    bitRange=18-19
12131                           ;'OTG_HS_DIEPCTL2.Stall`               EQU 0x40040940,        4, base=16,    bitRange=21-21
12132                           ;'OTG_HS_DIEPCTL2.TXFNUM`              EQU 0x40040940,        4, base=16,    bitRange=22-25
12133                           ;'OTG_HS_DIEPCTL2.CNAK`                EQU 0x40040940,        4, base=16,    bitRange=26-26
12134                           ;'OTG_HS_DIEPCTL2.SNAK`                EQU 0x40040940,        4, base=16,    bitRange=27-27
12135                           ;'OTG_HS_DIEPCTL2.SD0PID`              EQU 0x40040940,        4, base=16,    bitRange=28-28
12136                           ;'OTG_HS_DIEPCTL2.SODDFRM`             EQU 0x40040940,        4, base=16,    bitRange=29-29
12137                           ;'OTG_HS_DIEPCTL2.EPDIS`               EQU 0x40040940,        4, base=16,    bitRange=30-30
12138                           ;'OTG_HS_DIEPCTL2.EPENA`               EQU 0x40040940,        4, base=16,    bitRange=31-31
12139                           
12140                           ;'OTG_HS_DTXFSTS2`                     EQU 0x40040958,        4, base=16
12141                           ;'OTG_HS_DTXFSTS2.INEPTFSAV`           EQU 0x40040958,        4, base=16,    bitRange=0-15
12142                           
12143                           ;'OTG_HS_DIEPCTL3`                     EQU 0x40040960,        4, base=16
12144                           ;'OTG_HS_DIEPCTL3.MPSIZ`               EQU 0x40040960,        4, base=16,    bitRange=0-10
12145                           ;'OTG_HS_DIEPCTL3.USBAEP`              EQU 0x40040960,        4, base=16,    bitRange=15-15
12146                           ;'OTG_HS_DIEPCTL3.EONUM`               EQU 0x40040960,        4, base=16,    bitRange=16-16
12147                           ;'OTG_HS_DIEPCTL3.NAKSTS`              EQU 0x40040960,        4, base=16,    bitRange=17-17
12148                           ;'OTG_HS_DIEPCTL3.EPTYP`               EQU 0x40040960,        4, base=16,    bitRange=18-19
12149                           ;'OTG_HS_DIEPCTL3.Stall`               EQU 0x40040960,        4, base=16,    bitRange=21-21
12150                           ;'OTG_HS_DIEPCTL3.TXFNUM`              EQU 0x40040960,        4, base=16,    bitRange=22-25
12151                           ;'OTG_HS_DIEPCTL3.CNAK`                EQU 0x40040960,        4, base=16,    bitRange=26-26
12152                           ;'OTG_HS_DIEPCTL3.SNAK`                EQU 0x40040960,        4, base=16,    bitRange=27-27
12153                           ;'OTG_HS_DIEPCTL3.SD0PID`              EQU 0x40040960,        4, base=16,    bitRange=28-28
12154                           ;'OTG_HS_DIEPCTL3.SODDFRM`             EQU 0x40040960,        4, base=16,    bitRange=29-29
12155                           ;'OTG_HS_DIEPCTL3.EPDIS`               EQU 0x40040960,        4, base=16,    bitRange=30-30
12156                           ;'OTG_HS_DIEPCTL3.EPENA`               EQU 0x40040960,        4, base=16,    bitRange=31-31
12157                           
12158                           ;'OTG_HS_DTXFSTS3`                     EQU 0x40040978,        4, base=16
12159                           ;'OTG_HS_DTXFSTS3.INEPTFSAV`           EQU 0x40040978,        4, base=16,    bitRange=0-15
12160                           
12161                           ;'OTG_HS_DIEPCTL4`                     EQU 0x40040980,        4, base=16
12162                           ;'OTG_HS_DIEPCTL4.MPSIZ`               EQU 0x40040980,        4, base=16,    bitRange=0-10
12163                           ;'OTG_HS_DIEPCTL4.USBAEP`              EQU 0x40040980,        4, base=16,    bitRange=15-15
12164                           ;'OTG_HS_DIEPCTL4.EONUM`               EQU 0x40040980,        4, base=16,    bitRange=16-16
12165                           ;'OTG_HS_DIEPCTL4.NAKSTS`              EQU 0x40040980,        4, base=16,    bitRange=17-17
12166                           ;'OTG_HS_DIEPCTL4.EPTYP`               EQU 0x40040980,        4, base=16,    bitRange=18-19
12167                           ;'OTG_HS_DIEPCTL4.Stall`               EQU 0x40040980,        4, base=16,    bitRange=21-21
12168                           ;'OTG_HS_DIEPCTL4.TXFNUM`              EQU 0x40040980,        4, base=16,    bitRange=22-25
12169                           ;'OTG_HS_DIEPCTL4.CNAK`                EQU 0x40040980,        4, base=16,    bitRange=26-26
12170                           ;'OTG_HS_DIEPCTL4.SNAK`                EQU 0x40040980,        4, base=16,    bitRange=27-27
12171                           ;'OTG_HS_DIEPCTL4.SD0PID`              EQU 0x40040980,        4, base=16,    bitRange=28-28
12172                           ;'OTG_HS_DIEPCTL4.SODDFRM`             EQU 0x40040980,        4, base=16,    bitRange=29-29
12173                           ;'OTG_HS_DIEPCTL4.EPDIS`               EQU 0x40040980,        4, base=16,    bitRange=30-30
12174                           ;'OTG_HS_DIEPCTL4.EPENA`               EQU 0x40040980,        4, base=16,    bitRange=31-31
12175                           
12176                           ;'OTG_HS_DIEPCTL5`                     EQU 0x400409A0,        4, base=16
12177                           ;'OTG_HS_DIEPCTL5.MPSIZ`               EQU 0x400409A0,        4, base=16,    bitRange=0-10
12178                           ;'OTG_HS_DIEPCTL5.USBAEP`              EQU 0x400409A0,        4, base=16,    bitRange=15-15
12179                           ;'OTG_HS_DIEPCTL5.EONUM`               EQU 0x400409A0,        4, base=16,    bitRange=16-16
12180                           ;'OTG_HS_DIEPCTL5.NAKSTS`              EQU 0x400409A0,        4, base=16,    bitRange=17-17
12181                           ;'OTG_HS_DIEPCTL5.EPTYP`               EQU 0x400409A0,        4, base=16,    bitRange=18-19
12182                           ;'OTG_HS_DIEPCTL5.Stall`               EQU 0x400409A0,        4, base=16,    bitRange=21-21
12183                           ;'OTG_HS_DIEPCTL5.TXFNUM`              EQU 0x400409A0,        4, base=16,    bitRange=22-25
12184                           ;'OTG_HS_DIEPCTL5.CNAK`                EQU 0x400409A0,        4, base=16,    bitRange=26-26
12185                           ;'OTG_HS_DIEPCTL5.SNAK`                EQU 0x400409A0,        4, base=16,    bitRange=27-27
12186                           ;'OTG_HS_DIEPCTL5.SD0PID`              EQU 0x400409A0,        4, base=16,    bitRange=28-28
12187                           ;'OTG_HS_DIEPCTL5.SODDFRM`             EQU 0x400409A0,        4, base=16,    bitRange=29-29
12188                           ;'OTG_HS_DIEPCTL5.EPDIS`               EQU 0x400409A0,        4, base=16,    bitRange=30-30
12189                           ;'OTG_HS_DIEPCTL5.EPENA`               EQU 0x400409A0,        4, base=16,    bitRange=31-31
12190                           
12191                           ;'OTG_HS_DIEPCTL6`                     EQU 0x400409C0,        4, base=16
12192                           ;'OTG_HS_DIEPCTL6.MPSIZ`               EQU 0x400409C0,        4, base=16,    bitRange=0-10
12193                           ;'OTG_HS_DIEPCTL6.USBAEP`              EQU 0x400409C0,        4, base=16,    bitRange=15-15
12194                           ;'OTG_HS_DIEPCTL6.EONUM`               EQU 0x400409C0,        4, base=16,    bitRange=16-16
12195                           ;'OTG_HS_DIEPCTL6.NAKSTS`              EQU 0x400409C0,        4, base=16,    bitRange=17-17
12196                           ;'OTG_HS_DIEPCTL6.EPTYP`               EQU 0x400409C0,        4, base=16,    bitRange=18-19
12197                           ;'OTG_HS_DIEPCTL6.Stall`               EQU 0x400409C0,        4, base=16,    bitRange=21-21
12198                           ;'OTG_HS_DIEPCTL6.TXFNUM`              EQU 0x400409C0,        4, base=16,    bitRange=22-25
12199                           ;'OTG_HS_DIEPCTL6.CNAK`                EQU 0x400409C0,        4, base=16,    bitRange=26-26
12200                           ;'OTG_HS_DIEPCTL6.SNAK`                EQU 0x400409C0,        4, base=16,    bitRange=27-27
12201                           ;'OTG_HS_DIEPCTL6.SD0PID`              EQU 0x400409C0,        4, base=16,    bitRange=28-28
12202                           ;'OTG_HS_DIEPCTL6.SODDFRM`             EQU 0x400409C0,        4, base=16,    bitRange=29-29
12203                           ;'OTG_HS_DIEPCTL6.EPDIS`               EQU 0x400409C0,        4, base=16,    bitRange=30-30
12204                           ;'OTG_HS_DIEPCTL6.EPENA`               EQU 0x400409C0,        4, base=16,    bitRange=31-31
12205                           
12206                           ;'OTG_HS_DIEPCTL7`                     EQU 0x400409E0,        4, base=16
12207                           ;'OTG_HS_DIEPCTL7.MPSIZ`               EQU 0x400409E0,        4, base=16,    bitRange=0-10
12208                           ;'OTG_HS_DIEPCTL7.USBAEP`              EQU 0x400409E0,        4, base=16,    bitRange=15-15
12209                           ;'OTG_HS_DIEPCTL7.EONUM`               EQU 0x400409E0,        4, base=16,    bitRange=16-16
12210                           ;'OTG_HS_DIEPCTL7.NAKSTS`              EQU 0x400409E0,        4, base=16,    bitRange=17-17
12211                           ;'OTG_HS_DIEPCTL7.EPTYP`               EQU 0x400409E0,        4, base=16,    bitRange=18-19
12212                           ;'OTG_HS_DIEPCTL7.Stall`               EQU 0x400409E0,        4, base=16,    bitRange=21-21
12213                           ;'OTG_HS_DIEPCTL7.TXFNUM`              EQU 0x400409E0,        4, base=16,    bitRange=22-25
12214                           ;'OTG_HS_DIEPCTL7.CNAK`                EQU 0x400409E0,        4, base=16,    bitRange=26-26
12215                           ;'OTG_HS_DIEPCTL7.SNAK`                EQU 0x400409E0,        4, base=16,    bitRange=27-27
12216                           ;'OTG_HS_DIEPCTL7.SD0PID`              EQU 0x400409E0,        4, base=16,    bitRange=28-28
12217                           ;'OTG_HS_DIEPCTL7.SODDFRM`             EQU 0x400409E0,        4, base=16,    bitRange=29-29
12218                           ;'OTG_HS_DIEPCTL7.EPDIS`               EQU 0x400409E0,        4, base=16,    bitRange=30-30
12219                           ;'OTG_HS_DIEPCTL7.EPENA`               EQU 0x400409E0,        4, base=16,    bitRange=31-31
12220                           
12221                           ;'OTG_HS_DOEPCTL0`                     EQU 0x40040B00,        4, base=16
12222                           ;'OTG_HS_DOEPCTL0.MPSIZ`               EQU 0x40040B00,        4, base=16,    bitRange=0-1
12223                           ;'OTG_HS_DOEPCTL0.USBAEP`              EQU 0x40040B00,        4, base=16,    bitRange=15-15
12224                           ;'OTG_HS_DOEPCTL0.NAKSTS`              EQU 0x40040B00,        4, base=16,    bitRange=17-17
12225                           ;'OTG_HS_DOEPCTL0.EPTYP`               EQU 0x40040B00,        4, base=16,    bitRange=18-19
12226                           ;'OTG_HS_DOEPCTL0.SNPM`                EQU 0x40040B00,        4, base=16,    bitRange=20-20
12227                           ;'OTG_HS_DOEPCTL0.Stall`               EQU 0x40040B00,        4, base=16,    bitRange=21-21
12228                           ;'OTG_HS_DOEPCTL0.CNAK`                EQU 0x40040B00,        4, base=16,    bitRange=26-26
12229                           ;'OTG_HS_DOEPCTL0.SNAK`                EQU 0x40040B00,        4, base=16,    bitRange=27-27
12230                           ;'OTG_HS_DOEPCTL0.EPDIS`               EQU 0x40040B00,        4, base=16,    bitRange=30-30
12231                           ;'OTG_HS_DOEPCTL0.EPENA`               EQU 0x40040B00,        4, base=16,    bitRange=31-31
12232                           
12233                           ;'OTG_HS_DOEPCTL1`                     EQU 0x40040B20,        4, base=16
12234                           ;'OTG_HS_DOEPCTL1.MPSIZ`               EQU 0x40040B20,        4, base=16,    bitRange=0-10
12235                           ;'OTG_HS_DOEPCTL1.USBAEP`              EQU 0x40040B20,        4, base=16,    bitRange=15-15
12236                           ;'OTG_HS_DOEPCTL1.EONUM`               EQU 0x40040B20,        4, base=16,    bitRange=16-16
12237                           ;'OTG_HS_DOEPCTL1.NAKSTS`              EQU 0x40040B20,        4, base=16,    bitRange=17-17
12238                           ;'OTG_HS_DOEPCTL1.EPTYP`               EQU 0x40040B20,        4, base=16,    bitRange=18-19
12239                           ;'OTG_HS_DOEPCTL1.SNPM`                EQU 0x40040B20,        4, base=16,    bitRange=20-20
12240                           ;'OTG_HS_DOEPCTL1.Stall`               EQU 0x40040B20,        4, base=16,    bitRange=21-21
12241                           ;'OTG_HS_DOEPCTL1.CNAK`                EQU 0x40040B20,        4, base=16,    bitRange=26-26
12242                           ;'OTG_HS_DOEPCTL1.SNAK`                EQU 0x40040B20,        4, base=16,    bitRange=27-27
12243                           ;'OTG_HS_DOEPCTL1.SD0PID`              EQU 0x40040B20,        4, base=16,    bitRange=28-28
12244                           ;'OTG_HS_DOEPCTL1.SODDFRM`             EQU 0x40040B20,        4, base=16,    bitRange=29-29
12245                           ;'OTG_HS_DOEPCTL1.EPDIS`               EQU 0x40040B20,        4, base=16,    bitRange=30-30
12246                           ;'OTG_HS_DOEPCTL1.EPENA`               EQU 0x40040B20,        4, base=16,    bitRange=31-31
12247                           
12248                           ;'OTG_HS_DOEPCTL2`                     EQU 0x40040B40,        4, base=16
12249                           ;'OTG_HS_DOEPCTL2.MPSIZ`               EQU 0x40040B40,        4, base=16,    bitRange=0-10
12250                           ;'OTG_HS_DOEPCTL2.USBAEP`              EQU 0x40040B40,        4, base=16,    bitRange=15-15
12251                           ;'OTG_HS_DOEPCTL2.EONUM`               EQU 0x40040B40,        4, base=16,    bitRange=16-16
12252                           ;'OTG_HS_DOEPCTL2.NAKSTS`              EQU 0x40040B40,        4, base=16,    bitRange=17-17
12253                           ;'OTG_HS_DOEPCTL2.EPTYP`               EQU 0x40040B40,        4, base=16,    bitRange=18-19
12254                           ;'OTG_HS_DOEPCTL2.SNPM`                EQU 0x40040B40,        4, base=16,    bitRange=20-20
12255                           ;'OTG_HS_DOEPCTL2.Stall`               EQU 0x40040B40,        4, base=16,    bitRange=21-21
12256                           ;'OTG_HS_DOEPCTL2.CNAK`                EQU 0x40040B40,        4, base=16,    bitRange=26-26
12257                           ;'OTG_HS_DOEPCTL2.SNAK`                EQU 0x40040B40,        4, base=16,    bitRange=27-27
12258                           ;'OTG_HS_DOEPCTL2.SD0PID`              EQU 0x40040B40,        4, base=16,    bitRange=28-28
12259                           ;'OTG_HS_DOEPCTL2.SODDFRM`             EQU 0x40040B40,        4, base=16,    bitRange=29-29
12260                           ;'OTG_HS_DOEPCTL2.EPDIS`               EQU 0x40040B40,        4, base=16,    bitRange=30-30
12261                           ;'OTG_HS_DOEPCTL2.EPENA`               EQU 0x40040B40,        4, base=16,    bitRange=31-31
12262                           
12263                           ;'OTG_HS_DOEPCTL3`                     EQU 0x40040B60,        4, base=16
12264                           ;'OTG_HS_DOEPCTL3.MPSIZ`               EQU 0x40040B60,        4, base=16,    bitRange=0-10
12265                           ;'OTG_HS_DOEPCTL3.USBAEP`              EQU 0x40040B60,        4, base=16,    bitRange=15-15
12266                           ;'OTG_HS_DOEPCTL3.EONUM`               EQU 0x40040B60,        4, base=16,    bitRange=16-16
12267                           ;'OTG_HS_DOEPCTL3.NAKSTS`              EQU 0x40040B60,        4, base=16,    bitRange=17-17
12268                           ;'OTG_HS_DOEPCTL3.EPTYP`               EQU 0x40040B60,        4, base=16,    bitRange=18-19
12269                           ;'OTG_HS_DOEPCTL3.SNPM`                EQU 0x40040B60,        4, base=16,    bitRange=20-20
12270                           ;'OTG_HS_DOEPCTL3.Stall`               EQU 0x40040B60,        4, base=16,    bitRange=21-21
12271                           ;'OTG_HS_DOEPCTL3.CNAK`                EQU 0x40040B60,        4, base=16,    bitRange=26-26
12272                           ;'OTG_HS_DOEPCTL3.SNAK`                EQU 0x40040B60,        4, base=16,    bitRange=27-27
12273                           ;'OTG_HS_DOEPCTL3.SD0PID`              EQU 0x40040B60,        4, base=16,    bitRange=28-28
12274                           ;'OTG_HS_DOEPCTL3.SODDFRM`             EQU 0x40040B60,        4, base=16,    bitRange=29-29
12275                           ;'OTG_HS_DOEPCTL3.EPDIS`               EQU 0x40040B60,        4, base=16,    bitRange=30-30
12276                           ;'OTG_HS_DOEPCTL3.EPENA`               EQU 0x40040B60,        4, base=16,    bitRange=31-31
12277                           
12278                           ;'OTG_HS_DIEPINT0`                     EQU 0x40040908,        4, base=16
12279                           ;'OTG_HS_DIEPINT0.XFRC`                EQU 0x40040908,        4, base=16,    bitRange=0-0
12280                           ;'OTG_HS_DIEPINT0.EPDISD`              EQU 0x40040908,        4, base=16,    bitRange=1-1
12281                           ;'OTG_HS_DIEPINT0.TOC`                 EQU 0x40040908,        4, base=16,    bitRange=3-3
12282                           ;'OTG_HS_DIEPINT0.ITTXFE`              EQU 0x40040908,        4, base=16,    bitRange=4-4
12283                           ;'OTG_HS_DIEPINT0.INEPNE`              EQU 0x40040908,        4, base=16,    bitRange=6-6
12284                           ;'OTG_HS_DIEPINT0.TXFE`                EQU 0x40040908,        4, base=16,    bitRange=7-7
12285                           ;'OTG_HS_DIEPINT0.TXFIFOUDRN`          EQU 0x40040908,        4, base=16,    bitRange=8-8
12286                           ;'OTG_HS_DIEPINT0.BNA`                 EQU 0x40040908,        4, base=16,    bitRange=9-9
12287                           ;'OTG_HS_DIEPINT0.PKTDRPSTS`           EQU 0x40040908,        4, base=16,    bitRange=11-11
12288                           ;'OTG_HS_DIEPINT0.BERR`                EQU 0x40040908,        4, base=16,    bitRange=12-12
12289                           ;'OTG_HS_DIEPINT0.NAK`                 EQU 0x40040908,        4, base=16,    bitRange=13-13
12290                           
12291                           ;'OTG_HS_DIEPINT1`                     EQU 0x40040928,        4, base=16
12292                           ;'OTG_HS_DIEPINT1.XFRC`                EQU 0x40040928,        4, base=16,    bitRange=0-0
12293                           ;'OTG_HS_DIEPINT1.EPDISD`              EQU 0x40040928,        4, base=16,    bitRange=1-1
12294                           ;'OTG_HS_DIEPINT1.TOC`                 EQU 0x40040928,        4, base=16,    bitRange=3-3
12295                           ;'OTG_HS_DIEPINT1.ITTXFE`              EQU 0x40040928,        4, base=16,    bitRange=4-4
12296                           ;'OTG_HS_DIEPINT1.INEPNE`              EQU 0x40040928,        4, base=16,    bitRange=6-6
12297                           ;'OTG_HS_DIEPINT1.TXFE`                EQU 0x40040928,        4, base=16,    bitRange=7-7
12298                           ;'OTG_HS_DIEPINT1.TXFIFOUDRN`          EQU 0x40040928,        4, base=16,    bitRange=8-8
12299                           ;'OTG_HS_DIEPINT1.BNA`                 EQU 0x40040928,        4, base=16,    bitRange=9-9
12300                           ;'OTG_HS_DIEPINT1.PKTDRPSTS`           EQU 0x40040928,        4, base=16,    bitRange=11-11
12301                           ;'OTG_HS_DIEPINT1.BERR`                EQU 0x40040928,        4, base=16,    bitRange=12-12
12302                           ;'OTG_HS_DIEPINT1.NAK`                 EQU 0x40040928,        4, base=16,    bitRange=13-13
12303                           
12304                           ;'OTG_HS_DIEPINT2`                     EQU 0x40040948,        4, base=16
12305                           ;'OTG_HS_DIEPINT2.XFRC`                EQU 0x40040948,        4, base=16,    bitRange=0-0
12306                           ;'OTG_HS_DIEPINT2.EPDISD`              EQU 0x40040948,        4, base=16,    bitRange=1-1
12307                           ;'OTG_HS_DIEPINT2.TOC`                 EQU 0x40040948,        4, base=16,    bitRange=3-3
12308                           ;'OTG_HS_DIEPINT2.ITTXFE`              EQU 0x40040948,        4, base=16,    bitRange=4-4
12309                           ;'OTG_HS_DIEPINT2.INEPNE`              EQU 0x40040948,        4, base=16,    bitRange=6-6
12310                           ;'OTG_HS_DIEPINT2.TXFE`                EQU 0x40040948,        4, base=16,    bitRange=7-7
12311                           ;'OTG_HS_DIEPINT2.TXFIFOUDRN`          EQU 0x40040948,        4, base=16,    bitRange=8-8
12312                           ;'OTG_HS_DIEPINT2.BNA`                 EQU 0x40040948,        4, base=16,    bitRange=9-9
12313                           ;'OTG_HS_DIEPINT2.PKTDRPSTS`           EQU 0x40040948,        4, base=16,    bitRange=11-11
12314                           ;'OTG_HS_DIEPINT2.BERR`                EQU 0x40040948,        4, base=16,    bitRange=12-12
12315                           ;'OTG_HS_DIEPINT2.NAK`                 EQU 0x40040948,        4, base=16,    bitRange=13-13
12316                           
12317                           ;'OTG_HS_DIEPINT3`                     EQU 0x40040968,        4, base=16
12318                           ;'OTG_HS_DIEPINT3.XFRC`                EQU 0x40040968,        4, base=16,    bitRange=0-0
12319                           ;'OTG_HS_DIEPINT3.EPDISD`              EQU 0x40040968,        4, base=16,    bitRange=1-1
12320                           ;'OTG_HS_DIEPINT3.TOC`                 EQU 0x40040968,        4, base=16,    bitRange=3-3
12321                           ;'OTG_HS_DIEPINT3.ITTXFE`              EQU 0x40040968,        4, base=16,    bitRange=4-4
12322                           ;'OTG_HS_DIEPINT3.INEPNE`              EQU 0x40040968,        4, base=16,    bitRange=6-6
12323                           ;'OTG_HS_DIEPINT3.TXFE`                EQU 0x40040968,        4, base=16,    bitRange=7-7
12324                           ;'OTG_HS_DIEPINT3.TXFIFOUDRN`          EQU 0x40040968,        4, base=16,    bitRange=8-8
12325                           ;'OTG_HS_DIEPINT3.BNA`                 EQU 0x40040968,        4, base=16,    bitRange=9-9
12326                           ;'OTG_HS_DIEPINT3.PKTDRPSTS`           EQU 0x40040968,        4, base=16,    bitRange=11-11
12327                           ;'OTG_HS_DIEPINT3.BERR`                EQU 0x40040968,        4, base=16,    bitRange=12-12
12328                           ;'OTG_HS_DIEPINT3.NAK`                 EQU 0x40040968,        4, base=16,    bitRange=13-13
12329                           
12330                           ;'OTG_HS_DIEPINT4`                     EQU 0x40040988,        4, base=16
12331                           ;'OTG_HS_DIEPINT4.XFRC`                EQU 0x40040988,        4, base=16,    bitRange=0-0
12332                           ;'OTG_HS_DIEPINT4.EPDISD`              EQU 0x40040988,        4, base=16,    bitRange=1-1
12333                           ;'OTG_HS_DIEPINT4.TOC`                 EQU 0x40040988,        4, base=16,    bitRange=3-3
12334                           ;'OTG_HS_DIEPINT4.ITTXFE`              EQU 0x40040988,        4, base=16,    bitRange=4-4
12335                           ;'OTG_HS_DIEPINT4.INEPNE`              EQU 0x40040988,        4, base=16,    bitRange=6-6
12336                           ;'OTG_HS_DIEPINT4.TXFE`                EQU 0x40040988,        4, base=16,    bitRange=7-7
12337                           ;'OTG_HS_DIEPINT4.TXFIFOUDRN`          EQU 0x40040988,        4, base=16,    bitRange=8-8
12338                           ;'OTG_HS_DIEPINT4.BNA`                 EQU 0x40040988,        4, base=16,    bitRange=9-9
12339                           ;'OTG_HS_DIEPINT4.PKTDRPSTS`           EQU 0x40040988,        4, base=16,    bitRange=11-11
12340                           ;'OTG_HS_DIEPINT4.BERR`                EQU 0x40040988,        4, base=16,    bitRange=12-12
12341                           ;'OTG_HS_DIEPINT4.NAK`                 EQU 0x40040988,        4, base=16,    bitRange=13-13
12342                           
12343                           ;'OTG_HS_DIEPINT5`                     EQU 0x400409A8,        4, base=16
12344                           ;'OTG_HS_DIEPINT5.XFRC`                EQU 0x400409A8,        4, base=16,    bitRange=0-0
12345                           ;'OTG_HS_DIEPINT5.EPDISD`              EQU 0x400409A8,        4, base=16,    bitRange=1-1
12346                           ;'OTG_HS_DIEPINT5.TOC`                 EQU 0x400409A8,        4, base=16,    bitRange=3-3
12347                           ;'OTG_HS_DIEPINT5.ITTXFE`              EQU 0x400409A8,        4, base=16,    bitRange=4-4
12348                           ;'OTG_HS_DIEPINT5.INEPNE`              EQU 0x400409A8,        4, base=16,    bitRange=6-6
12349                           ;'OTG_HS_DIEPINT5.TXFE`                EQU 0x400409A8,        4, base=16,    bitRange=7-7
12350                           ;'OTG_HS_DIEPINT5.TXFIFOUDRN`          EQU 0x400409A8,        4, base=16,    bitRange=8-8
12351                           ;'OTG_HS_DIEPINT5.BNA`                 EQU 0x400409A8,        4, base=16,    bitRange=9-9
12352                           ;'OTG_HS_DIEPINT5.PKTDRPSTS`           EQU 0x400409A8,        4, base=16,    bitRange=11-11
12353                           ;'OTG_HS_DIEPINT5.BERR`                EQU 0x400409A8,        4, base=16,    bitRange=12-12
12354                           ;'OTG_HS_DIEPINT5.NAK`                 EQU 0x400409A8,        4, base=16,    bitRange=13-13
12355                           
12356                           ;'OTG_HS_DIEPINT6`                     EQU 0x400409C8,        4, base=16
12357                           ;'OTG_HS_DIEPINT6.XFRC`                EQU 0x400409C8,        4, base=16,    bitRange=0-0
12358                           ;'OTG_HS_DIEPINT6.EPDISD`              EQU 0x400409C8,        4, base=16,    bitRange=1-1
12359                           ;'OTG_HS_DIEPINT6.TOC`                 EQU 0x400409C8,        4, base=16,    bitRange=3-3
12360                           ;'OTG_HS_DIEPINT6.ITTXFE`              EQU 0x400409C8,        4, base=16,    bitRange=4-4
12361                           ;'OTG_HS_DIEPINT6.INEPNE`              EQU 0x400409C8,        4, base=16,    bitRange=6-6
12362                           ;'OTG_HS_DIEPINT6.TXFE`                EQU 0x400409C8,        4, base=16,    bitRange=7-7
12363                           ;'OTG_HS_DIEPINT6.TXFIFOUDRN`          EQU 0x400409C8,        4, base=16,    bitRange=8-8
12364                           ;'OTG_HS_DIEPINT6.BNA`                 EQU 0x400409C8,        4, base=16,    bitRange=9-9
12365                           ;'OTG_HS_DIEPINT6.PKTDRPSTS`           EQU 0x400409C8,        4, base=16,    bitRange=11-11
12366                           ;'OTG_HS_DIEPINT6.BERR`                EQU 0x400409C8,        4, base=16,    bitRange=12-12
12367                           ;'OTG_HS_DIEPINT6.NAK`                 EQU 0x400409C8,        4, base=16,    bitRange=13-13
12368                           
12369                           ;'OTG_HS_DIEPINT7`                     EQU 0x400409E8,        4, base=16
12370                           ;'OTG_HS_DIEPINT7.XFRC`                EQU 0x400409E8,        4, base=16,    bitRange=0-0
12371                           ;'OTG_HS_DIEPINT7.EPDISD`              EQU 0x400409E8,        4, base=16,    bitRange=1-1
12372                           ;'OTG_HS_DIEPINT7.TOC`                 EQU 0x400409E8,        4, base=16,    bitRange=3-3
12373                           ;'OTG_HS_DIEPINT7.ITTXFE`              EQU 0x400409E8,        4, base=16,    bitRange=4-4
12374                           ;'OTG_HS_DIEPINT7.INEPNE`              EQU 0x400409E8,        4, base=16,    bitRange=6-6
12375                           ;'OTG_HS_DIEPINT7.TXFE`                EQU 0x400409E8,        4, base=16,    bitRange=7-7
12376                           ;'OTG_HS_DIEPINT7.TXFIFOUDRN`          EQU 0x400409E8,        4, base=16,    bitRange=8-8
12377                           ;'OTG_HS_DIEPINT7.BNA`                 EQU 0x400409E8,        4, base=16,    bitRange=9-9
12378                           ;'OTG_HS_DIEPINT7.PKTDRPSTS`           EQU 0x400409E8,        4, base=16,    bitRange=11-11
12379                           ;'OTG_HS_DIEPINT7.BERR`                EQU 0x400409E8,        4, base=16,    bitRange=12-12
12380                           ;'OTG_HS_DIEPINT7.NAK`                 EQU 0x400409E8,        4, base=16,    bitRange=13-13
12381                           
12382                           ;'OTG_HS_DOEPINT0`                     EQU 0x40040B08,        4, base=16
12383                           ;'OTG_HS_DOEPINT0.XFRC`                EQU 0x40040B08,        4, base=16,    bitRange=0-0
12384                           ;'OTG_HS_DOEPINT0.EPDISD`              EQU 0x40040B08,        4, base=16,    bitRange=1-1
12385                           ;'OTG_HS_DOEPINT0.STUP`                EQU 0x40040B08,        4, base=16,    bitRange=3-3
12386                           ;'OTG_HS_DOEPINT0.OTEPDIS`             EQU 0x40040B08,        4, base=16,    bitRange=4-4
12387                           ;'OTG_HS_DOEPINT0.B2BSTUP`             EQU 0x40040B08,        4, base=16,    bitRange=6-6
12388                           ;'OTG_HS_DOEPINT0.NYET`                EQU 0x40040B08,        4, base=16,    bitRange=14-14
12389                           
12390                           ;'OTG_HS_DOEPINT1`                     EQU 0x40040B28,        4, base=16
12391                           ;'OTG_HS_DOEPINT1.XFRC`                EQU 0x40040B28,        4, base=16,    bitRange=0-0
12392                           ;'OTG_HS_DOEPINT1.EPDISD`              EQU 0x40040B28,        4, base=16,    bitRange=1-1
12393                           ;'OTG_HS_DOEPINT1.STUP`                EQU 0x40040B28,        4, base=16,    bitRange=3-3
12394                           ;'OTG_HS_DOEPINT1.OTEPDIS`             EQU 0x40040B28,        4, base=16,    bitRange=4-4
12395                           ;'OTG_HS_DOEPINT1.B2BSTUP`             EQU 0x40040B28,        4, base=16,    bitRange=6-6
12396                           ;'OTG_HS_DOEPINT1.NYET`                EQU 0x40040B28,        4, base=16,    bitRange=14-14
12397                           
12398                           ;'OTG_HS_DOEPINT2`                     EQU 0x40040B48,        4, base=16
12399                           ;'OTG_HS_DOEPINT2.XFRC`                EQU 0x40040B48,        4, base=16,    bitRange=0-0
12400                           ;'OTG_HS_DOEPINT2.EPDISD`              EQU 0x40040B48,        4, base=16,    bitRange=1-1
12401                           ;'OTG_HS_DOEPINT2.STUP`                EQU 0x40040B48,        4, base=16,    bitRange=3-3
12402                           ;'OTG_HS_DOEPINT2.OTEPDIS`             EQU 0x40040B48,        4, base=16,    bitRange=4-4
12403                           ;'OTG_HS_DOEPINT2.B2BSTUP`             EQU 0x40040B48,        4, base=16,    bitRange=6-6
12404                           ;'OTG_HS_DOEPINT2.NYET`                EQU 0x40040B48,        4, base=16,    bitRange=14-14
12405                           
12406                           ;'OTG_HS_DOEPINT3`                     EQU 0x40040B68,        4, base=16
12407                           ;'OTG_HS_DOEPINT3.XFRC`                EQU 0x40040B68,        4, base=16,    bitRange=0-0
12408                           ;'OTG_HS_DOEPINT3.EPDISD`              EQU 0x40040B68,        4, base=16,    bitRange=1-1
12409                           ;'OTG_HS_DOEPINT3.STUP`                EQU 0x40040B68,        4, base=16,    bitRange=3-3
12410                           ;'OTG_HS_DOEPINT3.OTEPDIS`             EQU 0x40040B68,        4, base=16,    bitRange=4-4
12411                           ;'OTG_HS_DOEPINT3.B2BSTUP`             EQU 0x40040B68,        4, base=16,    bitRange=6-6
12412                           ;'OTG_HS_DOEPINT3.NYET`                EQU 0x40040B68,        4, base=16,    bitRange=14-14
12413                           
12414                           ;'OTG_HS_DOEPINT4`                     EQU 0x40040B88,        4, base=16
12415                           ;'OTG_HS_DOEPINT4.XFRC`                EQU 0x40040B88,        4, base=16,    bitRange=0-0
12416                           ;'OTG_HS_DOEPINT4.EPDISD`              EQU 0x40040B88,        4, base=16,    bitRange=1-1
12417                           ;'OTG_HS_DOEPINT4.STUP`                EQU 0x40040B88,        4, base=16,    bitRange=3-3
12418                           ;'OTG_HS_DOEPINT4.OTEPDIS`             EQU 0x40040B88,        4, base=16,    bitRange=4-4
12419                           ;'OTG_HS_DOEPINT4.B2BSTUP`             EQU 0x40040B88,        4, base=16,    bitRange=6-6
12420                           ;'OTG_HS_DOEPINT4.NYET`                EQU 0x40040B88,        4, base=16,    bitRange=14-14
12421                           
12422                           ;'OTG_HS_DOEPINT5`                     EQU 0x40040BA8,        4, base=16
12423                           ;'OTG_HS_DOEPINT5.XFRC`                EQU 0x40040BA8,        4, base=16,    bitRange=0-0
12424                           ;'OTG_HS_DOEPINT5.EPDISD`              EQU 0x40040BA8,        4, base=16,    bitRange=1-1
12425                           ;'OTG_HS_DOEPINT5.STUP`                EQU 0x40040BA8,        4, base=16,    bitRange=3-3
12426                           ;'OTG_HS_DOEPINT5.OTEPDIS`             EQU 0x40040BA8,        4, base=16,    bitRange=4-4
12427                           ;'OTG_HS_DOEPINT5.B2BSTUP`             EQU 0x40040BA8,        4, base=16,    bitRange=6-6
12428                           ;'OTG_HS_DOEPINT5.NYET`                EQU 0x40040BA8,        4, base=16,    bitRange=14-14
12429                           
12430                           ;'OTG_HS_DOEPINT6`                     EQU 0x40040BC8,        4, base=16
12431                           ;'OTG_HS_DOEPINT6.XFRC`                EQU 0x40040BC8,        4, base=16,    bitRange=0-0
12432                           ;'OTG_HS_DOEPINT6.EPDISD`              EQU 0x40040BC8,        4, base=16,    bitRange=1-1
12433                           ;'OTG_HS_DOEPINT6.STUP`                EQU 0x40040BC8,        4, base=16,    bitRange=3-3
12434                           ;'OTG_HS_DOEPINT6.OTEPDIS`             EQU 0x40040BC8,        4, base=16,    bitRange=4-4
12435                           ;'OTG_HS_DOEPINT6.B2BSTUP`             EQU 0x40040BC8,        4, base=16,    bitRange=6-6
12436                           ;'OTG_HS_DOEPINT6.NYET`                EQU 0x40040BC8,        4, base=16,    bitRange=14-14
12437                           
12438                           ;'OTG_HS_DOEPINT7`                     EQU 0x40040BE8,        4, base=16
12439                           ;'OTG_HS_DOEPINT7.XFRC`                EQU 0x40040BE8,        4, base=16,    bitRange=0-0
12440                           ;'OTG_HS_DOEPINT7.EPDISD`              EQU 0x40040BE8,        4, base=16,    bitRange=1-1
12441                           ;'OTG_HS_DOEPINT7.STUP`                EQU 0x40040BE8,        4, base=16,    bitRange=3-3
12442                           ;'OTG_HS_DOEPINT7.OTEPDIS`             EQU 0x40040BE8,        4, base=16,    bitRange=4-4
12443                           ;'OTG_HS_DOEPINT7.B2BSTUP`             EQU 0x40040BE8,        4, base=16,    bitRange=6-6
12444                           ;'OTG_HS_DOEPINT7.NYET`                EQU 0x40040BE8,        4, base=16,    bitRange=14-14
12445                           
12446                           ;'OTG_HS_DIEPTSIZ0`                    EQU 0x40040910,        4, base=16
12447                           ;'OTG_HS_DIEPTSIZ0.XFRSIZ`             EQU 0x40040910,        4, base=16,    bitRange=0-18
12448                           ;'OTG_HS_DIEPTSIZ0.PKTCNT`             EQU 0x40040910,        4, base=16,    bitRange=19-28
12449                           ;'OTG_HS_DIEPTSIZ0.MCNT`               EQU 0x40040910,        4, base=16,    bitRange=29-30
12450                           
12451                           ;'OTG_HS_DIEPDMA0`                     EQU 0x40040914,        4, base=16
12452                           
12453                           ;'OTG_HS_DIEPDMAB0`                    EQU 0x4004091C,        4, base=16
12454                           
12455                           ;'OTG_HS_DIEPTSIZ1`                    EQU 0x40040930,        4, base=16
12456                           ;'OTG_HS_DIEPTSIZ1.XFRSIZ`             EQU 0x40040930,        4, base=16,    bitRange=0-18
12457                           ;'OTG_HS_DIEPTSIZ1.PKTCNT`             EQU 0x40040930,        4, base=16,    bitRange=19-28
12458                           ;'OTG_HS_DIEPTSIZ1.MCNT`               EQU 0x40040930,        4, base=16,    bitRange=29-30
12459                           
12460                           ;'OTG_HS_DIEPDMA1`                     EQU 0x40040934,        4, base=16
12461                           
12462                           ;'OTG_HS_DIEPDMAB1`                    EQU 0x4004093C,        4, base=16
12463                           
12464                           ;'OTG_HS_DIEPTSIZ2`                    EQU 0x40040950,        4, base=16
12465                           ;'OTG_HS_DIEPTSIZ2.XFRSIZ`             EQU 0x40040950,        4, base=16,    bitRange=0-18
12466                           ;'OTG_HS_DIEPTSIZ2.PKTCNT`             EQU 0x40040950,        4, base=16,    bitRange=19-28
12467                           ;'OTG_HS_DIEPTSIZ2.MCNT`               EQU 0x40040950,        4, base=16,    bitRange=29-30
12468                           
12469                           ;'OTG_HS_DIEPDMA2`                     EQU 0x40040954,        4, base=16
12470                           
12471                           ;'OTG_HS_DIEPDMAB2`                    EQU 0x4004095C,        4, base=16
12472                           
12473                           ;'OTG_HS_DIEPTSIZ3`                    EQU 0x40040970,        4, base=16
12474                           ;'OTG_HS_DIEPTSIZ3.XFRSIZ`             EQU 0x40040970,        4, base=16,    bitRange=0-18
12475                           ;'OTG_HS_DIEPTSIZ3.PKTCNT`             EQU 0x40040970,        4, base=16,    bitRange=19-28
12476                           ;'OTG_HS_DIEPTSIZ3.MCNT`               EQU 0x40040970,        4, base=16,    bitRange=29-30
12477                           
12478                           ;'OTG_HS_DIEPDMA3`                     EQU 0x40040974,        4, base=16
12479                           
12480                           ;'OTG_HS_DIEPDMAB3`                    EQU 0x4004097C,        4, base=16
12481                           
12482                           ;'OTG_HS_DOEPTSIZ0`                    EQU 0x40040B10,        4, base=16
12483                           ;'OTG_HS_DOEPTSIZ0.XFRSIZ`             EQU 0x40040B10,        4, base=16,    bitRange=0-18
12484                           ;'OTG_HS_DOEPTSIZ0.PKTCNT`             EQU 0x40040B10,        4, base=16,    bitRange=19-28
12485                           ;'OTG_HS_DOEPTSIZ0.RXDPID`             EQU 0x40040B10,        4, base=16,    bitRange=29-30
12486                           
12487                           ;'OTG_HS_DOEPDMA0`                     EQU 0x40040B14,        4, base=16
12488                           
12489                           ;'OTG_HS_DOEPDMAB0`                    EQU 0x40040B1C,        4, base=16
12490                           
12491                           ;'OTG_HS_DOEPTSIZ1`                    EQU 0x40040B30,        4, base=16
12492                           ;'OTG_HS_DOEPTSIZ1.XFRSIZ`             EQU 0x40040B30,        4, base=16,    bitRange=0-18
12493                           ;'OTG_HS_DOEPTSIZ1.PKTCNT`             EQU 0x40040B30,        4, base=16,    bitRange=19-28
12494                           ;'OTG_HS_DOEPTSIZ1.RXDPID`             EQU 0x40040B30,        4, base=16,    bitRange=29-30
12495                           
12496                           ;'OTG_HS_DOEPDMA1`                     EQU 0x40040B34,        4, base=16
12497                           
12498                           ;'OTG_HS_DOEPDMAB1`                    EQU 0x40040B3C,        4, base=16
12499                           
12500                           ;'OTG_HS_DOEPTSIZ2`                    EQU 0x40040B50,        4, base=16
12501                           ;'OTG_HS_DOEPTSIZ2.XFRSIZ`             EQU 0x40040B50,        4, base=16,    bitRange=0-18
12502                           ;'OTG_HS_DOEPTSIZ2.PKTCNT`             EQU 0x40040B50,        4, base=16,    bitRange=19-28
12503                           ;'OTG_HS_DOEPTSIZ2.RXDPID`             EQU 0x40040B50,        4, base=16,    bitRange=29-30
12504                           
12505                           ;'OTG_HS_DOEPDMA2`                     EQU 0x40040B54,        4, base=16
12506                           
12507                           ;'OTG_HS_DOEPDMAB2`                    EQU 0x40040B5C,        4, base=16
12508                           
12509                           ;'OTG_HS_DOEPTSIZ3`                    EQU 0x40040B70,        4, base=16
12510                           ;'OTG_HS_DOEPTSIZ3.XFRSIZ`             EQU 0x40040B70,        4, base=16,    bitRange=0-18
12511                           ;'OTG_HS_DOEPTSIZ3.PKTCNT`             EQU 0x40040B70,        4, base=16,    bitRange=19-28
12512                           ;'OTG_HS_DOEPTSIZ3.RXDPID`             EQU 0x40040B70,        4, base=16,    bitRange=29-30
12513                           
12514                           ;'OTG_HS_DOEPDMA3`                     EQU 0x40040B74,        4, base=16
12515                           
12516                           ;'OTG_HS_DOEPDMAB3`                    EQU 0x40040B7C,        4, base=16
12517                           
12518                           ;'OTG_HS_PCGCCTL`                      EQU 0x40040E00,        4, base=16
12519                           ;'OTG_HS_PCGCCTL.STPPCLK`              EQU 0x40040E00,        4, base=16,    bitRange=0-0
12520                           ;'OTG_HS_PCGCCTL.GATEHCLK`             EQU 0x40040E00,        4, base=16,    bitRange=1-1
12521                           ;'OTG_HS_PCGCCTL.PHYSUSP`              EQU 0x40040E00,        4, base=16,    bitRange=4-4
12522                           
12523                           
12524                           ;
12525                           ;               Ethernet
12526                           ;
12527                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
12528                           ;     ----                                    ----      -------     --------  -----------
                                 --------
12529                           
12530                           ;'ETH_MACCR`                           EQU 0x40028000,        4, base=16
12531                           ;'ETH_MACCR.RE`                        EQU 0x40028000,        4, base=16,    bitRange=2-2
12532                           ;'ETH_MACCR.TE`                        EQU 0x40028000,        4, base=16,    bitRange=3-3
12533                           ;'ETH_MACCR.DC`                        EQU 0x40028000,        4, base=16,    bitRange=4-4
12534                           ;'ETH_MACCR.BL`                        EQU 0x40028000,        4, base=16,    bitRange=5-6
12535                           ;'ETH_MACCR.APCS`                      EQU 0x40028000,        4, base=16,    bitRange=7-7
12536                           ;'ETH_MACCR.RD`                        EQU 0x40028000,        4, base=16,    bitRange=9-9
12537                           ;'ETH_MACCR.IPCO`                      EQU 0x40028000,        4, base=16,    bitRange=10-10
12538                           ;'ETH_MACCR.DM`                        EQU 0x40028000,        4, base=16,    bitRange=11-11
12539                           ;'ETH_MACCR.LM`                        EQU 0x40028000,        4, base=16,    bitRange=12-12
12540                           ;'ETH_MACCR.ROD`                       EQU 0x40028000,        4, base=16,    bitRange=13-13
12541                           ;'ETH_MACCR.FES`                       EQU 0x40028000,        4, base=16,    bitRange=14-14
12542                           ;'ETH_MACCR.CSD`                       EQU 0x40028000,        4, base=16,    bitRange=16-16
12543                           ;'ETH_MACCR.IFG`                       EQU 0x40028000,        4, base=16,    bitRange=17-19
12544                           ;'ETH_MACCR.JD`                        EQU 0x40028000,        4, base=16,    bitRange=22-22
12545                           ;'ETH_MACCR.WD`                        EQU 0x40028000,        4, base=16,    bitRange=23-23
12546                           ;'ETH_MACCR.CSTF`                      EQU 0x40028000,        4, base=16,    bitRange=25-25
12547                           
12548                           ;'ETH_MACFFR`                          EQU 0x40028004,        4, base=16
12549                           ;'ETH_MACFFR.PM`                       EQU 0x40028004,        4, base=16,    bitRange=0-0
12550                           ;'ETH_MACFFR.HU`                       EQU 0x40028004,        4, base=16,    bitRange=1-1
12551                           ;'ETH_MACFFR.HM`                       EQU 0x40028004,        4, base=16,    bitRange=2-2
12552                           ;'ETH_MACFFR.DAIF`                     EQU 0x40028004,        4, base=16,    bitRange=3-3
12553                           ;'ETH_MACFFR.PAM`                      EQU 0x40028004,        4, base=16,    bitRange=4-4
12554                           ;'ETH_MACFFR.BFD`                      EQU 0x40028004,        4, base=16,    bitRange=5-5
12555                           ;'ETH_MACFFR.PCF`                      EQU 0x40028004,        4, base=16,    bitRange=6-7
12556                           ;'ETH_MACFFR.SAIF`                     EQU 0x40028004,        4, base=16,    bitRange=8-8
12557                           ;'ETH_MACFFR.SAF`                      EQU 0x40028004,        4, base=16,    bitRange=9-9
12558                           ;'ETH_MACFFR.HPF`                      EQU 0x40028004,        4, base=16,    bitRange=10-10
12559                           ;'ETH_MACFFR.RA`                       EQU 0x40028004,        4, base=16,    bitRange=31-31
12560                           
12561                           ;'ETH_MACHTHR`                         EQU 0x40028008,        4, base=16
12562                           
12563                           ;'ETH_MACHTLR`                         EQU 0x4002800C,        4, base=16
12564                           
12565                           ;'ETH_MACMIIAR`                        EQU 0x40028010,        4, base=16
12566                           ;'ETH_MACMIIAR.MB`                     EQU 0x40028010,        4, base=16,    bitRange=0-0
12567                           ;'ETH_MACMIIAR.MW`                     EQU 0x40028010,        4, base=16,    bitRange=1-1
12568                           ;'ETH_MACMIIAR.CR`                     EQU 0x40028010,        4, base=16,    bitRange=2-4
12569                           ;'ETH_MACMIIAR.MR`                     EQU 0x40028010,        4, base=16,    bitRange=6-10
12570                           ;'ETH_MACMIIAR.PA`                     EQU 0x40028010,        4, base=16,    bitRange=11-15
12571                           
12572                           ;'ETH_MACMIIDR`                        EQU 0x40028014,        4, base=16
12573                           ;'ETH_MACMIIDR.MD`                     EQU 0x40028014,        4, base=16,    bitRange=0-15
12574                           
12575                           ;'ETH_MACFCR`                          EQU 0x40028018,        4, base=16
12576                           ;'ETH_MACFCR.FCB_BPA`                  EQU 0x40028018,        4, base=16,    bitRange=0-0
12577                           ;'ETH_MACFCR.TFCE`                     EQU 0x40028018,        4, base=16,    bitRange=1-1
12578                           ;'ETH_MACFCR.RFCE`                     EQU 0x40028018,        4, base=16,    bitRange=2-2
12579                           ;'ETH_MACFCR.UPFD`                     EQU 0x40028018,        4, base=16,    bitRange=3-3
12580                           ;'ETH_MACFCR.PLT`                      EQU 0x40028018,        4, base=16,    bitRange=4-5
12581                           ;'ETH_MACFCR.ZQPD`                     EQU 0x40028018,        4, base=16,    bitRange=7-7
12582                           ;'ETH_MACFCR.PT`                       EQU 0x40028018,        4, base=16,    bitRange=16-31
12583                           
12584                           ;'ETH_MACVLANTR`                       EQU 0x4002801C,        4, base=16
12585                           ;'ETH_MACVLANTR.VLANTI`                EQU 0x4002801C,        4, base=16,    bitRange=0-15
12586                           ;'ETH_MACVLANTR.VLANTC`                EQU 0x4002801C,        4, base=16,    bitRange=16-16
12587                           
12588                           ;'ETH_MACRWUFFR`                       EQU 0x40028028,        4, base=16
12589                           
12590                           ;'ETH_MACPMTCSR`                       EQU 0x4002802C,        4, base=16
12591                           ;'ETH_MACPMTCSR.PD`                    EQU 0x4002802C,        4, base=16,    bitRange=0-0
12592                           ;'ETH_MACPMTCSR.MPE`                   EQU 0x4002802C,        4, base=16,    bitRange=1-1
12593                           ;'ETH_MACPMTCSR.WFE`                   EQU 0x4002802C,        4, base=16,    bitRange=2-2
12594                           ;'ETH_MACPMTCSR.MPR`                   EQU 0x4002802C,        4, base=16,    bitRange=5-5
12595                           ;'ETH_MACPMTCSR.WFR`                   EQU 0x4002802C,        4, base=16,    bitRange=6-6
12596                           ;'ETH_MACPMTCSR.GU`                    EQU 0x4002802C,        4, base=16,    bitRange=9-9
12597                           ;'ETH_MACPMTCSR.WFFRPR`                EQU 0x4002802C,        4, base=16,    bitRange=31-31
12598                           
12599                           ;'ETH_MACDBGR`                         EQU 0x40028034,        4, base=16
12600                           ;'ETH_MACDBGR.MMRPEA`                  EQU 0x40028034,        4, base=16,    bitRange=0-0
12601                           ;'ETH_MACDBGR.MSFRWCS`                 EQU 0x40028034,        4, base=16,    bitRange=1-2
12602                           ;'ETH_MACDBGR.RFWRA`                   EQU 0x40028034,        4, base=16,    bitRange=4-4
12603                           ;'ETH_MACDBGR.RFRCS`                   EQU 0x40028034,        4, base=16,    bitRange=5-6
12604                           ;'ETH_MACDBGR.RFFL`                    EQU 0x40028034,        4, base=16,    bitRange=8-9
12605                           ;'ETH_MACDBGR.MMTEA`                   EQU 0x40028034,        4, base=16,    bitRange=16-16
12606                           ;'ETH_MACDBGR.MTFCS`                   EQU 0x40028034,        4, base=16,    bitRange=17-18
12607                           ;'ETH_MACDBGR.MTP`                     EQU 0x40028034,        4, base=16,    bitRange=19-19
12608                           ;'ETH_MACDBGR.TFRS`                    EQU 0x40028034,        4, base=16,    bitRange=20-21
12609                           ;'ETH_MACDBGR.TFWA`                    EQU 0x40028034,        4, base=16,    bitRange=22-22
12610                           ;'ETH_MACDBGR.TFNE`                    EQU 0x40028034,        4, base=16,    bitRange=24-24
12611                           ;'ETH_MACDBGR.TFF`                     EQU 0x40028034,        4, base=16,    bitRange=25-25
12612                           
12613                           ;'ETH_MACSR`                           EQU 0x40028038,        4, base=16
12614                           ;'ETH_MACSR.PMTS`                      EQU 0x40028038,        4, base=16,    bitRange=3-3
12615                           ;'ETH_MACSR.MMCS`                      EQU 0x40028038,        4, base=16,    bitRange=4-4
12616                           ;'ETH_MACSR.MMCRS`                     EQU 0x40028038,        4, base=16,    bitRange=5-5
12617                           ;'ETH_MACSR.MMCTS`                     EQU 0x40028038,        4, base=16,    bitRange=6-6
12618                           ;'ETH_MACSR.TSTS`                      EQU 0x40028038,        4, base=16,    bitRange=9-9
12619                           
12620                           ;'ETH_MACIMR`                          EQU 0x4002803C,        4, base=16
12621                           ;'ETH_MACIMR.PMTIM`                    EQU 0x4002803C,        4, base=16,    bitRange=3-3
12622                           ;'ETH_MACIMR.TSTIM`                    EQU 0x4002803C,        4, base=16,    bitRange=9-9
12623                           
12624                           ;'ETH_MACA0HR`                         EQU 0x40028040,        4, base=16
12625                           ;'ETH_MACA0HR.MACA0H`                  EQU 0x40028040,        4, base=16,    bitRange=0-15
12626                           ;'ETH_MACA0HR.MO`                      EQU 0x40028040,        4, base=16,    bitRange=31-31
12627                           
12628                           ;'ETH_MACA0LR`                         EQU 0x40028044,        4, base=16
12629                           
12630                           ;'ETH_MACA1HR`                         EQU 0x40028048,        4, base=16
12631                           ;'ETH_MACA1HR.MACA1H`                  EQU 0x40028048,        4, base=16,    bitRange=0-15
12632                           ;'ETH_MACA1HR.MBC`                     EQU 0x40028048,        4, base=16,    bitRange=24-29
12633                           ;'ETH_MACA1HR.SA`                      EQU 0x40028048,        4, base=16,    bitRange=30-30
12634                           ;'ETH_MACA1HR.AE`                      EQU 0x40028048,        4, base=16,    bitRange=31-31
12635                           
12636                           ;'ETH_MACA1LR`                         EQU 0x4002804C,        4, base=16
12637                           
12638                           ;'ETH_MACA2HR`                         EQU 0x40028050,        4, base=16
12639                           ;'ETH_MACA2HR.MACA2H`                  EQU 0x40028050,        4, base=16,    bitRange=0-15
12640                           ;'ETH_MACA2HR.MBC`                     EQU 0x40028050,        4, base=16,    bitRange=24-29
12641                           ;'ETH_MACA2HR.SA`                      EQU 0x40028050,        4, base=16,    bitRange=30-30
12642                           ;'ETH_MACA2HR.AE`                      EQU 0x40028050,        4, base=16,    bitRange=31-31
12643                           
12644                           ;'ETH_MACA2LR`                         EQU 0x40028054,        4, base=16
12645                           
12646                           ;'ETH_MACA3HR`                         EQU 0x40028058,        4, base=16
12647                           ;'ETH_MACA3HR.MACA3H`                  EQU 0x40028058,        4, base=16,    bitRange=0-15
12648                           ;'ETH_MACA3HR.MBC`                     EQU 0x40028058,        4, base=16,    bitRange=24-29
12649                           ;'ETH_MACA3HR.SA`                      EQU 0x40028058,        4, base=16,    bitRange=30-30
12650                           ;'ETH_MACA3HR.AE`                      EQU 0x40028058,        4, base=16,    bitRange=31-31
12651                           
12652                           ;'ETH_MACA3LR`                         EQU 0x4002805C,        4, base=16
12653                           
12654                           ;'ETH_MMCCR`                           EQU 0x40028100,        4, base=16
12655                           ;'ETH_MMCCR.CR`                        EQU 0x40028100,        4, base=16,    bitRange=0-0
12656                           ;'ETH_MMCCR.CSR`                       EQU 0x40028100,        4, base=16,    bitRange=1-1
12657                           ;'ETH_MMCCR.ROR`                       EQU 0x40028100,        4, base=16,    bitRange=2-2
12658                           ;'ETH_MMCCR.MCF`                       EQU 0x40028100,        4, base=16,    bitRange=3-3
12659                           ;'ETH_MMCCR.MCP`                       EQU 0x40028100,        4, base=16,    bitRange=4-4
12660                           ;'ETH_MMCCR.MCFHP`                     EQU 0x40028100,        4, base=16,    bitRange=5-5
12661                           
12662                           ;'ETH_MMCRIR`                          EQU 0x40028104,        4, base=16
12663                           ;'ETH_MMCRIR.RFCES`                    EQU 0x40028104,        4, base=16,    bitRange=5-5
12664                           ;'ETH_MMCRIR.RFAES`                    EQU 0x40028104,        4, base=16,    bitRange=6-6
12665                           ;'ETH_MMCRIR.RGUFS`                    EQU 0x40028104,        4, base=16,    bitRange=17-17
12666                           
12667                           ;'ETH_MMCTIR`                          EQU 0x40028108,        4, base=16
12668                           ;'ETH_MMCTIR.TGFSCS`                   EQU 0x40028108,        4, base=16,    bitRange=14-14
12669                           ;'ETH_MMCTIR.TGFMSCS`                  EQU 0x40028108,        4, base=16,    bitRange=15-15
12670                           ;'ETH_MMCTIR.TGFS`                     EQU 0x40028108,        4, base=16,    bitRange=21-21
12671                           
12672                           ;'ETH_MMCRIMR`                         EQU 0x4002810C,        4, base=16
12673                           ;'ETH_MMCRIMR.RFCEM`                   EQU 0x4002810C,        4, base=16,    bitRange=5-5
12674                           ;'ETH_MMCRIMR.RFAEM`                   EQU 0x4002810C,        4, base=16,    bitRange=6-6
12675                           ;'ETH_MMCRIMR.RGUFM`                   EQU 0x4002810C,        4, base=16,    bitRange=17-17
12676                           
12677                           ;'ETH_MMCTIMR`                         EQU 0x40028110,        4, base=16
12678                           ;'ETH_MMCTIMR.TGFSCM`                  EQU 0x40028110,        4, base=16,    bitRange=14-14
12679                           ;'ETH_MMCTIMR.TGFMSCM`                 EQU 0x40028110,        4, base=16,    bitRange=15-15
12680                           ;'ETH_MMCTIMR.TGFM`                    EQU 0x40028110,        4, base=16,    bitRange=21-21
12681                           
12682                           ;'ETH_MMCTGFSCCR`                      EQU 0x4002814C,        4, base=16
12683                           
12684                           ;'ETH_MMCTGFMSCCR`                     EQU 0x40028150,        4, base=16
12685                           
12686                           ;'ETH_MMCTGFCR`                        EQU 0x40028168,        4, base=16
12687                           
12688                           ;'ETH_MMCRFCECR`                       EQU 0x40028194,        4, base=16
12689                           
12690                           ;'ETH_MMCRFAECR`                       EQU 0x40028198,        4, base=16
12691                           
12692                           ;'ETH_MMCRGUFCR`                       EQU 0x400281C4,        4, base=16
12693                           
12694                           ;'ETH_PTPTSCR`                         EQU 0x40028700,        4, base=16
12695                           ;'ETH_PTPTSCR.TSE`                     EQU 0x40028700,        4, base=16,    bitRange=0-0
12696                           ;'ETH_PTPTSCR.TSFCU`                   EQU 0x40028700,        4, base=16,    bitRange=1-1
12697                           ;'ETH_PTPTSCR.TSSTI`                   EQU 0x40028700,        4, base=16,    bitRange=2-2
12698                           ;'ETH_PTPTSCR.TSSTU`                   EQU 0x40028700,        4, base=16,    bitRange=3-3
12699                           ;'ETH_PTPTSCR.TSITE`                   EQU 0x40028700,        4, base=16,    bitRange=4-4
12700                           ;'ETH_PTPTSCR.TTSARU`                  EQU 0x40028700,        4, base=16,    bitRange=5-5
12701                           ;'ETH_PTPTSCR.TSSARFE`                 EQU 0x40028700,        4, base=16,    bitRange=8-8
12702                           ;'ETH_PTPTSCR.TSSSR`                   EQU 0x40028700,        4, base=16,    bitRange=9-9
12703                           ;'ETH_PTPTSCR.TSPTPPSV2E`              EQU 0x40028700,        4, base=16,    bitRange=10-10
12704                           ;'ETH_PTPTSCR.TSSPTPOEFE`              EQU 0x40028700,        4, base=16,    bitRange=11-11
12705                           ;'ETH_PTPTSCR.TSSIPV6FE`               EQU 0x40028700,        4, base=16,    bitRange=12-12
12706                           ;'ETH_PTPTSCR.TSSIPV4FE`               EQU 0x40028700,        4, base=16,    bitRange=13-13
12707                           ;'ETH_PTPTSCR.TSSEME`                  EQU 0x40028700,        4, base=16,    bitRange=14-14
12708                           ;'ETH_PTPTSCR.TSSMRME`                 EQU 0x40028700,        4, base=16,    bitRange=15-15
12709                           ;'ETH_PTPTSCR.TSCNT`                   EQU 0x40028700,        4, base=16,    bitRange=16-17
12710                           ;'ETH_PTPTSCR.TSPFFMAE`                EQU 0x40028700,        4, base=16,    bitRange=18-18
12711                           
12712                           ;'ETH_PTPSSIR`                         EQU 0x40028704,        4, base=16
12713                           ;'ETH_PTPSSIR.STSSI`                   EQU 0x40028704,        4, base=16,    bitRange=0-7
12714                           
12715                           ;'ETH_PTPTSHR`                         EQU 0x40028708,        4, base=16
12716                           
12717                           ;'ETH_PTPTSLR`                         EQU 0x4002870C,        4, base=16
12718                           ;'ETH_PTPTSLR.STSS`                    EQU 0x4002870C,        4, base=16,    bitRange=0-30
12719                           ;'ETH_PTPTSLR.STPNS`                   EQU 0x4002870C,        4, base=16,    bitRange=31-31
12720                           
12721                           ;'ETH_PTPTSHUR`                        EQU 0x40028710,        4, base=16
12722                           
12723                           ;'ETH_PTPTSLUR`                        EQU 0x40028714,        4, base=16
12724                           ;'ETH_PTPTSLUR.TSUSS`                  EQU 0x40028714,        4, base=16,    bitRange=0-30
12725                           ;'ETH_PTPTSLUR.TSUPNS`                 EQU 0x40028714,        4, base=16,    bitRange=31-31
12726                           
12727                           ;'ETH_PTPTSAR`                         EQU 0x40028718,        4, base=16
12728                           
12729                           ;'ETH_PTPTTHR`                         EQU 0x4002871C,        4, base=16
12730                           
12731                           ;'ETH_PTPTTLR`                         EQU 0x40028720,        4, base=16
12732                           
12733                           ;'ETH_PTPTSSR`                         EQU 0x40028728,        4, base=16
12734                           ;'ETH_PTPTSSR.TSSO`                    EQU 0x40028728,        4, base=16,    bitRange=0-0
12735                           ;'ETH_PTPTSSR.TSTTR`                   EQU 0x40028728,        4, base=16,    bitRange=1-1
12736                           
12737                           ;'ETH_PTPPPSCR`                        EQU 0x4002872C,        4, base=16
12738                           ;'ETH_PTPPPSCR.TSSO`                   EQU 0x4002872C,        4, base=16,    bitRange=0-0
12739                           ;'ETH_PTPPPSCR.TSTTR`                  EQU 0x4002872C,        4, base=16,    bitRange=1-1
12740                           
12741                           ;'ETH_DMABMR`                          EQU 0x40029000,        4, base=16
12742                           ;'ETH_DMABMR.SR`                       EQU 0x40029000,        4, base=16,    bitRange=0-0
12743                           ;'ETH_DMABMR.DA`                       EQU 0x40029000,        4, base=16,    bitRange=1-1
12744                           ;'ETH_DMABMR.DSL`                      EQU 0x40029000,        4, base=16,    bitRange=2-6
12745                           ;'ETH_DMABMR.PBL`                      EQU 0x40029000,        4, base=16,    bitRange=8-13
12746                           ;'ETH_DMABMR.RTPR`                     EQU 0x40029000,        4, base=16,    bitRange=14-15
12747                           ;'ETH_DMABMR.FB`                       EQU 0x40029000,        4, base=16,    bitRange=16-16
12748                           ;'ETH_DMABMR.RDP`                      EQU 0x40029000,        4, base=16,    bitRange=17-22
12749                           ;'ETH_DMABMR.USP`                      EQU 0x40029000,        4, base=16,    bitRange=23-23
12750                           ;'ETH_DMABMR.FPM`                      EQU 0x40029000,        4, base=16,    bitRange=24-24
12751                           ;'ETH_DMABMR.AAB`                      EQU 0x40029000,        4, base=16,    bitRange=25-25
12752                           ;'ETH_DMABMR.MB`                       EQU 0x40029000,        4, base=16,    bitRange=26-26
12753                           
12754                           ;'ETH_DMATPDR`                         EQU 0x40029004,        4, base=16
12755                           
12756                           ;'ETH_DMARPDR`                         EQU 0x40029008,        4, base=16
12757                           
12758                           ;'ETH_DMARDLAR`                        EQU 0x4002900C,        4, base=16
12759                           
12760                           ;'ETH_DMATDLAR`                        EQU 0x40029010,        4, base=16
12761                           
12762                           ;'ETH_DMASR`                           EQU 0x40029014,        4, base=16
12763                           ;'ETH_DMASR.TS`                        EQU 0x40029014,        4, base=16,    bitRange=0-0
12764                           ;'ETH_DMASR.TPSS`                      EQU 0x40029014,        4, base=16,    bitRange=1-1
12765                           ;'ETH_DMASR.TBUS`                      EQU 0x40029014,        4, base=16,    bitRange=2-2
12766                           ;'ETH_DMASR.TJTS`                      EQU 0x40029014,        4, base=16,    bitRange=3-3
12767                           ;'ETH_DMASR.ROS`                       EQU 0x40029014,        4, base=16,    bitRange=4-4
12768                           ;'ETH_DMASR.TUS`                       EQU 0x40029014,        4, base=16,    bitRange=5-5
12769                           ;'ETH_DMASR.RS`                        EQU 0x40029014,        4, base=16,    bitRange=6-6
12770                           ;'ETH_DMASR.RBUS`                      EQU 0x40029014,        4, base=16,    bitRange=7-7
12771                           ;'ETH_DMASR.RPSS`                      EQU 0x40029014,        4, base=16,    bitRange=8-8
12772                           ;'ETH_DMASR.RWTS`                      EQU 0x40029014,        4, base=16,    bitRange=9-9
12773                           ;'ETH_DMASR.ETS`                       EQU 0x40029014,        4, base=16,    bitRange=10-10
12774                           ;'ETH_DMASR.FBES`                      EQU 0x40029014,        4, base=16,    bitRange=13-13
12775                           ;'ETH_DMASR.ERS`                       EQU 0x40029014,        4, base=16,    bitRange=14-14
12776                           ;'ETH_DMASR.AIS`                       EQU 0x40029014,        4, base=16,    bitRange=15-15
12777                           ;'ETH_DMASR.NIS`                       EQU 0x40029014,        4, base=16,    bitRange=16-16
12778                           ;'ETH_DMASR.RPS`                       EQU 0x40029014,        4, base=16,    bitRange=17-19
12779                           ;'ETH_DMASR.TPS`                       EQU 0x40029014,        4, base=16,    bitRange=20-22
12780                           ;'ETH_DMASR.EBS`                       EQU 0x40029014,        4, base=16,    bitRange=23-25
12781                           ;'ETH_DMASR.MMCS`                      EQU 0x40029014,        4, base=16,    bitRange=27-27
12782                           ;'ETH_DMASR.PMTS`                      EQU 0x40029014,        4, base=16,    bitRange=28-28
12783                           ;'ETH_DMASR.TSTS`                      EQU 0x40029014,        4, base=16,    bitRange=29-29
12784                           
12785                           ;'ETH_DMAOMR`                          EQU 0x40029018,        4, base=16
12786                           ;'ETH_DMAOMR.SR`                       EQU 0x40029018,        4, base=16,    bitRange=1-1
12787                           ;'ETH_DMAOMR.OSF`                      EQU 0x40029018,        4, base=16,    bitRange=2-2
12788                           ;'ETH_DMAOMR.RTC`                      EQU 0x40029018,        4, base=16,    bitRange=3-4
12789                           ;'ETH_DMAOMR.FUGF`                     EQU 0x40029018,        4, base=16,    bitRange=6-6
12790                           ;'ETH_DMAOMR.FEF`                      EQU 0x40029018,        4, base=16,    bitRange=7-7
12791                           ;'ETH_DMAOMR.ST`                       EQU 0x40029018,        4, base=16,    bitRange=13-13
12792                           ;'ETH_DMAOMR.TTC`                      EQU 0x40029018,        4, base=16,    bitRange=14-16
12793                           ;'ETH_DMAOMR.FTF`                      EQU 0x40029018,        4, base=16,    bitRange=20-20
12794                           ;'ETH_DMAOMR.TSF`                      EQU 0x40029018,        4, base=16,    bitRange=21-21
12795                           ;'ETH_DMAOMR.DFRF`                     EQU 0x40029018,        4, base=16,    bitRange=24-24
12796                           ;'ETH_DMAOMR.RSF`                      EQU 0x40029018,        4, base=16,    bitRange=25-25
12797                           ;'ETH_DMAOMR.DTCEFD`                   EQU 0x40029018,        4, base=16,    bitRange=26-26
12798                           
12799                           ;'ETH_DMAIER`                          EQU 0x4002901C,        4, base=16
12800                           ;'ETH_DMAIER.TIE`                      EQU 0x4002901C,        4, base=16,    bitRange=0-0
12801                           ;'ETH_DMAIER.TPSIE`                    EQU 0x4002901C,        4, base=16,    bitRange=1-1
12802                           ;'ETH_DMAIER.TBUIE`                    EQU 0x4002901C,        4, base=16,    bitRange=2-2
12803                           ;'ETH_DMAIER.TJTIE`                    EQU 0x4002901C,        4, base=16,    bitRange=3-3
12804                           ;'ETH_DMAIER.ROIE`                     EQU 0x4002901C,        4, base=16,    bitRange=4-4
12805                           ;'ETH_DMAIER.TUIE`                     EQU 0x4002901C,        4, base=16,    bitRange=5-5
12806                           ;'ETH_DMAIER.RIE`                      EQU 0x4002901C,        4, base=16,    bitRange=6-6
12807                           ;'ETH_DMAIER.RBUIE`                    EQU 0x4002901C,        4, base=16,    bitRange=7-7
12808                           ;'ETH_DMAIER.RPSIE`                    EQU 0x4002901C,        4, base=16,    bitRange=8-8
12809                           ;'ETH_DMAIER.RWTIE`                    EQU 0x4002901C,        4, base=16,    bitRange=9-9
12810                           ;'ETH_DMAIER.ETIE`                     EQU 0x4002901C,        4, base=16,    bitRange=10-10
12811                           ;'ETH_DMAIER.FBEIE`                    EQU 0x4002901C,        4, base=16,    bitRange=13-13
12812                           ;'ETH_DMAIER.ERIE`                     EQU 0x4002901C,        4, base=16,    bitRange=14-14
12813                           ;'ETH_DMAIER.AISE`                     EQU 0x4002901C,        4, base=16,    bitRange=15-15
12814                           ;'ETH_DMAIER.NISE`                     EQU 0x4002901C,        4, base=16,    bitRange=16-16
12815                           
12816                           ;'ETH_DMAMFBOCR`                       EQU 0x40029020,        4, base=16
12817                           ;'ETH_DMAMFBOCR.MFC`                   EQU 0x40029020,        4, base=16,    bitRange=0-15
12818                           ;'ETH_DMAMFBOCR.OMFC`                  EQU 0x40029020,        4, base=16,    bitRange=16-16
12819                           ;'ETH_DMAMFBOCR.MFA`                   EQU 0x40029020,        4, base=16,    bitRange=17-27
12820                           ;'ETH_DMAMFBOCR.OFOC`                  EQU 0x40029020,        4, base=16,    bitRange=28-28
12821                           
12822                           ;'ETH_DMARSWTR`                        EQU 0x40029024,        4, base=16
12823                           ;'ETH_DMARSWTR.RSWTC`                  EQU 0x40029024,        4, base=16,    bitRange=0-7
12824                           
12825                           ;'ETH_DMACHTDR`                        EQU 0x40029048,        4, base=16
12826                           
12827                           ;'ETH_DMACHRDR`                        EQU 0x4002904C,        4, base=16
12828                           
12829                           ;'ETH_DMACHTBAR`                       EQU 0x40029050,        4, base=16
12830                           
12831                           ;'ETH_DMACHRBAR`                       EQU 0x40029054,        4, base=16
12832                           
12833                           
12834                           ;
12835                           ;               FSMC
12836                           ;
12837                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
12838                           ;     ----                                    ----      -------     --------  -----------
                                 --------
12839                           
12840                           FSMC_BCR1                           EQU 0xA0000000
12841                           ;'FSMC_BCR1.MBKEN`                     EQU 0xA0000000,        4, base=16,    bitRange=0-0
12842                           ;'FSMC_BCR1.MUXEN`                     EQU 0xA0000000,        4, base=16,    bitRange=1-1
12843                           ;'FSMC_BCR1.MTYP`                      EQU 0xA0000000,        4, base=16,    bitRange=2-3
12844                           ;'FSMC_BCR1.MWID`                      EQU 0xA0000000,        4, base=16,    bitRange=4-5
12845                           ;'FSMC_BCR1.FACCEN`                    EQU 0xA0000000,        4, base=16,    bitRange=6-6
12846                           ;'FSMC_BCR1.BURSTEN`                   EQU 0xA0000000,        4, base=16,    bitRange=8-8
12847                           ;'FSMC_BCR1.WAITPOL`                   EQU 0xA0000000,        4, base=16,    bitRange=9-9
12848                           ;'FSMC_BCR1.WRAPMOD`                   EQU 0xA0000000,        4, base=16,    bitRange=10-10
12849                           ;'FSMC_BCR1.WAITCFG`                   EQU 0xA0000000,        4, base=16,    bitRange=11-11
12850                           ;'FSMC_BCR1.WREN`                      EQU 0xA0000000,        4, base=16,    bitRange=12-12
12851                           ;'FSMC_BCR1.WAITEN`                    EQU 0xA0000000,        4, base=16,    bitRange=13-13
12852                           ;'FSMC_BCR1.EXTMOD`                    EQU 0xA0000000,        4, base=16,    bitRange=14-14
12853                           ;'FSMC_BCR1.ASCYCWAIT`                 EQU 0xA0000000,        4, base=16,    bitRange=15-15
12854                           ;'FSMC_BCR1.CBURSTRW`                  EQU 0xA0000000,        4, base=16,    bitRange=19-19
12855                           
12856                           FSMC_BTR1                           EQU 0xA0000004
12857                           ;'FSMC_BTR1.ADDSET`                    EQU 0xA0000004,        4, base=16,    bitRange=0-3
12858                           ;'FSMC_BTR1.ADDHLD`                    EQU 0xA0000004,        4, base=16,    bitRange=4-7
12859                           ;'FSMC_BTR1.DATAST`                    EQU 0xA0000004,        4, base=16,    bitRange=8-15
12860                           ;'FSMC_BTR1.BUSTURN`                   EQU 0xA0000004,        4, base=16,    bitRange=16-19
12861                           ;'FSMC_BTR1.CLKDIV`                    EQU 0xA0000004,        4, base=16,    bitRange=20-23
12862                           ;'FSMC_BTR1.DATLAT`                    EQU 0xA0000004,        4, base=16,    bitRange=24-27
12863                           ;'FSMC_BTR1.ACCMOD`                    EQU 0xA0000004,        4, base=16,    bitRange=28-29
12864                           
12865                           FSMC_BCR2                           EQU 0xA0000008
12866                           ;'FSMC_BCR2.MBKEN`                     EQU 0xA0000008,        4, base=16,    bitRange=0-0
12867                           ;'FSMC_BCR2.MUXEN`                     EQU 0xA0000008,        4, base=16,    bitRange=1-1
12868                           ;'FSMC_BCR2.MTYP`                      EQU 0xA0000008,        4, base=16,    bitRange=2-3
12869                           ;'FSMC_BCR2.MWID`                      EQU 0xA0000008,        4, base=16,    bitRange=4-5
12870                           ;'FSMC_BCR2.FACCEN`                    EQU 0xA0000008,        4, base=16,    bitRange=6-6
12871                           ;'FSMC_BCR2.BURSTEN`                   EQU 0xA0000008,        4, base=16,    bitRange=8-8
12872                           ;'FSMC_BCR2.WAITPOL`                   EQU 0xA0000008,        4, base=16,    bitRange=9-9
12873                           ;'FSMC_BCR2.WRAPMOD`                   EQU 0xA0000008,        4, base=16,    bitRange=10-10
12874                           ;'FSMC_BCR2.WAITCFG`                   EQU 0xA0000008,        4, base=16,    bitRange=11-11
12875                           ;'FSMC_BCR2.WREN`                      EQU 0xA0000008,        4, base=16,    bitRange=12-12
12876                           ;'FSMC_BCR2.WAITEN`                    EQU 0xA0000008,        4, base=16,    bitRange=13-13
12877                           ;'FSMC_BCR2.EXTMOD`                    EQU 0xA0000008,        4, base=16,    bitRange=14-14
12878                           ;'FSMC_BCR2.ASCYCWAIT`                 EQU 0xA0000008,        4, base=16,    bitRange=15-15
12879                           ;'FSMC_BCR2.CBURSTRW`                  EQU 0xA0000008,        4, base=16,    bitRange=19-19
12880                           
12881                           FSMC_BTR2                           EQU 0xA000000C
12882                           ;'FSMC_BTR2.ADDSET`                    EQU 0xA000000C,        4, base=16,    bitRange=0-3
12883                           ;'FSMC_BTR2.ADDHLD`                    EQU 0xA000000C,        4, base=16,    bitRange=4-7
12884                           ;'FSMC_BTR2.DATAST`                    EQU 0xA000000C,        4, base=16,    bitRange=8-15
12885                           ;'FSMC_BTR2.BUSTURN`                   EQU 0xA000000C,        4, base=16,    bitRange=16-19
12886                           ;'FSMC_BTR2.CLKDIV`                    EQU 0xA000000C,        4, base=16,    bitRange=20-23
12887                           ;'FSMC_BTR2.DATLAT`                    EQU 0xA000000C,        4, base=16,    bitRange=24-27
12888                           ;'FSMC_BTR2.ACCMOD`                    EQU 0xA000000C,        4, base=16,    bitRange=28-29
12889                           
12890                           FSMC_BCR3                           EQU 0xA0000010
12891                           ;'FSMC_BCR3.MBKEN`                     EQU 0xA0000010,        4, base=16,    bitRange=0-0
12892                           ;'FSMC_BCR3.MUXEN`                     EQU 0xA0000010,        4, base=16,    bitRange=1-1
12893                           ;'FSMC_BCR3.MTYP`                      EQU 0xA0000010,        4, base=16,    bitRange=2-3
12894                           ;'FSMC_BCR3.MWID`                      EQU 0xA0000010,        4, base=16,    bitRange=4-5
12895                           ;'FSMC_BCR3.FACCEN`                    EQU 0xA0000010,        4, base=16,    bitRange=6-6
12896                           ;'FSMC_BCR3.BURSTEN`                   EQU 0xA0000010,        4, base=16,    bitRange=8-8
12897                           ;'FSMC_BCR3.WAITPOL`                   EQU 0xA0000010,        4, base=16,    bitRange=9-9
12898                           ;'FSMC_BCR3.WRAPMOD`                   EQU 0xA0000010,        4, base=16,    bitRange=10-10
12899                           ;'FSMC_BCR3.WAITCFG`                   EQU 0xA0000010,        4, base=16,    bitRange=11-11
12900                           ;'FSMC_BCR3.WREN`                      EQU 0xA0000010,        4, base=16,    bitRange=12-12
12901                           ;'FSMC_BCR3.WAITEN`                    EQU 0xA0000010,        4, base=16,    bitRange=13-13
12902                           ;'FSMC_BCR3.EXTMOD`                    EQU 0xA0000010,        4, base=16,    bitRange=14-14
12903                           ;'FSMC_BCR3.ASCYCWAIT`                 EQU 0xA0000010,        4, base=16,    bitRange=15-15
12904                           ;'FSMC_BCR3.CBURSTRW`                  EQU 0xA0000010,        4, base=16,    bitRange=19-19
12905                           
12906                           FSMC_BTR3                           EQU 0xA0000014
12907                           ;'FSMC_BTR3.ADDSET`                    EQU 0xA0000014,        4, base=16,    bitRange=0-3
12908                           ;'FSMC_BTR3.ADDHLD`                    EQU 0xA0000014,        4, base=16,    bitRange=4-7
12909                           ;'FSMC_BTR3.DATAST`                    EQU 0xA0000014,        4, base=16,    bitRange=8-15
12910                           ;'FSMC_BTR3.BUSTURN`                   EQU 0xA0000014,        4, base=16,    bitRange=16-19
12911                           ;'FSMC_BTR3.CLKDIV`                    EQU 0xA0000014,        4, base=16,    bitRange=20-23
12912                           ;'FSMC_BTR3.DATLAT`                    EQU 0xA0000014,        4, base=16,    bitRange=24-27
12913                           ;'FSMC_BTR3.ACCMOD`                    EQU 0xA0000014,        4, base=16,    bitRange=28-29
12914                           
12915                           FSMC_BCR4                           EQU 0xA0000018
12916                           ;'FSMC_BCR4.MBKEN`                     EQU 0xA0000018,        4, base=16,    bitRange=0-0
12917                           ;'FSMC_BCR4.MUXEN`                     EQU 0xA0000018,        4, base=16,    bitRange=1-1
12918                           ;'FSMC_BCR4.MTYP`                      EQU 0xA0000018,        4, base=16,    bitRange=2-3
12919                           ;'FSMC_BCR4.MWID`                      EQU 0xA0000018,        4, base=16,    bitRange=4-5
12920                           ;'FSMC_BCR4.FACCEN`                    EQU 0xA0000018,        4, base=16,    bitRange=6-6
12921                           ;'FSMC_BCR4.BURSTEN`                   EQU 0xA0000018,        4, base=16,    bitRange=8-8
12922                           ;'FSMC_BCR4.WAITPOL`                   EQU 0xA0000018,        4, base=16,    bitRange=9-9
12923                           ;'FSMC_BCR4.WRAPMOD`                   EQU 0xA0000018,        4, base=16,    bitRange=10-10
12924                           ;'FSMC_BCR4.WAITCFG`                   EQU 0xA0000018,        4, base=16,    bitRange=11-11
12925                           ;'FSMC_BCR4.WREN`                      EQU 0xA0000018,        4, base=16,    bitRange=12-12
12926                           ;'FSMC_BCR4.WAITEN`                    EQU 0xA0000018,        4, base=16,    bitRange=13-13
12927                           ;'FSMC_BCR4.EXTMOD`                    EQU 0xA0000018,        4, base=16,    bitRange=14-14
12928                           ;'FSMC_BCR4.ASCYCWAIT`                 EQU 0xA0000018,        4, base=16,    bitRange=15-15
12929                           ;'FSMC_BCR4.CBURSTRW`                  EQU 0xA0000018,        4, base=16,    bitRange=19-19
12930                           
12931                           FSMC_BTR4                           EQU 0xA000001C
12932                           ;'FSMC_BTR4.ADDSET`                    EQU 0xA000001C,        4, base=16,    bitRange=0-3
12933                           ;'FSMC_BTR4.ADDHLD`                    EQU 0xA000001C,        4, base=16,    bitRange=4-7
12934                           ;'FSMC_BTR4.DATAST`                    EQU 0xA000001C,        4, base=16,    bitRange=8-15
12935                           ;'FSMC_BTR4.BUSTURN`                   EQU 0xA000001C,        4, base=16,    bitRange=16-19
12936                           ;'FSMC_BTR4.CLKDIV`                    EQU 0xA000001C,        4, base=16,    bitRange=20-23
12937                           ;'FSMC_BTR4.DATLAT`                    EQU 0xA000001C,        4, base=16,    bitRange=24-27
12938                           ;'FSMC_BTR4.ACCMOD`                    EQU 0xA000001C,        4, base=16,    bitRange=28-29
12939                           
12940                           FSMC_PCR2                           EQU 0xA0000060
12941                           ;'FSMC_PCR2.PWAITEN`                   EQU 0xA0000060,        4, base=16,    bitRange=1-1
12942                           ;'FSMC_PCR2.PBKEN`                     EQU 0xA0000060,        4, base=16,    bitRange=2-2
12943                           ;'FSMC_PCR2.PTYP`                      EQU 0xA0000060,        4, base=16,    bitRange=3-3
12944                           ;'FSMC_PCR2.PWID`                      EQU 0xA0000060,        4, base=16,    bitRange=4-5
12945                           ;'FSMC_PCR2.ECCEN`                     EQU 0xA0000060,        4, base=16,    bitRange=6-6
12946                           ;'FSMC_PCR2.TCLR`                      EQU 0xA0000060,        4, base=16,    bitRange=9-12
12947                           ;'FSMC_PCR2.TAR`                       EQU 0xA0000060,        4, base=16,    bitRange=13-16
12948                           ;'FSMC_PCR2.ECCPS`                     EQU 0xA0000060,        4, base=16,    bitRange=17-19
12949                           
12950                           FSMC_SR2                            EQU 0xA0000064
12951                           ;'FSMC_SR2.IRS`                        EQU 0xA0000064,        4, base=16,    bitRange=0-0
12952                           ;'FSMC_SR2.ILS`                        EQU 0xA0000064,        4, base=16,    bitRange=1-1
12953                           ;'FSMC_SR2.IFS`                        EQU 0xA0000064,        4, base=16,    bitRange=2-2
12954                           ;'FSMC_SR2.IREN`                       EQU 0xA0000064,        4, base=16,    bitRange=3-3
12955                           ;'FSMC_SR2.ILEN`                       EQU 0xA0000064,        4, base=16,    bitRange=4-4
12956                           ;'FSMC_SR2.IFEN`                       EQU 0xA0000064,        4, base=16,    bitRange=5-5
12957                           ;'FSMC_SR2.FEMPT`                      EQU 0xA0000064,        4, base=16,    bitRange=6-6
12958                           
12959                           FSMC_PMEM2                          EQU 0xA0000068
12960                           ;'FSMC_PMEM2.MEMSET`                   EQU 0xA0000068,        4, base=16,    bitRange=0-7
12961                           ;'FSMC_PMEM2.MEMWAIT`                  EQU 0xA0000068,        4, base=16,    bitRange=8-15
12962                           ;'FSMC_PMEM2.MEMHOLD`                  EQU 0xA0000068,        4, base=16,    bitRange=16-23
12963                           ;'FSMC_PMEM2.MEMHIZ`                   EQU 0xA0000068,        4, base=16,    bitRange=24-31
12964                           
12965                           FSMC_PATT2                          EQU 0xA000006C
12966                           ;'FSMC_PATT2.ATTSET`                   EQU 0xA000006C,        4, base=16,    bitRange=0-7
12967                           ;'FSMC_PATT2.ATTWAIT`                  EQU 0xA000006C,        4, base=16,    bitRange=8-15
12968                           ;'FSMC_PATT2.ATTHOLD`                  EQU 0xA000006C,        4, base=16,    bitRange=16-23
12969                           ;'FSMC_PATT2.ATTHIZ`                   EQU 0xA000006C,        4, base=16,    bitRange=24-31
12970                           
12971                           FSMC_ECCR2                          EQU 0xA0000074
12972                           
12973                           FSMC_PCR3                           EQU 0xA0000080
12974                           ;'FSMC_PCR3.PWAITEN`                   EQU 0xA0000080,        4, base=16,    bitRange=1-1
12975                           ;'FSMC_PCR3.PBKEN`                     EQU 0xA0000080,        4, base=16,    bitRange=2-2
12976                           ;'FSMC_PCR3.PTYP`                      EQU 0xA0000080,        4, base=16,    bitRange=3-3
12977                           ;'FSMC_PCR3.PWID`                      EQU 0xA0000080,        4, base=16,    bitRange=4-5
12978                           ;'FSMC_PCR3.ECCEN`                     EQU 0xA0000080,        4, base=16,    bitRange=6-6
12979                           ;'FSMC_PCR3.TCLR`                      EQU 0xA0000080,        4, base=16,    bitRange=9-12
12980                           ;'FSMC_PCR3.TAR`                       EQU 0xA0000080,        4, base=16,    bitRange=13-16
12981                           ;'FSMC_PCR3.ECCPS`                     EQU 0xA0000080,        4, base=16,    bitRange=17-19
12982                           
12983                           FSMC_SR3                            EQU 0xA0000084
12984                           ;'FSMC_SR3.IRS`                        EQU 0xA0000084,        4, base=16,    bitRange=0-0
12985                           ;'FSMC_SR3.ILS`                        EQU 0xA0000084,        4, base=16,    bitRange=1-1
12986                           ;'FSMC_SR3.IFS`                        EQU 0xA0000084,        4, base=16,    bitRange=2-2
12987                           ;'FSMC_SR3.IREN`                       EQU 0xA0000084,        4, base=16,    bitRange=3-3
12988                           ;'FSMC_SR3.ILEN`                       EQU 0xA0000084,        4, base=16,    bitRange=4-4
12989                           ;'FSMC_SR3.IFEN`                       EQU 0xA0000084,        4, base=16,    bitRange=5-5
12990                           ;'FSMC_SR3.FEMPT`                      EQU 0xA0000084,        4, base=16,    bitRange=6-6
12991                           
12992                           FSMC_PMEM3                          EQU 0xA0000088
12993                           ;'FSMC_PMEM3.MEMSET`                   EQU 0xA0000088,        4, base=16,    bitRange=0-7
12994                           ;'FSMC_PMEM3.MEMWAIT`                  EQU 0xA0000088,        4, base=16,    bitRange=8-15
12995                           ;'FSMC_PMEM3.MEMHOLD`                  EQU 0xA0000088,        4, base=16,    bitRange=16-23
12996                           ;'FSMC_PMEM3.MEMHIZ`                   EQU 0xA0000088,        4, base=16,    bitRange=24-31
12997                           
12998                           FSMC_PATT3                          EQU 0xA000008C
12999                           ;'FSMC_PATT3.ATTSET`                   EQU 0xA000008C,        4, base=16,    bitRange=0-7
13000                           ;'FSMC_PATT3.ATTWAIT`                  EQU 0xA000008C,        4, base=16,    bitRange=8-15
13001                           ;'FSMC_PATT3.ATTHOLD`                  EQU 0xA000008C,        4, base=16,    bitRange=16-23
13002                           ;'FSMC_PATT3.ATTHIZ`                   EQU 0xA000008C,        4, base=16,    bitRange=24-31
13003                           
13004                           FSMC_ECCR3                          EQU 0xA0000094
13005                           
13006                           FSMC_PCR4                           EQU 0xA00000A0
13007                           ;'FSMC_PCR4.PWAITEN`                   EQU 0xA00000A0,        4, base=16,    bitRange=1-1
13008                           ;'FSMC_PCR4.PBKEN`                     EQU 0xA00000A0,        4, base=16,    bitRange=2-2
13009                           ;'FSMC_PCR4.PTYP`                      EQU 0xA00000A0,        4, base=16,    bitRange=3-3
13010                           ;'FSMC_PCR4.PWID`                      EQU 0xA00000A0,        4, base=16,    bitRange=4-5
13011                           ;'FSMC_PCR4.ECCEN`                     EQU 0xA00000A0,        4, base=16,    bitRange=6-6
13012                           ;'FSMC_PCR4.TCLR`                      EQU 0xA00000A0,        4, base=16,    bitRange=9-12
13013                           ;'FSMC_PCR4.TAR`                       EQU 0xA00000A0,        4, base=16,    bitRange=13-16
13014                           ;'FSMC_PCR4.ECCPS`                     EQU 0xA00000A0,        4, base=16,    bitRange=17-19
13015                           
13016                           FSMC_SR4                            EQU 0xA00000A4
13017                           ;'FSMC_SR4.IRS`                        EQU 0xA00000A4,        4, base=16,    bitRange=0-0
13018                           ;'FSMC_SR4.ILS`                        EQU 0xA00000A4,        4, base=16,    bitRange=1-1
13019                           ;'FSMC_SR4.IFS`                        EQU 0xA00000A4,        4, base=16,    bitRange=2-2
13020                           ;'FSMC_SR4.IREN`                       EQU 0xA00000A4,        4, base=16,    bitRange=3-3
13021                           ;'FSMC_SR4.ILEN`                       EQU 0xA00000A4,        4, base=16,    bitRange=4-4
13022                           ;'FSMC_SR4.IFEN`                       EQU 0xA00000A4,        4, base=16,    bitRange=5-5
13023                           ;'FSMC_SR4.FEMPT`                      EQU 0xA00000A4,        4, base=16,    bitRange=6-6
13024                           
13025                           FSMC_PMEM4                          EQU 0xA00000A8
13026                           ;'FSMC_PMEM4.MEMSET`                   EQU 0xA00000A8,        4, base=16,    bitRange=0-7
13027                           ;'FSMC_PMEM4.MEMWAIT`                  EQU 0xA00000A8,        4, base=16,    bitRange=8-15
13028                           ;'FSMC_PMEM4.MEMHOLD`                  EQU 0xA00000A8,        4, base=16,    bitRange=16-23
13029                           ;'FSMC_PMEM4.MEMHIZ`                   EQU 0xA00000A8,        4, base=16,    bitRange=24-31
13030                           
13031                           FSMC_PATT4                          EQU 0xA00000AC
13032                           ;'FSMC_PATT4.ATTSET`                   EQU 0xA00000AC,        4, base=16,    bitRange=0-7
13033                           ;'FSMC_PATT4.ATTWAIT`                  EQU 0xA00000AC,        4, base=16,    bitRange=8-15
13034                           ;'FSMC_PATT4.ATTHOLD`                  EQU 0xA00000AC,        4, base=16,    bitRange=16-23
13035                           ;'FSMC_PATT4.ATTHIZ`                   EQU 0xA00000AC,        4, base=16,    bitRange=24-31
13036                           
13037                           FSMC_PIO4                           EQU 0xA00000B0
13038                           ;'FSMC_PIO4.IOSET`                     EQU 0xA00000B0,        4, base=16,    bitRange=0-7
13039                           ;'FSMC_PIO4.IOWAIT`                    EQU 0xA00000B0,        4, base=16,    bitRange=8-15
13040                           ;'FSMC_PIO4.IOHOLD`                    EQU 0xA00000B0,        4, base=16,    bitRange=16-23
13041                           ;'FSMC_PIO4.IOHIZ`                     EQU 0xA00000B0,        4, base=16,    bitRange=24-31
13042                           
13043                           FSMC_BWTR1                          EQU 0xA0000104
13044                           ;'FSMC_BWTR1.ADDSET`                   EQU 0xA0000104,        4, base=16,    bitRange=0-3
13045                           ;'FSMC_BWTR1.ADDHLD`                   EQU 0xA0000104,        4, base=16,    bitRange=4-7
13046                           ;'FSMC_BWTR1.DATAST`                   EQU 0xA0000104,        4, base=16,    bitRange=8-15
13047                           ;'FSMC_BWTR1.CLKDIV`                   EQU 0xA0000104,        4, base=16,    bitRange=20-23
13048                           ;'FSMC_BWTR1.DATLAT`                   EQU 0xA0000104,        4, base=16,    bitRange=24-27
13049                           ;'FSMC_BWTR1.ACCMOD`                   EQU 0xA0000104,        4, base=16,    bitRange=28-29
13050                           
13051                           FSMC_BWTR2                          EQU 0xA000010C
13052                           ;'FSMC_BWTR2.ADDSET`                   EQU 0xA000010C,        4, base=16,    bitRange=0-3
13053                           ;'FSMC_BWTR2.ADDHLD`                   EQU 0xA000010C,        4, base=16,    bitRange=4-7
13054                           ;'FSMC_BWTR2.DATAST`                   EQU 0xA000010C,        4, base=16,    bitRange=8-15
13055                           ;'FSMC_BWTR2.CLKDIV`                   EQU 0xA000010C,        4, base=16,    bitRange=20-23
13056                           ;'FSMC_BWTR2.DATLAT`                   EQU 0xA000010C,        4, base=16,    bitRange=24-27
13057                           ;'FSMC_BWTR2.ACCMOD`                   EQU 0xA000010C,        4, base=16,    bitRange=28-29
13058                           
13059                           FSMC_BWTR3                          EQU 0xA0000114
13060                           ;'FSMC_BWTR3.ADDSET`                   EQU 0xA0000114,        4, base=16,    bitRange=0-3
13061                           ;'FSMC_BWTR3.ADDHLD`                   EQU 0xA0000114,        4, base=16,    bitRange=4-7
13062                           ;'FSMC_BWTR3.DATAST`                   EQU 0xA0000114,        4, base=16,    bitRange=8-15
13063                           ;'FSMC_BWTR3.CLKDIV`                   EQU 0xA0000114,        4, base=16,    bitRange=20-23
13064                           ;'FSMC_BWTR3.DATLAT`                   EQU 0xA0000114,        4, base=16,    bitRange=24-27
13065                           ;'FSMC_BWTR3.ACCMOD`                   EQU 0xA0000114,        4, base=16,    bitRange=28-29
13066                           
13067                           FSMC_BWTR4                          EQU 0xA000011C
13068                           ;'FSMC_BWTR4.ADDSET`                   EQU 0xA000011C,        4, base=16,    bitRange=0-3
13069                           ;'FSMC_BWTR4.ADDHLD`                   EQU 0xA000011C,        4, base=16,    bitRange=4-7
13070                           ;'FSMC_BWTR4.DATAST`                   EQU 0xA000011C,        4, base=16,    bitRange=8-15
13071                           ;'FSMC_BWTR4.CLKDIV`                   EQU 0xA000011C,        4, base=16,    bitRange=20-23
13072                           ;'FSMC_BWTR4.DATLAT`                   EQU 0xA000011C,        4, base=16,    bitRange=24-27
13073                           ;'FSMC_BWTR4.ACCMOD`                   EQU 0xA000011C,        4, base=16,    bitRange=28-29
13074                           
13075                           
13076                           ;
13077                           ;               EXTI
13078                           ;
13079                           ;     Name                                    Zone      Address     Bytesize  Displaybase
                                 Bitrange
13080                           ;     ----                                    ----      -------     --------  -----------
                                 --------
13081                           
13082                           EXTI_IMR                            EQU 0x40013C00
13083                           ;'EXTI_IMR.MR0`                        EQU 0x40013C00,        4, base=16,    bitRange=0-0
13084                           ;'EXTI_IMR.MR1`                        EQU 0x40013C00,        4, base=16,    bitRange=1-1
13085                           ;'EXTI_IMR.MR2`                        EQU 0x40013C00,        4, base=16,    bitRange=2-2
13086                           ;'EXTI_IMR.MR3`                        EQU 0x40013C00,        4, base=16,    bitRange=3-3
13087                           ;'EXTI_IMR.MR4`                        EQU 0x40013C00,        4, base=16,    bitRange=4-4
13088                           ;'EXTI_IMR.MR5`                        EQU 0x40013C00,        4, base=16,    bitRange=5-5
13089                           ;'EXTI_IMR.MR6`                        EQU 0x40013C00,        4, base=16,    bitRange=6-6
13090                           ;'EXTI_IMR.MR7`                        EQU 0x40013C00,        4, base=16,    bitRange=7-7
13091                           ;'EXTI_IMR.MR8`                        EQU 0x40013C00,        4, base=16,    bitRange=8-8
13092                           ;'EXTI_IMR.MR9`                        EQU 0x40013C00,        4, base=16,    bitRange=9-9
13093                           ;'EXTI_IMR.MR10`                       EQU 0x40013C00,        4, base=16,    bitRange=10-10
13094                           ;'EXTI_IMR.MR11`                       EQU 0x40013C00,        4, base=16,    bitRange=11-11
13095                           ;'EXTI_IMR.MR12`                       EQU 0x40013C00,        4, base=16,    bitRange=12-12
13096                           ;'EXTI_IMR.MR13`                       EQU 0x40013C00,        4, base=16,    bitRange=13-13
13097                           ;'EXTI_IMR.MR14`                       EQU 0x40013C00,        4, base=16,    bitRange=14-14
13098                           ;'EXTI_IMR.MR15`                       EQU 0x40013C00,        4, base=16,    bitRange=15-15
13099                           ;'EXTI_IMR.MR16`                       EQU 0x40013C00,        4, base=16,    bitRange=16-16
13100                           ;'EXTI_IMR.MR17`                       EQU 0x40013C00,        4, base=16,    bitRange=17-17
13101                           ;'EXTI_IMR.MR18`                       EQU 0x40013C00,        4, base=16,    bitRange=18-18
13102                           ;'EXTI_IMR.MR19`                       EQU 0x40013C00,        4, base=16,    bitRange=19-19
13103                           ;'EXTI_IMR.MR20`                       EQU 0x40013C00,        4, base=16,    bitRange=20-20
13104                           ;'EXTI_IMR.MR21`                       EQU 0x40013C00,        4, base=16,    bitRange=21-21
13105                           ;'EXTI_IMR.MR22`                       EQU 0x40013C00,        4, base=16,    bitRange=22-22
13106                           
13107                           EXTI_EMR                            EQU 0x40013C04
13108                           ;'EXTI_EMR.MR0`                        EQU 0x40013C04,        4, base=16,    bitRange=0-0
13109                           ;'EXTI_EMR.MR1`                        EQU 0x40013C04,        4, base=16,    bitRange=1-1
13110                           ;'EXTI_EMR.MR2`                        EQU 0x40013C04,        4, base=16,    bitRange=2-2
13111                           ;'EXTI_EMR.MR3`                        EQU 0x40013C04,        4, base=16,    bitRange=3-3
13112                           ;'EXTI_EMR.MR4`                        EQU 0x40013C04,        4, base=16,    bitRange=4-4
13113                           ;'EXTI_EMR.MR5`                        EQU 0x40013C04,        4, base=16,    bitRange=5-5
13114                           ;'EXTI_EMR.MR6`                        EQU 0x40013C04,        4, base=16,    bitRange=6-6
13115                           ;'EXTI_EMR.MR7`                        EQU 0x40013C04,        4, base=16,    bitRange=7-7
13116                           ;'EXTI_EMR.MR8`                        EQU 0x40013C04,        4, base=16,    bitRange=8-8
13117                           ;'EXTI_EMR.MR9`                        EQU 0x40013C04,        4, base=16,    bitRange=9-9
13118                           ;'EXTI_EMR.MR10`                       EQU 0x40013C04,        4, base=16,    bitRange=10-10
13119                           ;'EXTI_EMR.MR11`                       EQU 0x40013C04,        4, base=16,    bitRange=11-11
13120                           ;'EXTI_EMR.MR12`                       EQU 0x40013C04,        4, base=16,    bitRange=12-12
13121                           ;'EXTI_EMR.MR13`                       EQU 0x40013C04,        4, base=16,    bitRange=13-13
13122                           ;'EXTI_EMR.MR14`                       EQU 0x40013C04,        4, base=16,    bitRange=14-14
13123                           ;'EXTI_EMR.MR15`                       EQU 0x40013C04,        4, base=16,    bitRange=15-15
13124                           ;'EXTI_EMR.MR16`                       EQU 0x40013C04,        4, base=16,    bitRange=16-16
13125                           ;'EXTI_EMR.MR17`                       EQU 0x40013C04,        4, base=16,    bitRange=17-17
13126                           ;'EXTI_EMR.MR18`                       EQU 0x40013C04,        4, base=16,    bitRange=18-18
13127                           ;'EXTI_EMR.MR19`                       EQU 0x40013C04,        4, base=16,    bitRange=19-19
13128                           ;'EXTI_EMR.MR20`                       EQU 0x40013C04,        4, base=16,    bitRange=20-20
13129                           ;'EXTI_EMR.MR21`                       EQU 0x40013C04,        4, base=16,    bitRange=21-21
13130                           ;'EXTI_EMR.MR22`                       EQU 0x40013C04,        4, base=16,    bitRange=22-22
13131                           
13132                           EXTI_RTSR                           EQU 0x40013C08
13133                           ;'EXTI_RTSR.TR0`                       EQU 0x40013C08,        4, base=16,    bitRange=0-0
13134                           ;'EXTI_RTSR.TR1`                       EQU 0x40013C08,        4, base=16,    bitRange=1-1
13135                           ;'EXTI_RTSR.TR2`                       EQU 0x40013C08,        4, base=16,    bitRange=2-2
13136                           ;'EXTI_RTSR.TR3`                       EQU 0x40013C08,        4, base=16,    bitRange=3-3
13137                           ;'EXTI_RTSR.TR4`                       EQU 0x40013C08,        4, base=16,    bitRange=4-4
13138                           ;'EXTI_RTSR.TR5`                       EQU 0x40013C08,        4, base=16,    bitRange=5-5
13139                           ;'EXTI_RTSR.TR6`                       EQU 0x40013C08,        4, base=16,    bitRange=6-6
13140                           ;'EXTI_RTSR.TR7`                       EQU 0x40013C08,        4, base=16,    bitRange=7-7
13141                           ;'EXTI_RTSR.TR8`                       EQU 0x40013C08,        4, base=16,    bitRange=8-8
13142                           ;'EXTI_RTSR.TR9`                       EQU 0x40013C08,        4, base=16,    bitRange=9-9
13143                           ;'EXTI_RTSR.TR10`                      EQU 0x40013C08,        4, base=16,    bitRange=10-10
13144                           ;'EXTI_RTSR.TR11`                      EQU 0x40013C08,        4, base=16,    bitRange=11-11
13145                           ;'EXTI_RTSR.TR12`                      EQU 0x40013C08,        4, base=16,    bitRange=12-12
13146                           ;'EXTI_RTSR.TR13`                      EQU 0x40013C08,        4, base=16,    bitRange=13-13
13147                           ;'EXTI_RTSR.TR14`                      EQU 0x40013C08,        4, base=16,    bitRange=14-14
13148                           ;'EXTI_RTSR.TR15`                      EQU 0x40013C08,        4, base=16,    bitRange=15-15
13149                           ;'EXTI_RTSR.TR16`                      EQU 0x40013C08,        4, base=16,    bitRange=16-16
13150                           ;'EXTI_RTSR.TR17`                      EQU 0x40013C08,        4, base=16,    bitRange=17-17
13151                           ;'EXTI_RTSR.TR18`                      EQU 0x40013C08,        4, base=16,    bitRange=18-18
13152                           ;'EXTI_RTSR.TR19`                      EQU 0x40013C08,        4, base=16,    bitRange=19-19
13153                           ;'EXTI_RTSR.TR20`                      EQU 0x40013C08,        4, base=16,    bitRange=20-20
13154                           ;'EXTI_RTSR.TR21`                      EQU 0x40013C08,        4, base=16,    bitRange=21-21
13155                           ;'EXTI_RTSR.TR22`                      EQU 0x40013C08,        4, base=16,    bitRange=22-22
13156                           
13157                           EXTI_FTSR                           EQU 0x40013C0C
13158                           ;'EXTI_FTSR.TR0`                       EQU 0x40013C0C,        4, base=16,    bitRange=0-0
13159                           ;'EXTI_FTSR.TR1`                       EQU 0x40013C0C,        4, base=16,    bitRange=1-1
13160                           ;'EXTI_FTSR.TR2`                       EQU 0x40013C0C,        4, base=16,    bitRange=2-2
13161                           ;'EXTI_FTSR.TR3`                       EQU 0x40013C0C,        4, base=16,    bitRange=3-3
13162                           ;'EXTI_FTSR.TR4`                       EQU 0x40013C0C,        4, base=16,    bitRange=4-4
13163                           ;'EXTI_FTSR.TR5`                       EQU 0x40013C0C,        4, base=16,    bitRange=5-5
13164                           ;'EXTI_FTSR.TR6`                       EQU 0x40013C0C,        4, base=16,    bitRange=6-6
13165                           ;'EXTI_FTSR.TR7`                       EQU 0x40013C0C,        4, base=16,    bitRange=7-7
13166                           ;'EXTI_FTSR.TR8`                       EQU 0x40013C0C,        4, base=16,    bitRange=8-8
13167                           ;'EXTI_FTSR.TR9`                       EQU 0x40013C0C,        4, base=16,    bitRange=9-9
13168                           ;'EXTI_FTSR.TR10`                      EQU 0x40013C0C,        4, base=16,    bitRange=10-10
13169                           ;'EXTI_FTSR.TR11`                      EQU 0x40013C0C,        4, base=16,    bitRange=11-11
13170                           ;'EXTI_FTSR.TR12`                      EQU 0x40013C0C,        4, base=16,    bitRange=12-12
13171                           ;'EXTI_FTSR.TR13`                      EQU 0x40013C0C,        4, base=16,    bitRange=13-13
13172                           ;'EXTI_FTSR.TR14`                      EQU 0x40013C0C,        4, base=16,    bitRange=14-14
13173                           ;'EXTI_FTSR.TR15`                      EQU 0x40013C0C,        4, base=16,    bitRange=15-15
13174                           ;'EXTI_FTSR.TR16`                      EQU 0x40013C0C,        4, base=16,    bitRange=16-16
13175                           ;'EXTI_FTSR.TR17`                      EQU 0x40013C0C,        4, base=16,    bitRange=17-17
13176                           ;'EXTI_FTSR.TR18`                      EQU 0x40013C0C,        4, base=16,    bitRange=18-18
13177                           ;'EXTI_FTSR.TR19`                      EQU 0x40013C0C,        4, base=16,    bitRange=19-19
13178                           ;'EXTI_FTSR.TR20`                      EQU 0x40013C0C,        4, base=16,    bitRange=20-20
13179                           ;'EXTI_FTSR.TR21`                      EQU 0x40013C0C,        4, base=16,    bitRange=21-21
13180                           ;'EXTI_FTSR.TR22`                      EQU 0x40013C0C,        4, base=16,    bitRange=22-22
13181                           
13182                           EXTI_SWIER                          EQU 0x40013C10
13183                           ;'EXTI_SWIER.SWIER0`                   EQU 0x40013C10,        4, base=16,    bitRange=0-0
13184                           ;'EXTI_SWIER.SWIER1`                   EQU 0x40013C10,        4, base=16,    bitRange=1-1
13185                           ;'EXTI_SWIER.SWIER2`                   EQU 0x40013C10,        4, base=16,    bitRange=2-2
13186                           ;'EXTI_SWIER.SWIER3`                   EQU 0x40013C10,        4, base=16,    bitRange=3-3
13187                           ;'EXTI_SWIER.SWIER4`                   EQU 0x40013C10,        4, base=16,    bitRange=4-4
13188                           ;'EXTI_SWIER.SWIER5`                   EQU 0x40013C10,        4, base=16,    bitRange=5-5
13189                           ;'EXTI_SWIER.SWIER6`                   EQU 0x40013C10,        4, base=16,    bitRange=6-6
13190                           ;'EXTI_SWIER.SWIER7`                   EQU 0x40013C10,        4, base=16,    bitRange=7-7
13191                           ;'EXTI_SWIER.SWIER8`                   EQU 0x40013C10,        4, base=16,    bitRange=8-8
13192                           ;'EXTI_SWIER.SWIER9`                   EQU 0x40013C10,        4, base=16,    bitRange=9-9
13193                           ;'EXTI_SWIER.SWIER10`                  EQU 0x40013C10,        4, base=16,    bitRange=10-10
13194                           ;'EXTI_SWIER.SWIER11`                  EQU 0x40013C10,        4, base=16,    bitRange=11-11
13195                           ;'EXTI_SWIER.SWIER12`                  EQU 0x40013C10,        4, base=16,    bitRange=12-12
13196                           ;'EXTI_SWIER.SWIER13`                  EQU 0x40013C10,        4, base=16,    bitRange=13-13
13197                           ;'EXTI_SWIER.SWIER14`                  EQU 0x40013C10,        4, base=16,    bitRange=14-14
13198                           ;'EXTI_SWIER.SWIER15`                  EQU 0x40013C10,        4, base=16,    bitRange=15-15
13199                           ;'EXTI_SWIER.SWIER16`                  EQU 0x40013C10,        4, base=16,    bitRange=16-16
13200                           ;'EXTI_SWIER.SWIER17`                  EQU 0x40013C10,        4, base=16,    bitRange=17-17
13201                           ;'EXTI_SWIER.SWIER18`                  EQU 0x40013C10,        4, base=16,    bitRange=18-18
13202                           ;'EXTI_SWIER.SWIER19`                  EQU 0x40013C10,        4, base=16,    bitRange=19-19
13203                           ;'EXTI_SWIER.SWIER20`                  EQU 0x40013C10,        4, base=16,    bitRange=20-20
13204                           ;'EXTI_SWIER.SWIER21`                  EQU 0x40013C10,        4, base=16,    bitRange=21-21
13205                           ;'EXTI_SWIER.SWIER22`                  EQU 0x40013C10,        4, base=16,    bitRange=22-22
13206                           
13207                           EXTI_PR                             EQU 0x40013C14
13208                           ;'EXTI_PR.PR0`                         EQU 0x40013C14,        4, base=16,    bitRange=0-0
13209                           ;'EXTI_PR.PR1`                         EQU 0x40013C14,        4, base=16,    bitRange=1-1
13210                           ;'EXTI_PR.PR2`                         EQU 0x40013C14,        4, base=16,    bitRange=2-2
13211                           ;'EXTI_PR.PR3`                         EQU 0x40013C14,        4, base=16,    bitRange=3-3
13212                           ;'EXTI_PR.PR4`                         EQU 0x40013C14,        4, base=16,    bitRange=4-4
13213                           ;'EXTI_PR.PR5`                         EQU 0x40013C14,        4, base=16,    bitRange=5-5
13214                           ;'EXTI_PR.PR6`                         EQU 0x40013C14,        4, base=16,    bitRange=6-6
13215                           ;'EXTI_PR.PR7`                         EQU 0x40013C14,        4, base=16,    bitRange=7-7
13216                           ;'EXTI_PR.PR8`                         EQU 0x40013C14,        4, base=16,    bitRange=8-8
13217                           ;'EXTI_PR.PR9`                         EQU 0x40013C14,        4, base=16,    bitRange=9-9
13218                           ;'EXTI_PR.PR10`                        EQU 0x40013C14,        4, base=16,    bitRange=10-10
13219                           ;'EXTI_PR.PR11`                        EQU 0x40013C14,        4, base=16,    bitRange=11-11
13220                           ;'EXTI_PR.PR12`                        EQU 0x40013C14,        4, base=16,    bitRange=12-12
13221                           ;'EXTI_PR.PR13`                        EQU 0x40013C14,        4, base=16,    bitRange=13-13
13222                           ;'EXTI_PR.PR14`                        EQU 0x40013C14,        4, base=16,    bitRange=14-14
13223                           ;'EXTI_PR.PR15`                        EQU 0x40013C14,        4, base=16,    bitRange=15-15
13224                           ;'EXTI_PR.PR16`                        EQU 0x40013C14,        4, base=16,    bitRange=16-16
13225                           ;'EXTI_PR.PR17`                        EQU 0x40013C14,        4, base=16,    bitRange=17-17
13226                           ;'EXTI_PR.PR18`                        EQU 0x40013C14,        4, base=16,    bitRange=18-18
13227                           ;'EXTI_PR.PR19`                        EQU 0x40013C14,        4, base=16,    bitRange=19-19
13228                           ;'EXTI_PR.PR20`                        EQU 0x40013C14,        4, base=16,    bitRange=20-20
13229                           ;'EXTI_PR.PR21`                        EQU 0x40013C14,        4, base=16,    bitRange=21-21
13230                           ;'EXTI_PR.PR22`                        EQU 0x40013C14,        4, base=16,    bitRange=22-22
13231                           
13232                           
13233                           ;;
13234                           ;; Group info for SFR Window.
13235                           ;;
13236                           ;[SfrGroupInfo]
13237                           
13238                           ;group = `NVIC`,`NVIC`,`SYSTICKCSR`,`SYSTICKRVR`,`SYSTICKCVR`,`SYSTICKCALVR`,`SETENA0`,`SETENA1`,`S
                                ETENA2`,`CLRENA0`,`CLRENA1`,`CLRENA2`,`SETPEND0`,`SETPEND1`,`SETPEND2`,`CLRPEND0`,`CLRPEND1`,`CLRPEN
                                D2`,`ACTIVE0`,`ACTIVE1`,`ACTIVE2`,`IP0`,`IP1`,`IP2`,`IP3`,`IP4`,`IP5`,`IP6`,`IP7`,`IP8`,`IP9`,`IP10`
                                ,`IP11`,`IP12`,`IP13`,`IP14`,`IP15`,`IP16`,`CPUIDBR`,`ICSR`,`VTOR`,`AIRCR`,`SCR`,`CCR`,`SHPR0`,`SHPR
                                1`,`SHPR2`,`SHCSR`,`CFSR`,`HFSR`,`DFSR`,`MMFAR`,`BFAR`,`STIR`
13239                           ;group = `DBG`,`DBGMCU_IDCODE`,`DBGMCU_CR`,`DBGMCU_APB1_FZ`,`DBGMCU_APB2_FZ`
13240                           ;group = `PWR`,`PWR_CR`,`PWR_CSR`
13241                           ;group = `RCC`,`RCC_CR`,`RCC_PLLCFGR`,`RCC_CFGR`,`RCC_CIR`,`RCC_AHB1RSTR`,`RCC_AHB2RSTR`,`RCC_AHB3R
                                STR`,`RCC_APB1RSTR`,`RCC_APB2RSTR`,`RCC_AHB1ENR`,`RCC_AHB2ENR`,`RCC_AHB3ENR`,`RCC_APB1ENR`,`RCC_APB2
                                ENR`,`RCC_AHB1LPENR`,`RCC_AHB2LPENR`,`RCC_AHB3LPENR`,`RCC_APB1LPENR`,`RCC_APB2LPENR`,`RCC_BDCR`,`RCC
                                _CSR`,`RCC_SSCGR`,`RCC_PLLI2SCFGR`
13242                           ;group = `GPIOA`,`GPIOA_MODER`,`GPIOA_OTYPER`,`GPIOA_OSPEEDR`,`GPIOA_PUPDR`,`GPIOA_IDR`,`GPIOA_ODR`
                                ,`GPIOA_BSRR`,`GPIOA_LCKR`,`GPIOA_AFRL`,`GPIOA_AFRH`
13243                           ;group = `GPIOB`,`GPIOB_MODER`,`GPIOB_OTYPER`,`GPIOB_OSPEEDR`,`GPIOB_PUPDR`,`GPIOB_IDR`,`GPIOB_ODR`
                                ,`GPIOB_BSRR`,`GPIOB_LCKR`,`GPIOB_AFRL`,`GPIOB_AFRH`
13244                           ;group = `GPIOC`,`GPIOC_MODER`,`GPIOC_OTYPER`,`GPIOC_OSPEEDR`,`GPIOC_PUPDR`,`GPIOC_IDR`,`GPIOC_ODR`
                                ,`GPIOC_BSRR`,`GPIOC_LCKR`,`GPIOC_AFRL`,`GPIOC_AFRH`
13245                           ;group = `GPIOD`,`GPIOD_MODER`,`GPIOD_OTYPER`,`GPIOD_OSPEEDR`,`GPIOD_PUPDR`,`GPIOD_IDR`,`GPIOD_ODR`
                                ,`GPIOD_BSRR`,`GPIOD_LCKR`,`GPIOD_AFRL`,`GPIOD_AFRH`
13246                           ;group = `GPIOE`,`GPIOE_MODER`,`GPIOE_OTYPER`,`GPIOE_OSPEEDR`,`GPIOE_PUPDR`,`GPIOE_IDR`,`GPIOE_ODR`
                                ,`GPIOE_BSRR`,`GPIOE_LCKR`,`GPIOE_AFRL`,`GPIOE_AFRH`
13247                           ;group = `GPIOF`,`GPIOF_MODER`,`GPIOF_OTYPER`,`GPIOF_OSPEEDR`,`GPIOF_PUPDR`,`GPIOF_IDR`,`GPIOF_ODR`
                                ,`GPIOF_BSRR`,`GPIOF_LCKR`,`GPIOF_AFRL`,`GPIOF_AFRH`
13248                           ;group = `GPIOG`,`GPIOG_MODER`,`GPIOG_OTYPER`,`GPIOG_OSPEEDR`,`GPIOG_PUPDR`,`GPIOG_IDR`,`GPIOG_ODR`
                                ,`GPIOG_BSRR`,`GPIOG_LCKR`,`GPIOG_AFRL`,`GPIOG_AFRH`
13249                           ;group = `GPIOH`,`GPIOH_MODER`,`GPIOH_OTYPER`,`GPIOH_OSPEEDR`,`GPIOH_PUPDR`,`GPIOH_IDR`,`GPIOH_ODR`
                                ,`GPIOH_BSRR`,`GPIOH_LCKR`,`GPIOH_AFRL`,`GPIOH_AFRH`
13250                           ;group = `GPIOI`,`GPIOI_MODER`,`GPIOI_OTYPER`,`GPIOI_OSPEEDR`,`GPIOI_PUPDR`,`GPIOI_IDR`,`GPIOI_ODR`
                                ,`GPIOI_BSRR`,`GPIOI_LCKR`,`GPIOI_AFRL`,`GPIOI_AFRH`
13251                           ;group = `SYSCFG`,`SYSCFG_MEMRMP`,`SYSCFG_PMC`,`SYSCFG_EXTICR1`,`SYSCFG_EXTICR2`,`SYSCFG_EXTICR3`,`
                                SYSCFG_EXTICR4`
13252                           ;group = `DMA1`,`DMA1_LISR`,`DMA1_HISR`,`DMA1_LIFCR`,`DMA1_HIFCR`,`DMA1_S0CR`,`DMA1_S0NDTR`,`DMA1_S
                                0PAR`,`DMA1_S0M0AR`,`DMA1_S0M1AR`,`DMA1_S0FCR`,`DMA1_S1CR`,`DMA1_S1NDTR`,`DMA1_S1PAR`,`DMA1_S1M0AR`,
                                `DMA1_S1M1AR`,`DMA1_S1FCR`,`DMA1_S2CR`,`DMA1_S2NDTR`,`DMA1_S2PAR`,`DMA1_S2M0AR`,`DMA1_S2M1AR`,`DMA1_
                                S2FCR`,`DMA1_S3CR`,`DMA1_S3NDTR`,`DMA1_S3PAR`,`DMA1_S3M0AR`,`DMA1_S3M1AR`,`DMA1_S3FCR`,`DMA1_S4CR`,`
                                DMA1_S4NDTR`,`DMA1_S4PAR`,`DMA1_S4M0AR`,`DMA1_S4M1AR`,`DMA1_S4FCR`,`DMA1_S5CR`,`DMA1_S5NDTR`,`DMA1_S
                                5PAR`,`DMA1_S5M0AR`,`DMA1_S5M1AR`,`DMA1_S5FCR`,`DMA1_S6CR`,`DMA1_S6NDTR`,`DMA1_S6PAR`,`DMA1_S6M0AR`,
                                `DMA1_S6M1AR`,`DMA1_S6FCR`,`DMA1_S7CR`,`DMA1_S7NDTR`,`DMA1_S7PAR`,`DMA1_S7M0AR`,`DMA1_S7M1AR`,`DMA1_
                                S7FCR`
13253                           ;group = `DMA2`,`DMA2_LISR`,`DMA2_HISR`,`DMA2_LIFCR`,`DMA2_HIFCR`,`DMA2_S0CR`,`DMA2_S0NDTR`,`DMA2_S
                                0PAR`,`DMA2_S0M0AR`,`DMA2_S0M1AR`,`DMA2_S0FCR`,`DMA2_S1CR`,`DMA2_S1NDTR`,`DMA2_S1PAR`,`DMA2_S1M0AR`,
                                `DMA2_S1M1AR`,`DMA2_S1FCR`,`DMA2_S2CR`,`DMA2_S2NDTR`,`DMA2_S2PAR`,`DMA2_S2M0AR`,`DMA2_S2M1AR`,`DMA2_
                                S2FCR`,`DMA2_S3CR`,`DMA2_S3NDTR`,`DMA2_S3PAR`,`DMA2_S3M0AR`,`DMA2_S3M1AR`,`DMA2_S3FCR`,`DMA2_S4CR`,`
                                DMA2_S4NDTR`,`DMA2_S4PAR`,`DMA2_S4M0AR`,`DMA2_S4M1AR`,`DMA2_S4FCR`,`DMA2_S5CR`,`DMA2_S5NDTR`,`DMA2_S
                                5PAR`,`DMA2_S5M0AR`,`DMA2_S5M1AR`,`DMA2_S5FCR`,`DMA2_S6CR`,`DMA2_S6NDTR`,`DMA2_S6PAR`,`DMA2_S6M0AR`,
                                `DMA2_S6M1AR`,`DMA2_S6FCR`,`DMA2_S7CR`,`DMA2_S7NDTR`,`DMA2_S7PAR`,`DMA2_S7M0AR`,`DMA2_S7M1AR`,`DMA2_
                                S7FCR`
13254                           ;group = `RTC`,`RTC_TR`,`RTC_DR`,`RTC_CR`,`RTC_ISR`,`RTC_PRER`,`RTC_WUTR`,`RTC_CALIBR`,`RTC_ALRMAR`
                                ,`RTC_ALRMBR`,`RTC_WPR`,`RTC_SSR`,`RTC_SHIFTR`,`RTC_TSTR`,`RTC_TSDR`,`RTC_TSSSR`,`RTC_CALR`,`RTC_TAF
                                CR`,`RTC_ALRMASSR`,`RTC_ALRMBSSR`,`RTC_BK0R`,`RTC_BK1R`,`RTC_BK2R`,`RTC_BK3R`,`RTC_BK4R`,`RTC_BK5R`,
                                `RTC_BK6R`,`RTC_BK7R`,`RTC_BK8R`,`RTC_BK9R`,`RTC_BK10R`,`RTC_BK11R`,`RTC_BK12R`,`RTC_BK13R`,`RTC_BK1
                                4R`,`RTC_BK15R`,`RTC_BK16R`,`RTC_BK17R`,`RTC_BK18R`,`RTC_BK19R`
13255                           ;group = `IWDG`,`IWDG_KR`,`IWDG_PR`,`IWDG_RLR`,`IWDG_SR`
13256                           ;group = `WWDG`,`WWDG_CR`,`WWDG_CFR`,`WWDG_SR`
13257                           ;group = `RNG`,`RNG_CR`,`RNG_SR`,`RNG_DR`
13258                           ;group = `TIM1`,`TIM1_CR1`,`TIM1_CR2`,`TIM1_SMCR`,`TIM1_DIER`,`TIM1_SR`,`TIM1_EGR`,`TIM1_CCMR1`,`TI
                                M1_OCMR1`,`TIM1_CCMR2`,`TIM1_OCMR2`,`TIM1_CCER`,`TIM1_CNT`,`TIM1_PSC`,`TIM1_ARR`,`TIM1_RCR`,`TIM1_CC
                                R1`,`TIM1_CCR2`,`TIM1_CCR3`,`TIM1_CCR4`,`TIM1_BDTR`,`TIM1_DCR`,`TIM1_DMAR`
13259                           ;group = `TIM8`,`TIM8_CR1`,`TIM8_CR2`,`TIM8_SMCR`,`TIM8_DIER`,`TIM8_SR`,`TIM8_EGR`,`TIM8_CCMR1`,`TI
                                M1_OCMR8`,`TIM8_CCMR2`,`TIM8_OCMR2`,`TIM8_CCER`,`TIM8_CNT`,`TIM8_PSC`,`TIM8_ARR`,`TIM8_RCR`,`TIM8_CC
                                R1`,`TIM8_CCR2`,`TIM8_CCR3`,`TIM8_CCR4`,`TIM8_BDTR`,`TIM8_DCR`,`TIM8_DMAR`
13260                           ;group = `TIM2`,`TIM2_CR1`,`TIM2_CR2`,`TIM2_SMCR`,`TIM2_DIER`,`TIM2_SR`,`TIM2_EGR`,`TIM2_CCMR1`,`TI
                                M2_OCMR1`,`TIM2_CCMR2`,`TIM2_OCMR2`,`TIM2_CCER`,`TIM2_CNT`,`TIM2_PSC`,`TIM2_ARR`,`TIM2_CCR1`,`TIM2_C
                                CR2`,`TIM2_CCR3`,`TIM2_CCR4`,`TIM2_DCR`,`TIM2_DMAR`,`TIM2_OR`
13261                           ;group = `TIM3`,`TIM3_CR1`,`TIM3_CR2`,`TIM3_SMCR`,`TIM3_DIER`,`TIM3_SR`,`TIM3_EGR`,`TIM3_CCMR1`,`TI
                                M3_OCMR1`,`TIM3_CCMR2`,`TIM3_OCMR2`,`TIM3_CCER`,`TIM3_CNT`,`TIM3_PSC`,`TIM3_ARR`,`TIM3_CCR1`,`TIM3_C
                                CR2`,`TIM3_CCR3`,`TIM3_CCR4`,`TIM3_DCR`,`TIM3_DMAR`
13262                           ;group = `TIM4`,`TIM4_CR1`,`TIM4_CR2`,`TIM4_SMCR`,`TIM4_DIER`,`TIM4_SR`,`TIM4_EGR`,`TIM4_CCMR1`,`TI
                                M4_OCMR1`,`TIM4_CCMR2`,`TIM4_OCMR2`,`TIM4_CCER`,`TIM4_CNT`,`TIM4_PSC`,`TIM4_ARR`,`TIM4_CCR1`,`TIM4_C
                                CR2`,`TIM4_CCR3`,`TIM4_CCR4`,`TIM4_DCR`,`TIM4_DMAR`
13263                           ;group = `TIM5`,`TIM5_CR1`,`TIM5_CR2`,`TIM5_SMCR`,`TIM5_DIER`,`TIM5_SR`,`TIM5_EGR`,`TIM5_CCMR1`,`TI
                                M5_OCMR1`,`TIM5_CCMR2`,`TIM5_OCMR2`,`TIM5_CCER`,`TIM5_CNT`,`TIM5_PSC`,`TIM5_ARR`,`TIM5_CCR1`,`TIM5_C
                                CR2`,`TIM5_CCR3`,`TIM5_CCR4`,`TIM5_DCR`,`TIM5_DMAR`,`TIM5_OR`
13264                           ;group = `TIM6`,`TIM6_CR1`,`TIM6_CR2`,`TIM6_DIER`,`TIM6_SR`,`TIM6_EGR`,`TIM6_CNT`,`TIM6_PSC`,`TIM6_
                                ARR`
13265                           ;group = `TIM7`,`TIM7_CR1`,`TIM7_CR2`,`TIM7_DIER`,`TIM7_SR`,`TIM7_EGR`,`TIM7_CNT`,`TIM7_PSC`,`TIM7_
                                ARR`
13266                           ;group = `TIM9`,`TIM9_CR1`,`TIM9_CR2`,`TIM9_SMCR`,`TIM9_DIER`,`TIM9_SR`,`TIM9_EGR`,`TIM9_CCMR1`,`TI
                                M9_OCMR1`,`TIM9_CCER`,`TIM9_CNT`,`TIM9_PSC`,`TIM9_ARR`,`TIM9_CCR1`,`TIM9_CCR2`
13267                           ;group = `TIM12`,`TIM12_CR1`,`TIM12_CR2`,`TIM12_SMCR`,`TIM12_DIER`,`TIM12_SR`,`TIM12_EGR`,`TIM12_CC
                                MR1`,`TIM12_OCMR1`,`TIM12_CCER`,`TIM12_CNT`,`TIM12_PSC`,`TIM12_ARR`,`TIM12_CCR1`,`TIM12_CCR2`
13268                           ;group = `TIM10`,`TIM10_CR1`,`TIM10_DIER`,`TIM10_SR`,`TIM10_EGR`,`TIM10_CCMR1`,`TIM10_OCMR1`,`TIM10
                                _CCER`,`TIM10_CNT`,`TIM10_PSC`,`TIM10_ARR`,`TIM10_CCR1`
13269                           ;group = `TIM11`,`TIM11_CR1`,`TIM11_DIER`,`TIM11_SR`,`TIM11_EGR`,`TIM11_CCMR1`,`TIM11_OCMR1`,`TIM11
                                _CCER`,`TIM11_CNT`,`TIM11_PSC`,`TIM11_ARR`,`TIM11_CCR1`,`TIM11_OR`
13270                           ;group = `TIM13`,`TIM13_CR1`,`TIM13_DIER`,`TIM13_SR`,`TIM13_EGR`,`TIM13_CCMR1`,`TIM13_OCMR1`,`TIM13
                                _CCER`,`TIM13_CNT`,`TIM13_PSC`,`TIM13_ARR`,`TIM13_CCR1`
13271                           ;group = `TIM14`,`TIM14_CR1`,`TIM14_DIER`,`TIM14_SR`,`TIM14_EGR`,`TIM14_CCMR1`,`TIM14_OCMR1`,`TIM14
                                _CCER`,`TIM14_CNT`,`TIM14_PSC`,`TIM14_ARR`,`TIM14_CCR1`
13272                           ;group = `bxCAN`,`CAN1_MCR`,`CAN1_MSR`,`CAN1_TSR`,`CAN1_RF0R`,`CAN1_RF1R`,`CAN1_IER`,`CAN1_ESR`,`CA
                                N1_BTR`,`CAN1_TI0R`,`CAN1_TDT0R`,`CAN1_TDL0R`,`CAN1_TDH0R`,`CAN1_TI1R`,`CAN1_TDT1R`,`CAN1_TDL1R`,`CA
                                N1_TDH1R`,`CAN1_TI2R`,`CAN1_TDT2R`,`CAN1_TDL2R`,`CAN1_TDH2R`,`CAN1_RI0R`,`CAN1_RDT0R`,`CAN1_RDL0R`,`
                                CAN1_RDH0R`,`CAN1_RI1R`,`CAN1_RDT1R`,`CAN1_RDL1R`,`CAN1_RDH1R`,`CAN2_MCR`,`CAN2_MSR`,`CAN2_TSR`,`CAN
                                2_RF0R`,`CAN2_RF1R`,`CAN2_IER`,`CAN2_ESR`,`CAN2_BTR`,`CAN2_TI0R`,`CAN2_TDT0R`,`CAN2_TDL0R`,`CAN2_TDH
                                0R`,`CAN2_TI1R`,`CAN2_TDT1R`,`CAN2_TDL1R`,`CAN2_TDH1R`,`CAN2_TI2R`,`CAN2_TDT2R`,`CAN2_TDL2R`,`CAN2_T
                                DH2R`,`CAN2_RI0R`,`CAN2_RDT0R`,`CAN2_RDL0R`,`CAN2_RDH0R`,`CAN2_RI1R`,`CAN2_RDT1R`,`CAN2_RDL1R`,`CAN2
                                _RDH1R`,`CAN_FMR`,`CAN_FM1R`,`CAN_FS1R`,`CAN_FFA1R`,`CAN_FA1R`,`CAN_F0R1`,`CAN_F0R2`,`CAN_F1R1`,`CAN
                                _F1R2`,`CAN_F2R1`,`CAN_F2R2`,`CAN_F3R1`,`CAN_F3R2`,`CAN_F4R1`,`CAN_F4R2`,`CAN_F5R1`,`CAN_F5R2`,`CAN_
                                F6R1`,`CAN_F6R2`,`CAN_F7R1`,`CAN_F7R2`,`CAN_F8R1`,`CAN_F8R2`,`CAN_F9R1`,`CAN_F9R2`,`CAN_F10R1`,`CAN_
                                F10R2`,`CAN_F11R1`,`CAN_F11R2`,`CAN_F12R1`,`CAN_F12R2`,`CAN_F13R1`,`CAN_F13R2`,`CAN_F14R1`,`CAN_F14R
                                2`,`CAN_F15R1`,`CAN_F15R2`,`CAN_F16R1`,`CAN_F16R2`,`CAN_F17R1`,`CAN_F17R2`,`CAN_F18R1`,`CAN_F18R2`,`
                                CAN_F19R1`,`CAN_F19R2`,`CAN_F20R1`,`CAN_F20R2`,`CAN_F21R1`,`CAN_F21R2`,`CAN_F22R1`,`CAN_F22R2`,`CAN_
                                F23R1`,`CAN_F23R2`,`CAN_F24R1`,`CAN_F24R2`,`CAN_F25R1`,`CAN_F25R2`,`CAN_F26R1`,`CAN_F26R2`,`CAN_F27R
                                1`,`CAN_F27R2`
13273                           ;group = `I2C1`,`I2C1_CR1`,`I2C1_CR2`,`I2C1_OAR1`,`I2C1_OAR2`,`I2C1_DR`,`I2C1_SR1`,`I2C1_SR2`,`I2C1
                                _CCR`,`I2C1_TRISE`
13274                           ;group = `I2C2`,`I2C2_CR1`,`I2C2_CR2`,`I2C2_OAR1`,`I2C2_OAR2`,`I2C2_DR`,`I2C2_SR1`,`I2C2_SR2`,`I2C2
                                _CCR`,`I2C2_TRISE`
13275                           ;group = `I2C3`,`I2C3_CR1`,`I2C3_CR2`,`I2C3_OAR1`,`I2C3_OAR2`,`I2C3_DR`,`I2C3_SR1`,`I2C3_SR2`,`I2C3
                                _CCR`,`I2C3_TRISE`
13276                           ;group = `SPI1`,`SPI1_CR1`,`SPI1_CR2`,`SPI1_SR`,`SPI1_DR`,`SPI1_CRCPR`,`SPI1_RXCRCR`,`SPI1_TXCRCR`
13277                           ;group = `SPI2`,`SPI2_CR1`,`SPI2_CR2`,`SPI2_SR`,`SPI2_DR`,`SPI2_CRCPR`,`SPI2_RXCRCR`,`SPI2_TXCRCR`,
                                `SPI2_I2SCFGR`,`SPI2_I2SPR`
13278                           ;group = `SPI3`,`SPI3_CR1`,`SPI3_CR2`,`SPI3_SR`,`SPI3_DR`,`SPI3_CRCPR`,`SPI3_RXCRCR`,`SPI3_TXCRCR`,
                                `SPI3_I2SCFGR`,`SPI3_I2SPR`
13279                           ;group = `SDIO`,`SDIO_POWER`,`SDIO_CLKCR`,`SDIO_ARG`,`SDIO_CMD`,`SDIO_RESPCMD`,`SDIO_RESP1`,`SDIO_R
                                ESP2`,`SDIO_RESP3`,`SDIO_RESP4`,`SDIO_DTIMER`,`SDIO_DLEN`,`SDIO_DCTRL`,`SDIO_DCOUNT`,`SDIO_STA`,`SDI
                                O_ICR`,`SDIO_MASK`,`SDIO_FIFOCNT`,`SDIO_FIFO`
13280                           ;group = `USART1`,`USART1_SR`,`USART1_DR`,`USART1_BRR`,`USART1_CR1`,`USART1_CR2`,`USART1_CR3`,`USAR
                                T1_GTPR`
13281                           ;group = `USART2`,`USART2_SR`,`USART2_DR`,`USART2_BRR`,`USART2_CR1`,`USART2_CR2`,`USART2_CR3`,`USAR
                                T2_GTPR`
13282                           ;group = `USART3`,`USART3_SR`,`USART3_DR`,`USART3_BRR`,`USART3_CR1`,`USART3_CR2`,`USART3_CR3`,`USAR
                                T3_GTPR`
13283                           ;group = `UART4`,`UART4_SR`,`UART4_DR`,`UART4_BRR`,`UART4_CR1`,`UART4_CR2`,`UART4_CR3`
13284                           ;group = `UART5`,`UART5_SR`,`UART5_DR`,`UART5_BRR`,`UART5_CR1`,`UART5_CR2`,`UART5_CR3`
13285                           ;group = `UART6`,`UART6_SR`,`UART6_DR`,`UART6_BRR`,`UART6_CR1`,`UART6_CR2`,`UART6_CR3`
13286                           ;group = `ADC`,`ADC_CSR`,`ADC_CCR`,`ADC_CDR`
13287                           ;group = `ADC1`,`ADC1_SR`,`ADC1_CR1`,`ADC1_CR2`,`ADC1_SMPR1`,`ADC1_SMPR2`,`ADC1_JOFR1`,`ADC1_JOFR2`
                                ,`ADC1_JOFR3`,`ADC1_JOFR4`,`ADC1_HTR`,`ADC1_LTR`,`ADC1_SQR1`,`ADC1_SQR2`,`ADC1_SQR3`,`ADC1_JSQR`,`AD
                                C1_JDR1`,`ADC1_JDR2`,`ADC1_JDR3`,`ADC1_JDR4`,`ADC1_DR`
13288                           ;group = `ADC2`,`ADC2_SR`,`ADC2_CR1`,`ADC2_CR2`,`ADC2_SMPR1`,`ADC2_SMPR2`,`ADC2_JOFR1`,`ADC2_JOFR2`
                                ,`ADC2_JOFR3`,`ADC2_JOFR4`,`ADC2_HTR`,`ADC2_LTR`,`ADC2_SQR1`,`ADC2_SQR2`,`ADC2_SQR3`,`ADC2_JSQR`,`AD
                                C2_JDR1`,`ADC2_JDR2`,`ADC2_JDR3`,`ADC2_JDR4`,`ADC2_DR`
13289                           ;group = `ADC3`,`ADC3_SR`,`ADC3_CR1`,`ADC3_CR2`,`ADC3_SMPR1`,`ADC3_SMPR2`,`ADC3_JOFR1`,`ADC3_JOFR2`
                                ,`ADC3_JOFR3`,`ADC3_JOFR4`,`ADC3_HTR`,`ADC3_LTR`,`ADC3_SQR1`,`ADC3_SQR2`,`ADC3_SQR3`,`ADC3_JSQR`,`AD
                                C3_JDR1`,`ADC3_JDR2`,`ADC3_JDR3`,`ADC3_JDR4`,`ADC3_DR`
13290                           ;group = `DAC`,`DAC_CR`,`DAC_SWTRIGR`,`DAC_DHR12R1`,`DAC_DHR12L1`,`DAC_DHR8R1`,`DAC_DHR12R2`,`DAC_D
                                HR12L2`,`DAC_DHR8R2`,`DAC_DHR12RD`,`DAC_DHR12LD`,`DAC_DHR8RD`,`DAC_DOR1`,`DAC_DOR2`,`DAC_SR`
13291                           ;group = `DCMI`,`DCMI_CR`,`DCMI_SR`,`DCMI_RIS`,`DCMI_IER`,`DCMI_MIS`,`DCMI_ICR`,`DCMI_ESCR`,`DCMI_E
                                SUR`,`DCMI_CWSTRT`,`DCMI_CWSIZE`,`DCMI_DR`
13292                           ;group = `Flash`,`FLASH_ACR`,`FLASH_KEYR`,`FLASH_OPTKEYR`,`FLASH_SR`,`FLASH_CR`,`FLASH_OPTCR`
13293                           ;group = `CRC`,`CRC_DR`,`CRC_IDR`,`CRC_CR`
13294                           ;group = `OTG_FS`,`OTG_FS_GOTGCTL`,`OTG_FS_GOTGINT`,`OTG_FS_GAHBCFG`,`OTG_FS_GUSBCFG`,`OTG_FS_GRSTC
                                TL`,`OTG_FS_GINTSTS`,`OTG_FS_GINTMSK`,`OTG_FS_GRXSTSR`,`OTG_FS_GRXSTSR_DEV`,`OTG_FS_GRXSTSP`,`OTG_FS
                                _GRXSTSP_DEV`,`OTG_FS_GRXFSIZ`,`OTG_FS_GNPTXFSIZ`,`OTG_FS_GNPTXSTS`,`OTG_FS_GCCFG`,`OTG_FS_CID`,`OTG
                                _FS_HPTXFSIZ`,`OTG_FS_DIEPTXF1`,`OTG_FS_DIEPTXF2`,`OTG_FS_DIEPTXF3`,`OTG_FS_DIEPTXF4`,`OTG_FS_HCFG`,
                                `OTG_FS_HFIR`,`OTG_FS_HFNUM`,`OTG_FS_HPTXSTS`,`OTG_FS_HAINT`,`OTG_FS_HAINTMSK`,`OTG_FS_HPRT`,`OTG_FS
                                _HCCHAR0`,`OTG_FS_HCINT0`,`OTG_FS_HCINTMSK0`,`OTG_FS_HCTSIZ0`,`OTG_FS_HCCHAR1`,`OTG_FS_HCINT1`,`OTG_
                                FS_HCINTMSK1`,`OTG_FS_HCTSIZ1`,`OTG_FS_HCCHAR2`,`OTG_FS_HCINT2`,`OTG_FS_HCINTMSK2`,`OTG_FS_HCTSIZ2`,
                                `OTG_FS_HCCHAR3`,`OTG_FS_HCINT3`,`OTG_FS_HCINTMSK3`,`OTG_FS_HCTSIZ3`,`OTG_FS_HCCHAR4`,`OTG_FS_HCINT4
                                `,`OTG_FS_HCINTMSK4`,`OTG_FS_HCTSIZ4`,`OTG_FS_HCCHAR5`,`OTG_FS_HCINT5`,`OTG_FS_HCINTMSK5`,`OTG_FS_HC
                                TSIZ5`,`OTG_FS_HCCHAR6`,`OTG_FS_HCINT6`,`OTG_FS_HCINTMSK6`,`OTG_FS_HCTSIZ6`,`OTG_FS_HCCHAR7`,`OTG_FS
                                _HCINT7`,`OTG_FS_HCINTMSK7`,`OTG_FS_HCTSIZ7`,`OTG_FS_HCCHAR8`,`OTG_FS_HCINT8`,`OTG_FS_HCINTMSK8`,`OT
                                G_FS_HCTSIZ8`,`OTG_FS_HCCHAR9`,`OTG_FS_HCINT9`,`OTG_FS_HCINTMSK9`,`OTG_FS_HCTSIZ9`,`OTG_FS_HCCHAR10`
                                ,`OTG_FS_HCINT10`,`OTG_FS_HCINTMSK10`,`OTG_FS_HCTSIZ10`,`OTG_FS_HCCHAR11`,`OTG_FS_HCINT11`,`OTG_FS_H
                                CINTMSK11`,`OTG_FS_HCTSIZ11`,`OTG_FS_HCCHAR12`,`OTG_FS_HCINT12`,`OTG_FS_HCINTMSK12`,`OTG_FS_HCTSIZ12
                                `,`OTG_FS_HCCHAR13`,`OTG_FS_HCINT13`,`OTG_FS_HCINTMSK13`,`OTG_FS_HCTSIZ13`,`OTG_FS_HCCHAR14`,`OTG_FS
                                _HCINT14`,`OTG_FS_HCINTMSK14`,`OTG_FS_HCTSIZ14`,`OTG_FS_HCCHAR15`,`OTG_FS_HCINT15`,`OTG_FS_HCINTMSK1
                                5`,`OTG_FS_HCTSIZ15`,`OTG_FS_DCFG`,`OTG_FS_DCTL`,`OTG_FS_DSTS`,`OTG_FS_DIEPMSK`,`OTG_FS_DOEPMSK`,`OT
                                G_FS_DAINT`,`OTG_FS_DAINTMSK`,`OTG_FS_DVBUSDIS`,`OTG_FS_DVBUSPULSE`,`OTG_FS_DIEPEMPMSK`,`OTG_FS_DIEP
                                CTL0`,`OTG_FS_DIEPINT0`,`OTG_FS_DIEPTSIZ0`,`OTG_FS_DTXFSTS0`,`OTG_FS_DIEPCTL1`,`OTG_FS_DIEPINT1`,`OT
                                G_FS_DIEPTSIZ1`,`OTG_FS_DTXFSTS1`,`OTG_FS_DIEPCTL2`,`OTG_FS_DIEPINT2`,`OTG_FS_DIEPTSIZ2`,`OTG_FS_DTX
                                FSTS2`,`OTG_FS_DIEPCTL3`,`OTG_FS_DIEPINT3`,`OTG_FS_DIEPTSIZ3`,`OTG_FS_DTXFSTS3`,`OTG_FS_DIEPCTL4`,`O
                                TG_FS_DIEPINT4`,`OTG_FS_DIEPTSIZ4`,`OTG_FS_DTXFSTS4`,`OTG_FS_DIEPCTL5`,`OTG_FS_DIEPINT5`,`OTG_FS_DIE
                                PTSIZ5`,`OTG_FS_DIEPCTL6`,`OTG_FS_DIEPINT6`,`OTG_FS_DIEPTSIZ6`,`OTG_FS_DIEPCTL7`,`OTG_FS_DIEPINT7`,`
                                OTG_FS_DIEPTSIZ7`,`OTG_FS_DIEPCTL8`,`OTG_FS_DIEPINT8`,`OTG_FS_DIEPTSIZ8`,`OTG_FS_DIEPCTL9`,`OTG_FS_D
                                IEPINT9`,`OTG_FS_DIEPTSIZ9`,`OTG_FS_DIEPCTL10`,`OTG_FS_DIEPINT10`,`OTG_FS_DIEPTSIZ10`,`OTG_FS_DIEPCT
                                L11`,`OTG_FS_DIEPINT11`,`OTG_FS_DIEPTSIZ11`,`OTG_FS_DIEPCTL12`,`OTG_FS_DIEPINT12`,`OTG_FS_DIEPTSIZ12
                                `,`OTG_FS_DIEPCTL13`,`OTG_FS_DIEPINT13`,`OTG_FS_DIEPTSIZ13`,`OTG_FS_DIEPCTL14`,`OTG_FS_DIEPINT14`,`O
                                TG_FS_DIEPTSIZ14`,`OTG_FS_DIEPCTL15`,`OTG_FS_DIEPINT15`,`OTG_FS_DIEPTSIZ15`,`OTG_FS_DOEPCTL0`,`OTG_F
                                S_DOEPINT0`,`OTG_FS_DOEPTSIZ0`,`OTG_FS_DOEPCTL1`,`OTG_FS_DOEPINT1`,`OTG_FS_DOEPTSIZ1`,`OTG_FS_DOEPCT
                                L2`,`OTG_FS_DOEPINT2`,`OTG_FS_DOEPTSIZ2`,`OTG_FS_DOEPCTL3`,`OTG_FS_DOEPINT3`,`OTG_FS_DOEPTSIZ3`,`OTG
                                _FS_DOEPCTL4`,`OTG_FS_DOEPINT4`,`OTG_FS_DOEPTSIZ4`,`OTG_FS_DOEPCTL5`,`OTG_FS_DOEPINT5`,`OTG_FS_DOEPT
                                SIZ5`,`OTG_FS_DOEPCTL6`,`OTG_FS_DOEPINT6`,`OTG_FS_DOEPTSIZ6`,`OTG_FS_DOEPCTL7`,`OTG_FS_DOEPINT7`,`OT
                                G_FS_DOEPTSIZ7`,`OTG_FS_DOEPCTL8`,`OTG_FS_DOEPINT8`,`OTG_FS_DOEPTSIZ8`,`OTG_FS_DOEPCTL9`,`OTG_FS_DOE
                                PINT9`,`OTG_FS_DOEPTSIZ9`,`OTG_FS_DOEPCTL10`,`OTG_FS_DOEPINT10`,`OTG_FS_DOEPTSIZ10`,`OTG_FS_DOEPCTL1
                                1`,`OTG_FS_DOEPINT11`,`OTG_FS_DOEPTSIZ11`,`OTG_FS_DOEPCTL12`,`OTG_FS_DOEPINT12`,`OTG_FS_DOEPTSIZ12`,
                                `OTG_FS_DOEPCTL13`,`OTG_FS_DOEPINT13`,`OTG_FS_DOEPTSIZ13`,`OTG_FS_DOEPCTL14`,`OTG_FS_DOEPINT14`,`OTG
                                _FS_DOEPTSIZ14`,`OTG_FS_DOEPCTL15`,`OTG_FS_DOEPINT15`,`OTG_FS_DOEPTSIZ15`,`OTG_FS_PCGCCTL`
13295                           ;group = `OTG_HS`,`OTG_HS_GOTGCTL`,`OTG_HS_GOTGINT`,`OTG_HS_GAHBCFG`,`OTG_HS_GUSBCFG`,`OTG_HS_GRSTC
                                TL`,`OTG_HS_GINTSTS`,`OTG_HS_GINTMSK`,`OTG_HS_GRXSTSR`,`OTG_HS_GRXSTSP`,`OTG_HS_GRXFSIZ`,`OTG_HS_GNP
                                TXFSIZ`,`OTG_HS_TX0FSIZ`,`OTG_HS_GNPTXSTS`,`OTG_HS_GI2CCTL`,`OTG_HS_GCCFG`,`OTG_HS_CID`,`OTG_HS_HPTX
                                FSIZ`,`OTG_HS_DIEPTXF1`,`OTG_HS_DIEPTXF2`,`OTG_HS_DIEPTXF3`,`OTG_HS_DIEPTXF4`,`OTG_HS_HCFG`,`OTG_HS_
                                HFIR`,`OTG_HS_HFNUM`,`OTG_HS_HPTXSTS`,`OTG_HS_HAINT`,`OTG_HS_HAINTMSK`,`OTG_HS_HPRT`,`OTG_HS_HCCHAR0
                                `,`OTG_HS_HCSPLT0`,`OTG_HS_HCINT0`,`OTG_HS_HCINTMSK0`,`OTG_HS_HCTSIZ0`,`OTG_HS_HCDMA0`,`OTG_HS_HCCHA
                                R1`,`OTG_HS_HCSPLT1`,`OTG_HS_HCINT1`,`OTG_HS_HCINTMSK1`,`OTG_HS_HCTSIZ1`,`OTG_HS_HCDMA1`,`OTG_HS_HCC
                                HAR2`,`OTG_HS_HCSPLT2`,`OTG_HS_HCINT2`,`OTG_HS_HCINTMSK2`,`OTG_HS_HCTSIZ2`,`OTG_HS_HCDMA2`,`OTG_HS_H
                                CCHAR3`,`OTG_HS_HCSPLT3`,`OTG_HS_HCINT3`,`OTG_HS_HCINTMSK3`,`OTG_HS_HCTSIZ3`,`OTG_HS_HCDMA3`,`OTG_HS
                                _HCCHAR4`,`OTG_HS_HCSPLT4`,`OTG_HS_HCINT4`,`OTG_HS_HCINTMSK4`,`OTG_HS_HCTSIZ4`,`OTG_HS_HCDMA4`,`OTG_
                                HS_HCCHAR5`,`OTG_HS_HCSPLT5`,`OTG_HS_HCINT5`,`OTG_HS_HCINTMSK5`,`OTG_HS_HCTSIZ5`,`OTG_HS_HCDMA5`,`OT
                                G_HS_HCCHAR6`,`OTG_HS_HCSPLT6`,`OTG_HS_HCINT6`,`OTG_HS_HCINTMSK6`,`OTG_HS_HCTSIZ6`,`OTG_HS_HCDMA6`,`
                                OTG_HS_HCCHAR7`,`OTG_HS_HCSPLT7`,`OTG_HS_HCINT7`,`OTG_HS_HCINTMSK7`,`OTG_HS_HCTSIZ7`,`OTG_HS_HCDMA7`
                                ,`OTG_HS_HCCHAR8`,`OTG_HS_HCSPLT8`,`OTG_HS_HCINT8`,`OTG_HS_HCINTMSK8`,`OTG_HS_HCTSIZ8`,`OTG_HS_HCDMA
                                8`,`OTG_HS_HCCHAR9`,`OTG_HS_HCSPLT9`,`OTG_HS_HCINT9`,`OTG_HS_HCINTMSK9`,`OTG_HS_HCTSIZ9`,`OTG_HS_HCD
                                MA9`,`OTG_HS_HCCHAR10`,`OTG_HS_HCSPLT10`,`OTG_HS_HCINT10`,`OTG_HS_HCINTMSK10`,`OTG_HS_HCTSIZ10`,`OTG
                                _HS_HCDMA10`,`OTG_HS_HCCHAR11`,`OTG_HS_HCSPLT11`,`OTG_HS_HCINT11`,`OTG_HS_HCINTMSK11`,`OTG_HS_HCTSIZ
                                11`,`OTG_HS_HCDMA11`,`OTG_HS_DCFG`,`OTG_HS_DCTL`,`OTG_HS_DSTS`,`OTG_HS_DIEPMSK`,`OTG_HS_DOEPMSK`,`OT
                                G_HS_DAINT`,`OTG_HS_DAINTMSK`,`OTG_HS_DVBUSDIS`,`OTG_HS_DVBUSPULSE`,`OTG_HS_DTHRCTL`,`OTG_HS_DIEPEMP
                                MSK`,`OTG_HS_DEACHINT`,`OTG_HS_DEACHINTMSK`,`OTG_HS_DIEPEACHMSK1`,`OTG_HS_DOEPEACHMSK1`,`OTG_HS_DIEP
                                CTL0`,`OTG_HS_DTXFSTS0`,`OTG_HS_DIEPCTL1`,`OTG_HS_DTXFSTS1`,`OTG_HS_DIEPCTL2`,`OTG_HS_DTXFSTS2`,`OTG
                                _HS_DIEPCTL3`,`OTG_HS_DTXFSTS3`,`OTG_HS_DIEPCTL4`,`OTG_HS_DIEPCTL5`,`OTG_HS_DIEPCTL6`,`OTG_HS_DIEPCT
                                L7`,`OTG_HS_DOEPCTL0`,`OTG_HS_DOEPCTL1`,`OTG_HS_DOEPCTL2`,`OTG_HS_DOEPCTL3`,`OTG_HS_DIEPINT0`,`OTG_H
                                S_DIEPINT1`,`OTG_HS_DIEPINT2`,`OTG_HS_DIEPINT3`,`OTG_HS_DIEPINT4`,`OTG_HS_DIEPINT5`,`OTG_HS_DIEPINT6
                                `,`OTG_HS_DIEPINT7`,`OTG_HS_DOEPINT0`,`OTG_HS_DOEPINT1`,`OTG_HS_DOEPINT2`,`OTG_HS_DOEPINT3`,`OTG_HS_
                                DOEPINT4`,`OTG_HS_DOEPINT5`,`OTG_HS_DOEPINT6`,`OTG_HS_DOEPINT7`,`OTG_HS_DIEPTSIZ0`,`OTG_HS_DIEPDMA0`
                                ,`OTG_HS_DIEPDMAB0`,`OTG_HS_DIEPTSIZ1`,`OTG_HS_DIEPDMA1`,`OTG_HS_DIEPDMAB1`,`OTG_HS_DIEPTSIZ2`,`OTG_
                                HS_DIEPDMA2`,`OTG_HS_DIEPDMAB2`,`OTG_HS_DIEPTSIZ3`,`OTG_HS_DIEPDMA3`,`OTG_HS_DIEPDMAB3`,`OTG_HS_DOEP
                                TSIZ0`,`OTG_HS_DOEPDMA0`,`OTG_HS_DOEPDMAB0`,`OTG_HS_DOEPTSIZ1`,`OTG_HS_DOEPDMA1`,`OTG_HS_DOEPDMAB1`,
                                `OTG_HS_DOEPTSIZ2`,`OTG_HS_DOEPDMA2`,`OTG_HS_DOEPDMAB2`,`OTG_HS_DOEPTSIZ3`,`OTG_HS_DOEPDMA3`,`OTG_HS
                                _DOEPDMAB3`,`OTG_HS_PCGCCTL`
13296                           ;group = `Ethernet`,`ETH_MACCR`,`ETH_MACFFR`,`ETH_MACHTHR`,`ETH_MACHTLR`,`ETH_MACMIIAR`,`ETH_MACMII
                                DR`,`ETH_MACFCR`,`ETH_MACVLANTR`,`ETH_MACRWUFFR`,`ETH_MACPMTCSR`,`ETH_MACDBGR`,`ETH_MACSR`,`ETH_MACI
                                MR`,`ETH_MACA0HR`,`ETH_MACA0LR`,`ETH_MACA1HR`,`ETH_MACA1LR`,`ETH_MACA2HR`,`ETH_MACA2LR`,`ETH_MACA3HR
                                `,`ETH_MACA3LR`,`ETH_MMCCR`,`ETH_MMCRIR`,`ETH_MMCTIR`,`ETH_MMCRIMR`,`ETH_MMCTIMR`,`ETH_MMCTGFSCCR`,`
                                ETH_MMCTGFMSCCR`,`ETH_MMCTGFCR`,`ETH_MMCRFCECR`,`ETH_MMCRFAECR`,`ETH_MMCRGUFCR`,`ETH_PTPTSCR`,`ETH_P
                                TPSSIR`,`ETH_PTPTSHR`,`ETH_PTPTSLR`,`ETH_PTPTSHUR`,`ETH_PTPTSLUR`,`ETH_PTPTSAR`,`ETH_PTPTTHR`,`ETH_P
                                TPTTLR`,`ETH_PTPTSSR`,`ETH_PTPPPSCR`,`ETH_DMABMR`,`ETH_DMATPDR`,`ETH_DMARPDR`,`ETH_DMARDLAR`,`ETH_DM
                                ATDLAR`,`ETH_DMASR`,`ETH_DMAOMR`,`ETH_DMAIER`,`ETH_DMAMFBOCR`,`ETH_DMARSWTR`,`ETH_DMACHTDR`,`ETH_DMA
                                CHRDR`,`ETH_DMACHTBAR`,`ETH_DMACHRBAR`
13297                           ;group = `FSMC`,`FSMC_BCR1`,`FSMC_BTR1`,`FSMC_BCR2`,`FSMC_BTR2`,`FSMC_BCR3`,`FSMC_BTR3`,`FSMC_BCR4`
                                ,`FSMC_BTR4`,`FSMC_PCR2`,`FSMC_SR2`,`FSMC_PMEM2`,`FSMC_PATT2`,`FSMC_ECCR2`,`FSMC_PCR3`,`FSMC_SR3`,`F
                                SMC_PMEM3`,`FSMC_PATT3`,`FSMC_ECCR3`,`FSMC_PCR4`,`FSMC_SR4`,`FSMC_PMEM4`,`FSMC_PATT4`,`FSMC_PIO4`,`F
                                SMC_BWTR1`,`FSMC_BWTR2`,`FSMC_BWTR3`,`FSMC_BWTR4`
13298                           ;group = `EXTI`,`EXTI_IMR`,`EXTI_EMR`,`EXTI_RTSR`,`EXTI_FTSR`,`EXTI_SWIER`,`EXTI_PR`
13299                           
13300                           ;;
13301                           ;; ;Interrupt list for SWO interrupt view.
13302                           ;;
13303                           ;[;InterruptList]
13304                           ;;Interrupt0   = NMI                            0x08
13305                           ;;Interrupt1   = HardFault                      0x0C
13306                           ;Interrupt2   = MemManage               0x10
13307                           ;Interrupt3   = BusFault                0x14
13308                           ;Interrupt4   = UsageFault              0x18
13309                           ;Interrupt5   = SVC                     0x2C
13310                           ;Interrupt6   = DebugMon                0x30
13311                           ;Interrupt7   = PendSV                  0x38
13312                           ;Interrupt8   = SysTick                 0x3C
13313                           ;Interrupt9   = WWDG                    0x40
13314                           ;Interrupt10  = PVD                     0x44
13315                           ;Interrupt11  = TAMPER                  0x48
13316                           ;Interrupt12  = RTC                     0x4C
13317                           ;Interrupt13  = FLASH                   0x50
13318                           ;Interrupt14  = RCC                     0x54
13319                           ;Interrupt15  = EXTI0                   0x58
13320                           ;Interrupt16  = EXTI1                   0x5C
13321                           ;Interrupt17  = EXTI2                   0x60
13322                           ;Interrupt18  = EXTI3                   0x64
13323                           ;Interrupt19  = EXTI4                   0x68
13324                           ;Interrupt20  = DMA1Ch0                 0x6C
13325                           ;Interrupt21  = DMA1Ch1                 0x70
13326                           ;Interrupt22  = DMA1Ch2                 0x74
13327                           ;Interrupt23  = DMA1Ch3                 0x78
13328                           ;Interrupt24  = DMA1Ch4                 0x7C
13329                           ;Interrupt25  = DMA1Ch5                 0x80
13330                           ;Interrupt26  = DMA1Ch6                 0x84
13331                           ;Interrupt27  = ADC1_2                  0x88
13332                           ;Interrupt28  = CAN1_TX                 0x8C
13333                           ;Interrupt29  = CAN1_RX0                0x90
13334                           ;Interrupt30  = CAN1_RX1                0x94
13335                           ;Interrupt31  = CAN1_SCE                0x98
13336                           ;Interrupt32  = EXTI9_5                 0x9C
13337                           ;Interrupt33  = TIM1_BRK_TIM9           0xA0
13338                           ;Interrupt34  = TIM1_UP_TIM10           0xA4
13339                           ;Interrupt35  = TIM1_TRG_COM_TIM11      0xA8
13340                           ;Interrupt36  = TIM1_CC                 0xAC
13341                           ;Interrupt37  = TIM2                    0xB0
13342                           ;Interrupt38  = TIM3                    0xB4
13343                           ;Interrupt39  = TIM4                    0xB8
13344                           ;Interrupt40  = I2C1_EV                 0xBC
13345                           ;Interrupt41  = I2C1_ER                 0xC0
13346                           ;Interrupt42  = I2C2_EV                 0xC4
13347                           ;Interrupt43  = I2C2_ER                 0xC8
13348                           ;Interrupt44  = SPI1                    0xCC
13349                           ;Interrupt45  = SPI2                    0xD0
13350                           ;Interrupt46  = USART1                  0xD4
13351                           ;Interrupt47  = USART2                  0xD8
13352                           ;Interrupt48  = USART3                  0xDC
13353                           ;Interrupt49  = EXTI15_10               0xE0
13354                           ;Interrupt50  = RTCAlarm                0xE4
13355                           ;Interrupt51  = OTG_FSWakeup            0xE8
13356                           ;Interrupt52  = TIM8_BRK_TIM12          0xEC
13357                           ;Interrupt53  = TIM8_UP_TIM13           0xF0
13358                           ;Interrupt54  = TIM8_TRG_COM_TIM14      0xF4
13359                           ;Interrupt55  = TIM8_CC                 0xF8
13360                           ;Interrupt56  = DMA_CH7                 0xFC
13361                           ;Interrupt57  = FSMC                    0x100
13362                           ;Interrupt58  = SDIO                    0x104
13363                           ;Interrupt59  = TIM5                    0x108
13364                           ;Interrupt60  = SPI3                    0x10C
13365                           ;Interrupt61  = UART4                   0x110
13366                           ;Interrupt62  = UART5                   0x114
13367                           ;Interrupt63  = TIM6_DAC                        0x118
13368                           ;Interrupt64  = TIM7                    0x11C
13369                           ;Interrupt65  = DMA2Ch0                 0x120
13370                           ;Interrupt66  = DMA2Ch1                 0x124
13371                           ;Interrupt67  = DMA2Ch2                 0x128
13372                           ;Interrupt68  = DMA2Ch3                 0x12C
13373                           ;Interrupt69  = DMA2Ch4                 0x130
13374                           ;Interrupt70  = ETH                     0x134
13375                           ;Interrupt71  = ETHWakeup               0x138
13376                           ;Interrupt72  = CAN2_TX                 0x13C
13377                           ;Interrupt73  = CAN2_RX0                0x140
13378                           ;Interrupt74  = CAN2_RX1                0x144
13379                           ;Interrupt75  = CAN2_SCE                0x148
13380                           ;Interrupt76  = OTG_FS                  0x14C
13381                           ;Interrupt77  = DMA2_CH5                0x150
13382                           ;Interrupt78  = DMA2_CH6                0x154
13383                           ;Interrupt79  = DMA2_CH7                0x158
13384                           ;Interrupt80  = USART6                  0x15C
13385                           ;Interrupt81  = I2C3_EV                 0x160
13386                           ;Interrupt82  = I2C3_ER                 0x164
13387                           ;Interrupt83  = OTG_HS_EP1_OUT          0x168
13388                           ;Interrupt84  = OTG_HS_EP1_IN           0x16C
13389                           ;Interrupt85  = OTG_HS_WKUP             0x170
13390                           ;Interrupt86  = OTG_HS                  0x174
13391                           ;Interrupt87  = DCMI                    0x178
13392                           ;Interrupt88  = RNG                     0x180
13393                            
   12                           //------------------------------------------------------------------------------
   13                           $FISH_ARM_CORTEX_M_REGS.h
    1                           // 2018 the syntax will evolve to t_r0. n_r1 etc.
    2                           // Valid thru v1.8
    3                           #define t       r0      // t_r0
    4                           #define t_r0    r0
    5                           
    6                           #define n                               r1      // n_r1         v4th
    7                           #define n_r1            r1
    8                           
    9                           #define w                               r2      // w_r2         FISH next v4th NOS DPUSH
   10                           #define w_r2            r2
   11                           
   12                           #define x                               r3      // x_r3         Execution
   13                           #define x_r3            r3
   14                           
   15                           #define y                               r4      // y_r4         BX as scratch (ROT)
   16                           #define y_r4            r4
   17                           
   18                           #define i                               r5      // i_r5         IP
   19                           #define i_r5            r5
   20                           
   21                           #define r                               r6      // r_r6         Return Stack Pointer
   22                           #define r_r6    r6
   23                           
   24                           #define p                               r7      // p_r7         Parameter Stack Pointer
   25                           #define p_r7            r7
   26                           
   27                           //              r8      // Link register
   28                           //              r9      // Program Counter
   29                           //      ARMv6 Cortex M0 LPC 1114 is 16 bit thumb ISA.
   30                           //      Use of the following registers is limited to local variables mostly.
   31                           //      ST doesn't seem to have this issue?
   32                           // speculation
   33                           
   34                           #define ra                      r10     // ra_r10
   35                           #define ra_r10  r10
   36                           
   37                           #define rb                      r11     // rb_r11
   38                           #define rb_r11  r11
   39                           
   40                           #define k                               r12     // k_r12
   41                           #define k_r12           r12
   14                           $FISH_STM32F4_MACROS.h
    1                           // Valid thru v1.8
    2                           
    3                           //#define ss      // "single-step" switch for debug/shakedown testing
    4                           
    5                           //------------------------------------------------------------------------------
    6                           //      Inner Interpreter Macros
    7                           //      Beauty is you can put any ISA in a macro and no prob till referenced!
    8                           NEXT    MACRO   
    9                           // ARMv7-M Thumb = .+5
   10                                   ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
   11                           // ARMv6-M Thumb = .+4
   12                           //        LDM   i!, {w} // get IP->cfa to w, incr i after
   13                                   NEXT1
   14                                   ENDM
   15                           #ifndef ss
   16                           // ARMv7-M Thumb = .+5
   17                           NEXT1   MACRO   
   18                                   BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
   19                                   LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
   20                                   BX      x               ; w preserves cfa+4 for DOCOL's benefit
   21                           // ARMv6-M Thumb = .+4
   22                           //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   23                           //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
   24                                   ENDM
   25                           
   26                           // ELSE
   27                           #else
   33                           #endif
   34                           // ENDIF
   35                           
   36                           TPUSH_r0        MACRO   
   37                                   PUSHt_r0        // push t to p, pre decrement p
   38                                   NEXT
   39                                   ENDM
   40                           
   41                           DPUSH_r0_then_r1        MACRO   
   42                                   PUSHw   // push w to p, post decrement p
   43                                   TPUSH_r0
   44                                   ENDM
   45                           
   46                           //------------------------------------------------------------------------------
   47                           //      FISH STACK MACRO's
   48                           //      Beauty is you can put any ISA in a macro and no prob till referenced!
   49                           //      Cortex M0 THUMB only does STMia and LDMia
   50                           //      I (rstack value to pstack) expects POP to be post increment
   51                           //      Meaning that TOS is = to current p or r
   52                           //      Therefore PUSH is pre decrement
   53                           
   54                           PUSHt_r0        MACRO
   55                                   STR     t, [p, #-4]!    // Pre-increment
   56                           //      SUBS    p, p, #4        // push t to p, pre decrement p
   57                           //      STR     t, [p]
   58                                   ENDM
   59                           
   60                           POP2t_r0        MACRO
   61                                   LDR     t, [p],#4       // Post-increment
   62                           //#ifndef TOSCT
   63                           //      LDR     t, [p]          // pop tos to t, post increment p
   64                           //#endif
   65                           //      ADDS    p, p, #4
   66                                   ENDM
   67                           
   68                           NDPOP2t MACRO                   // macro = copy tos to t, leave it on the stack
   69                                   LDR     t, [p]
   70                                   ENDM
   71                           
   72                           PUSHn   MACRO
   73                                   STR     n, [p, #-4]!
   74                           //      SUBS    p, p, #4        // push n to p, pre decrement p
   75                           //      STR     n, [p]
   76                                   ENDM
   77                           
   78                           POP2n_r1        MACRO
   79                                   LDR     n, [p],#4
   80                           //      LDR     n, [p]
   81                           //      ADDS    p, p, #4
   82                                   ENDM
   83                           
   84                           PUSHw   MACRO
   85                                   STR     w, [p, #-4]!
   86                           //      SUBS    p, p, #4        //  push w to p, pre decrement p
   87                           //      STR     w, [p]
   88                                   ENDM
   89                           
   90                           POP2w_r2        MACRO
   91                                   LDR     w, [p],#4
   92                           //      LDR     w, [p]
   93                           //      ADDS    p, p, #4
   94                                   ENDM
   95                           
   96                           NDPOP2w MACRO                   // macro = copy tos to w, leave it on the stack
   97                                   LDR     w, [p]
   98                                   ENDM
   99                           
  100                           PUSHx   MACRO
  101                                   STR     x, [p, #-4]!
  102                           //      SUBS    p, p, #4        //  push x to p, pre decrement p
  103                           //      STR     x, [p]
  104                                   ENDM
  105                           
  106                           POP2x   MACRO
  107                                   LDR     x, [p],#4
  108                           //      LDR     x, [p]
  109                           //      ADDS    p, p, #4
  110                                   ENDM
  111                           
  112                           NDPOP2x MACRO                   // macro = copy tos to w, leave it on the stack
  113                                   LDR     x, [p]
  114                                   ENDM
  115                           
  116                           PUSHi   MACRO
  117                                   STR     i, [p, #-4]!
  118                           //      SUBS    p, p, #4        // push i to p, pore increment p
  119                           //      STR     i, [p]
  120                                   ENDM
  121                           
  122                           POP2i   MACRO
  123                                   LDR     i, [p],#4
  124                           //      LDR     i, [p]
  125                           //      ADDS    p, p, #4
  126                                   ENDM
  127                           
  128                           PUSHt2r MACRO
  129                                   STR     t, [r, #-4]!
  130                           //      SUBS    r, r, #4        //  push t to r, pre decrement r
  131                           //      STR     t, [r]
  132                                   ENDM
  133                           
  134                           PUSHi2r MACRO
  135                                   STR     i, [r, #-4]!    ; save IP to Rstack
  136                           //      SUBS    r, r, #4        //  push i to r, pre decrement r
  137                           //      STR     i, [r]
  138                                   ENDM
  139                           
  140                           POPr2i  MACRO
  141                                   LDR     i, [r],#4       ; pop DOCOL'd IP from Rstack
  142                           //      LDR i, [r]              //  pop r to i, post increment r
  143                           //      ADDS    r, r, #4
  144                                   ENDM
  145                           
  146                           //POP2p MACRO
  147                           //      ENDM
  148                           //POP2PC        MACRO 
  149                           //      ENDM
  150                           
  151                           POPr2t  MACRO 
  152                                   LDR     t, [r],#4
  153                           //      LDR     t, [r]
  154                           //      ADDS    r, r, #4
  155                                   ENDM
  156                           
  157                           PUSHn2r MACRO
  158                                   STR     n, [r, #-4]!
  159                           //      SUBS    r, r, #4        //  push t to r, pre decrement r
  160                           //      STR     n, [r]
  161                                   ENDM
  162                           
  163                           PUSHw2r MACRO
  164                                   STR     w, [r, #-4]!
  165                           //      SUBS    r, r, #4        //  push w to r, pre decrement r
  166                           //      STR     w, [r]
  167                                   ENDM
  168                           
  169                           LIT2t   MACRO
  170                                   // as in xeq token at ToS setup for lit
  171                                   LDR     t, [i], #4
  172                           //      LDM     i!, {t} // fetch memory p points to into {t}, inc i
  173                                   ENDM
  174                           
  175                           POPp2w  MACRO
  176                                   // as in xeq token on ToS setup for exec
  177                                   LDR     w, [p], #4      ; xeq token at ToS
  178                           //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  179                                   ENDM
  180                           
  181                           ILK     MACRO   reg
  182                           ; *generalized* v4th InLineKonstant
  183                                   ldr     reg, [i], #4    ; pre-inc IP
  184                                   ENDM
  185                           
   15                           //------------------------------------------------------------------------------
   16                           // #defines for XON, -1 TRUE, IO2TP, etc.
   17                           // COPY OF Assembler Preproccesor Defined Symbols for each configuration
   18                           $FISH_RM_CONFIG_#DEFINES.h
    1                           // FISH #defines for system wide control
    2                           // Clock defines are in the asm preproccesor
    3                           
    4                           // Configuration:
    5                           //#define FISH_Debug_WORDSET    // Affecs Prompt only
    6                           
    7                           // this define must keep RESET!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    8                           #define USE_CMAIN     // Affects cstartup_M.c FM0_COLD and FISH_return2c
    9                           
   10                           // pstat BASIS BEING ADDED HERE TO REPLACE pstat branch.
   11                           // Disco Boots
   12                           // PSTAT I expect swd errs
   13                           
   14                           // #define PSTAT_SPI1_TEST // works on DISCO
   15                           // THIS IS CAUSING ST-LINK TO FAIL, MESSING WITH THE JTAG SWD SEETIINGS?
   16                           // and I have to UNPLUG TARGET chip before SWD WILL WORK AGAIN,
   17                           // Including unplugging target just to gain access to erase or download~!
   18                           
   19                           #define PSTAT_SPI3_TEST // CREATES SWD ERR?
   20                           //#define PSTAT_BB_NOINIT_TEST  // SPI init in SOC_INIT
   21                           //#define PSTAT_BB_TEST         // To change SPI init to BB
   22                           
   23                           // System:
   24                           #define TRUE_EQU_NEG_ONE
   25                           #define XON_XOFF        // Use XON_XOFF Flow Control
   26                           #define ABORT_STOP_TILL_CO
   27                           #define EOL_DLE         // DLE 0x10/16d in QUIT after last line interpreted
   28                           #define EOL_NAK         // NAK in error messages for STDLED editor highlight
   29                           //#define DEFAULT_BAUD_TEST
   30                           //#define CTS_RTS       // Use Hardware Flow Control
   31                           //#define IO2TP         // for ports before i/o done - enable PADCLR and TIBCLR
   32                           //#define TOSCT         // TOS Cache Testing QUERY BACKSPACING OVER INPUT!!!
   33                           //#define SLOW_POWERUP  // For slow power supply
   34                           //#define CLKOUT        // PIO0_1 is CLKOUT
   35                           //#define TESTRAM       // run flogram at start-up
   36                           //#define DEBUG_FLASH   // 
   37                           
   38                           //#define IOBUFS_DEBUG
   39                           //IOBUFS_DEBUG #define:
   40                           //NOOP & .SH IN EXPECT AFTER LEAVE 
   41                           //TIB DUMP OF EXPECT IN QUERY
   42                           //HERE DUMP IN INTERPRET'S DFIND
   43                           //WORD PARSES USING SPACE - DOES SPACE AFTER? 
   44                           
   45                           // VTOR_PATCH defined in 205 ASM PREPROC CONFIG - UNTIL 205 VTOR issue RESOLVED.
   46                           
   47                           // COPY OF ALL CONFIGURATION Assembly Preprocessor sections:
   48                           
   49                           /*
   50                           STM32F205RC-STM118mhg Configuration Assembly Preprocessor Section:
   51                           Assembly Preprocessor Defined Symbols:
   52                           FISH_Debug_WORDSET      // Affects prompt only
   53                           VTOR_PATCH              // 205 specific
   54                           STM32F205RC
   55                           STM32F4_FLASH_1_MB
   56                           STM32F205RC_SRAM128
   57                           STM32F205RC_XRC10_118MHZ
   58                           */
   59                           /*
   60                           STM32F4_PubRel Configuration Assembly Preprocessor Section:
   61                           Assembly Preprocessor Defined Symbols:
   62                           STM32F4_XRC08_168MHZ
   63                           */
   64                           /*
   65                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   66                           Assembly Preprocessor Defined Symbols:
   67                           FISH_Debug_WORDSET
   68                           STM32F4_XRC08_168MHZ
   69                           */
   70                           /*
   71                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   72                           Assembly Preprocessor Additional Include Directories:
   73                           
   74                           Assembly Preprocessor Defined Symbols:
   75                           */
   76                           /*
   77                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   78                           Assembly Preprocessor Additional Include Directories:
   79                           
   80                           Assembly Preprocessor Defined Symbols:
   81                           */
   82                           /*
   83                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   84                           Assembly Preprocessor Additional Include Directories:
   85                           
   86                           Assembly Preprocessor Defined Symbols:
   87                           */
   88                           /*
   89                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   90                           Assembly Preprocessor Additional Include Directories:
   91                           
   92                           Assembly Preprocessor Defined Symbols:
   93                           */
   94                           /*
   95                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   96                           Assembly Preprocessor Additional Include Directories:
   97                           
   98                           Assembly Preprocessor Defined Symbols:
   99                           */
  100                           /*
  101                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  102                           Assembly Preprocessor Additional Include Directories:
  103                           
  104                           Assembly Preprocessor Defined Symbols:
  105                           */
  106                           /*
  107                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  108                           Assembly Preprocessor Additional Include Directories:
  109                           
  110                           Assembly Preprocessor Defined Symbols:
  111                           */
  112                           /*
  113                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  114                           Assembly Preprocessor Additional Include Directories:
  115                           
  116                           Assembly Preprocessor Defined Symbols:
  117                           */
  118                           /*
  119                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  120                           Assembly Preprocessor Additional Include Directories:
  121                           
  122                           Assembly Preprocessor Defined Symbols:
  123                           */
  124                           /*
  125                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  126                           Assembly Preprocessor Additional Include Directories:
  127                           
  128                           Assembly Preprocessor Defined Symbols:
  129                           */
  130                           /*
  131                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  132                           Assembly Preprocessor Additional Include Directories:
  133                           
  134                           Assembly Preprocessor Defined Symbols:
  135                           */
  136                           /*
  137                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  138                           Assembly Preprocessor Additional Include Directories:
  139                           
  140                           Assembly Preprocessor Defined Symbols:
  141                           */
  142                           /*
  143                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  144                           Assembly Preprocessor Additional Include Directories:
  145                           
  146                           Assembly Preprocessor Defined Symbols:
  147                           */
  148                           /*
  149                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  150                           Assembly Preprocessor Additional Include Directories:
  151                           
  152                           Assembly Preprocessor Defined Symbols:
  153                           */
  154                           /*
  155                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  156                           Assembly Preprocessor Additional Include Directories:
  157                           
  158                           Assembly Preprocessor Defined Symbols:
  159                           */
  160                           /*
  161                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  162                           Assembly Preprocessor Additional Include Directories:
  163                           
  164                           Assembly Preprocessor Defined Symbols:
  165                           */
  166                           /*
  167                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  168                           Assembly Preprocessor Additional Include Directories:
  169                           
  170                           Assembly Preprocessor Defined Symbols:
  171                           */
  172                           /*
  173                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  174                           Assembly Preprocessor Additional Include Directories:
  175                           
  176                           Assembly Preprocessor Defined Symbols:
  177                           */
  178                           /*
  179                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  180                           Assembly Preprocessor Additional Include Directories:
  181                           
  182                           Assembly Preprocessor Defined Symbols:
  183                           */
  184                           /*
  185                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  186                           Assembly Preprocessor Additional Include Directories:
  187                           
  188                           Assembly Preprocessor Defined Symbols:
  189                           */
   19                           //------------------------------------------------------------------------------
   20                           // FLASH, RAM, CLOCK Configurations:
   21                           // Placed in each configurations ( Debug, etc )'s
   22                           $FISH_STM32F4_EQUATES.h // #defines of FISH_M0_CONFIG_DEFINES.s
    1                           // FISH STM32F4_EQUATES.h
    2                           // Valid thru v1.8
    3                           // #defines are placed in the Assembler Preproccesor Defined Symbols section.
    4                           // EQUATES are for REAL VALUES used in FISH assembly code
    5                           //
    6                           DEFAULT_BAUD    EQU     115200          // 9600 until UART0_INIT USED 2580h
    7                           DEFAULT_BASE    EQU     16              // BASE at powerup
    8                           XON_CHAR        EQU     17              // ASCII DECIMAL XON_CHAR
    9                           XOFF_CHAR       EQU     19              // ASCII DECIMAL XOFF_CHAR
   10                           IOBUFSIZE       EQU     96              // For Tib and Pad
   11                           MAXWORDLEN      EQU     31              // magic!!! for ID. <<<<<<<<<<<<<<<<<<<<
   12                           
   13                           #ifdef STM32F4_IRC16_16MHZ
   15                           #endif
   16                           #ifdef STM32F4_IRC16_32MHZ
   18                           #endif
   19                           #ifdef STM32F4_IRC16_48MHZ
   21                           #endif
   22                           #ifdef STM32F205RC_XRC10_118MHZ
   25                           #endif
   26                           #ifdef STM32F4_XRC08_168MHZ
   27                           SYSTEMCLOCK     EQU     168000000       // A037A00
   28                           #endif
   29                           
   30                           //-------------- System memory mapping equates and structures ------------------
   31                           
   32                           // RAM RUNTIME ADDRS ARE DEINED BY LABELS IN MEMMAP SEGMENTS
   33                           
   34                           FLASH_START     EQU     0x08000000
   35                           FLASH_SPAGE     EQU     0x08020000      // Reserve 128k for FISH
   36                           FLASH_PPAGE     EQU     0x08100000      // FLASH_SAVE USES THIS
   37                           
   38                           
   39                           // BATTERY BACKED RAM
   40                           BBRAM_START     EQU     40024000h
   41                           BBRAM_END       EQU     40025000h       // 4K - 4096
   42                           BBRAM           EQU     BBRAM_START
   43                           
   44                           //-------------- System STACK AND UNINIT mapping equates -----------------------
   45                           // THIS SHOULD BE A STATIC LINK - AT END OF SRAM2...
   46                           // MAP: CSTACK$$Base          0x2001e000         --   Gb  - Linker created -
   47                           SRAM2_CSTACK     EQU     2001E000h       // 16K FOR CSTACK & HEAP ICF SETS AT END
   48                           
   49                           
   23                           $FISH_STM32F4_MEMMAP.s  // SYSTEM AND USER MEMORY MAPPING
    1                           // FISH_STM32Fx_MEMMAP.s
    2                           // Valid thru v1.8
    3                           // STM32F407VG_SRAM128_TCM64
    4                           // STM32F205RC_SRAM128
    5                           // USE LINKER BETTER!!!
    6                           //------------------------------------------------------------------------------
    7                           // FISH FORTH Memory Map for the STM32Fx series
    8                           // Tested:
    9                           // STM32F407vg ARM Cortex M4F series SystemsOnaChip (SoC). STM32F4 Disco Brd.
   10                           // STP STM32F206RC RPM Brd.
   11                           
   12                           // Create a new section for Temporary Word Dictionairy Section when ready
   13                           // WITH IT'S OWN BASE AND CURRENT POINTERS TO COMPILE INTO,
   14                           // A relocated transitory dictionary segment managed by system words.
   15                           // Transitory dictionaly segment can be created, say as SoC addr constants,
   16                           // used in compiling initialization routines, then un-linked after useage.
   17                           //  SECTION .tcm_pref_temp_dict : DATA(2)
   18                           //RAM_TEMP_DICT        DS8     48000
   19                           //RAM_TEMP_DICT_END:
   20                           
   21                           // Create a new section for ISR's when ready
   22                           // WITH IT'S OWN BASE AND CURRENT POINTERS TO COMPILE INTO,
   23                           // THAT system words manage the creation/destruction of ISR WORDS.
   24                           //  SECTION .tcm_pref_isr_ramcode : DATA(2)
   25                           //RAM_ISR_AND_CODE        DS8     48000
   26                           //RAM_ISR_AND_CODE_END:
   27                           
   28                           // Currently linked segements:
   29                           //  These need to be able to fit into 128K RAM chips!
   30                           // .sram_1rst_dict_stdio_bufs IS WHERE THE DICTIONAIRY AND AND I/O BUFFERS ARE
   31                           // .sram_2nd_intvecs_unint is where Ram intvecs and unitialized ram are.
   32                           // .tcm_pref_stacks_and_vars IS WHERE THE FISH STACKS, SYSTEM and USER VARS ARE.
   33                           
   34                           //----------- Start of RAM = DICTIONAIRY AND Standard I/O Buffers --------------
   35                              SECTION .sram_1rst_dict_stdio_bufs : DATA (2)
   36                           RAM_START:      // RAM_END IS BEFORE UNINT AREA IN .sram2_64K segment
   37                           SYSCLOCK        DS32    1               // SET AT STARTUP = FULL MHZ #
   38                           FPA:            DS32    1               // FPADDR 0 = NO FLASH AVAILABLE
   39                           FPC:            DS32    1               // FPCURR
   40                           FPSV:           DS32    1               // FP System VAR
   41                           // The above 4 words are the SIGNATURE for saved code in a flash page.
   42                           // The FISH Dictionary starts 0x10 bytes after RBASE (RAMstart)
   43                           DICTSPACE_START:
   44                           ORIG:                   DS8     64000                                   // Dictionary at beginning
                                 of RAM
   45                           DICTSPACE_END:                          // For DICTSPACE calculation
   46                           // Stdio Buffers
   47                           PAD:                                                    DS8                     IOBUFSIZE          
                                             // LINE LENGTH
   48                           TIB:                                                    DS8                     IOBUFSIZE     //
                                 LINE LENGTH
   49                           TIB_DMA                 DS8     1024
   50                           TIB_DMA_BUF_END:
   51                           
   52                           // SCRATCH REGISTER, CURRENTLY A 24BIT SPI DAC WRITE VALUE
   53                           PSTAT_DAC_DATA      DS32    1
   54                           
   55                           // FLASH_CODE COMMAND BLOCK IN RAM FOR FLASH PROGRAMMING
   56                           FLASH_CODE_SRAM2_START:
   57                           FLASH_CODE_RS                                                           DS8     68
   58                           FLASH_CODE_SRAM2_END:
   59                           
   60                           //------------------- SRAM2_64K Ram intvecs and unitialized ram STRUCTURES ----------------
   61                              SECTION .sram_2nd_intvecs_unint : DATA (2)
   62                           
   63                           RAM_INTVECS                                                     DS8     128*4
   64                           RAM_INTVECS_END:                                        EQU     .
   65                           RAM_INIT_END:                // end of 1's fill
   66                           
   67                           ALL_UNINIT_SRAM2_START:                         EQU     .
   68                           // Define use of this resource.
   69                           // DBAUD and UBAUD USED FOR SAVING BAUDRATE BETWEEN RESETS AND HARD FAULT RESETS
   70                           DBAUD                                                                   DS32    1
   71                           UBAUD                                                                   DS32    1
   72                           // Free unitialized ram
   73                           ALL_UNINIT_SRAM2_FREE_START:    EQU     .
   74                           // NEEDS TO STOP before block CSTACK, block HEAP WHICH IS DYNAMIC NOW!
   75                           ALL_UNINIT_SRAM2_END                                    EQU     SRAM2_CSTACK
   76                           
   77                           //-------------- RAM Stack, system and use vars STRUCTURES ---------------------
   78                             SECTION .tcm_pref_stacks_and_vars : DATA(2)
   79                           STICKER:                                        DS32    1       // SYSTICK INTERRUPT ACCUMULATOR
   80                           // For VARSPACE calculation
   81                           RAMVARSPACE_START:
   82                           RAMVARSPACE:                                    DS8     64*4    // VAR's are in RAM
   83                           END_RAMVARSPACE_SV_START:
   84                           SV_START:
   85                            ALIGNRAM 2
   86                           // REARRANGE LATER FOR TASKING AND SIZE BASED OFFSETS!!
   87                           // BYTE VALUES
   88                           NBASE:          DS32    1       // BASE_SV for number conversion
   89                           IN:             DS32    1       // IN_SV Offset into tib
   90                           OUT:            DS32    1       // OUT_SV Offset into pad or terminal string
   91                           CSTATE:         DS32    1       // STATE_SV Compile STATE 0 =
   92                           // ADDRESS VALUES initialed in FWARM:
   93                           INITSO:         DS32    1       // INITS0_SV Parameter Stack Addr
   94                           INITRO:         DS32    1       // INITR0_SV Return Stack Addr
   95                           INITTIB:        DS32    1       // TIB_SV TIB Addr
   96                           UP:             DS32    1       // UP_SV See VARALLOT
   97                           DP:                     DS32    1       // DP_SV IS See LATEST, COMMA, ALLOT AND CALLOT
   98                           CSDP            DS32    1       // Create saves DP here to restore if errors
   99                           FENCE:                  DS32    1       // FENCE_SV See FORGET
  100                           CURRENT:        DS32    1       // CURRENT_SV See LATEST
  101                           PROMPT:         DS32    1       // Init in FWARM TO msg_MY_OK, $ OR 0 (QUIT)
  102                           ERROR_HALT:                     DS32    1       // Init in FWARM & EHOFF to 0 and EHON to
                                 1
  103                           SV_END:
  104                           // THESE ARE INITIALIZED WHEN USED AT RUN-TIME
  105                           CSP:            DS32    1       // CSP_SV SCSP saves stack pos here
  106                           NDPL:           DS32    1       // DPL_SV for number conversion
  107                           NHLD:           DS32    1       // HLD_SV for number conversion
  108                           // FISH Stacks
  109                           STACKSIZE       EQU     32*4            // SHOULD BE GOOD
  110                           RPAD            DS32    4
  111                           BOTTOM_RSTACK   DS32    STACKSIZE       // END OF RETURN STACK ADDR
  112                           RINIT                   EQU     .               // RETURN STACK register r
  113                           SPAD            DS32    4              // IF IN CCM UNDERFLOW = RESERVED MMAP
  114                           BOTTOM_PSTACK   DS32    STACKSIZE
  115                           PINIT                   EQU     .              // PARAMETER STACK register p
  116                           PSTART          EQU     .
  117                           
  118                           RAM_END:
   24                           //------------------------------------------------------------------------------
   25                           // Place :NONAME's before dynamic content to make CFA addresses static.
   26                           $FISH_STM32F4_SLIB.s
    1                           // Created FISH_STM32F4_SLIB.s
    2                           // Valid thru v1.8
    3                           // - To place :NONAME's before dynamic content to make their CFA addresses static.
    4                           
    5                           //------------------------------------------------------------------------------
    6                           // SECTION HEADER TO ALIGN ALL HI LEVEL CODE - ASM SECTION AT END DIFFERS!
    7                            SECTION .text : CONST (2)
    8                            ALIGNROM 2,0xFFFFFFFF
    9                           //------------------------------------------------------------------------------
   10                           //:NONAME BELL:       ( -- ) Emit BELL char.
   11                           BELL:
   12    00000000 .............         DC32    DOCOL, LIT, 0x07, EMIT, SEMIS
                  ...07000000..
                  .............
                  .            
   13                           
   14                           //:NONAME EIGHT:      ( -- n )
   15                           //:NONAME BACKSPACE_CHAR:  ( -- n )
   16                           EIGHT:
   17                           BACKSPACE_CHAR:
   18    00000014 ........08000         DC32    DOCON, 8
                  000          
   19                           
   20                           //:NONAME BSOUT:      ( -- ) Emit BACKSPACE char erasing it and maintain OUT.
   21                           BSOUT:
   22    0000001C ........              DC32    DOCOL
   23    00000020 .............         DC32    BACKSPACE_CHAR, EMIT
                  ...          
   24    00000028 ........              DC32    SPACE
   25    0000002C .............         DC32    BACKSPACE_CHAR, EMIT
                  ...          
   26    00000034 ........              DC32    DUP       // TIB-addr
   27    00000038 .............         DC32    IN_SV, AT // offset addr
                  ...          
   28    00000040 ........              DC32    PLUS
   29    00000044 .............         DC32    ZERO, SWAP, CSTORE // 0 char, terminate string
                  ...........  
   30    00000050 ........FCFFF         DC32    LIT, -4, OUT_SV, PSTORE // Keep OUT in synch
                  FFF..........
                  ......       
   31    00000060 .............         DC32    TRUE_NEG_1, IN_SV, PSTORE // Keep IN in synch
                  ...........  
   32    0000006C ........              DC32    SEMIS
   33                           
   34                           //:NONAME zero_IN:       ( -- )
   35                           zero_IN:
   36    00000070 .............         DC32    DOCOL, strva, 0, IN, SEMIS
                  ...00000000..
                  .............
                  .            
   37                           
   38                           //:NONAME zero_OUT:       ( -- )
   39                           zero_OUT:
   40    00000084 .............         DC32    DOCOL, strva, 0, OUT, SEMIS
                  ...00000000..
                  .............
                  .            
   41                           
   42                           //:NONAME DOTSBASE:   ( n -- ) Pass n as base to .S
   43                           DOTSBASE:
   44    00000098 ........              DC32    DOCOL
   45    0000009C ........              DC32    BASE_TO_R12     // Save current BASE
   46    000000A0 .............         DC32    BASE_SV, STORE, DOTS
                  ...........  
   47    000000AC ........              DC32    BASE_FROM_R12   // Restore BASE
   48    000000B0 ........              DC32    SEMIS
   49                           
   50                           //:NONAME PRINT_SUFFIX ( -- ) Print char representing BASE ( b d or h )
   51                           PRINT_SUFFIX:
   52    000000B4 ........              DC32    DOCOL
   53    000000B8 .............         DC32    BASE_SV, AT, DUP
                  ...........  
   54    000000C4 .............         DC32    TWO, EQUAL
                  ...          
   55    000000CC ........              DC32    ZBRAN
   56    000000D0 18000000              DC32     DEC_OR_HEX-.
   57                           
   58                           IS_BIN:
   59    000000D4 ........62000         DC32    LIT, 'b', EMIT, DROP
                  000..........
                  ......       
   60    000000E4 ........              DC32    SEMIS
   61                           
   62                           DEC_OR_HEX:
   63    000000E8 ........0A000         DC32    LIT, 10, EQUAL
                  000........  
   64    000000F4 ........              DC32    ZBRAN
   65    000000F8 14000000              DC32     IS_HEX-.
   66                           
   67                           IS_DECIMAL:
   68    000000FC ........64000         DC32    LIT, 'd', EMIT
                  000........  
   69    00000108 ........              DC32    SEMIS
   70                           
   71                           IS_HEX:
   72    0000010C ........68000         DC32    LIT, 'h', EMIT
                  000........  
   73    00000118 ........              DC32    SEMIS
   74                           
   75                           //:NONAME DOT_BASE_SUFFIX: ( n -- ) DOT with BASE suffix appended.
   76                           // USED IN . .D and .SD
   77                           DOT_BASE_SUFFIX:
   78    0000011C ........              DC32    DOCOL
   79    00000120 ........              DC32    STOD            // Extend sign
   80    00000124 ........              DC32    ZERO            // and no padding
   81    00000128 ........              DC32    DDOTR           // in call to D.R
   82    0000012C ........              DC32    PRINT_SUFFIX    // Read BASE and print suffix
   83    00000130 ........              DC32    SEMIS
   84                           
   85                           //:NONAME UDOT_BASE_SUFFIX: ( n -- ) UDOT with BASE suffix appended.
   86                           // USED IN .B .H .SB and .SH
   87                           UDOT_BASE_SUFFIX:
   88    00000134 ........              DC32    DOCOL
   89    00000138 .............         DC32    ZERO, ZERO      // No sign and no padding
                  ...          
   90    00000140 ........              DC32    DDOTR           // in call to D.R
   91    00000144 ........              DC32    PRINT_SUFFIX    // Read BASE and print suffix
   92    00000148 ........              DC32    SEMIS
   93                           
   94                           //:NONAME DOTBASE:   ( n -- ) Use n as temporary BASE to output with.
   95                           //       Save current BASE and use n as BASE for this DOT or U.
   96                           //       Used by .B .D and .H
   97                           DOTBASE:
   98    0000014C ........              DC32    DOCOL
   99    00000150 ........              DC32    BASE_TO_R12     // Save current BASE
  100    00000154 .............         DC32    DUP, BASE_SV, STORE     // Save and set BASE to use
                  ...........  
  101                           // IF THIS IS ELIMINATED AND UDOT ONLY USED -1 .D IS 42432762367
  102    00000160 ........0A000         DC32    LIT, 10, EQUAL  // Use saved BASE for DECIMAL case
                  000........  
  103    0000016C ........              DC32    ZBRAN           // Fall thru for DECIMAL Case
  104    00000170 10000000              DC32    DBUSEDUDOT-.    // Else handle BIN and HEX as unsigned.
  105                           
  106    00000174 ........              DC32    DOT_BASE_SUFFIX
  107                           
  108    00000178 ........              DC32    BRAN
  109    0000017C 08000000              DC32    DBASEDONE-.     // Finish with space and reestoration of BASE.
  110                           
  111                           DBUSEDUDOT:
  112    00000180 ........              DC32    UDOT_BASE_SUFFIX
  113                           
  114                           DBASEDONE:
  115    00000184 ........              DC32    SPACE           // Provide normal . formatting
  116    00000188 ........              DC32    BASE_FROM_R12   // Restore BASE
  117    0000018C ........              DC32    SEMIS
  118                           
  119                           //:NONAME INITSO_SV:    ( -- addr of INITSO )
  120                           //      A system variable that contains the initial value for the stack pointer.
  121                           //      Pronounced S-zero. See SP!
  122                           INITSO_SV:
  123    00000190 .............         DC32    DOCON, INITSO
                  ...          
  124                           
  125                           //:NONAME INITRO_SV:    ( -- addr of INITRO )
  126                           //      A system variable containing the initial location of the return stack.
  127                           //      Pronounced R-zero. See RP!
  128                           INITRO_SV:
  129    00000198 .............         DC32    DOCON, INITRO
                  ...          
  130                           
  131                           //:NONAME       DPL_SV: ( -- addr of NDPL ) Contains # of digits after . in double number
  132                           //      A system variable containing the number of digits to the right of the
  133                           //      decimal on double integer input. It may also be used to hold output
  134                           //      column location of a decimal point, in system generated formating. The
  135                           //      default value on single number input is -1.
  136                           //DPL_SV:
  137                           //        DC32    DOCON, NDPL
  138                           
  139                           //:NONAME CSP_SV:       ( -- addr of CSP ) Stack address save for compile error checking
  140                           //       A system variable temporarily storing the stack pointer position, for
  141                           //       compilation error checking.
  142                           CSP_SV:
  143    000001A0 .............         DC32    DOCON, CSP
                  ...          
  144                           
  145                           //:NONAME HLD_SV:       ( -- addr of NHLD ) Holds address of numeric output conversion
  146                           //      A system variable that holds the address of the latest character of
  147                           //      text during numeric output conversion. Usually pad relative.
  148                           HLD_SV:
  149    000001A8 .............         DC32    DOCON, NHLD
                  ...          
  150                           
  151                           //:NONAME DICTFULL_ABORT ( -- ) Issue Dictionary Full Message and ABORT
  152                           DICTFULL_ABORT:
  153    000001B0 ........              DC32    DOCOL
  154    000001B4 .............         DC32    LIT, msg_dictfull
                  ...          
  155    000001BC .............         DC32    NULLSTRLEN, TYPE
                  ...          
  156    000001C4 ........              DC32    ABORT
  157                           
  158                           //:NONAME ALLOT_PRIM: ( un -- ) ALLOT WITHOUT DICTIONARY CHECK
  159                           ALLOT_PRIM:
  160    000001C8 ........              DC32    DOCOL
  161    000001CC ........              DC32    DP_SV
  162    000001D0 ........              DC32    PSTORE
  163    000001D4 ........              DC32    SEMIS
  164                           
  165                           //:NONAME COMMA_PRIM ( CFA -- ) COMMA WITHOUT DICTSPACE TEST
  166                           COMMA_PRIM:
  167    000001D8 ........              DC32    DOCOL
  168    000001DC ........              DC32    ALIGN32_DP_FF_PAD       // ASM CANDIDATE
  169    000001E0 ........              DC32    HERE                    // is NEW DP
  170    000001E4 ........              DC32    STORE                   // CFA
  171    000001E8 ........              DC32    FOUR
  172    000001EC ........              DC32    ALLOT_PRIM              // ALLOT W/O DICTSPACE CHECK
  173    000001F0 ........              DC32    SEMIS
  174                           
  175                           //:NONAME QCOMP: ( -- ) Issue error message if not compiling.
  176                           QCOMP:
  177    000001F4 ........              DC32    DOCOL
  178    000001F8 ........              DC32    STATE_SV
  179    000001FC ........              DC32    AT
  180    00000200 ........              DC32    ZEQU
  181    00000204 .............         DC32    LIT, msg_qcomp
                  ...          
  182    0000020C ........              DC32    QERROR    // ( f nullstr-addr -- )
  183    00000210 ........              DC32    SEMIS
  184                           
  185                           //:NONAME QEXEC:        ( -- ) Issue error message if not executing.
  186                           QEXEC:
  187    00000214 ........              DC32    DOCOL
  188    00000218 ........              DC32    STATE_SV
  189    0000021C ........              DC32    AT
  190    00000220 .............         DC32    LIT, msg_qexec
                  ...          
  191    00000228 ........              DC32    QERROR    // ( f nullstr-addr -- )
  192    0000022C ........              DC32    SEMIS
  193                           
  194                           //:NONAME QPAIR:        ( n1 n2 -- ) Issue an error message if n1 does not equal n2.
  195                           //      The message indicates that compiled conditionals do not match.
  196                           QPAIR:
  197    00000230 ........              DC32    DOCOL
  198    00000234 ........              DC32    SUBB
  199    00000238 .............         DC32    LIT, msg_qpair
                  ...          
  200    00000240 ........              DC32    QERROR    // ( f nullstr-addr -- )
  201    00000244 ........              DC32    SEMIS
  202                           
  203                           //:NONAME QSTACK:       ( -- ) If Stack Error type error message then Abort.
  204                           //      Issue an error message if the stack is out of bounds. This
  205                           //      definition may be installation dependent.
  206                           QSTACK:
  207    00000248 ........              DC32    DOCOL
  208    0000024C ........              DC32    SPAT
  209    00000250 ........              DC32    INITSO_SV
  210    00000254 ........              DC32    AT
  211    00000258 ........              DC32    SWAP
  212    0000025C ........              DC32    ULESSTHAN       // U< ( 2 1 -- 0 ) ( 1 2 -- 1 )
  213    00000260 .............         DC32    LIT, msg_qstack
                  ...          
  214    00000268 ........              DC32    QERROR    // ( f nullstr-addr -- )
  215    0000026C ........              DC32    SEMIS
  216                           
  217                           //:NONAME PDOTQ:        ( -- ) DOTQ run-time
  218                           //      The run-time proceedure, compiled by ." which transmits the
  219                           //      following in-line text to the selected output device. See ."
  220                           //      USE SINGLE QUOTES IN SOURCE USAGE!!!!
  221                           PDOTQ:
  222    00000270 ........              DC32    DOCOL
  223    00000274 ........              DC32    RFROM                           // Addr of string = aofstr
  224    00000278 .............         DC32    DUP, COUNT, TYPE
                  ...........  
  225    00000284 .............         DC32    COUNT, PLUS
                  ...          
  226    0000028C ........              DC32    ALIGNED
  227    00000290 ........              DC32    TOR
  228    00000294 ........              DC32    SEMIS
  229                           
  230                           //:NONAME QUERY:        ( -- ) Use Expect to fill TIB
  231                           //      Input characters into TIB as a NULL terminated string using EXPECT.
  232                           //      TIB is filled until CR/EMTER or count argument to EXPECT is reached.
  233                           //      IN is set to zero and the string in TIB is NULL terminated.
  234                           QUERY:
  235    00000298 ........              DC32    DOCOL
  236    0000029C ........              DC32    TIB_SV
  237    000002A0 ........5E000         DC32    LIT, IOBUFSIZE-2        // 96-2=94
                  000          
  238    000002A8 ........              DC32    EXPECT
  239    000002AC ........01000         DC32    strva, 1, IN
                  000........  
  240    000002B8 ........              DC32    SEMIS
  241                           
  242                           //:NONAME PNUMBER:      ( 0 0 addr1 -- d addr2 )
  243                           //                      ( 0 0 addr1 -- LSW MSW addr2=addr1+chars )
  244                           //      Convert the ascii text beginning at addr1+l
  245                           //      with regard to BASE into a 64 bIt unsigned number d.
  246                           //      Addr2 is the address of the first unconvertable digit, usually space
  247                           //      or NULL.
  248                           //      Used by NUMBER.
  249                           PNUMBER:
  250    000002BC ........              DC32    DOCOL
  251                           PNUM1:                          // Begin
  252    000002C0 ........              DC32    ONEP            // ( LSW MSW addr+1 -- )
  253    000002C4 .............         DC32    DUP, TOR        // ( LSW MSW  addr+1 -- ) copy of addr+1 >r
                  ...          
  254    000002CC ........              DC32    CAT             // ( LSW MSW c -- )
  255    000002D0 .............         DC32    BASE_SV, AT     // ( LSW MSW c base -- )
                  ...          
  256    000002D8 ........              DC32    DIGIT           // ( LSW MSW c base -- 0 0 digit 1 (ok)
  257                                                          // | ( 0 0 0 (bad))
  258                           //      If digit gets 0, space, dot, comma or any non number it returns 0
  259                           //      Branches to RFROM, SEMIS...
  260    000002DC ........              DC32    ZBRAN           //
  261    000002E0 58000000              DC32     PNUM2-.        // If digit retuned 0 branch, else fall thru
  262                           
  263    000002E4 ........              DC32    SWAP            // ( LSW MSW digit -- )
  264    000002E8 .............         DC32    BASE_SV, AT     // ( LSW digit MSW base -- )
                  ...          
  265                           //      U* (un un --  ud=<LSW MSW> )
  266    000002F0 ........              DC32    USTAR           // ( LSW digit LSW MSW  -- )
  267    000002F4 ........              DC32    DROP
  268    000002F8 ........              DC32    ROT
  269    000002FC .............         DC32    BASE_SV, AT     // ( base*accn bn base -- )
                  ...          
  270    00000304 ........              DC32    USTAR           // ( base*accn bn*base --   )
  271    00000308 ........              DC32    DPLUS           // ( base*accn+bn*base --   )
  272    0000030C .............         DC32    DPL_SV, AT, ONEP
                  ...........  
  273    00000318 ........              DC32    ZBRAN           // IF true
  274    0000031C 10000000              DC32    PNUM3-.         // else do
  275                           
  276    00000320 .............         DC32    ONE, DPL_SV, PSTORE
                  ...........  
  277                           
  278                           PNUM3:                          // endif
  279                                                           // ( 0 0 <c | 0> -- )
  280    0000032C ........              DC32    RFROM           // ( 0 0 <c | 0> addr+1 -- ) copy of addr+1 <r
  281    00000330 ........              DC32    BRAN
  282    00000334 8CFFFFFF              DC32    PNUM1-.         // REPEAT
  283                           
  284                           PNUM2:
  285    00000338 ........              DC32    RFROM           // copy of addr+1 <r
  286    0000033C ........              DC32    SEMIS
  287                           
  288                           //:NONAME DFIND:        ( --- pfa len tf )(found)
  289                           //              ( --- ff ) (not found)
  290                           //      Accepts the next text word (delimited by blanks) in the input stream
  291                           //      to HERE, and searches the CONTEXT and then CURRENT vocabularies
  292                           //      for a matching entry. If found, the dictionary entry's parameter
  293                           //      field address, its length byte, and a boolean true is left.
  294                           //      Otherwise, only a boolean false is left.
  295                           //      DFIND LEN HAS TO BE smudged header byte for INTERPRET.
  296                           DFIND:
  297    00000340 ........              DC32    DOCOL
  298                           #ifdef IO2TP
  301                           #endif
  302    00000344 ........              DC32    BLANK   // ( ch -- )
  303    00000348 ........              DC32    WORD    // ( cH-DELIM  --- )
  304    0000034C ........              DC32    HERE    // ( txt -- )
  305    00000350 ........              DC32    LATEST  // ( txt nfa -- )
  306    00000354 ........              DC32    PFIND   // ( txt nfa -- pfa wordlen 1 ) (ok)
  307                                                   // | ( txt nfa -- 0 ) (bad)
  308    00000358 ........              DC32    SEMIS
  309                           
  310                           //:NONAME COMP: ( -- ) Compile CFA of word that follows inside a definition.
  311                           // DOTQ: DO: LOOP: PLOOP: LITERAL: DLITERALl COLON: SEMIS:
  312                           // DO DICTSPACE CHECK, AS DOES COMMA, CCOMMA and ALLOT
  313                           // SO COMMA_PRIM CREATED AND USED HERE FOR COMPILER SPEEDUP
  314                           //      Compile CFA of word that follows.
  315                           //      When the word containing COMPILE executes, the execution address of
  316                           //      the word following COMPILE is copied (compiled) into the dictionary.
  317                           //      This allows specific compilation situations to be handled in
  318                           //      addition to simply compiling an execution address (which the
  319                           //      interpreter already does).
  320                           COMP:
  321    0000035C ........              DC32    DOCOL
  322                           //      DC32    QEXEC   // QCOMP
  323    00000360 ........              DC32    RFROM   // addr of next word in body of this word
  324    00000364 ........              DC32    DUP
  325    00000368 ........              DC32    FOURP   // addr past next word...
  326    0000036C ........              DC32    TOR     // that where execution resumes after
  327    00000370 ........              DC32    AT      // compiling this word
  328                           //      DC32    COMMA   // ALIGNED, INCREMENTS DP REFLECTED by HERE
  329    00000374 ........              DC32    COMMA_PRIM // NO DICTSPACE CHECK HERE
  330    00000378 ........              DC32    SEMIS
  331                           
  332                           //:NONAME MSMOD:        ( ud1 n2 -- n3 ud4 )
  333                           //      An unsigned mixed magnitude math operation which leaves a double
  334                           //      quotient ud4 and remainder u3, from a double dividend ud1 and single
  335                           //      divisor u2. Primarily used in pictured numeric output DIG
  336                           MSMOD:
  337    0000037C ........              DC32    DOCOL           // EX 1 0 A
  338    00000380 ........              DC32    TOR             // -- 1 0
  339    00000384 ........              DC32    ZERO            // -- 1 0 0
  340    00000388 ........              DC32    R               // -- 1 0 0 A
  341    0000038C ........              DC32    USLASH          // ( uLSW uMSW u32 --- u32REMAINDER u32QUOTIENT )
  342    00000390 ........              DC32    RFROM
  343    00000394 ........              DC32    SWAP            // -- 0 A 0 1 0
  344    00000398 ........              DC32    TOR
  345    0000039C ........              DC32    USLASH
  346    000003A0 ........              DC32    RFROM
  347    000003A4 ........              DC32    SEMIS
  348                           
  349                           //:NONAME SCSP: ( -- ) Save the parameter stack position in CSP.
  350                           //      Part of the compiler security.
  351                           //      Means Store (save) Compile time stack position.
  352                           SCSP:
  353    000003A8 ........              DC32    DOCOL
  354    000003AC ........              DC32    SPAT
  355    000003B0 ........              DC32    CSP_SV
  356    000003B4 ........              DC32    STORE
  357    000003B8 ........              DC32    SEMIS
  358                           
  359                           //:NONAME QCSP: ( -- ) Issue error message if stack and CSP don't match.
  360                           //      Indicates unbalanced compilation. Part of compiler security
  361                           QCSP:
  362    000003BC ........              DC32    DOCOL
  363    000003C0 ........              DC32    SPAT
  364    000003C4 ........              DC32    CSP_SV
  365    000003C8 ........              DC32    AT
  366    000003CC ........              DC32    SUBB
  367    000003D0 .............         DC32    LIT, msg_qstack
                  ...          
  368    000003D8 ........              DC32    QERROR    // ( f nullstr-addr -- )
  369    000003DC ........              DC32    SEMIS
  370                           
  371                           //:NONAME INTERPRET:    ( -- ) The Inner Interpreter
  372                           //      The outer text interpreter which sequentially executes or compiles
  373                           //      text from the TIB depending on STATE. If
  374                           //      the word name cannot be found after a search of CURRENT
  375                           //      it is converted to a number according to the current base.
  376                           //      That also failing, an error message will TYPE and ABORT.
  377                           //      Text input will be taken according to the convention for WORD. If a
  378                           //      decimal point is found as part of a number, a double number value
  379                           //      will be left. The decimal point is saved in DPL but otherwise
  380                           //      has no other purpose than to force this action.
  381                           //      See NUMBER.
  382                           INTERPRET:
  383    000003E0 ........              DC32    DOCOL
  384                           INTE1:                          // Begin
  385    000003E4 ........              DC32    DFIND           // IO2TP noop there for TIB entry
  386                           //      -FIND ( --- pfa len tf )(found) ( --- ff ) (not found)
  387    000003E8 ........              DC32    ZBRAN           // IF not a word,
  388    000003EC 3C000000              DC32     INTE2-.        // TRY AS A NUMBER
  389                           
  390    000003F0 ........              DC32    STATE_SV        // CSTATE 0 = INTERPRET, Cxh = COMPILING
  391    000003F4 ........              DC32    AT              // DFIND len has to be SMUDGED NFA count
  392    000003F8 ........              DC32    LESSTHAN        // for CSTATE to pass IMMEDIATE words
  393    000003FC ........              DC32    ZBRAN           // To execute immdeiate words while compiling
  394    00000400 14000000              DC32     INTE3-.
  395                           
  396    00000404 ........              DC32    CFA
  397    00000408 ........              DC32    COMMA_PRIM      // No DICTSPACE check, aligned.
  398    0000040C ........              DC32    BRAN    //ELSE
  399    00000410 0C000000              DC32     INTE4-.
  400                           
  401                           INTE3:
  402    00000414 ........              DC32    CFA     //EXECUTE FOUND WORD
  403    00000418 ........              DC32    EXEC    //endif
  404                           INTE4:
  405    0000041C ........              DC32    QSTACK   // IF STACK error abort using qerr
  406    00000420 ........              DC32    BRAN    //ELSE
  407    00000424 C0FFFFFF              DC32     INTE1-.
  408                           
  409                           INTE2:
  410    00000428 ........              DC32    HERE
  411    0000042C ........              DC32    NUMBER //( addr   ---   32LSW 32MSW ) IF error quit
  412    00000430 ........              DC32    DPL_SV
  413    00000434 ........              DC32    AT
  414    00000438 ........              DC32    ONEP
  415    0000043C ........              DC32    ZBRAN   // IF 1+ = 0
  416    00000440 10000000              DC32     INTE6-.        // SINGLE NUMBER
  417                           
  418    00000444 ........              DC32    DLITERAL   // PUSH DOUBLE NUMBER TO STACK
  419    00000448 ........              DC32    BRAN    // ELSE DOUBLE NUMBER
  420    0000044C 0C000000              DC32     INTE7-.
  421                           
  422                           INTE6:
  423    00000450 ........              DC32    DROP
  424    00000454 ........              DC32    LITERAL // PUSH SINGLE NUMBER TO STACK
  425                           
  426                           INTE7:
  427    00000458 ........              DC32    QSTACK  // endif   // IF STACK error abort using qerr
  428                           
  429                           INTE5:
  430    0000045C ........              DC32    BRAN    // AGAIN
  431    00000460 84FFFFFF              DC32     INTE1-.
  432                           
  433                           //:NONAME QUIT: ( -- ) The Outer Interpreter.
  434                           //      USE QUERY TO GET INPUT. IF INPUT = CR EXECUTE NULL TO RETURN
  435                           //      THEN INTERPRET EXECUTES WORDS, CONVERTS NUMBERS OR RESTART THRU ABORT
  436                           QUIT:
  437    00000464 ........              DC32    DOCOL
  438    00000468 ........              DC32    LBRAC   // Set CSTATE to zero - not compiling.
  439    0000046C ........              DC32    SPSTO   // ADDED IN PAREN TEST
  440                           QUIT1:                  // Begin
  441    00000470 ........              DC32    RPSTO
  442    00000474 ........              DC32    QUERY           // ( -- ) Input to TIB
  443    00000478 ........              DC32    INTERPRET       // ( -- ) RETURN BY CR placing null in tib ->  NULL:
  444                           #ifdef IO2TP
  448                           #endif
  449                           // ISSUE ONLY CR IF COMPILING OR IF PROMPT SV SET TO 0 WITH POFF(PROMPTOFF)
  450    0000047C ........              DC32    STATE_SV        // 0xC0 is compiling
  451    00000480 ........              DC32    AT
  452    00000484 ........              DC32    ZEQU            // NOT = TO ZERO IF COMPILING SO 0 IF COMPILING
  453    00000488 ........              DC32    ZBRAN           // BRANCH IF 0 - CSTATE IS NON-ZERO = compiling
  454    0000048C 38000000              DC32     QUIT2-.        // CR, LOOP AGAIN
  455                           
  456                           // v1.7 new feature to vector the system prompt
  457                           // zero means only cr with every line - for download suppression of all but errs
  458    00000490 .............         DC32    LIT, PROMPT, AT
                  ...........  
  459    0000049C ........              DC32    ZBRAN           // IF PROMPT$ = 0
  460    000004A0 24000000              DC32     QUIT2-.        // CR, LOOP AGAIN
  461                           
  462                           // PROMPT$ is not zero
  463    000004A4 .............         DC32    LIT, PROMPT, AT
                  ...........  
  464                           //        DC32    LIT, msg_MY_OK
  465    000004B0 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  466    000004B8 .............         DC32    BASE_SV, AT
                  ...          
  467    000004C0 ........              DC32    DOTDEC
  468                           #ifdef IO2TP
  473                           #endif
  474                           QUIT2:
  475                           #ifdef EOL_DLE
  476                           QUIT_EOL_DLE:
  477    000004C4 ........10000         DC32    LIT, 0x10, EMIT // 16d DLE Data Link Escape
                  000........  
  478                           //        DC32    LIT, 0xFE, EMIT // 255d BLACK SQUARE or '|o' in EOL_DLE
  479                           #endif
  480    000004D0 ........             DC32    CR               // HERE FOR BOTH COMPILE AND INTERPRET
  481                           //BP23_QUIT:
  482                           // DC32 NOOP
  483    000004D4 ........              DC32    BRAN            // AGAIN
  484    000004D8 98FFFFFF              DC32     QUIT1-.
  485                           
  486                           //:NONAME BACK: ( addr -- ) Branch back primitive
  487                           //      Calculate the backward branch offset from HERE to addr and compile
  488                           //      into the next available dictionary memory address.
  489                           BACK:
  490    000004DC ........              DC32    DOCOL
  491    000004E0 ........              DC32    HERE
  492    000004E4 ........              DC32    SUBB
  493    000004E8 ........              DC32    COMMA
  494    000004EC ........              DC32    SEMIS
  495                           
  496                           //:NONAME SEMIC_CREATE:      ( -- ) Used after CREATE to reset CSDP
  497                           //      Used in ; CON and VAR to reset CSDP which is used to auto forget
  498                           //      Words that have errors during compilation.
  499                           SEMIC_CREATE:
  500    000004F0 ........              DC32    DOCOL
  501    000004F4 ........00000         DC32    strva, 0, CSDP  // RESET AUTO FORGET WHEN CREATE ERROR
                  000........  
  502    00000500 ........              DC32    SEMIS
  503                           
  504                           //:NONAME CSDP_SV ( -- addr of CSDP ) Holds where to reset if definition fails
  505                           CSDP_SV:
  506    00000504 .............         DC32    DOCON, CSDP
                  ...          
  507                           
  508                           //:NONAME       PM:  ( n1 n2 -- n3 ) Apply the sign of n2 to n1, which is left as n3.
  509                           PM:
  510    0000050C ........              DC32    DOCOL
  511    00000510 ........              DC32    ZLESS
  512    00000514 ........              DC32    ZBRAN   //IF
  513    00000518 08000000              DC32    PM1-.
  514                           
  515    0000051C ........              DC32    NEGATE  //endif
  516                           PM1:
  517    00000520 ........              DC32    SEMIS
  518                           
  519                           //:NONAME       DPM: ( d1 n -- d2) Apply the sign of n to the double number d1.
  520                           DPM:
  521    00000524 ........              DC32    DOCOL
  522    00000528 ........              DC32    ZLESS
  523    0000052C ........              DC32    ZBRAN   //IF
  524    00000530 08000000              DC32    DPM1-.
  525                           
  526    00000534 ........              DC32    DNEGATE //endif
  527                           DPM1:
  528    00000538 ........              DC32    SEMIS
  529                           
  530                           //:NONAME SIGNON:     ( -- ) type SIGNON message.
  531                           SIGNON:
  532    0000053C ........              DC32    DOCOL
  533                           #ifdef IO2TP
  535                           #endif
  536    00000540 .............         DC32    CR, LIT, msg_FISH
                  ...........  
  537    0000054C .............         DC32    NULLSTRLEN, TYPE
                  ...          
  538    00000554 .............         DC32    LIT, msg_FISH_TIMESTAMP
                  ...          
  539    0000055C .............         DC32    NULLSTRLEN, TYPE
                  ...          
  540                           #ifdef EOL_DLE
  541    00000564 .............         DC32    LIT, msg_SIGNON_DLE
                  ...          
  542    0000056C .............         DC32    NULLSTRLEN, TYPE
                  ...          
  543                           #endif
  544    00000574 ........              DC32    CR
  545                           
  546                           #ifdef IO2TP
  550                           #endif
  551    00000578 ........              DC32    SEMIS
  552                           
  553                           //:NONAME WARM:       ( -- ) Perform FWARM and FLASH_SCAN
  554                           //      SYSTEM RAMVARSPACE INIT
  555                           //      Patch in FLASH_SAVE'd Code.
  556                           WARM:
  557    0000057C ........              DC32    DOCOL
  558    00000580 ........              DC32    FWARM
  559    00000584 ........              DC32    FLASH_SCAN
  560    00000588 ........              DC32    SEMIS
  561                           
  562                           //:NONAME       TRAVERSE TRAVERSE: ( addr1 n -- addr2 ) Used in NFA and PFA
  563                           //      USED only in NFA and PFA, padding alignment is done there.
  564                           //      Move across a variable length padding aligned name field with smudged 1rst and last
                                 byte.
  565                           //      addr1 is the address of either the length byte or the last letter.
  566                           //      If n=1, the motion is toward nfa - hi memory, if n=-l, the motion is
  567                           //      toward CFA - low memory. The addr2 resulting is address
  568                           //      of the other end of the name.
  569                           TRAVERSE:
  570    0000058C ........              DC32    DOCOL
  571    00000590 ........              DC32    SWAP
  572                           TRAVERSE_BEGIN:
  573    00000594 ........              DC32    OVER    // Begin
  574    00000598 ........              DC32    PLUS
  575    0000059C ........7F000         DC32    LIT,0x7F
                  000          
  576    000005A4 ........              DC32    OVER
  577    000005A8 ........              DC32    CAT
  578    000005AC ........              DC32    LESSTHAN
  579    000005B0 ........              DC32    ZBRAN   //until
  580    000005B4 E0FFFFFF              DC32     TRAVERSE_BEGIN-.
  581                           
  582    000005B8 ........              DC32    SWAP
  583    000005BC ........              DC32    DROP
  584    000005C0 ........              DC32    SEMIS
  585                           
  586                           //------------------------------------------------------------------------------
  587                           // ASM CODE START - MUST BE ALLIGNED AGAIN
  588                           /* AS IN:
  589                            SECTION .text : CONST (2)
  590                            ALIGNROM 2,0xFFFFFFFF
  591                           LABEL:
  592                                   DC32    .+5
  593                            SECTION .text : CODE (2)
  594                                   ASM     CODE
  595                           */
  596                           //------------------------------------------------------------------------------
  597                           //:NONAME SECTION:
  598                           // Upper case names are FISH model primitives.
  599                           // lower case names are v4th model primitives.
  600                           // Starting with v4th prims so moving them to their own file will be easier.
  601                           
  602                           //:NONAME inc:    ( -- ) Increment the top of the stack (TOS) value.
  603                           // Used proper LABELs for values vs address here.
  604                           // Want to go thru these one by one.
  605                           oneplus
  606                           inctos
  607                           inc     ; ( i -- i+1 )
  608    000005C4 0130                  adds    t,#1
  609                                   NEXT
  609.1                         // ARMv7-M Thumb = .+5
  609.2  000005C6 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  609.3                         // ARMv6-M Thumb = .+4
  609.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  609                                   NEXT1
  609.1  000005CA 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  609.2  000005CE 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  609.3  000005D2 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  609.4                         // ARMv6-M Thumb = .+4
  609.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  609.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  609.7                                 ENDM
  609.8                                 ENDM
  610                           
  611                           
  612                           
  613                           //:NONAME strva:    ( -- ) GET VALUE THEN ADDR FROM NEXT 2 CELLS AND WRITE TO ADDR
  614                           //      Use proper LABEL for values/addresses!!! EX: FPA vs FPADDR
  615                            SECTION .text : CONST (2)
  616                            ALIGNROM 2,0xFFFFFFFF
  617                           strkk:
  618                           strva:
  619                           STRVA:
  620                           strda:
  621    00000000 ........              DC32    .+5
  622                            SECTION .text : CODE (2)
  623    00000000 02CD                  LDM     i!, {n} // GET [i] TO n_r2.
  624    00000002 04CD                  LDM     i!, {w} // next [i] yp w_r3.
  625    00000004 1160                  STR     n, [w]  // n_r2 w_r3 ! (w/o stack~!)
  626                                   NEXT
  626.1                         // ARMv7-M Thumb = .+5
  626.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  626.3                         // ARMv6-M Thumb = .+4
  626.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  626                                   NEXT1
  626.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  626.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  626.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  626.4                         // ARMv6-M Thumb = .+4
  626.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  626.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  626.7                                 ENDM
  626.8                                 ENDM
  627                           
  628                           //:NONAME atk:   (  -- ) get value at inline const address
  629                            SECTION .text : CONST (2)
  630                            ALIGNROM 2,0xFFFFFFFF
  631                           atk:    ; ( x1 -- x1, x2 )
  632    00000000 ........              DC32    .+5
  633                            SECTION .text : CODE (2)
  634                           //      DUP
  635                                   ILK     t
  635.1                         ; *generalized* v4th InLineKonstant
  635.2  00000000 55F8040B              ldr     t, [i], #4    ; pre-inc IP
  635.3                                 ENDM
  636    00000004 0068                  ldr     t, [t]
  637                                   TPUSH_r0
  637                                   PUSHt_r0        // push t to p, pre decrement p
  637.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  637.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  637.3                         //      STR     t, [p]
  637.4                                 ENDM
  637                                   NEXT
  637.1                         // ARMv7-M Thumb = .+5
  637.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  637.3                         // ARMv6-M Thumb = .+4
  637.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  637                                   NEXT1
  637.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  637.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  637.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  637.4                         // ARMv6-M Thumb = .+4
  637.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  637.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  637.7                                 ENDM
  637.8                                 ENDM
  637.9                                 ENDM
  638                           
  639                           //:NONAME ork:    ( x -- x' ) Get inline konstant to OR with TOS.
  640                            SECTION .text : CONST (2)
  641                            ALIGNROM 2,0xFFFFFFFF
  642                           bisk:
  643                           ork:
  644    00000000 ........              DC32    .+5
  645                            SECTION .text : CODE (2)
  646                                   ILK     w
  646.1                         ; *generalized* v4th InLineKonstant
  646.2  00000000 55F8042B              ldr     w, [i], #4    ; pre-inc IP
  646.3                                 ENDM
  647                                   POP2t_r0
  647.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
  647.2                         //#ifndef TOSCT
  647.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  647.4                         //#endif
  647.5                         //      ADDS    p, p, #4
  647.6                                 ENDM
  648    00000008 1043                  orrs    t,w
  649                                   TPUSH_r0
  649                                   PUSHt_r0        // push t to p, pre decrement p
  649.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  649.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  649.3                         //      STR     t, [p]
  649.4                                 ENDM
  649                                   NEXT
  649.1                         // ARMv7-M Thumb = .+5
  649.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  649.3                         // ARMv6-M Thumb = .+4
  649.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  649                                   NEXT1
  649.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  649.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  649.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  649.4                         // ARMv6-M Thumb = .+4
  649.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  649.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  649.7                                 ENDM
  649.8                                 ENDM
  649.9                                 ENDM
  650                           
  651                           //:NONAME andk:   ( x -- x' ) Get inline konstant to AND with TOS.
  652                            SECTION .text : CONST (2)
  653                            ALIGNROM 2,0xFFFFFFFF
  654                           andk:
  655    00000000 ........              DC32    .+5
  656                            SECTION .text : CODE (2)
  657                                   ILK     w
  657.1                         ; *generalized* v4th InLineKonstant
  657.2  00000000 55F8042B              ldr     w, [i], #4    ; pre-inc IP
  657.3                                 ENDM
  658                                   POP2t_r0
  658.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
  658.2                         //#ifndef TOSCT
  658.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  658.4                         //#endif
  658.5                         //      ADDS    p, p, #4
  658.6                                 ENDM
  659    00000008 1040                  ands    t,w
  660                                   TPUSH_r0
  660                                   PUSHt_r0        // push t to p, pre decrement p
  660.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  660.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  660.3                         //      STR     t, [p]
  660.4                                 ENDM
  660                                   NEXT
  660.1                         // ARMv7-M Thumb = .+5
  660.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  660.3                         // ARMv6-M Thumb = .+4
  660.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  660                                   NEXT1
  660.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  660.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  660.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  660.4                         // ARMv6-M Thumb = .+4
  660.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  660.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  660.7                                 ENDM
  660.8                                 ENDM
  660.9                                 ENDM
  661                           
  662                           //:NONAME strk:   ( n -- ) Get inline konstant and store it to TOS addr.
  663                            SECTION .text : CONST (2)
  664                            ALIGNROM 2,0xFFFFFFFF
  665                           strk:   ; ( x -- )
  666    00000000 ........              DC32    .+5
  667                            SECTION .text : CODE (2)
  668                                   ILK     x
  668.1                         ; *generalized* v4th InLineKonstant
  668.2  00000000 55F8043B              ldr     x, [i], #4    ; pre-inc IP
  668.3                                 ENDM
  669                                   POP2t_r0
  669.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
  669.2                         //#ifndef TOSCT
  669.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  669.4                         //#endif
  669.5                         //      ADDS    p, p, #4
  669.6                                 ENDM
  670    00000008 1860                  str     t, [x]
  671                           //      DROP
  672                                   NEXT
  672.1                         // ARMv7-M Thumb = .+5
  672.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  672.3                         // ARMv6-M Thumb = .+4
  672.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  672                                   NEXT1
  672.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  672.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  672.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  672.4                         // ARMv6-M Thumb = .+4
  672.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  672.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  672.7                                 ENDM
  672.8                                 ENDM
  673                           
  674                           
  675                           //:NONAME RMWAMD:        ( bitdata_ilk3, mask_ilk2, addr_ilk1 -- )
  676                           // ALIASES: rmwkkk AND rmwamd
  677                            SECTION .text : CONST (2)
  678                            ALIGNROM 2,0xFFFFFFFF
  679                           RMWAMD:
  680    00000000 ........              DC32    .+5
  681                            SECTION .text : CODE (2)
  682                                   POP2x   // addr_ilk1
  682.1  00000000 57F8043B              LDR     x, [p],#4
  682.2                         //      LDR     x, [p]
  682.3                         //      ADDS    p, p, #4
  682.4                                 ENDM
  683                                   POP2n_r1
  683.1  00000004 57F8041B              LDR     n, [p],#4
  683.2                         //      LDR     n, [p]
  683.3                         //      ADDS    p, p, #4
  683.4                                 ENDM
  684                                   POP2t_r0
  684.1  00000008 57F8040B              LDR     t, [p],#4       // Post-increment
  684.2                         //#ifndef TOSCT
  684.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  684.4                         //#endif
  684.5                         //      ADDS    p, p, #4
  684.6                                 ENDM
  685    0000000C 1A68                  ldr     w, [x]
  686    0000000E 22EA0102              bic     w, w, n
  687    00000012 00EA0100              and     t, t, n
  688    00000016 42EA0002              orr     w, w, t
  689    0000001A 1A60                  str     w, [x]
  690                                   NEXT
  690.1                         // ARMv7-M Thumb = .+5
  690.2  0000001C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  690.3                         // ARMv6-M Thumb = .+4
  690.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  690                                   NEXT1
  690.1  00000020 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  690.2  00000024 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  690.3  00000028 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  690.4                         // ARMv6-M Thumb = .+4
  690.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  690.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  690.7                                 ENDM
  690.8                                 ENDM
  691                           
  692                            SECTION .text : CONST (2)
  693                            ALIGNROM 2,0xFFFFFFFF
  694                           rmwkkk:
  695                           rmwamd: ; ( -- )        addr_ilk1,  mask_ilk2,  bitdata_ilk3
  696    00000000 ........              DC32    .+5
  697                            SECTION .text : CODE (2)
  698                                   ILK     x
  698.1                         ; *generalized* v4th InLineKonstant
  698.2  00000000 55F8043B              ldr     x, [i], #4    ; pre-inc IP
  698.3                                 ENDM
  699                                   ILK     y
  699.1                         ; *generalized* v4th InLineKonstant
  699.2  00000004 55F8044B              ldr     y, [i], #4    ; pre-inc IP
  699.3                                 ENDM
  700                                   ILK     k
  700.1                         ; *generalized* v4th InLineKonstant
  700.2  00000008 55F804CB              ldr     k, [i], #4    ; pre-inc IP
  700.3                                 ENDM
  701    0000000C 1A68                  ldr     w, [x]
  702    0000000E 22EA0402              bic     w, w, y
  703    00000012 0CEA040C              and     k, k, y
  704    00000016 42EA0C02              orr     w, w, k
  705    0000001A 1A60                  str     w, [x]
  706                                   NEXT
  706.1                         // ARMv7-M Thumb = .+5
  706.2  0000001C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  706.3                         // ARMv6-M Thumb = .+4
  706.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  706                                   NEXT1
  706.1  00000020 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  706.2  00000024 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  706.3  00000028 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  706.4                         // ARMv6-M Thumb = .+4
  706.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  706.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  706.7                                 ENDM
  706.8                                 ENDM
  707                           
  708                            SECTION .text : CONST (2)
  709                            ALIGNROM 2,0xFFFFFFFF
  710                           begin:  ; r:( -- addr )
  711    00000000 ........              DC32    .+5
  712                            SECTION .text : CODE (2)
  713    00000000 46F8045D              str     i, [r, #-4]!
  714                                   NEXT
  714.1                         // ARMv7-M Thumb = .+5
  714.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  714.3                         // ARMv6-M Thumb = .+4
  714.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  714                                   NEXT1
  714.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  714.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  714.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  714.4                         // ARMv6-M Thumb = .+4
  714.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  714.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  714.7                                 ENDM
  714.8                                 ENDM
  715                           
  716                            SECTION .text : CONST (2)
  717                            ALIGNROM 2,0xFFFFFFFF
  718                           until:  ; ( x -- )
  719    00000000 ........              DC32    .+5
  720                            SECTION .text : CODE (2)
  721                                   POP2t_r0
  721.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  721.2                         //#ifndef TOSCT
  721.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  721.4                         //#endif
  721.5                         //      ADDS    p, p, #4
  721.6                                 ENDM
  722    00000004 0028                  cmp     t, #0
  723                           //      DROP
  724    00000006 0CBF                  ite     eq
  725    00000008 3568                  ldreq   i, [r]          ; r:( -- )
  726    0000000A 361D                  addne   r, r, #4        ; r:( addr -- )
  727                                   NEXT
  727.1                         // ARMv7-M Thumb = .+5
  727.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  727.3                         // ARMv6-M Thumb = .+4
  727.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  727                                   NEXT1
  727.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  727.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  727.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  727.4                         // ARMv6-M Thumb = .+4
  727.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  727.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  727.7                                 ENDM
  727.8                                 ENDM
  728                           
  729                           
  730                           
  731                           //:NONAME SV_INIT_VALUES: Table of FISH SYSTEM VAR Iinitial values.
  732                            SECTION .text : CONST (2)
  733                            ALIGNROM 2,0xFFFFFFFF
  734                           SV_INIT_VALUES:
  735                           // 4 words of System Variables
  736    00000000 10000000              DC32    DEFAULT_BASE            // NBASE
  737                           // EXPECT manages TIB with in (or should!)
  738                           //3BS FIX is for doing this.
  739                           // IN_SV should be the actual store pointer for EXPECT?
  740    00000004 00000000              DC32    0                       // IN_SV returns addr of integer offset
  741                                                                   // into TIB
  742                           // IN_SV should be the actual store pointer for EXPECT?
  743                           // OUT_SV
  744    00000008 00000000              DC32    0                       // OUT_SV returns addr of integer offset
  745                                                                   // of counted cahracters in the current
  746                                                                   // output string to the terminal.
  747                           
  748    0000000C 00000000              DC32    0                       // CSTATE
  749                           // 5 addresses of System Data Structures
  750    00000010 ........              DC32    PINIT                   // INITSO
  751    00000014 ........              DC32    RINIT                   // INITRO
  752    00000018 ........              DC32    TIB                     // INITTIB
  753    0000001C ........              DC32    RAMVARSPACE             // UP
  754    00000020 ........              DC32    ORIG                    // DP
  755                           // 4 addresses of System Pointers
  756    00000024 00000000              DC32    0                       // CSDP
  757    00000028 00000000              DC32    0                       // FENCE
  758                           
  759                           /* To make a new WORDCAT the current TOP of the Dictionary:
  760                           iNCLUDE NEW WC FILE IN IAR.S: FISH OEM WORDCAT LIST
  761                           The top of the dictionary is defined in these places:
  762                           In SLIBS SV_INIT_VALUES:
  763                           //        DC32    WC_FISH_PubRel_NFA // FISH in flash starts here = CURRENT
  764                           IN FLASH RAMWORDS:
  765                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here = CURRENT
  766                           In IAR FISH_ONLY:
  767                           //        LDR     n, = WC_FISH_PubRel_NFA
  768                                   LDR     n, = WC_FISH_GPIO_NFA
  769                           
  770                           */
  771    0000002C ........              DC32    WC_FISH_GPIO_NFA      // CURRENT
  772                           
  773    00000030 ........              DC32    msg_MY_OK               // 13d PROMPT
  774    00000034 00000000              DC32    0                       // 14d ERROR_HALT
  775                           //------------------------------------------------------------------------------
  776                           // 14d WORDS TO COPY
  777                           //------------------------------------------------------------------------------
  778                           //:NONAME FWARM   ( -- ) FISH SYSTEM VAR Initialization primitive.
  779                            SECTION .text : CONST (2)
  780                            ALIGNROM 2,0xFFFFFFFF
  781                           FWARM:
  782    00000000 ........              DC32    .+5
  783                            SECTION .text : CODE (2)
  784                           FWASM:
  785    00000000 0748                  LDR     t, = SV_INIT_VALUES
  786    00000002 0849                  LDR     n, = END_RAMVARSPACE_SV_START
  787    00000004 0E22                  LDR     w, = 14d
  788                           FWBEGIN:
  789    00000006 0368                  LDR     x, [t]
  790    00000008 0B60                  STR     x, [n]
  791    0000000A 001D                  ADDS    t, t, #4
  792    0000000C 091D                  ADDS    n, n, #4
  793    0000000E 521E                  SUBS    w, w, #1
  794    00000010 F9D1                  BNE     FWBEGIN
  795                           
  796                                   NEXT
  796.1                         // ARMv7-M Thumb = .+5
  796.2  00000012 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  796.3                         // ARMv6-M Thumb = .+4
  796.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  796                                   NEXT1
  796.1  00000016 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  796.2  0000001A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  796.3  0000001E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  796.4                         // ARMv6-M Thumb = .+4
  796.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  796.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  796.7                                 ENDM
  796.8                                 ENDM
  797                            LTORG  // Always outside of code, else data in words
  797.1                                  TABLE
  797.2  00000020 ........              Reference on line 785
  797.3  00000024 ........              Reference on line 786
  798                           
  799                           //:NONAME DOCOL   ( -- )  COMPILED VERSION OF COLON
  800                            SECTION .text : CODE (2)
  801                            ALIGNROM 2,0xFFFFFFFF
  802                           DOCOL:  // no cfa for DOCOL!!!!!        <<<<<<<<<<<<<<<<<<
  803                                   // i_r5         IP
  804                                   // w_r2
  805                                   PUSHi2r         // save IP to Rstack
  805.1  00000000 46F8045D              STR     i, [r, #-4]!    ; save IP to Rstack
  805.2                         //      SUBS    r, r, #4        //  push i to r, pre decrement r
  805.3                         //      STR     i, [r]
  805.4                                 ENDM
  806    00000004 1546                  MOV     i, w    // jam new IP = cfa+4
  807                                   NEXT
  807.1                         // ARMv7-M Thumb = .+5
  807.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  807.3                         // ARMv6-M Thumb = .+4
  807.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  807                                   NEXT1
  807.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  807.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  807.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  807.4                         // ARMv6-M Thumb = .+4
  807.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  807.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  807.7                                 ENDM
  807.8                                 ENDM
  808                           
  809                           //:NONAME SEMIS:        ( -- ) COMPILED VERSION OF SEMICOLON
  810                           //      Terminate a colon-definition,
  811                           //      : pushed the calling word return addr to the return stack
  812                           //      This retrieves it and returns to calling word.
  813                            SECTION .text : CONST (2)
  814                            ALIGNROM 2,0xFFFFFFFF
  815                           SEMIS:
  816    00000000 ........              DC32    .+5
  817                            SECTION .text : CODE (2)
  818                                   // i_r5         IP
  819                                   // r_r6         Return Stack Pointer
  820                                   POPr2i  // pop docol saved IP from Rstack
  820.1  00000000 56F8045B              LDR     i, [r],#4       ; pop DOCOL'd IP from Rstack
  820.2                         //      LDR i, [r]              //  pop r to i, post increment r
  820.3                         //      ADDS    r, r, #4
  820.4                                 ENDM
  821                                   NEXT
  821.1                         // ARMv7-M Thumb = .+5
  821.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  821.3                         // ARMv6-M Thumb = .+4
  821.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  821                                   NEXT1
  821.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  821.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  821.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  821.4                         // ARMv6-M Thumb = .+4
  821.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  821.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  821.7                                 ENDM
  821.8                                 ENDM
  822                           
  823                           //:NONAME DOVAR   ( -- ) COMPILED VERSION OF VAR
  824                           // VAR is a CON but DOVAR is 'duplicated' to allow search for it's CFA
  825                           // so FORGET can reclaim VAR space.
  826                            SECTION .text : CODE (2)
  827                            ALIGNROM 2,0xFFFFFFFF
  828                           DOVAR:
  829    00000000 01CA                  LDM     w!, {t_r0}
  830                                   TPUSH_r0
  830                                   PUSHt_r0        // push t to p, pre decrement p
  830.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  830.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  830.3                         //      STR     t, [p]
  830.4                                 ENDM
  830                                   NEXT
  830.1                         // ARMv7-M Thumb = .+5
  830.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  830.3                         // ARMv6-M Thumb = .+4
  830.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  830                                   NEXT1
  830.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  830.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  830.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  830.4                         // ARMv6-M Thumb = .+4
  830.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  830.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  830.7                                 ENDM
  830.8                                 ENDM
  830.9                                 ENDM
  831                           
  832                           //:NONAME DOCON   ( -- ) COMPILED VERSION OF CON
  833                            SECTION .text : CODE (2)
  834                            ALIGNROM 2,0xFFFFFFFF
  835                           DOCON:
  836    00000000 01CA                  LDM     w!, {t_r0}
  837                                   TPUSH_r0
  837                                   PUSHt_r0        // push t to p, pre decrement p
  837.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  837.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  837.3                         //      STR     t, [p]
  837.4                                 ENDM
  837                                   NEXT
  837.1                         // ARMv7-M Thumb = .+5
  837.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  837.3                         // ARMv6-M Thumb = .+4
  837.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  837                                   NEXT1
  837.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  837.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  837.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  837.4                         // ARMv6-M Thumb = .+4
  837.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  837.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  837.7                                 ENDM
  837.8                                 ENDM
  837.9                                 ENDM
  838                           
  839                           //:NONAME LIT:        ( -- n ) The primitive that pushes a number in a definition.
  840                           //      Within a colon-definition, LIT is automatically compiled before each
  841                           //      32 bit literal number encountered in input text. Later execution of
  842                           //      LIT causes the contents of the next dictionary address ( the LITERAL #)
  843                           //      to be pushed to the stack.
  844                           //      Use LITERAL
  845                            SECTION .text : CONST (2)
  846                            ALIGNROM 2,0xFFFFFFFF
  847                           LIT:
  848    00000000 ........              DC32    .+5
  849                            SECTION .text : CODE (2)
  850                                   LIT2t   // LDM i!, {t}, means
  850.1                                 // as in xeq token at ToS setup for lit
  850.2  00000000 55F8040B              LDR     t, [i], #4
  850.3                         //      LDM     i!, {t} // fetch memory p points to into {t}, inc i
  850.4                                 ENDM
  851                                           // fetch memory i points to into {t}, inc i after
  852                                   TPUSH_r0
  852                                   PUSHt_r0        // push t to p, pre decrement p
  852.1  00000004 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  852.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  852.3                         //      STR     t, [p]
  852.4                                 ENDM
  852                                   NEXT
  852.1                         // ARMv7-M Thumb = .+5
  852.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  852.3                         // ARMv6-M Thumb = .+4
  852.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  852                                   NEXT1
  852.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  852.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  852.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  852.4                         // ARMv6-M Thumb = .+4
  852.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  852.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  852.7                                 ENDM
  852.8                                 ENDM
  852.9                                 ENDM
  853                           
  854                           //:NONAME RLIT: ( -- n ) LIT primitive that can have it's value relocated.
  855                           //      SEE LIT. ALLOWS RELOCATION OF THIS type OF LIT
  856                            SECTION .text : CONST (2)
  857                            ALIGNROM 2,0xFFFFFFFF
  858                           RLIT:
  859    00000000 ........              DC32    .+5
  860                            SECTION .text : CODE (2)
  861                                   LIT2t           // LDM          i!, {t}
  861.1                                 // as in xeq token at ToS setup for lit
  861.2  00000000 55F8040B              LDR     t, [i], #4
  861.3                         //      LDM     i!, {t} // fetch memory p points to into {t}, inc i
  861.4                                 ENDM
  862                                                   // fetch memory i points to into {t}, inc i after
  863                                   TPUSH_r0
  863                                   PUSHt_r0        // push t to p, pre decrement p
  863.1  00000004 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  863.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  863.3                         //      STR     t, [p]
  863.4                                 ENDM
  863                                   NEXT
  863.1                         // ARMv7-M Thumb = .+5
  863.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  863.3                         // ARMv6-M Thumb = .+4
  863.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  863                                   NEXT1
  863.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  863.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  863.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  863.4                         // ARMv6-M Thumb = .+4
  863.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  863.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  863.7                                 ENDM
  863.8                                 ENDM
  863.9                                 ENDM
  864                           
  865                           //:NONAME GOTO:   ( cfa -- ) Redirect execution to cfa in another hi-level word.
  866                           //      CAUTION!!!!!!! A SYSTEM WORD EXPOSED FOR THE BOLD AND BRAVE!!!!!!!
  867                           //      Stack IN CURRENT WORD MUST BE CLEANED UP!
  868                           //      AND STACK MUSTE BE SET UP as expected where you GOTO.
  869                           //      YOU CANNOT VIOLATE controls structure (LOOPS, BEGINs IFs, etc).
  870                           //      Unless you come from the same point in the same control structure!
  871                            SECTION .text : CONST (2)
  872                            ALIGNROM 2,0xFFFFFFFF
  873                           GOTO:
  874    00000000 ........              DC32    .+5
  875                            SECTION .text : CODE (2)
  876                                   POP2i // set i as pointer to cfa to start execution
  876.1  00000000 57F8045B              LDR     i, [p],#4
  876.2                         //      LDR     i, [p]
  876.3                         //      ADDS    p, p, #4
  876.4                                 ENDM
  877                                   NEXT
  877.1                         // ARMv7-M Thumb = .+5
  877.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  877.3                         // ARMv6-M Thumb = .+4
  877.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  877                                   NEXT1
  877.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  877.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  877.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  877.4                         // ARMv6-M Thumb = .+4
  877.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  877.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  877.7                                 ENDM
  877.8                                 ENDM
  878                           
  879                           //:NONAME CREATE_DOES_GOTO:   ( -- )
  880                           //  PUSH ADDRESS OF CREATED WORDS PFA THEN
  881                           //  Redirect execution to cfa of the CREATE DOES> word.
  882                           //  THIS IS LIKE A DOCON IE NO DOCOL!!!!
  883                           //      CAUTION!!!!!!! A SYSTEM WORD EXPOSED FOR THE BOLD AND BRAVE!!!!!!!
  884                           //      Stack IN CURRENT WORD MUST BE CLEANED UP!
  885                           //      AND STACK MUSTE BE SET UP as expected where you GOTO.
  886                           //      YOU CANNOT VIOLATE controls structure (LOOPS, BEGINs IFs, etc).
  887                           //      Unless you come from the same point in the same control structure!
  888                           CREATE_DOES_GOTO:
  889                            SECTION .text : CODE (2)
  890                           // WILL NEED A NEW CASE IN FLASH_SAVE!
  891                           // NO DOCOL - SO FUDGE ONE
  892                           // PUSH ADDR AFTER EXEC IN INTERPRET TO r:
  893                                   PUSHi2r         // save IP to Rstack
  893.1  00000000 46F8045D              STR     i, [r, #-4]!    ; save IP to Rstack
  893.2                         //      SUBS    r, r, #4        //  push i to r, pre decrement r
  893.3                         //      STR     i, [r]
  893.4                                 ENDM
  894                           // AND THIS LOADS GOTO ADDR
  895    00000004 4568            LDR     i_r5, [t_r0, #4]      // GET GOTO ADDRESS
  896                           // THIS PUSHES PFA TO t
  897    00000006 0830            ADDS    t_r0, t_r0, #8        // COMPUTE REAL PFA
  898                             PUSHt_r0
  898.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  898.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  898.3                         //      STR     t, [p]
  898.4                                 ENDM
  899                                   NEXT
  899.1                         // ARMv7-M Thumb = .+5
  899.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  899.3                         // ARMv6-M Thumb = .+4
  899.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  899                                   NEXT1
  899.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  899.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  899.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  899.4                         // ARMv6-M Thumb = .+4
  899.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  899.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  899.7                                 ENDM
  899.8                                 ENDM
  900                           
  901                           //:NONAME DICTSPACE:  ( -- n ) Calculate and push dictionary space available
  902                            SECTION .text : CONST (2)
  903                            ALIGNROM 2,0xFFFFFFFF
  904                           DICTSPACE:
  905    00000000 ........              DC32    .+5
  906                            SECTION .text : CODE (2)
  907    00000000 0648                  LDR       t_r0, = DICTSPACE_END
  908    00000002 0749                  LDR       n_r1, = DP
  909    00000004 0968                  LDR       n, [n]
  910    00000006 401A                  SUBS  t, t, n
  911                                   TPUSH_r0
  911                                   PUSHt_r0        // push t to p, pre decrement p
  911.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  911.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  911.3                         //      STR     t, [p]
  911.4                                 ENDM
  911                                   NEXT
  911.1                         // ARMv7-M Thumb = .+5
  911.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  911.3                         // ARMv6-M Thumb = .+4
  911.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  911                                   NEXT1
  911.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  911.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  911.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  911.4                         // ARMv6-M Thumb = .+4
  911.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  911.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  911.7                                 ENDM
  911.8                                 ENDM
  911.9                                 ENDM
  912                           // LTORG
  913                           
  914                           //:NONAME VARSPACE:    ( -- n ) Calculate and push VAR space available
  914.1                                  TABLE
  914.2  0000001C ........              Reference on line 907
  914.3  00000020 ........              Reference on line 908
  915                            SECTION .text : CONST (2)
  916                            ALIGNROM 2,0xFFFFFFFF
  917                           VARSPACE:
  918    00000000 ........              DC32    .+5
  919                            SECTION .text : CODE (2)
  920    00000000 0648                  LDR       t_r0, = END_RAMVARSPACE_SV_START
  921    00000002 0749                  LDR       n_r1, = UP    // UP IS ALLOCATION POINTER FOR VARS AND VARALLOT
  922    00000004 0968                  LDR       n, [n]
  923    00000006 401A                  SUBS    t, t, n
  924                                   TPUSH_r0
  924                                   PUSHt_r0        // push t to p, pre decrement p
  924.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  924.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  924.3                         //      STR     t, [p]
  924.4                                 ENDM
  924                                   NEXT
  924.1                         // ARMv7-M Thumb = .+5
  924.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  924.3                         // ARMv6-M Thumb = .+4
  924.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  924                                   NEXT1
  924.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  924.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  924.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  924.4                         // ARMv6-M Thumb = .+4
  924.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  924.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  924.7                                 ENDM
  924.8                                 ENDM
  924.9                                 ENDM
  925    0000001A 0000           LTORG
  925.1                                  TABLE
  925.2  0000001C ........              Reference on line 920
  925.3  00000020 ........              Reference on line 921
  926                           
  927                           // Rewrite for TOSCT interop?
  928                           //:NONAME PFIND:        ( addr1 addr2 -- pfa b tf ) (ok)
  929                           //                      ( addr1 addr2 -- ff ) (bad)
  930                           //  LEN HAS TO BE smudged header byte for INTERPRET.
  931                           //      Header LEN BYTE REQUIRED by Interpret for immediate word execution
  932                           //      Searches the dictionary starting at the name field address addr2,
  933                           //  matching to the text at addr1. Returns parameter field address,
  934                           //  length byte of name field and boolean true for a good match. If no
  935                           //  match is found, only a boolean false is left.
  936                           //
  937                           //      To step thru to a word set bp at :NONAME
  938                           //      and watch r3 for match of word addr from symbol file
  939                            SECTION .text : CONST (2)
  940                            ALIGNROM 2,0xFFFFFFFF
  941                           PFIND:
  942    00000000 ........              DC32    .+5
  943                            SECTION .text : CODE (2)
  944                                   POP2x             // R3 = Dict Name NFA
  944.1  00000000 57F8043B              LDR     x, [p],#4
  944.2                         //      LDR     x, [p]
  944.3                         //      ADDS    p, p, #4
  944.4                                 ENDM
  945                                   POP2w_r2                // R2 = String Addr usually at here
  945.1  00000004 57F8042B              LDR     w, [p],#4
  945.2                         //      LDR     w, [p]
  945.3                         //      ADDS    p, p, #4
  945.4                                 ENDM
  946    00000008 9346                  MOV rb_r11, w_r2  // Save TXT String ADDR
  947                           
  948                           //      SEARCH LOOP
  949                           //      nfa length test
  950                           //  x must = Dict nfa
  951                           PFIN1:                // ADDR-->char counted strings
  952    0000000A 5A46                  MOV       w_r2, rb_r11  // restore txt str addr
  953    0000000C 1878            LDRB  t_r0, [x]     // GET nfa LENGTH
  954                           //  LEN HAS TO BE smudged header byte for DFIND -> INTERPRET.
  955                           //  ELSE DO THIS HERE TO MAKE IT ACTUAL & REMOVE SECTION BELOW
  956                           //      MOVS    y, #0x3F
  957                           //      ANDS    t, y
  958    0000000E 8446                  MOV   k_r12, t_r0   // Save search word length
  959    00000010 1178                  LDRB  n_r1, [w_r2]  // TXT WORD LEN
  960    00000012 4840                  EORS    t, t, n
  961    00000014 3F24                  MOVS    y_r4, #0x3F
  962    00000016 2040                  ANDS    t, t, y_r4
  963    00000018 1DD1                  BNE     PFIN5           // Len mismatch, GET NEXT LINK FIELD ADDR (lfa)
  964                           
  965                           //      LENGTHS MATCH - CHECK EACH CHARACTER IN NAME
  966                           //      TEST FIRST CHAR AND DETERMINE IF LAST
  967                           PFIN2:
  968    0000001A 521C                  ADDS  w_r2, w_r2, #1  // str
  969    0000001C 5B1C                  ADDS  x_r3, x_r3, #1  // nfa
  970    0000001E 1878                  LDRB  t_r0, [x_r3]    // GET nfa 1RST CHAR
  971    00000020 1178                  LDRB  n_r1, [w_r2]    // GET TXT 1RST CHAR
  972    00000022 8842                  CMP   t_r0, n_r1      // eor was working but this make 0x80 subb
  973    00000024 F9D0                  BEQ     PFIN2             // matched try next char
  974                           
  975    00000026 8024                  MOVS    y_r4, #0x80
  976    00000028 001B                  SUBS    t_r0, t_r0, y_r4                // ascii only in t and n
  977    0000002A 8842                  cmp   t_r0, n_r1
  978    0000002C 14D1                  BNE     PFIN51                // goto  WORD MISMATCH
  979                           
  980                           //      FOUND END OF NAME (BIT 8 SET) - A MATCH
  981                           //      GET to pfa of found word
  982                           PFIN21:
  983                           
  984    0000002E 5B1C                  ADDS  x_r3, x_r3, #1    // Dict addr
  985    00000030 1878                  LDRB  t_r0, [x_r3]
  986    00000032 FF28                  CMP   t_r0, #0xFF
  987    00000034 FBD0                  BEQ   PFIN21
  988                           
  989                           thispfa:
  990                           
  991    00000036 0833                  ADDS    x_r3, x, #8     // at cfa -> pfa
  992                                   PUSHx                   // PUSH pfa
  992.1  00000038 47F8043D              STR     x, [p, #-4]!
  992.2                         //      SUBS    p, p, #4        //  push x to p, pre decrement p
  992.3                         //      STR     x, [p]
  992.4                                 ENDM
  993    0000003C 0120                  MOVS    t_r0, #1        // TRUE VALUE
  994    0000003E 6246                  MOV     w_r2, k_r12     // RETURN Header Byte LENGTH
  995                                   DPUSH_r0_then_r1
  995                                   PUSHw   // push w to p, post decrement p
  995.1  00000040 47F8042D              STR     w, [p, #-4]!
  995.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
  995.3                         //      STR     w, [p]
  995.4                                 ENDM
  995                                   TPUSH_r0
  995                                   PUSHt_r0        // push t to p, pre decrement p
  995.1  00000044 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  995.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  995.3                         //      STR     t, [p]
  995.4                                 ENDM
  995                                   NEXT
  995.1                         // ARMv7-M Thumb = .+5
  995.2  00000048 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  995.3                         // ARMv6-M Thumb = .+4
  995.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  995                                   NEXT1
  995.1  0000004C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  995.2  00000050 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  995.3  00000054 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  995.4                         // ARMv6-M Thumb = .+4
  995.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  995.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  995.7                                 ENDM
  995.8                                 ENDM
  995.9                                 ENDM
  995.10                                ENDM
  996                           
  997                           //      NO NAME MATCH - TRY ANOTHER
  998                           //  Set NEXT LINK FIELD ADDR (lfa) to x
  999                           //  ( ZERO = FIRST WORD OF DICTIONARY )
 1000                           //  GET TO END OF NAME BEFORE Padding IF ANY
 1001                           //  ENTER HERE FROM LEN!= (RB->CNT)
 1002                           PFIN5:
 1003    00000056 5B1C                  ADDS  x_r3, x, #1       // inc char in name addr
 1004                           
 1005                           //  ENTER HERE FROM WORD MISMATCH
 1006                           PFIN51:
 1007    00000058 1878                  LDRB  t_r0, [x_r3]  // get Dict Word char
 1008    0000005A 8024                  MOVS    y_r4, #0x80
 1009    0000005C 2042                  TST   t, y              // is last char in word bit set
 1010    0000005E FAD0                  BEQ   PFIN5
 1011                           
 1012                           //      UNMATCHED NAME - POINTING AT LAST CHAR BEFORE Padding IF ANY
 1013                           //      GET PAST FF Padding AND GET lfa
 1014                           PFIN7:
 1015                           // Code for ALIGNED
 1016                           //      ADDS            x, x, #3
 1017    00000060 1B1D                  ADDS  x_r3, x, #4   // add 1 for entry
 1018    00000062 0848                  LDR             t_r0, =-4
 1019    00000064 0340                  ANDS  x, x, t
 1020    00000066 1B68                  LDR   x, [x]        // GET lfa to next word
 1021    00000068 002B                  CMP   x, #0         // START OF DICT ( 0 ) ?
 1022    0000006A 00D0                  BEQ             WORDNOTFOUND
 1023                           
 1024                           // NOT A BRAN TARGET - This one used for breakpoint
 1025                           PFIND_NEXT_NFA:
 1026    0000006C CDE7                  B       PFIN1   // Search next word x must = Dict nfa
 1027                           
 1028                           WORDNOTFOUND:       // PFIND: DONE ( NO MATCH FOUND )
 1029    0000006E 0020                  MOVS     t_r0, #0
 1030                                   TPUSH_r0
 1030                                   PUSHt_r0        // push t to p, pre decrement p
 1030.1  00000070 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1030.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1030.3                         //      STR     t, [p]
 1030.4                                 ENDM
 1030                                   NEXT
 1030.1                         // ARMv7-M Thumb = .+5
 1030.2  00000074 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1030.3                         // ARMv6-M Thumb = .+4
 1030.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1030                                   NEXT1
 1030.1  00000078 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1030.2  0000007C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1030.3  00000080 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1030.4                         // ARMv6-M Thumb = .+4
 1030.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1030.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1030.7                                 ENDM
 1030.8                                 ENDM
 1030.9                                 ENDM
 1031    00000082 0000           LTORG
 1031.1                                  TABLE
 1031.2  00000084 FCFFFFFF              Reference on line 1018
 1032                           
 1033                           //:NONAME BRAN: ( -- ) Branch in definitions primitive
 1034                           //  In IAR branch target MUST BE ON Next LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
 1035                           //  The run-time proceedure to unconditionally branch. An in-line offset
 1036                           //      is added to the interpretive pointer IP to branch ahead or back.
 1037                           //      BRANCH is compiled by ELSE, AGAIN, REPEAT.
 1038                            SECTION .text : CONST (2)
 1039                            ALIGNROM 2,0xFFFFFFFF
 1040                           BRAN:
 1041    00000000 ........              DC32    .+5
 1042                            SECTION .text : CODE (2)
 1043                           BRAN1:
 1044    00000000 2B68                  LDR       x_r3, [i]             // Get branck target
 1045    00000002 ED18                  ADDS    i_r5, i, x  // use as offset
 1046                                   NEXT
 1046.1                         // ARMv7-M Thumb = .+5
 1046.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1046.3                         // ARMv6-M Thumb = .+4
 1046.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1046                                   NEXT1
 1046.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1046.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1046.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1046.4                         // ARMv6-M Thumb = .+4
 1046.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1046.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1046.7                                 ENDM
 1046.8                                 ENDM
 1047                           
 1048                           //:NONAME ZBRAN:        ( f -- ) Branch if zero definition primitive.
 1049                           //  In IAR branch target MUST BE ON Next LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
 1050                           //      The run-time proceedure to conditionally branch. If f is false
 1051                           //      (zero), the following in-line parameter is added to the interpretive
 1052                           //      pointer to branch ahead or back. Compiled by IF, UNTIL, and WHILE.
 1053                            SECTION .text : CONST (2)
 1054                            ALIGNROM 2,0xFFFFFFFF
 1055                           ZBRAN:
 1056    00000000 ........              DC32    .+5
 1057                            SECTION .text : CODE (2)
 1058                                   POP2t_r0
 1058.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1058.2                         //#ifndef TOSCT
 1058.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1058.4                         //#endif
 1058.5                         //      ADDS    p, p, #4
 1058.6                                 ENDM
 1059    00000004 0028                  CMP     t, #0         // ZERO?
 1060                           #ifdef TOSCT                    // CMP CONSUMES t
 1062                           #endif
 1063    00000006 ........              beq     BRAN1         // YES, BRANCH
 1064                           
 1065    0000000A 2D1D                  ADDS    i_r5, i, #4     // NO - CONTINUE...
 1066                                   NEXT
 1066.1                         // ARMv7-M Thumb = .+5
 1066.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1066.3                         // ARMv6-M Thumb = .+4
 1066.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1066                                   NEXT1
 1066.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1066.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1066.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1066.4                         // ARMv6-M Thumb = .+4
 1066.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1066.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1066.7                                 ENDM
 1066.8                                 ENDM
 1067                           
 1068                           //:NONAME TBRAN:        ( f -- ) Branch if ANY TRUE, NOT JUST TRUE_NEG_1.
 1069                           //  In IAR branch target MUST BE ON Next LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
 1070                           //      The run-time proceedure to conditionally branch. If f is false
 1071                           //      (zero), the following in-line parameter is added to the interpretive
 1072                           //      pointer to branch ahead or back. Compiled by IF, UNTIL, and WHILE.
 1073                            SECTION .text : CONST (2)
 1074                            ALIGNROM 2,0xFFFFFFFF
 1075                           TBRAN:
 1076    00000000 ........              DC32    .+5
 1077                            SECTION .text : CODE (2)
 1078                                   POP2t_r0
 1078.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1078.2                         //#ifndef TOSCT
 1078.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1078.4                         //#endif
 1078.5                         //      ADDS    p, p, #4
 1078.6                                 ENDM
 1079    00000004 0028                  CMP     t_r0, #0      // ZERO?
 1080                           #ifdef TOSCT        // CMP CONSUMES t
 1082                           #endif
 1083    00000006 ........              bne     BRAN1         // YES, BRANCH
 1084                           
 1085    0000000A 2D1D                  ADDS    i_r5, i, #4     // NO - CONTINUE...
 1086                                   NEXT
 1086.1                         // ARMv7-M Thumb = .+5
 1086.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1086.3                         // ARMv6-M Thumb = .+4
 1086.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1086                                   NEXT1
 1086.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1086.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1086.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1086.4                         // ARMv6-M Thumb = .+4
 1086.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1086.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1086.7                                 ENDM
 1086.8                                 ENDM
 1087                            LTORG
 1088                           
 1089                           //  :NONAME XLOOP:      ( -- ) Loop primitive in a definition.
 1090                           //  The run-time proceedure compiled by LOOP which increments
 1091                           //      the loop index by one and tests for loop completion.
 1092                           //  See LOOP.
 1093                            SECTION .text : CONST (2)
 1094                            ALIGNROM 2,0xFFFFFFFF
 1095                           XLOOP:
 1096    00000000 ........              DC32    .+5
 1097                            SECTION .text : CODE (2)
 1098    00000000 0123                  MOVS  x_r3, #1
 1099                           XLOO1:
 1100                                   // Get Limit and Index from r w/o popping them
 1101    00000002 7468                  LDR y_r4, [r_r6, #4]  // Limit
 1102    00000004 3268                  LDR w_r2, [r_r6]      // Index
 1103    00000006 9442                  CMP     y, w              // If equal
 1104    00000008 04D0                  BEQ XLOO2             // done
 1105                           
 1106    0000000A D218                  adds    w, w, x   // INDEX = INDEX + INCR
 1107    0000000C 3260                  str     w, [r]          // Put it back by overwrite for I
 1108    0000000E A41A                  SUBS    y, y, w
 1109    00000010 ........              BNE     BRAN1     // End of `DO' LOOP
 1110                           XLOO2:
 1111                                   // Drop Limit and Index, increment i
 1112    00000014 0836                  ADDS    r, r, #8
 1113    00000016 2D1D                  ADDS    i, i, #4
 1114                                   NEXT
 1114.1                         // ARMv7-M Thumb = .+5
 1114.2  00000018 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1114.3                         // ARMv6-M Thumb = .+4
 1114.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1114                                   NEXT1
 1114.1  0000001C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1114.2  00000020 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1114.3  00000024 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1114.4                         // ARMv6-M Thumb = .+4
 1114.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1114.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1114.7                                 ENDM
 1114.8                                 ENDM
 1115                           
 1116                           //:NONAME XPLOOP:       ( n -- ) +LOOP primitive in definitions.
 1117                           //      The run-time proceedure compiled by +LOOP, which increments the loop
 1118                           //      index by n and tests for loop completion. See +LOOP.
 1119                            SECTION .text : CONST (2)
 1120                            ALIGNROM 2,0xFFFFFFFF
 1121                           XPLOOP:
 1122    00000000 ........              DC32    .+5
 1123                            SECTION .text : CODE (2)
 1124                                   POP2x             // GET LOOP VALUE
 1124.1  00000000 57F8043B              LDR     x, [p],#4
 1124.2                         //      LDR     x, [p]
 1124.3                         //      ADDS    p, p, #4
 1124.4                                 ENDM
 1125                           #ifdef TOSCT
 1127                           #endif
 1128    00000004 ........              b   XLOO1         // see XLOO1 for why it's put in x
 1129                           
 1130                           //:NONAME XDO:  ( Limit Index -- ) The DO primitive in definitions.
 1131                           //      ( Limit = addr+cnt Index = addr  -- ) as in ( TIB+LEN TIB -- )
 1132                           //  The run-time proceedure compiled by DO which moves the loop control
 1133                           //  parameters to the return stack. See DO.
 1134                            SECTION .text : CONST (2)
 1135                            ALIGNROM 2,0xFFFFFFFF
 1136                           XDO:
 1137    00000000 ........              DC32    .+5
 1138                            SECTION .text : CODE (2)
 1139                                   POP2t_r0          // INITIAL INDEX VALUE = ADDR
 1139.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1139.2                         //#ifndef TOSCT
 1139.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1139.4                         //#endif
 1139.5                         //      ADDS    p, p, #4
 1139.6                                 ENDM
 1140                                   POP2w_r2          // LIMIT VALUE = ADDR+CNT
 1140.1  00000004 57F8042B              LDR     w, [p],#4
 1140.2                         //      LDR     w, [p]
 1140.3                         //      ADDS    p, p, #4
 1140.4                                 ENDM
 1141                                   PUSHw2r
 1141.1  00000008 46F8042D              STR     w, [r, #-4]!
 1141.2                         //      SUBS    r, r, #4        //  push w to r, pre decrement r
 1141.3                         //      STR     w, [r]
 1141.4                                 ENDM
 1142                                   PUSHt2r           // i expects index TOP of RSTACK
 1142.1  0000000C 46F8040D              STR     t, [r, #-4]!
 1142.2                         //      SUBS    r, r, #4        //  push t to r, pre decrement r
 1142.3                         //      STR     t, [r]
 1142.4                                 ENDM
 1143                           #ifdef TOSCT
 1145                           #endif
 1146                                   NEXT
 1146.1                         // ARMv7-M Thumb = .+5
 1146.2  00000010 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1146.3                         // ARMv6-M Thumb = .+4
 1146.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1146                                   NEXT1
 1146.1  00000014 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1146.2  00000018 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1146.3  0000001C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1146.4                         // ARMv6-M Thumb = .+4
 1146.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1146.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1146.7                                 ENDM
 1146.8                                 ENDM
 1147                           
 1148                           //:NONAME CATLT7F  ( addr -- c ) Get char at addr then AND it with 7Fh
 1149                            SECTION .text : CONST (2)
 1150                            ALIGNROM 2,0xFFFFFFFF
 1151                           CATLT7F:
 1152    00000000 ........              DC32    .+5
 1153                            SECTION .text : CODE (2)
 1154                             POP2t_r0
 1154.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1154.2                         //#ifndef TOSCT
 1154.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1154.4                         //#endif
 1154.5                         //      ADDS    p, p, #4
 1154.6                                 ENDM
 1155    00000004 0078            LDRB  t_r0, [t]
 1156    00000006 7F21            LDR   n_r1, =7Fh
 1157    00000008 0840            ANDS  t, t, n
 1158                             TPUSH_r0
 1158                                   PUSHt_r0        // push t to p, pre decrement p
 1158.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1158.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1158.3                         //      STR     t, [p]
 1158.4                                 ENDM
 1158                                   NEXT
 1158.1                         // ARMv7-M Thumb = .+5
 1158.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1158.3                         // ARMv6-M Thumb = .+4
 1158.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1158                                   NEXT1
 1158.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1158.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1158.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1158.4                         // ARMv6-M Thumb = .+4
 1158.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1158.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1158.7                                 ENDM
 1158.8                                 ENDM
 1158.9                                 ENDM
 1159                           
 1160                           //:NONAME TIB_CHAR_SCAN   ( c -- f ) Scan TIB for c or until null found.
 1161                           // Scan TIB, a null terminated string at TIB+IN for 'c' or null termination.
 1162                           // Uses and adjusts IN to reflect offset to c or null in TIB.
 1163                           // Return false flag if null found first, indicating end of input in TIB,
 1164                           // ( usually from QUERY ) else return true flag, either with IN adjusted.
 1165                            SECTION .text : CONST (2)
 1166                            ALIGNROM 2,0xFFFFFFFF
 1167                           TIB_CHAR_SCAN:
 1168    00000000 ........              DC32    .+5
 1169                            SECTION .text : CODE (2)
 1170                           // t is char matched from TIB as flag to return
 1171                                   POP2n_r1                // Char were lookin for
 1171.1  00000000 57F8041B              LDR     n, [p],#4
 1171.2                         //      LDR     n, [p]
 1171.3                         //      ADDS    p, p, #4
 1171.4                                 ENDM
 1172    00000004 0B4A                  LDR     w, = TIB
 1173    00000006 9246                  MOV     ra, w           // Save for IN calculation.
 1174    00000008 0B4B                  LDR     x, = IN
 1175    0000000A 1C68                  LDR     y, [x]          // Get offset in to TIB
 1176    0000000C 1219                  ADDS    w, w, y         // Create TIB+IN
 1177                           TCS_LOOP:
 1178    0000000E 1078                  LDRB    t, [w]          // Strting at TIB+IN ( ex space after ( .
 1179    00000010 521C                  ADDS    w, w, #1        // When matched
 1180    00000012 8842                  CMP     t, n            // Character passed to test
 1181    00000014 01D0                  BEQ     TCS_FOUND
 1182                           
 1183    00000016 0028                  CMP     t, #0           // Null at end of TIB?
 1184    00000018 F9D1                  BNE     TCS_LOOP        // no keep looking
 1185                           
 1186                           TCS_FOUND:
 1187    0000001A 5446                  MOV     y, ra           // TIB
 1188    0000001C 121B                  SUBS    w, w, y         // TIB+Char offset
 1189    0000001E 1A70                  STRB    w, [x]          // Set IN
 1190                                   TPUSH_r0                // t is null or char
 1190                                   PUSHt_r0        // push t to p, pre decrement p
 1190.1  00000020 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1190.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1190.3                         //      STR     t, [p]
 1190.4                                 ENDM
 1190                                   NEXT
 1190.1                         // ARMv7-M Thumb = .+5
 1190.2  00000024 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1190.3                         // ARMv6-M Thumb = .+4
 1190.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1190                                   NEXT1
 1190.1  00000028 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1190.2  0000002C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1190.3  00000030 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1190.4                         // ARMv6-M Thumb = .+4
 1190.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1190.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1190.7                                 ENDM
 1190.8                                 ENDM
 1190.9                                 ENDM
 1191                           
 1192                           //:NONAME TOGGLE:       ( addr b -- ) Complement BYTE at addr by the bit pattern b.
 1193                           //      Byte operator for NFA count byte
 1194                           //      Complement (FLIP) the BYTE contents of addr by the bit pattern b.
 1195                           //      SEE SETBITS and CLRBITS
 1195.1                                  TABLE
 1195.2  00000034 ........              Reference on line 1172
 1195.3  00000038 ........              Reference on line 1174
 1196                            SECTION .text : CONST (2)
 1197                            ALIGNROM 2,0xFFFFFFFF
 1198                           TOGGLE:
 1199    00000000 ........              DC32    .+5
 1200                            SECTION .text : CODE (2)
 1201                                   POP2n_r1                // Bit PATTERN
 1201.1  00000000 57F8041B              LDR     n, [p],#4
 1201.2                         //      LDR     n, [p]
 1201.3                         //      ADDS    p, p, #4
 1201.4                                 ENDM
 1202                                   POP2w_r2                // ADDR
 1202.1  00000004 57F8042B              LDR     w, [p],#4
 1202.2                         //      LDR     w, [p]
 1202.3                         //      ADDS    p, p, #4
 1202.4                                 ENDM
 1203    00000008 1078                  LDRB    t_r0, [w_r2]
 1204    0000000A 4840                  EORS    t_r0, t_r0, n_r1
 1205    0000000C 1070                  STRB    t_r0, [w_r2]
 1206                                   NEXT
 1206.1                         // ARMv7-M Thumb = .+5
 1206.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1206.3                         // ARMv6-M Thumb = .+4
 1206.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1206                                   NEXT1
 1206.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1206.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1206.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1206.4                         // ARMv6-M Thumb = .+4
 1206.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1206.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1206.7                                 ENDM
 1206.8                                 ENDM
 1207                           
 1208                           #ifdef XON_XOFF
 1209                           //:NONAME IF_EOL_SEND_XOFF: Get xoff out ASAP in EXPECT!
 1210                           //      Must leave char in t!!!!!!!!!
 1211                            SECTION .text : CONST (2)
 1212                            ALIGNROM 2,0xFFFFFFFF
 1213                           IF_EOL_SEND_XOFF:
 1214    00000000 ........              DC32    .+5
 1215                            SECTION .text : CODE (2)
 1216                           #ifdef  IO2TP
 1218                           #else
 1219    00000000 0A21                  LDR     n, = 0Ah        // ^J n_r1
 1220    00000002 8842                  CMP     t, n            // set carry flag or not
 1221    00000004 05D1                  BNE     CR_CHECK
 1222                           
 1223                           SUB_CR_4_NL:
 1224                                   POP2t_r0
 1224.1  00000006 57F8040B              LDR     t, [p],#4       // Post-increment
 1224.2                         //#ifndef TOSCT
 1224.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1224.4                         //#endif
 1224.5                         //      ADDS    p, p, #4
 1224.6                                 ENDM
 1225    0000000A 0D20                  LDR     t, = 0Dh        // ^M
 1226                                   PUSHt_r0
 1226.1  0000000C 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1226.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1226.3                         //      STR     t, [p]
 1226.4                                 ENDM
 1227    00000010 02E0                  B       EOL_SEND_XOFF
 1228                           
 1229                           CR_CHECK:
 1230    00000012 0D21                  LDR     n, = 0Dh        // n_r1
 1231    00000014 8842                  CMP     t, n            // LEAVE CHAR IN T_r0!!!!
 1232    00000016 03D1                  BNE     NOT_CR
 1233                           
 1234                           EOL_SEND_XOFF:
 1235                           
 1236                           #ifndef IO2TP
 1237    00000018 ........              BL      TXRDY_SUBR
 1238    0000001C ........              BL      XOFF_SUBR
 1239                           #endif
 1240                           
 1241                           NOT_CR:
 1242                                   NEXT
 1242.1                         // ARMv7-M Thumb = .+5
 1242.2  00000020 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1242.3                         // ARMv6-M Thumb = .+4
 1242.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1242                                   NEXT1
 1242.1  00000024 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1242.2  00000028 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1242.3  0000002C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1242.4                         // ARMv6-M Thumb = .+4
 1242.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1242.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1242.7                                 ENDM
 1242.8                                 ENDM
 1243                           #endif  // not IO2TP
 1244                           #endif // XON_XOFF
 1245                           
 1246                           //:NONAME NUMBERSUFFIX:      ( addr -- addr ) Number BASE suffix eval primitive.
 1247                           //      In NUMBER temporarily change base if number has valid suffix.
 1248                           //      IF LEN =1 LEAVE IT!
 1249                           //      IF LEN =2 CHECK FOR .suffix!
 1250                           //      addr is counted number striong. The count is ignored by NUMBER
 1251                           //      If valid Base suffix replace suffix with null for NUMBER.
 1252                           //      NUMBER must save and restore base outside of this call.
 1253                            SECTION .text : CONST (2)
 1254                            ALIGNROM 2,0xFFFFFFFF
 1255                           NUMBERSUFFIX:
 1256    00000000 ........              DC32    .+5
 1257                            SECTION .text : CODE (2)
 1258                                   NDPOP2t         // macro = copy tos to t, leave it on the stack
 1258.1  00000000 3868                  LDR     t, [p]
 1258.2                                 ENDM
 1259    00000002 0178                  LDRB    n, [t]  // get string lentgth
 1260    00000004 0129                  CMP     n, #1   // Let NUMBER handle single char
 1261    00000006 0FD0                  BEQ     NSEXIT1
 1262                           
 1263                           // Not allowing . or , as first char.
 1264    00000008 0229                  CMP     n, #2   // Handle case where is not 2nd char.
 1265    0000000A 14D0                  BEQ     NSTWO
 1266                           
 1267                           NSNOTTWO:
 1268    0000000C 0144                  ADD     n, n, t // point to end of string
 1269    0000000E 0A78                  LDRB    w, [n]  // get possible suffix
 1270    00000010 622A                  CMP     w, #'b' // 62h
 1271    00000012 1AD0                  BEQ     USEBIN
 1272    00000014 252A                  CMP     w, #'%'
 1273    00000016 18D0                  BEQ     USEBIN
 1274                           
 1275    00000018 642A                  CMP     w, #'d' // 64h
 1276    0000001A 18D0                  BEQ     USEDEC
 1277    0000001C 232A                  CMP     w, #'#'
 1278    0000001E 16D0                  BEQ     USEDEC
 1279                           
 1280    00000020 682A                  CMP     w, #'h' // 68h
 1281    00000022 16D0                  BEQ     USEHEX
 1282    00000024 242A                  CMP     w, #'$'
 1283    00000026 14D0                  BEQ     USEHEX
 1284                           
 1285                           NSEXIT1:
 1286                                   NEXT
 1286.1                         // ARMv7-M Thumb = .+5
 1286.2  00000028 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1286.3                         // ARMv6-M Thumb = .+4
 1286.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1286                                   NEXT1
 1286.1  0000002C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1286.2  00000030 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1286.3  00000034 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1286.4                         // ARMv6-M Thumb = .+4
 1286.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1286.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1286.7                                 ENDM
 1286.8                                 ENDM
 1287                           
 1288                           NSTWO:  // HERE BECAUSE INPUT LEN IS 2 SO IF . IS 2nd char leave it
 1289    00000036 8278                  LDRB    w, [t, #2]      // GET 2nd CHAR (cntbyte 1rst)
 1290    00000038 2E2A                  CMP     w, #'.'         // IF IT'S A DOT
 1291    0000003A E7D1                  BNE     NSNOTTWO
 1292                                   NEXT
 1292.1                         // ARMv7-M Thumb = .+5
 1292.2  0000003C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1292.3                         // ARMv6-M Thumb = .+4
 1292.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1292                                   NEXT1
 1292.1  00000040 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1292.2  00000044 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1292.3  00000048 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1292.4                         // ARMv6-M Thumb = .+4
 1292.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1292.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1292.7                                 ENDM
 1292.8                                 ENDM
 1293                           
 1294                           USEBIN:
 1295    0000004A 0224                  LDR     y, =2
 1296    0000004C 02E0                  B       CLRSUFFIX
 1297                           USEDEC:
 1298    0000004E 0A24                  LDR     y, =10
 1299    00000050 00E0                  B       CLRSUFFIX
 1300                           USEHEX:
 1301    00000052 1024                  LDR     y, =16
 1302                           
 1303                           CLRSUFFIX:
 1304    00000054 0022                  LDR     w, =0X00        // =0x20
 1305    00000056 0A70                  STRB    w, [n]
 1306    00000058 044A                  LDR     w, =NBASE       // BASE_SV in FISH
 1307    0000005A 1460                  STR     y, [w]
 1308                                   NEXT
 1308.1                         // ARMv7-M Thumb = .+5
 1308.2  0000005C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1308.3                         // ARMv6-M Thumb = .+4
 1308.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1308                                   NEXT1
 1308.1  00000060 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1308.2  00000064 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1308.3  00000068 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1308.4                         // ARMv6-M Thumb = .+4
 1308.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1308.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1308.7                                 ENDM
 1308.8                                 ENDM
 1309    0000006A 0000           LTORG
 1309.1                                  TABLE
 1309.2  0000006C ........              Reference on line 1306
 1310                           
 1311                           //:NONAME USTAR:        (u1 u2 --  ud=<LSW MSW> ) USED INTERNALLY - NOT UNSIGNED
 1312                           //      Leave the unsigned double number product of two unsigned numbers.
 1313                            SECTION .text : CONST (2)
 1314                            ALIGNROM 2,0xFFFFFFFF
 1315                           USTAR:
 1316    00000000 ........              DC32    .+5
 1317                            SECTION .text : CODE (2)
 1318                                   POP2t_r0
 1318.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1318.2                         //#ifndef TOSCT
 1318.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1318.4                         //#endif
 1318.5                         //      ADDS    p, p, #4
 1318.6                                 ENDM
 1319                                   POP2n_r1
 1319.1  00000004 57F8041B              LDR     n, [p],#4
 1319.2                         //      LDR     n, [p]
 1319.3                         //      ADDS    p, p, #4
 1319.4                                 ENDM
 1320                           // IMPORT c_32by32to64mul       // LSW in t (r0), MSW in n (r1)
 1321                           //      BL      c_32by32to64mul
 1322                           //      MOV     w, t    // LSW
 1323                           //      MOV     t, n    // MSW
 1324                           // UMULL ilLegal register R0 is not allowed here
 1325    00000008 A0FB0120              UMULL   w_r2, t_r0, t_r0, n_r1  // rdLO rdHi rn * rs
 1326                                   DPUSH_r0_then_r1                //  --  LSW MSW )
 1326                                   PUSHw   // push w to p, post decrement p
 1326.1  0000000C 47F8042D              STR     w, [p, #-4]!
 1326.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1326.3                         //      STR     w, [p]
 1326.4                                 ENDM
 1326                                   TPUSH_r0
 1326                                   PUSHt_r0        // push t to p, pre decrement p
 1326.1  00000010 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1326.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1326.3                         //      STR     t, [p]
 1326.4                                 ENDM
 1326                                   NEXT
 1326.1                         // ARMv7-M Thumb = .+5
 1326.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1326.3                         // ARMv6-M Thumb = .+4
 1326.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1326                                   NEXT1
 1326.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1326.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1326.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1326.4                         // ARMv6-M Thumb = .+4
 1326.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1326.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1326.7                                 ENDM
 1326.8                                 ENDM
 1326.9                                 ENDM
 1326.10                                ENDM
 1327                           
 1328                           //:NONAME       USLASH: ( d n --- u32REM u32QUO ) USED INTERNALLY - NOT UNSIGNED
 1329                           //      Leave the unsigned remainder u2 and unsigned quotient u3 from the
 1330                           //      unsigned double dividend ud and unsigned divisor u1.
 1331                           //      RESULTS ARE NOT A TRADITOIONAL DOUBLE NUMBER ONE WOULD PRINT USING D.
 1332                           //      Quotient = int ( Dividend / Divisor )
 1333                           //      Remainder = Dividend - Quotient * Divisor
 1334                            SECTION .text : CONST (2)
 1335                            ALIGNROM 2,0xFFFFFFFF
 1336                           USLASH:
 1337    00000000 ........              DC32    .+5
 1338                            SECTION .text : CODE (2)
 1339                           //      U/  USLASH: ( uLSW uMSW u32 --- u32REMAINDER u32QUOTIENT )
 1340                                   POP2t_r0                // U32  divisor
 1340.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1340.2                         //#ifndef TOSCT
 1340.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1340.4                         //#endif
 1340.5                         //      ADDS    p, p, #4
 1340.6                                 ENDM
 1341                                   POP2x                   // UMSW  dividendHI
 1341.1  00000004 57F8043B              LDR     x, [p],#4
 1341.2                         //      LDR     x, [p]
 1341.3                         //      ADDS    p, p, #4
 1341.4                                 ENDM
 1342                                   POP2w_r2                // ULSW dividendLO
 1342.1  00000008 57F8042B              LDR     w, [p],#4
 1342.2                         //      LDR     w, [p]
 1342.3                         //      ADDS    p, p, #4
 1342.4                                 ENDM
 1343    0000000C 0028                  CMP     t_r0, #0           // divide by zero is divisor = 0
 1344    0000000E 12D0                  BEQ     DZERO           // J Not Below
 1345    00000010 93F0000F              TEQ     x_r3, #0           ; fIG BEHAVIOR
 1346    00000014 0FD1                  BNE     DZERO           ; TREAT DIVIDEN HI N=0 AS ERR
 1347                           
 1348                           // IMPORT c_64by32div           // LSW of quo in t (r0), rem in w (r2)
 1349                           //      BL      c_64by32div
 1350    00000016 0146                  MOV     n, t            ; SAVE DIVISOR
 1351                                   ;Quotient = int ( Dividend / Divisor ) ;UDIV only does this part
 1352                                   ;UDIV RD = DIVIDEN / DIVISOR (rEV)          t                 w          t
 1353                           // Error[438]: This instruction is not available in the selected cpu/core
 1354    00000018 B2FBF0F0              UDIV    t, w, t         ;DIV    AX,BX = QUOTIENT = INT ( dividendLO / DIVISOR )
 1355                           
 1356                                   ;Rem =  Dividend - Quotient * Divisor ;This part you need to add;
 1357                                   ;MLS RD, QUOTIENT, DIVISOR, DIVIDEND
 1358                                   ;MLS RD = ( ARG1 * ARG2 ) - ARG3
 1359                                   ;MLS    w, t, QUO  n, DIVOR  W DIVIDEND  I.E MLS RD = W - ( T * N ))
 1360                           // Error[438]: This instruction is not available in the selected cpu/core
 1361    0000001C 00FB1122              MLS     w_r2, t_r0, n_r1, w_r2
 1362                                   DPUSH_r0_then_r1                //  --  LSW MSW )
 1362                                   PUSHw   // push w to p, post decrement p
 1362.1  00000020 47F8042D              STR     w, [p, #-4]!
 1362.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1362.3                         //      STR     w, [p]
 1362.4                                 ENDM
 1362                                   TPUSH_r0
 1362                                   PUSHt_r0        // push t to p, pre decrement p
 1362.1  00000024 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1362.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1362.3                         //      STR     t, [p]
 1362.4                                 ENDM
 1362                                   NEXT
 1362.1                         // ARMv7-M Thumb = .+5
 1362.2  00000028 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1362.3                         // ARMv6-M Thumb = .+4
 1362.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1362                                   NEXT1
 1362.1  0000002C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1362.2  00000030 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1362.3  00000034 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1362.4                         // ARMv6-M Thumb = .+4
 1362.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1362.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1362.7                                 ENDM
 1362.8                                 ENDM
 1362.9                                 ENDM
 1362.10                                ENDM
 1363                           
 1364                           DZERO:
 1365    00000036 4040                  EORS    t_r0, t_r0, t_r0        // zero
 1366    00000038 401E                  SUBS    t_r0, t_r0, #1          //
 1367    0000003A 0246                  MOV     w_r2, t_r0              //
 1368                                   DPUSH_r0_then_r1                //  --  LSW MSW )
 1368                                   PUSHw   // push w to p, post decrement p
 1368.1  0000003C 47F8042D              STR     w, [p, #-4]!
 1368.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1368.3                         //      STR     w, [p]
 1368.4                                 ENDM
 1368                                   TPUSH_r0
 1368                                   PUSHt_r0        // push t to p, pre decrement p
 1368.1  00000040 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1368.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1368.3                         //      STR     t, [p]
 1368.4                                 ENDM
 1368                                   NEXT
 1368.1                         // ARMv7-M Thumb = .+5
 1368.2  00000044 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1368.3                         // ARMv6-M Thumb = .+4
 1368.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1368                                   NEXT1
 1368.1  00000048 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1368.2  0000004C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1368.3  00000050 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1368.4                         // ARMv6-M Thumb = .+4
 1368.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1368.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1368.7                                 ENDM
 1368.8                                 ENDM
 1368.9                                 ENDM
 1368.10                                ENDM
 1369                           
 1370                           //:NONAME SPSTO:        ( -- ) Initialize the stack pointer from INITSO.
 1371                            SECTION .text : CONST (2)
 1372                            ALIGNROM 2,0xFFFFFFFF
 1373                           SPSTO:
 1374    00000000 ........              DC32    .+5
 1375                            SECTION .text : CODE (2)
 1376    00000000 044A                  LDR     w, = INITSO     // SYSTEM VAR BASE ADDR, Initially set to PINIT
 1377    00000002 1768                  LDR     p, [w]          // RESET PARAMETER STACK PTR
 1378                                   NEXT
 1378.1                         // ARMv7-M Thumb = .+5
 1378.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1378.3                         // ARMv6-M Thumb = .+4
 1378.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1378                                   NEXT1
 1378.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1378.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1378.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1378.4                         // ARMv6-M Thumb = .+4
 1378.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1378.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1378.7                                 ENDM
 1378.8                                 ENDM
 1379                           // LTORG
 1380                           
 1381                           //:NONAME RPSTO:        ( -- ) Initialize the return stack pointer from INITR0.
 1381.1                                  TABLE
 1381.2  00000014 ........              Reference on line 1376
 1382                            SECTION .text : CONST (2)
 1383                            ALIGNROM 2,0xFFFFFFFF
 1384                           RPSTO:
 1385    00000000 ........              DC32    .+5
 1386                            SECTION .text : CODE (2)
 1387    00000000 044A                  LDR     w, = INITRO     // SYSTEM VAR BASE ADDR, Initially set to RINIT
 1388    00000002 1668                  LDR     r, [w]          // SET RETURN STACK PTR
 1389                                   NEXT
 1389.1                         // ARMv7-M Thumb = .+5
 1389.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1389.3                         // ARMv6-M Thumb = .+4
 1389.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1389                                   NEXT1
 1389.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1389.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1389.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1389.4                         // ARMv6-M Thumb = .+4
 1389.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1389.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1389.7                                 ENDM
 1389.8                                 ENDM
 1390    00000012 0000           LTORG
 1390.1                                  TABLE
 1390.2  00000014 ........              Reference on line 1387
 1391                           
 1392                           //:NONAME BASE_TO_R12:    ( -- ) Copy BASE to r12
 1393                            SECTION .text : CONST (2)
 1394                            ALIGNROM 2,0xFFFFFFFF
 1395                           BASE_TO_R12:
 1396    00000000 ........              DC32    .+5
 1397                            SECTION .text : CODE (2)
 1398    00000000 044A                  LDR     w, =NBASE
 1399    00000002 1168                  LDR     n, [w]
 1400    00000004 8C46                  MOV     k, n
 1401                                   NEXT
 1401.1                         // ARMv7-M Thumb = .+5
 1401.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1401.3                         // ARMv6-M Thumb = .+4
 1401.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1401                                   NEXT1
 1401.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1401.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1401.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1401.4                         // ARMv6-M Thumb = .+4
 1401.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1401.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1401.7                                 ENDM
 1401.8                                 ENDM
 1402                            LTORG
 1402.1                                  TABLE
 1402.2  00000014 ........              Reference on line 1398
 1403                           
 1404                           //:NONAME BASE_FROM_R12:    ( -- ) Set BASE from r12
 1405                            SECTION .text : CONST (2)
 1406                            ALIGNROM 2,0xFFFFFFFF
 1407                           BASE_FROM_R12:
 1408    00000000 ........              DC32    .+5
 1409                            SECTION .text : CODE (2)
 1410    00000000 044A                  LDR     w, =NBASE
 1411    00000002 6146                  MOV     n, k
 1412    00000004 1160                  STR     n, [w]
 1413                                   NEXT
 1413.1                         // ARMv7-M Thumb = .+5
 1413.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1413.3                         // ARMv6-M Thumb = .+4
 1413.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1413                                   NEXT1
 1413.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1413.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1413.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1413.4                         // ARMv6-M Thumb = .+4
 1413.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1413.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1413.7                                 ENDM
 1413.8                                 ENDM
 1414                            LTORG
 1414.1                                  TABLE
 1414.2  00000014 ........              Reference on line 1410
 1415                           
 1416                           //------------------------------------------------------------------------------
 1417                           // SECTION HEADER TO RE ALIGN ALL CODE AFTER THIS INCLUDE
 1418                            SECTION .text : CONST (2)
 1419                            ALIGNROM 2,0xFFFFFFFF
 1420                           //------------------------------------------------------------------------------
   27                           // Main Include
   28                           $FISH_STM32F4_STARTUP.s
    1                           // FISH_STM32F4_STARTUP.s
    2                           //Valid thru v1.8
    3                           //----------------------------------------------------------------------
    4                           #ifdef USE_CMAIN
    5                            PUBLIC FISH_return2c
    6                           #endif
    7                           
    8                            SECTION .text : CODE (2)
    9                            ALIGNROM 2,0xFFFFFFFF
   10                            PUBLIC STM32Fx_COLD_FISH
   11                            PUBLIC  __iar_program_start
   12                           __iar_program_start
   13                           // MAIN() entry point defined by #Defines in FISH_STM32F4_CONFIG_DEFINES.h
   14                           // means you can have c main() call FISH or not~!
   15                           // #define USE_CMAIN     // Affects cstartup_M.c STM32Fx_COLD_FISH and FISH_return2c
   16                           // :NONAME FM0_COLD ( -- ) Reset Vector entry point. Setup FISH Virtual Machine.
   17                           STM32Fx_COLD_FISH:
   18                           // Initialize DICT RAM segment
   19                           
   20    00000000 0B49                  ldr     n, = 0x11111111         // fill pattern
   21    00000002 0C48                  ldr     t, = RAM_START          // START OF RAM WHERE DICT IS ALLOCATED
   22                                                                   // IN MEMMAP segment
   23    00000004 0C4C                  ldr     y, = RAM_INIT_END       // BEFORE UNINT SECTION IN MEMMAP
   24                           _fillRAM:
   25    00000006 0160                  str     n, [t]
   26    00000008 001D                  adds    t, t, #4
   27    0000000A A042                  cmp     t, y
   28    0000000C FBD3                  blo     _fillRAM
   29                                   
   30                           #ifdef USE_CMAIN
   31                           // cmainfix
   32                           //      PUSH lr to sp for BYE
   33    0000000E 81B0                  SUB     sp, sp, #4
   34    00000010 7046                  MOV     t, lr
   35    00000012 0090                  STR     t, [sp]
   36                           #endif
   37                           
   38    00000014 094F                  LDR     p, =PINIT       // my parameters
   39    00000016 0A4E                  LDR     r, =RINIT       // p and r = FISH operating enviorment,
   40                           // r = return stack.
   41                           // ADR works here because it loads a PC releative offset!
   42                           // Not a anywhere 32 bit addr - use LDR for that!
   43                           
   44    00000018 ........              ADR     i,  FM4_WARM    // i is the interpreter pointer.
   45                                   PUSHi2r // FM4_WARM is 5-6 lines down from here Go FISH!
   45.1  0000001C 46F8045D              STR     i, [r, #-4]!    ; save IP to Rstack
   45.2                         //      SUBS    r, r, #4        //  push i to r, pre decrement r
   45.3                         //      STR     i, [r]
   45.4                                 ENDM
   46                                   NEXT
   46.1                         // ARMv7-M Thumb = .+5
   46.2  00000020 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
   46.3                         // ARMv6-M Thumb = .+4
   46.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
   46                                   NEXT1
   46.1  00000024 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
   46.2  00000028 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
   46.3  0000002C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
   46.4                         // ARMv6-M Thumb = .+4
   46.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   46.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
   46.7                                 ENDM
   46.8                                 ENDM
   47                           
   48    0000002E 0000           LTORG
   48.1                                  TABLE
   48.2  00000030 11111111              Reference on line 20
   48.3  00000034 ........              Reference on line 21
   48.4  00000038 ........              Reference on line 23
   48.5  0000003C ........              Reference on line 38
   48.6  00000040 ........              Reference on line 39
   49                           
   50                           //---------------------------------FM4_WARM-------------------------------------
   51                           // :NONAME FM4_WARM ( -- ) Start of FISH interpretation PRE-EXECUTION. then QUIT
   52                            SECTION .text : CONST (2)
   53                            ALIGNROM 2,0xFFFFFFFF
   54                           FM4_WARM:
   55                           #ifdef TESTRAM
   57                           #endif
   58    00000000 ........        DC32  FWARM       // FISH Init for WTEST code
   59    00000004 ........        DC32  SoCinit     // SYSCLK, systick, MS
   60    00000008 ........        DC32  UART3_INIT
   61                           
   62                           //  TEST CODE GOES HERE - Pre FISH Execution Environment
   63                           WTEST:
   64                           
   65                           //  COPIES CODE TO RAM - CHECK FISH CODE FOR THIS KIND OF RELOCATION!
   66                           //  RELEATIVELY LINKED PRIOR DEFNITIONS!
   67                           //  DC32    FLASH_TEST_CODE_IN_RAM
   68                           //  FLASH OPS CAN BE PERFORMED FROM FLASH WITH POTENTIAL WAIT STATES
   69                           //  DC32    FLASH_TEST_CODE_IN_FLASH      // EXECUTES IN FLASH
   70                           
   71                           // TEST CODE END
   72                           FWARM_STARTING_UP:
   73                           //  DC32    DOTS            // SHOW ANY STACK ARTIFACTS HERE
   74    0000000C ........        DC32  CR
   75    00000010 ........FB000         DC32    LIT, 0xFB, EMIT // ANSI ASCII CheckMark
                  000........  
   76    0000001C ........F7000         DC32    LIT, 0xF7, EMIT // ANSI ASCII 2 wavy's
                  000........  
   77    00000028 ........              DC32    CR
   78    0000002C ........              DC32    COLD            // WARM ABORT THEN QUIT
   79                           
   80                           #ifdef USE_CMAIN
   81    00000030 ........              DC32    FISH_return2c   // shouldnt get here, return to c main and restart
   82                           #endif
   83                           //------------------------ for meta-single-stepping ----------------------------
   84                           //:NONAME ssNEXT ( -- ) System Internal hi level breakpoint.
   85                            SECTION .text : CODE (2)
   86                            ALIGNROM 2,0xFFFFFFFF
   87                           ssNEXT1:
   88    00000000 08CA                  LDM     w!, {x}   // contents of cfa, (pfa), -> x, bump w to cfa+4
   89    00000002 9F46                  MOV     pc, x // w preserves cfa+4 (pfa) for DOCOL's benefit
   90                           
   91                           //---------------------------- SYSTICK ISR -------------------------------------
   92                           // STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h !
   93                           // Restore lr to pc, save all working registers!
   94                           
   95                            PUBLIC FMx_SYSTICK_ISR
   96                            SECTION .text : CODE (2)
   97                            ALIGNROM 2,0xFFFFFFFF
   98                           FMx_SYSTICK_ISR:
   99                           // Start of the working asm isr-------------------------------------------------
  100                           // save what you use
  101    00000000 03B5            PUSH  { t, n, lr}
  102    00000002 0249            LDR   n, = STICKER
  103    00000004 0868            LDR   t, [n]
  104    00000006 401C            ADDS  t, t, #1
  105    00000008 0860            STR   t, [n]
  106                           // restore what was being used
  107    0000000A 03BD            POP   { t, n, pc } // exec lr -> pc
  108                           // End of the working asm isr---------------------------------------------------
  109                            LTORG
  109.1                                  TABLE
  109.2  0000000C ........              Reference on line 102
  110                            
  111                           // LABEL FOR HI-LEVEL WORD ISR CREATE WORD!
  112                            SECTION .text : CONST (2)
  113                            ALIGNROM 2,0xFFFFFFFF
  114                           ISR_SEMIS:
  115    00000000 ........              DC32    .+5 // Test of re-useable 
  116                            SECTION .text : CODE (2)
  117                                   POPr2i  // SEMIS to balance DOCOL!!!
  117.1  00000000 56F8045B              LDR     i, [r],#4       ; pop DOCOL'd IP from Rstack
  117.2                         //      LDR i, [r]              //  pop r to i, post increment r
  117.3                         //      ADDS    r, r, #4
  117.4                                 ENDM
  118    00000004 BDE83F9C        POP { r0-r5, r10-r12, pc }
  119                           
  120                           #if 0
  150                           #endif
  151                           
  152                           /*
  153                           //-------------------------- ISR's and inline ASM ------------------------------
  154                           //:NONAME ISR_FISH Hi level call of FISH word from ISA
  155                           //      Save all regs and index a table of CFA's = execute if non-zero
  156                           
  157                           //:NONAME ILA Inline Assembly code execution
  158                            SECTION .text : CONST (2)
  159                            ALIGNROM 2,0xFFFFFFFF
  160                           ILA:
  161                                   DC32    DOCOL
  162                               DC32  NOOP
  163                           //      DC32    ASM_START       // HW ISSUE
  164                           
  165                           //  DC32  ASM_END
  166                                   DC32    SEMIS
  167                           */
   29                           
    5                           //------------------------------------------------------------------------------
    6                           
    7                           // 2DO: Add VIO_UARTX, VIO_KEY, VIO_?KEY and VIO_EMIT
    8                           // (EMIT), (KEY?), and (KEY).
    9                           
   10                           // v1.8 4th tos/nos caching, EXPECT_FILE, and new wordcats
   11                           
   12                           // v1.7.2 Fixed backspace issue
   13                           
   14                           // v1.7.1: EHON/OFF PON/OFF
   15                           
   16                           // Fix NUMBER by merge with NXP which works correctly!
   17                           // 2DO: Restore SYSTICK ISR to ASM version
   18                           // 2DO: Signon updated. (FOR TEST - FIX B4 SHIP)
   19                           // 2DO: Updated .hex .out and sym.bat
   20                           
   21                           // #define EOL_DLE // DLE 0x10/16d in QUIT>CR after last word interpreted.
   22                           // #define EOL_NAK // NAK 0x15/21d in error messages for STDLED editor highlight
   23                           // The EOL_NAK makes SPACE NAK end of string in FISH_RM_MSGS.h
   24                           
   25                           // Split out files to FISH_RM_COMMON and FISH_RM_COMMON_CODE_CORTEX_M
   26                           
   27                           // ADDED EHON and EHOFF to FISH RM
   28                           // Changes iar.s COLD, ERROR and ABORT
   29                           // Changes FISH_STM32F4_SLIB.s SV_INIT_VALUES: & FWARM:
   30                           // Adds 1 word to FISH_STM32F4_MEMMAP.s - ERROR_HALT: SV
   31                           
   32                           // ADDED P(PROMPT), PON(PROMPTON) and POFF(PROMPTOFF) to FISH RM
   33                           // Changes FISH_STM32F4_SLIB.s SV_INIT_VALUES: & FWARM & QUIT
   34                           // Adds 1 word to FISH_STM32F4_MEMMAP.s - PROMPT: SV
   35                           
   36                           // Added #define TRUE_EQU_NEG_ONE
   37                           // Changed all user visible true flags to -1
   38                           
   39                           // Added SXTB Rd, Rm  and SXTH Rd, Rm
   40                           
   41                           // Number Stuff Wordcat reorganized (search NOEXEC or WC_NUMBERS_NFA)
   42                           // EXPECT does counted null strings:
   43                           // NUMBER to look for null terminatiion instead of BLANK.
   44                           // WORD changed to expect null string and elimated BLANKS fill of HERE.
   45                           //      SPEEDS UP TOKENIZATION OF TIB INPUT!
   46                           // ALL IN AND IN_SV INIT SET TO 1 in QUERY SV_INIT_VALUES CLRTIB
   47                           // NUMBERSUFFIX changed to replace suffix with null
   48                           // PAREN ( changed to use TIB+1
   49                           // DPL restored to dictionairy.
   50                           
   51                           //------------------------------------------------------------------------------
   52                            SECTION .text : CONST (2)
   53                           msg_FISH:
   54                           // DC8 "?" IS A NULL TERMINATED STRING
   55                           // DC8 '?' IS NOT
   56    00000000 4649534820            DC8 'FISH '
   57    00000005 524D205634746   DC8 'RM V4th OEM ~ '
                  8204F454D207E
                  20           
   58    00000013 41524D20              DC8 'ARM '
   59                           #ifdef FISH_Debug_WORDSET
   61                           #endif
   62                           #ifdef FISH_Debug_WORDSET
   65                           #endif
   66                           #if VTOR_PATCH & STM32F205RC
   68                           #endif
   69                           #ifdef  STM32F4_XRC08_168MHZ
   70    00000017 53544D3332463   DC8 'STM32F407VG DISCO @168Mhz '
                  4303756472044
                  4953434F20403
                  136384D687A20
   71                           #endif
   72                           #ifdef STM32F205RC_XRC10_118MHZ
   74                           #endif
   75                           #ifdef FISH_GPIO_WORDCAT
   77                           #endif
   78    00000031 2843293230313   DC8 '(C)2014-2018 A-TEAM FORTH : '
                  42D3230313820
                  412D5445414D2
                  0464F52544820
                  3A20         
   79    0000004D 4465632032342   DC8 __DATE__        // Null string
                  03230313800  
   80                           msg_FISH_TIMESTAMP:
   81    00000059 20617420        DC8 ' at '
   82    0000005D 31363A34393A3   DC8 __TIME__        // Null string
                  13500        
   83                           #ifdef EOL_NAK
   84                           msg_SIGNON_DLE:
   85    00000066 1500            DC8 0x15, 0
   86                           #endif
   87                           msg_MY_OK:
   88    00000068 206F6B2C20676   DC8 " ok, go fish in BASE "
                  F206669736820
                  696E204241534
                  52000        
   89                           //---START OF DICTIONARY = Last word in search--------------------
   90                           //
   91                           //      NOOP NOOP:      ( -- )
   92                            SECTION .text : CONST (2)
   93                           NOOP_NFA:
   94    00000000 84                    DC8     0x84
   95    00000001 4E4F4F                DC8     'NOO'
   96    00000004 D0                    DC8     'P'+0x80
   97    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
   98    00000008 00000000              DC32    0       // 0 START OF DICTIONARY = Last word in search
   99                           NOOP:
  100    0000000C ........              DC32    .+5
  101                            SECTION .text : CODE (2)
  102                                   NEXT
  102.1                         // ARMv7-M Thumb = .+5
  102.2  00000000 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  102.3                         // ARMv6-M Thumb = .+4
  102.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  102                                   NEXT1
  102.1  00000004 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  102.2  00000008 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  102.3  0000000C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  102.4                         // ARMv6-M Thumb = .+4
  102.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  102.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  102.7                                 ENDM
  102.8                                 ENDM
  103                           
  104                           //      EXECUTE EXEC:   ( cfa -- ) RENAMED: EXECUTE to EXEC
  105                           //      Execute a single word whose cfa is on the stack
  106                           
  107                            SECTION .text : CONST (2)
  108                           EXEC_NFA:
  109    00000000 87                    DC8     0x87
  110    00000001 455845435554          DC8     'EXECUT'
  111    00000007 C5                    DC8     'E'+0x80
  112                            ALIGNROM 2,0xFFFFFFFF
  113    00000008 ........              DC32    NOOP_NFA
  114                           EXEC:
  115    0000000C ........              DC32    .+5
  116                            SECTION .text : CODE (2)
  117                           #ifndef IO2TP
  118                           #ifdef XON_XOFF
  119    00000000 ........        BL  TXRDY_SUBR
  120    00000004 ........        BL  XOFF_SUBR
  121                           #endif
  122                           #endif
  123                           EXEC_ACTION:
  124                                   POPp2w // as in xeq token at ToS setup for exec LDM     p!, {w}
  124.1                                 // as in xeq token on ToS setup for exec
  124.2  00000008 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  124.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  124.4                                 ENDM
  125                                   NEXT1
  125.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  125.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  125.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  125.4                         // ARMv6-M Thumb = .+4
  125.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  125.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  125.7                                 ENDM
  126                           
  127                           #ifndef IO2TP
  128                           // TXRDY_SUBR:
  129                            SECTION .text : CODE (2)
  130                           TXRDY_SUBR:
  131    00000000 7246            MOV w_r2, lr          // Allow for interrupts to use LR
  132    00000002 024C            LDR y_r4, = USART3_SR // Line Status Register
  133                           txRDY?:
  134    00000004 2168            LDR n_r1, [y_r4]                // Get Line Status
  135                           
  136                           // THIS IS TXE TEST AND FAILS IN TEXT DOWNLOAD
  137                           //  LSRS  n, n, #7      // 80h Bit 7 TXE: Transmit data register empty
  138                           // THIS IS ___ AND WORKS IN TEXT DOWNLOAD
  139    00000006 090A            LSRS  n_r1, n_r1, #8  // 100h Bit 8 ORIG
  140    00000008 FCD3            BCC txRDY?          // Ready
  141    0000000A 1047            BX  w_r2              // lr  - SUBR RETURN
  142                           
  143                           // XOFF_SUBR:
  144                           #ifdef XON_XOFF
  144.1                                  TABLE
  144.2  0000000C 00480040              Reference on line 132
  145                            SECTION .text : CODE (2)
  146                           XOFF_SUBR:
  147    00000000 7246                  MOV       w_r2, lr           // Allow for interrupts to use LR
  148    00000002 0249                  LDR       n_r1,= USART3_DR
  149    00000004 1324                  LDR       y_r4,  = XOFF_CHAR
  150    00000006 0C70                  STRB    y_r4, [n_r1]
  151    00000008 1047            BX    w_r2               // lr  - SUBR RETURN
  152                           #endif // XON_XOFF
  153                           
  154                           // XON_SUBR:
  155                           #ifdef XON_XOFF
  155.1                                  TABLE
  155.2  0000000C 04480040              Reference on line 148
  156                            SECTION .text : CODE (2)
  157                           XON_SUBR:
  158    00000000 7246            MOV   w_r2, lr           // Allow for interrupts to use LR
  159    00000002 0249                  LDR       n_r1,= USART3_DR
  160    00000004 1124                  LDR       y_r4, = XON_CHAR   // preserve TOS 11 24 01 49
  161    00000006 0C70                  STRB    y_r4, [n_r1]
  162    00000008 1047            BX    w_r2               // SUBR RETURN
  163                           #endif // XON_XOFF
  164                           #endif // IO2TP
  165    0000000A 0000           LTORG
  165.1                                  TABLE
  165.2  0000000C 04480040              Reference on line 159
  166                           
  167                           //      BL BLANK:       ( -- n )
  168                           //      Push ascii space character as n to TOS.
  169                           
  170                            SECTION .text : CONST (2)
  171                           BLANK_NFA:
  172    00000000 82                    DC8     0x82
  173    00000001 42                    DC8     'B'
  174    00000002 CC                    DC8     'L'+0x80
  175    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  176    00000004 ........              DC32    EXEC_NFA
  177                           BLANK:
  178    00000008 ........20000         DC32    DOCON, 0x20
                  000          
  179                           
  180                           
  181                           //========================= START SYSTEM VARIABLES ===========================//
  182                           // _SV IS cfa label of WORD's that return their address.
  183                           // MODIFIED ALL to be label based vs. offset based.
  184                           
  185                           //      UP UP_SV:       ( -- addr of UP ) Value stored here is ALIGNED
  186                           //      A system variable, the RAM VAR pointer, which contains
  187                           //      the address of the next free memory above in the USERRAMSPACE.
  188                           //      The value may be read by .UV and altered by VAR.
  189                           
  190                            SECTION .text : CONST (2)
  191                           UP_NFA:
  192    00000000 82                    DC8     0x82
  193    00000001 55                    DC8     'U'
  194    00000002 D0                    DC8     'P'+0x80
  195    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  196    00000004 ........              DC32    BLANK_NFA
  197                           UP_SV:
  198    00000008 .............   DC32  DOCON, UP
                  ...          
  199                           
  200                           //      FENCE FENCE_SV: ( -- addr of FENCE )
  201                           //      A system variable containing an address below which FORGET ting is
  202                           //      trapped. To forget below this point the system must alter the contents
  203                           //      of FENCE.
  204                           
  205                            SECTION .text : CONST (2)
  206                           FENCE_NFA:
  207    00000000 85                    DC8     0x85
  208    00000001 46454E43              DC8     'FENC'
  209    00000005 C5                    DC8     'E'+0x80
  210    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  211    00000008 ........              DC32    UP_NFA
  212                           FENCE_SV:
  213    0000000C .............   DC32  DOCON, FENCE
                  ...          
  214                           
  215                           //      DP DP_SV:       ( -- addr of DP ) Value stored here is ALIGNED
  216                           //      A system variable, the dictionary pointer, which contains the address
  217                           //      of the next free memory above the dictionary. The value may be read
  218                           //      by HERE and altered by COMMA (ALIGNED) , ALLOT and CALLOT (UNALIGNED) .
  219                           
  220                            SECTION .text : CONST (2)
  221                           DP_NFA:
  222    00000000 82                    DC8     0x82
  223    00000001 44                    DC8     'D'
  224    00000002 D0                    DC8     'P'+0x80
  225    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  226    00000004 ........              DC32    FENCE_NFA
  227                           DP_SV:
  228    00000008 .............   DC32  DOCON, DP
                  ...          
  229                           
  230                           //      BASE BASE_SV:   ( -- addr of NBASE )
  231                           //      A system variable containing the current number base used for input
  232                           //      and output conversion.
  233                           
  234                            SECTION .text : CONST (2)
  235                           BASE_NFA:
  236    00000000 84                    DC8     0x84
  237    00000001 424153                DC8     'BAS'
  238    00000004 C5                    DC8     'E'+0x80
  239    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  240    00000008 ........              DC32    DP_NFA
  241                           BASE_SV:
  242    0000000C .............   DC32  DOCON, NBASE
                  ...          
  243                           
  244                           //      CURRENT CURRENT_SV:     ( -- addr of CURRENT )
  245                           //      CURRENT searched everytime. CONTEXT is not used
  246                           //      Used by Create, Definitions, etc and by Latest
  247                           //      to leave the nfa of the topmost word in the CURRENT
  248                           //      vocabulary.  See LATEST NOTE:(FIG) CURR @ @ this CURR @
  249                           
  250                            SECTION .text : CONST (2)
  251                           CURRENT_NFA:
  252    00000000 87                    DC8     0x87
  253    00000001 43555252454E          DC8     'CURREN'
  254    00000007 D4                    DC8     'T'+0x80
  255                            ALIGNROM 2,0xFFFFFFFF
  256    00000008 ........              DC32    BASE_NFA
  257                           CURRENT_SV:
  258    0000000C .............   DC32  DOCON, CURRENT  // LATEST = CURRENT_SV -> MOST RECENT DEF NFA
                  ...          
  259                           
  260                           
  261                           //      STATE STATE_SV: ( -- addr of CSTATE )
  262                           //      A system variable containing the compilation state. A non-zero value
  263                           //      indicates compilation. The value itself may be implementation
  264                           //      dependent. 0xC0 must be used for INTERPRET to execute IMMEDIATE words.
  265                           
  266                            SECTION .text : CONST (2)
  267                           STATE_NFA:
  268    00000000 85                    DC8     0x85
  269    00000001 53544154              DC8     'STAT'
  270    00000005 C5                    DC8     'E'+0x80
  271    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  272    00000008 ........              DC32    CURRENT_NFA
  273                           STATE_SV:
  274    0000000C .............   DC32  DOCON, CSTATE       //Compile STATE
                  ...          
  275                           
  276                           
  277                           //      OUT OUT_SV:     ( -- addr of OUT )
  278                           //      A system variable that contains a value incremented by EMIT. The system
  279                           //      may alter and examine OUT to control display formating.
  280                           
  281                            SECTION .text : CONST (2)
  282                           OUT_NFA:
  283    00000000 83                    DC8     0x83
  284    00000001 4F55                  DC8     'OU'
  285    00000003 D4                    DC8     'T'+0x80
  286                            ALIGNROM 2,0xFFFFFFFF
  287    00000004 ........              DC32    STATE_NFA
  288                           OUT_SV:
  289    00000008 .............   DC32  DOCON, OUT
                  ...          
  290                           
  291                           
  292                           //      IN IN_SV:       ( -- addr of IN )
  293                           //      A system variable containing the byte offset within (TIB),
  294                           //      from which the tokens are parsed by WORD and moved to HERE,
  295                           //      as a counted null terminated string (created by EXPECT).
  296                           //      Initialized to 1 to skip count byte produced by EXPECT.
  297                           
  298                            SECTION .text : CONST (2)
  299                           IN_NFA:
  300    00000000 82                    DC8     0x82
  301    00000001 49                    DC8     'I'
  302    00000002 CE                    DC8     'N'+0x80
  303    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  304    00000004 ........              DC32    OUT_NFA
  305                           IN_SV:
  306    00000008 .............   DC32  DOCON, IN
                  ...          
  307                           
  308                           
  309                           //      PAD PAD_SV:     ( -- addr of PAD )
  310                           //      Leave the address of the text output buffer PAD on the stack.
  311                           //      Typically at least 82 bytes long.
  312                           
  313                            SECTION .text : CONST (2)
  314                           PAD_NFA:
  315    00000000 83                    DC8     0x83
  316    00000001 5041                  DC8     'PA'
  317    00000003 C4                    DC8     'D'+0x80
  318                            ALIGNROM 2,0xFFFFFFFF
  319    00000004 ........              DC32    IN_NFA
  320                           PAD_SV:
  321    00000008 .............   DC32  DOCON, PAD
                  ...          
  322                           
  323                           
  324                           //      TIB TIB_SV:     ( -- addr of INITTIB )
  325                           //      Leave the address of the text input buffer TIB on the stack.
  326                           //      Typically at least 82 bytes long.
  327                           
  328                            SECTION .text : CONST (2)
  329                           TIB_NFA:
  330    00000000 83                    DC8     0x83
  331    00000001 5449                  DC8     'TI'
  332    00000003 C2                    DC8     'B'+0x80
  333                            ALIGNROM 2,0xFFFFFFFF
  334    00000004 ........              DC32    PAD_NFA
  335                           TIB_SV:
  336    00000008 .............   DC32  DOCON, TIB
                  ...          
  337                           
  338                           
  339                           //======================== END SYSTEM VARIABLES ==============================//
  340                           
  341                           
  342                           //      HERE HERE:      ( -- addr ) Value stored here is ALIGNED
  343                           //      Leave the address of the next available dictionary location.
  344                           
  345                            SECTION .text : CONST (2)
  346                           HERE_NFA:
  347    00000000 84                    DC8     0x84
  348    00000001 484552                DC8     'HER'
  349    00000004 C5                    DC8     'E'+0x80
  350    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  351    00000008 ........              DC32    TIB_NFA
  352                           HERE:
  353    0000000C ........              DC32    DOCOL
  354    00000010 ........              DC32    DP_SV
  355    00000014 ........              DC32    AT
  356    00000018 ........              DC32    SEMIS
  357                           
  358                           
  359                           //      ALLOT ALLOT:    ( sn -- ) Warning: UNALIGNED:
  360                           //      IF DICTIONAIRY FULL PRINT error MESSAGE AND abort.
  361                           //      Add the signed number to the dictionary pointer DP. May be used to
  362                           //      reserve dictionary space or re-origin memory.
  363                           //      CAUTION!
  364                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY WORDS THAT CAN ALLOT UNEVEN AMOUNTS
  365                           //      NOTE: USE ALIGN32_DP_FF_PAD after ALLOT or C, (CCOMMA) .
  366                           
  367                            SECTION .text : CONST (2)
  368                           ALLOT_NFA:
  369    00000000 85                    DC8     0x85
  370    00000001 414C4C4F              DC8     'ALLO'
  371    00000005 D4                    DC8     'T'+0x80
  372    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  373    00000008 ........              DC32    HERE_NFA
  374                           ALLOT:
  375    0000000C ........              DC32    DOCOL
  376    00000010 ........              DC32    DICTSPACE       // \ -- n
  377    00000014 .............   DC32  OVER, SUBB
                  ...          
  378    0000001C ........              DC32    ZLESS
  379    00000020 ........              DC32    ZBRAN
  380    00000024 08000000              DC32    ALLOTOK-.
  381                           
  382    00000028 ........              DC32    DICTFULL_ABORT
  383                           
  384                           ALLOTOK:
  385    0000002C ........              DC32    DP_SV
  386    00000030 ........              DC32    PSTORE
  387    00000034 ........              DC32    SEMIS
  388                           
  389                           
  390                           //      ALIGNED ALIGNED:        ( addr -- a-addr ) DPANS94
  391                           
  392                            SECTION .text : CONST (2)
  393                           ALIGNED_NFA:
  394    00000000 87                    DC8     0x87
  395    00000001 414C49474E45          DC8     'ALIGNE'
  396    00000007 C4                    DC8     'D'+0x80
  397                            ALIGNROM 2,0xFFFFFFFF
  398    00000008 ........              DC32    ALLOT_NFA
  399                           ALIGNED:
  400    0000000C ........              DC32    .+5
  401                            SECTION .text : CODE (2)
  402                                   POP2t_r0
  402.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  402.2                         //#ifndef TOSCT
  402.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  402.4                         //#endif
  402.5                         //      ADDS    p, p, #4
  402.6                                 ENDM
  403    00000004 C01C                  ADDS  t_r0, t_r0, #3
  404    00000006 0549                  LDR   n_r1, =-4
  405    00000008 0840                  ANDS    t_r0, t_r0, n_r1
  406                                   TPUSH_r0
  406                                   PUSHt_r0        // push t to p, pre decrement p
  406.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  406.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  406.3                         //      STR     t, [p]
  406.4                                 ENDM
  406                                   NEXT
  406.1                         // ARMv7-M Thumb = .+5
  406.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  406.3                         // ARMv6-M Thumb = .+4
  406.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  406                                   NEXT1
  406.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  406.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  406.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  406.4                         // ARMv6-M Thumb = .+4
  406.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  406.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  406.7                                 ENDM
  406.8                                 ENDM
  406.9                                 ENDM
  407                            LTORG
  407.1                                  TABLE
  407.2  0000001C FCFFFFFF              Reference on line 404
  408                           
  409                           
  410                           //      ALIGN32_DP_FF_PAD ALIGN:        ( -- ) DPANS94
  411                           //      Align DP_SV primitive. Pads current DP with 0xFF until aligned.
  412                           //      USED IN , (COMMA:) .  Reflected by HERE .
  413                           //      CAUTION! USE AFTER ALLOT or C, (CCOMMA:) .
  414                           //      See , (COMMA:) which is ALIGNED.
  415                           
  416                            SECTION .text : CONST (2)
  417                           ALIGN_NFA:
  418    00000000 85                    DC8     0x85
  419    00000001 414C4947              DC8     'ALIG'
  420    00000005 CE                    DC8     'N'+0x80
  421    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  422    00000008 ........              DC32    ALIGNED_NFA
  423                           ALIGN:
  424                           ALIGN32_DP_FF_PAD:
  425    0000000C ........              DC32    DOCOL
  426    00000010 ........              DC32    HERE
  427                                   // COULD ADD CODE TO SEE IF ALIGNED ALREADY
  428    00000014 .............         DC32    THREE, PLUS             // 3PLUS
                  ...          
  429    0000001C .............         DC32    DUP, TOR
                  ...          
  430    00000024 ........              DC32    HERE
  431    00000028 ........              DC32    XDO
  432                           ALIGN_PAD_DO:
  433    0000002C ........FF000         DC32    LIT, 0xFF, I, CSTORE
                  000..........
                  ......       
  434    0000003C ........              DC32    XLOOP
  435    00000040 ECFFFFFF              DC32    ALIGN_PAD_DO-.
  436                           
  437    00000044 ........              DC32    RFROM
  438    00000048 ........FCFFF         DC32    LIT, 0xFFFFFFFC // -4
                  FFF          
  439    00000050 ........              DC32    ANDD
  440    00000054 .............         DC32    DP_SV, STORE
                  ...          
  441    0000005C ........              DC32    SEMIS
  442                           
  443                           
  444                           //      , COMMA:        ( n -- ) ALIGNED
  445                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
  446                           //      Write n into next ALIGNED dictionary memory cell, DP reflected by HERE
  447                           
  448                            SECTION .text : CONST (2)
  449                           COMMA_NFA:
  450    00000000 81                    DC8     0x81
  451    00000001 AC                    DC8     ','+0x80
  452    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
  453    00000004 ........              DC32    ALIGN_NFA
  454                           COMMA:
  455    00000008 ........              DC32    DOCOL
  456    0000000C ........              DC32    DICTSPACE       // \ -- n
  457    00000010 ........              DC32    ZLESS
  458    00000014 ........              DC32    ZBRAN
  459    00000018 08000000              DC32    COMMA_OK-.
  460                           
  461    0000001C ........              DC32    DICTFULL_ABORT
  462                           
  463                           COMMA_OK:
  464    00000020 ........              DC32    COMMA_PRIM
  465    00000024 ........              DC32    SEMIS
  466                           
  467                           
  468                           //      C, CCOMMA:      ( n -- ) Warning: UNALIGNED:
  469                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
  470                           //      Store LS 8 bits of n into the next available dictionary byte, advancing
  471                           //      the dictionary pointer.
  472                           //      CAUTION!
  473                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY WORDS THAT CAN ALLOT UNEVEN AMOUNTS
  474                           //      NOTE: USE ALIGN32_DP_FF_PAD after ALLOT or C, (CCOMMA) .
  475                           //      See , (COMMA:) which is ALIGNED.
  476                           
  477                            SECTION .text : CONST (2)
  478                           CCOMMA_NFA:
  479    00000000 82                    DC8     0x82
  480    00000001 43                    DC8     'C'
  481    00000002 AC                    DC8     ','+0x80
  482    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  483    00000004 ........              DC32    COMMA_NFA
  484                           CCOMMA:
  485    00000008 ........              DC32    DOCOL
  486    0000000C ........              DC32    DICTSPACE       // \ -- n
  487    00000010 ........              DC32    ZLESS
  488    00000014 ........              DC32    ZBRAN
  489    00000018 08000000              DC32    CCOMMA_OK-.
  490                           
  491    0000001C ........              DC32    DICTFULL_ABORT
  492                           
  493                           CCOMMA_OK:
  494    00000020 ........              DC32    HERE
  495    00000024 ........              DC32    CSTORE
  496    00000028 ........              DC32    ONE
  497    0000002C ........              DC32    ALLOT_PRIM
  498    00000030 ........              DC32    SEMIS
  499                           
  500                           
  501                           //      VARALLOT VARALLOT:      ( n -- addr ) Value stored here is ALIGNED
  502                           //      IF USERVAR SPACE FULL PRINT Error MESSAGE AND Abort.
  503                           //      Add n * 32 bits to the RAMVARSPACE pointer UP.
  504                           //      Used to allocate space in Ram for VAR's and other system data structures
  505                           
  506                            SECTION .text : CONST (2)
  507                           VARALLOT_NFA:
  508    00000000 88                    DC8     0x88
  509    00000001 564152414C4C4         DC8     'VARALLO'
                  F            
  510    00000008 D4                    DC8     'T'+0x80
  511    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  512    0000000C ........              DC32    CCOMMA_NFA
  513                           VARALLOT:
  514    00000010 ........              DC32    DOCOL
  515    00000014 ........              DC32    VARSPACE                // \ -- n
  516    00000018 .............         DC32    FOUR, SLASH, OVER, SUBB
                  .............
                  ......       
  517    00000028 ........              DC32    ZLESS
  518    0000002C ........              DC32    ZBRAN
  519    00000030 18000000              DC32    VALLOT_OK-.
  520                           
  521    00000034 .............         DC32    LIT, msg_uvfull
                  ...          
  522    0000003C .............         DC32    NULLSTRLEN, TYPE
                  ...          
  523                           #ifdef IO2TP
  527                           #endif
  528    00000044 ........              DC32    ABORT
  529                           
  530                           VALLOT_OK:
  531    00000048 .............         DC32  UP_SV, AT       // Address of this allotment
                  ...          
  532    00000050 ........              DC32  SWAP            // n
  533    00000054 .............         DC32  FOUR, STAR      // n = 4 bytes
                  ...          
  534    0000005C ........              DC32  UP_SV
  535    00000060 ........              DC32  PSTORE          // Address of next var available
  536    00000064 ........              DC32  SEMIS
  537                           
  538                           
  539                           //      LATEST LATEST: ( -- nfa )
  540                           //      Initially ADDR OF LAST WORD IN THE DICTIONARY
  541                           //      Leave the nfa of the topmost word in the dictionary.
  542                           
  543                            SECTION .text : CONST (2)
  544                           LATEST_NFA:
  545    00000000 86                    DC8     0x86
  546    00000001 4C41544553            DC8     'LATES'
  547    00000006 D4                    DC8     'T'+0x80
  548    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  549    00000008 ........              DC32    VARALLOT_NFA
  550                           LATEST:
  551    0000000C ........              DC32    DOCOL
  552    00000010 ........              DC32    CURRENT_SV      // LATEST = CURRENT_SV
  553    00000014 ........              DC32    AT
  554    00000018 ........              DC32    SEMIS
  555                           
  556                           
  557                           //      LFA LFA:        ( pfa -- lfa )
  558                           //      Convert the parameter field address of a dictionary definition to
  559                           //      its link field address.
  560                           
  561                            SECTION .text : CONST (2)
  562                           LFA_NFA:
  563    00000000 83                    DC8     0x83
  564    00000001 4C46                  DC8     'LF'
  565    00000003 C1                    DC8     'A'+0x80
  566                            ALIGNROM 2,0xFFFFFFFF
  567    00000004 ........              DC32    LATEST_NFA
  568                           LFA:
  569    00000008 ........              DC32    .+5
  570                            SECTION .text : CODE (2)
  571                                   POP2t_r0
  571.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  571.2                         //#ifndef TOSCT
  571.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  571.4                         //#endif
  571.5                         //      ADDS    p, p, #4
  571.6                                 ENDM
  572    00000004 0838                  SUBS  t_r0, t_r0, #8
  573                                   TPUSH_r0
  573                                   PUSHt_r0        // push t to p, pre decrement p
  573.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  573.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  573.3                         //      STR     t, [p]
  573.4                                 ENDM
  573                                   NEXT
  573.1                         // ARMv7-M Thumb = .+5
  573.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  573.3                         // ARMv6-M Thumb = .+4
  573.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  573                                   NEXT1
  573.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  573.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  573.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  573.4                         // ARMv6-M Thumb = .+4
  573.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  573.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  573.7                                 ENDM
  573.8                                 ENDM
  573.9                                 ENDM
  574                           
  575                           
  576                           //      CFA CFA:        ( pfa -- cfa )
  577                           //      Convert the parameter field address of a dictionary definition to
  578                           //      its code field address. <if thumb2 execution addr smudged>
  579                           
  580                            SECTION .text : CONST (2)
  581                           CFA_NFA:
  582    00000000 83                    DC8     0x83
  583    00000001 4346                  DC8     'CF'
  584    00000003 C1                    DC8     'A'+0x80
  585                            ALIGNROM 2,0xFFFFFFFF
  586    00000004 ........              DC32    LFA_NFA
  587                           CFA:
  588    00000008 ........              DC32  .+5
  589                            SECTION .text : CODE (2)
  590                                   POP2t_r0
  590.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  590.2                         //#ifndef TOSCT
  590.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  590.4                         //#endif
  590.5                         //      ADDS    p, p, #4
  590.6                                 ENDM
  591    00000004 001F                  SUBS  t_r0, t_r0, #4
  592                                   TPUSH_r0
  592                                   PUSHt_r0        // push t to p, pre decrement p
  592.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  592.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  592.3                         //      STR     t, [p]
  592.4                                 ENDM
  592                                   NEXT
  592.1                         // ARMv7-M Thumb = .+5
  592.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  592.3                         // ARMv6-M Thumb = .+4
  592.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  592                                   NEXT1
  592.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  592.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  592.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  592.4                         // ARMv6-M Thumb = .+4
  592.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  592.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  592.7                                 ENDM
  592.8                                 ENDM
  592.9                                 ENDM
  593                           
  594                           
  595                           //      NFA NFA:        ( pfa -- nfa )
  596                           //      Convert the parameter field address of a definition to its name
  597                           //      field. Modified for nfa alighnment padding
  598                           
  599                            SECTION .text : CONST (2)
  600                           NFA_NFA:
  601    00000000 83                    DC8     0x83
  602    00000001 4E46                  DC8     'NF'
  603    00000003 C1                    DC8     'A'+0x80
  604                            ALIGNROM 2,0xFFFFFFFF
  605    00000004 ........              DC32    CFA_NFA
  606                           NFA:
  607    00000008 ........              DC32  DOCOL
  608    0000000C .............         DC32  EIGHT, SUBB     // Addr OF lfa, DUPED TO TRAVERSE Padding
                  ...          
  609                           
  610                           NFA_ALIGN_BEGIN:
  611    00000014 ........              DC32  ONEM            // ADDR 1 BEFORE lfa, eliminate padding
  612    00000018 .............         DC32  DUP, CAT        // ALIGNROM FF padded?
                  ...          
  613    00000020 ........FF000         DC32  LIT, 0xFF, SUBB
                  000........  
  614    0000002C ........              DC32  ZBRAN           // UNTIL
  615    00000030 E4FFFFFF              DC32  NFA_ALIGN_BEGIN-.
  616                           
  617    00000034 ........FFFFF         DC32  LIT,-1          // DIRECTION FOR TRAVERSE = Toward nfa
                  FFF          
  618    0000003C ........              DC32  TRAVERSE          // \ -- addr2
  619    00000040 ........              DC32  SEMIS
  620                           
  621                           
  622                           //      PFA PFA:        ( nfa -- pfa )
  623                           //      Convert the name field address of a compiled definition to its
  624                           //      parameter field address.
  625                           
  626                            SECTION .text : CONST (2)
  627                           PFA_NFA:
  628    00000000 83                    DC8     0x83
  629    00000001 5046                  DC8     'PF'
  630    00000003 C1                    DC8     'A'+0x80
  631                            ALIGNROM 2,0xFFFFFFFF
  632    00000004 ........              DC32    NFA_NFA
  633                           PFA:
  634    00000008 ........              DC32    DOCOL           // \ NFA --
  635    0000000C ........              DC32    ONE             // DIRECTION FOR TRAVERSE = Toward CFA
  636    00000010 ........              DC32    TRAVERSE        // \ NFA 1 -- addr2
  637                           
  638                           PFA_ALIGN_BEGIN:
  639    00000014 ........              DC32  ONEP            // ADDR 1 BEFORE lfa, eliminate padding
  640    00000018 .............         DC32  DUP, CAT        // ALIGNROM FF padded?
                  ...          
  641    00000020 ........FF000         DC32  LIT, 0xFF, SUBB
                  000........  
  642    0000002C ........              DC32  ZBRAN           // UNTIL
  643    00000030 E4FFFFFF              DC32  PFA_ALIGN_BEGIN-.
  644                           
  645    00000034 ........              DC32    EIGHT
  646    00000038 ........              DC32    PLUS
  647    0000003C ........              DC32    SEMIS
  648                           
  649                           
  650                           //      ?ALIGNED QALIGNED: ( value -- )
  651                           //      If value not aligned by 4 issue message and ABORT.
  652                           
  653                            SECTION .text : CONST (2)
  654                           QALIGNED_NFA:
  655    00000000 88                    DC8     0x88
  656    00000001 3F414C49474E4         DC8     '?ALIGNE'
                  5            
  657    00000008 C4                    DC8     'D'+0x80
  658    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  659    0000000C ........              DC32    PFA_NFA
  660                           QALIGNED:
  661    00000010 ........              DC32    DOCOL
  662    00000014 ........03000         DC32    LIT, 3, ANDD
                  000........  
  663    00000020 ........              DC32    ZBRAN           //IF no err leave
  664    00000024 3C000000              DC32     QALIGN_OK-.
  665                           
  666    00000028 ........              DC32    PDOTQ
  667    0000002C 2E                    DC8     46
  668    0000002D 56414C5545204         DC8     'VALUE MUST BE EVEN NOT ODD AND MULTIPLE OF 4! '
                  D555354204245
                  204556454E204
                  E4F54204F4444
                  20414E44204D5
                  54C5449504C45
                  204F462034212
                  0            
  669    0000005B FF             ALIGNROM 2,0xFFFFFFFF
  670    0000005C ........              DC32    ABORT
  671                           
  672                           QALIGN_OK:
  673    00000060 ........              DC32    SEMIS
  674                           
  675                           
  676                           //      ?ERROR QERROR: ( f nullstr -- )
  677                           //      If f NON ZERO type error message (nullstr) and ABORT.
  678                           
  679                            SECTION .text : CONST (2)
  680                           QERROR_NFA:
  681    00000000 86                    DC8     0x86
  682    00000001 3F4552524F            DC8     '?ERRO'
  683    00000006 D2                    DC8     'R'+0x80
  684    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  685    00000008 ........              DC32    QALIGNED_NFA
  686                           QERROR:
  687    0000000C ........              DC32    DOCOL
  688    00000010 ........              DC32    SWAP
  689    00000014 ........              DC32    ZBRAN   //IF no err leave
  690    00000018 10000000          DC32  QERROR_FINISH-.
  691                           
  692    0000001C ........              DC32    ERROR // ( nullstr-addr --- ) ABORT's
  693    00000020 ........              DC32    BRAN    //ELSE
  694    00000024 08000000          DC32  QERROR_DONE-.
  695                           
  696                           QERROR_FINISH:
  697    00000028 ........              DC32    DROP    //endif
  698                           
  699                           QERROR_DONE:
  700    0000002C ........              DC32    SEMIS
  701                           
  702                           
  703                           //      DIGIT DIGIT:    ( c base -- digit 1 ) (ok)
  704                           //                      ( c base -- 0 (bad)
  705                           //      Converts the ascii character c using base to its binary
  706                           //      equivalent digit, accompanied by a true flag. If the conversion is
  707                           //      invalid, leaves only a false flag.
  708                           
  709                           //      If digit gets 0, space, dot, comma or any non number it returns 0
  710                           
  711                            SECTION .text : CONST (2)
  712                           DIGIT_NFA:
  713    00000000 85                    DC8     0x85
  714    00000001 44494749              DC8     'DIGI'
  715    00000005 D4                    DC8     'T'+0x80
  716    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  717    00000008 ........              DC32    QERROR_NFA
  718                           DIGIT:
  719    0000000C ........              DC32    .+5
  720                            SECTION .text : CODE (2)
  721                                   POP2w_r2                // Number base
  721.1  00000000 57F8042B              LDR     w, [p],#4
  721.2                         //      LDR     w, [p]
  721.3                         //      ADDS    p, p, #4
  721.4                                 ENDM
  722                                   POP2t_r0                // ASCII DIGIT
  722.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
  722.2                         //#ifndef TOSCT
  722.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  722.4                         //#endif
  722.5                         //      ADDS    p, p, #4
  722.6                                 ENDM
  723    00000008 3038                  SUBS  t_r0, t_r0, #'0'
  724    0000000A 13D4                  BMI DIGI2             // Number error
  725                           
  726    0000000C 0928                  CMP t_r0, #9
  727    0000000E 02DD                  BLE DIGI1             // Number = 0 THRU 9
  728                           
  729                                   // Combine?
  730    00000010 C01F                  SUBS  t_r0, t_r0, #7
  731    00000012 0A28                  CMP t_r0, #10            // Number 'A' THRU 'Z'?
  732    00000014 0EDB                  BLT DIGI2             // NO
  733                           
  734                           DIGI1:
  735    00000016 9042                  CMP t_r0, w            // COMPARE Number TO base
  736    00000018 0CDA                  BGE DIGI2
  737                           
  738    0000001A 0246                  MOV   w_r2, t_r0            // NEW BINARY Number
  739    0000001C 0120                  MOVS  t_r0, #1           // TRUE FLAG
  740                                   DPUSH_r0_then_r1
  740                                   PUSHw   // push w to p, post decrement p
  740.1  0000001E 47F8042D              STR     w, [p, #-4]!
  740.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
  740.3                         //      STR     w, [p]
  740.4                                 ENDM
  740                                   TPUSH_r0
  740                                   PUSHt_r0        // push t to p, pre decrement p
  740.1  00000022 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  740.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  740.3                         //      STR     t, [p]
  740.4                                 ENDM
  740                                   NEXT
  740.1                         // ARMv7-M Thumb = .+5
  740.2  00000026 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  740.3                         // ARMv6-M Thumb = .+4
  740.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  740                                   NEXT1
  740.1  0000002A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  740.2  0000002E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  740.3  00000032 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  740.4                         // ARMv6-M Thumb = .+4
  740.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  740.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  740.7                                 ENDM
  740.8                                 ENDM
  740.9                                 ENDM
  740.10                                ENDM
  741                           
  742                                   // Number error
  743                           DIGI2:
  744    00000034 0020                  MOVS  t_r0, #0          // FALSE FLAG
  745                                   TPUSH_r0
  745                                   PUSHt_r0        // push t to p, pre decrement p
  745.1  00000036 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  745.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  745.3                         //      STR     t, [p]
  745.4                                 ENDM
  745                                   NEXT
  745.1                         // ARMv7-M Thumb = .+5
  745.2  0000003A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  745.3                         // ARMv6-M Thumb = .+4
  745.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  745                                   NEXT1
  745.1  0000003E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  745.2  00000042 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  745.3  00000046 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  745.4                         // ARMv6-M Thumb = .+4
  745.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  745.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  745.7                                 ENDM
  745.8                                 ENDM
  745.9                                 ENDM
  746                           
  747                           
  748                           //      ENCLOSE ENCL:   ( addr1 c -- addr1 n1 n2 n3 )
  749                           //      A text scanning iterative primitive used only in WORD.
  750                           //      IN is used before and after callS for the iteration
  751                           //      Typically TIB + IN = addr1
  752                           //  noop EX: \ TIB   32 -- TIB   0 4 5
  753                           //  NULL EX: \ TIB   32 -- ADDR-B4-NULL 0 1 1 So DFIND CAN FIND IT!
  754                           //  NULL EX: \ WORD/ENCL -> TIB 1, 0, 20'S
  755                           //  From the text address addr1 and an ascii delimiting character c,
  756                           //  is determined the byte offset to the first non-delimiter character n1,
  757                           //  the offset to the first delimiter after the text n2,
  758                           //  and the offset to the first character not included.
  759                           //  This procedure will not process past an ASCII 'null', treating it
  760                           //  as an unconditional delimiter. NULL termination by EXPECT in QUERY.
  761                           
  762                            SECTION .text : CONST (2)
  763                           ENCL_NFA:
  764    00000000 87                    DC8     0x87
  765    00000001 454E434C4F53          DC8     'ENCLOS'
  766    00000007 C5                    DC8     'E'+0x80
  767                            ALIGNROM 2,0xFFFFFFFF
  768    00000008 ........              DC32    DIGIT_NFA
  769                           ENCL:
  770    0000000C ........              DC32    .+5
  771                            SECTION .text : CODE (2)
  772                                   POP2t_r0                          // TERMINATOR CHAR
  772.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  772.2                         //#ifndef TOSCT
  772.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  772.4                         //#endif
  772.5                         //      ADDS    p, p, #4
  772.6                                 ENDM
  773    00000004 3968                  LDR   n, [p]                  // get text address but leave on stack
  774    00000006 0022                  MOVS  w_r2, #0
  775    00000008 521E                  SUBS    w_r2, w_r2, #1  // CHAR  COUNTER
  776    0000000A 491E                  SUBS  n, n, #1        // ADDR -1
  777                           
  778                           //  SCAN TO FIRST NON-TERMINATOR CHARACTER
  779                           //      and PUSH count to stack leaving last 2 params to compute
  780                           ENCL1:
  781    0000000C 491C                  ADDS  n_r1, n_r1, #1    // ADDR+1
  782    0000000E 521C                  ADDS  w_r2, w_r2, #1  // COUNT+1
  783    00000010 0B78                  LDRB  x_r3, [n_r1]
  784    00000012 9842                  CMP t_r0, x_r3      //CMP       AL,[BX]
  785    00000014 FAD0                  BEQ ENCL1           //JZ        ENCL1   // WAIT FOR NON-TERMINATOR
  786                                   PUSHw                   //offset to the first non-delimiter character
  786.1  00000016 47F8042D              STR     w, [p, #-4]!
  786.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
  786.3                         //      STR     w, [p]
  786.4                                 ENDM
  787                                                           //EXiT is now only DPUSH
  788    0000001A 002B                  CMP x_r3, #0        //CMP       AH,[BX] // null CHAR?
  789    0000001C 0CD1                  BNE ENCL2           //JNZ       ENCL2   // NO
  790                           
  791                           // FOUND null BEFORE 1ST NON-TERM CHAR
  792                           // RETURN ok args = NULL EX//
  793                           // ( TIB   32 -- ADDR-B4-NULL 0 1 1 ) So DFIND CAN FIND IT!
  794                           //
  795    0000001E 1846                  MOV     t_r0, x_r3
  796    00000020 521C                  ADDS  w_r2, w_r2, #1    // w = offset to the delimiter after the text
  797                                   DPUSH_r0_then_r1
  797                                   PUSHw   // push w to p, post decrement p
  797.1  00000022 47F8042D              STR     w, [p, #-4]!
  797.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
  797.3                         //      STR     w, [p]
  797.4                                 ENDM
  797                                   TPUSH_r0
  797                                   PUSHt_r0        // push t to p, pre decrement p
  797.1  00000026 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  797.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  797.3                         //      STR     t, [p]
  797.4                                 ENDM
  797                                   NEXT
  797.1                         // ARMv7-M Thumb = .+5
  797.2  0000002A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  797.3                         // ARMv6-M Thumb = .+4
  797.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  797                                   NEXT1
  797.1  0000002E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  797.2  00000032 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  797.3  00000036 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  797.4                         // ARMv6-M Thumb = .+4
  797.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  797.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  797.7                                 ENDM
  797.8                                 ENDM
  797.9                                 ENDM
  797.10                                ENDM
  798                           
  799                           //   FOUND FIRST TEXT CHAR - COUNT THE CHARS
  800                           ENCL2:
  801    00000038 491C                  ADDS  n_r1, n_r1, #1  // ADDR+1
  802    0000003A 521C                  ADDS  w_r2, w_r2, #1  //COUNT+1
  803    0000003C 0B78                  LDRB  x_r3, [n_r1]
  804    0000003E 9842                  CMP t_r0, x_r3      //TERMINATOR CHAR?
  805    00000040 01D0                  BEQ ENCL4           //YES
  806                           
  807    00000042 002B                  CMP x_r3, #0        //null CHAR?
  808    00000044 F8D1                  BNE ENCL2           //NO, LOOP AGAIN
  809                           
  810                           ENCL3:  //   FOUND null AT END OF TEXT
  811                           ENCL4:  //   FOUND TERMINATOR CHARACTER
  812    00000046 1046                  MOV t_r0, w_r2        // COUNT+1 =
  813    00000048 401C                  ADDS  t_r0, t_r0, #1  // offset to the first character not included
  814                                   DPUSH_r0_then_r1
  814                                   PUSHw   // push w to p, post decrement p
  814.1  0000004A 47F8042D              STR     w, [p, #-4]!
  814.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
  814.3                         //      STR     w, [p]
  814.4                                 ENDM
  814                                   TPUSH_r0
  814                                   PUSHt_r0        // push t to p, pre decrement p
  814.1  0000004E 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  814.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  814.3                         //      STR     t, [p]
  814.4                                 ENDM
  814                                   NEXT
  814.1                         // ARMv7-M Thumb = .+5
  814.2  00000052 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  814.3                         // ARMv6-M Thumb = .+4
  814.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  814                                   NEXT1
  814.1  00000056 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  814.2  0000005A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  814.3  0000005E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  814.4                         // ARMv6-M Thumb = .+4
  814.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  814.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  814.7                                 ENDM
  814.8                                 ENDM
  814.9                                 ENDM
  814.10                                ENDM
  815                           
  816                           
  817                           //      0 NULL: ( -- ) IMMEDIATE
  818                           //      Don't return to Interpret, return to Quit at end of a line of input.
  819                           //      Executed at end of TIB when QUERY lenght or CR entered.
  820                            SECTION .text : CONST (2)
  821                           NULL_NFA:
  822    00000000 C1                    DC8     0x0C1                   // A BINARY ZER
  823    00000001 80                    DC8     0x80
  824    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
  825    00000004 ........              DC32    ENCL_NFA
  826                           NULL:
  827                           //      DC32    SEMIS                   // Actual Semis code below
  828    00000008 ........              DC32  .+5
  829                            SECTION .text : CODE (2)
  830                                   POPr2i  // pop docol saved IP from Rstack
  830.1  00000000 56F8045B              LDR     i, [r],#4       ; pop DOCOL'd IP from Rstack
  830.2                         //      LDR i, [r]              //  pop r to i, post increment r
  830.3                         //      ADDS    r, r, #4
  830.4                                 ENDM
  831                                   NEXT
  831.1                         // ARMv7-M Thumb = .+5
  831.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  831.3                         // ARMv6-M Thumb = .+4
  831.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  831                                   NEXT1
  831.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  831.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  831.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  831.4                         // ARMv6-M Thumb = .+4
  831.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  831.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  831.7                                 ENDM
  831.8                                 ENDM
  832                           
  833                           
  834                           //      WORD WORD:      ( c -- )
  835                           //      Parse the text in TIB , until a delimiter c is found, tokenizing input.
  836                           //      Move the token to HERE, with a count byte and 2 nulls at the end.
  837                           //      Leading occurrences of c are ignored. IN is incremented.
  838                           //      IN is initialized by FISH to 1 to account for the count byte in EXPECT.
  839                           //      See IN. Usually used inside a definition.
  840                           
  841                            SECTION .text : CONST (2)
  842                           WORD_NFA:
  843    00000000 84                    DC8     0x84
  844    00000001 574F52                DC8     'WOR'
  845    00000004 C4                    DC8     'D'+0x80
  846    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  847    00000008 ........              DC32    NULL_NFA
  848                           WORD:
  849    0000000C ........              DC32    DOCOL
  850                           WORD1:
  851                           //      This is required for number suffix's at least ???
  852                           // NOT WITH NEW COUNTED NULL STRING EXPECT
  853                           //      DC32    HERE, LIT, MAXWORDLEN+2, BLANKS
  854    00000010 ........              DC32    TIB_SV
  855                           WORD2:
  856    00000014 ........              DC32    IN_SV
  857    00000018 ........              DC32    AT
  858    0000001C ........              DC32    PLUS
  859    00000020 ........        DC32  SWAP    // ( TIB+IN CH-DELIM -- )
  860    00000024 ........              DC32    ENCL    // ( TIB+IN 32 -- TIB+IN   0 4 5 )
  861                           WENCL:
  862    00000028 ........              DC32    IN_SV   // encl TOS = end of word offset to be added to IN
  863    0000002C ........              DC32    PSTORE  // TIB+IN   0 4
  864    00000030 ........              DC32    OVER    //
  865    00000034 ........              DC32    SUBB    // Char cnt going to R and HERE
  866    00000038 ........              DC32    TOR
  867    0000003C ........              DC32    R
  868    00000040 ........              DC32    HERE
  869    00000044 ........              DC32    CSTORE   // CHAR CNT OF word
  870    00000048 ........              DC32    PLUS
  871    0000004C ........              DC32    HERE
  872    00000050 ........              DC32    ONEP
  873                           //      DC32    RFROM
  874                           // MOVE word TO DICT FOR finding ENDING WITH NULLS
  875    00000054 ........        DC32    R
  876    00000058 ........              DC32    CMOVE   // ( from to count -- )
  877                           // add null to end of token - NUMBER adjusted
  878    0000005C .............   DC32    ZERO, HERE, ONEP, RFROM, PLUS, CSTORE
                  .............
                  .............
                  .........    
  879                           #ifdef  IOBUFS_DEBUG
  881                           #endif
  882    00000074 ........              DC32    SEMIS
  883                           
  884                           //      NUMBER NUMBER:  ( addr -- sd )
  885                           //      If error print message and ABORT.
  886                           //  Convert a character string left at addr with a preceeding count,
  887                           //  and a terminating null, to a signed number, in the current numeric base.
  888                           //  If a decimal point is encountered in the text, its position will be
  889                           //  given in DPL, but no other effect occurs. If numeric conversion is
  890                           //  not possible, an error message will be given.
  891                           
  892                           //  Added support for , as a single number formatter.
  893                           #define comma_test
  894                            SECTION .text : CONST (2)
  895                           NUMBER_NFA:
  896    00000000 86                    DC8     0x86
  897    00000001 4E554D4245            DC8     'NUMBE'
  898    00000006 D2                    DC8     'R'+0x80
  899    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  900    00000008 ........              DC32    WORD_NFA
  901                           NUMBER:
  902    0000000C ........              DC32    DOCOL
  903    00000010 ........        DC32  BASE_TO_R12     // Save current BASE.
  904    00000014 ........        DC32  NUMBERSUFFIX    // (addr -- sddr) Change BASE if suffix used.
  905                           
  906                           // SETUP: stack arguments for PNUMBER.
  907    00000018 .............         DC32    ZERO, ZERO
                  ...          
  908    00000020 ........              DC32    ROT             // ( 0 0 addr -- )
  909                           
  910                           // SETUP: reeturn stack with sign flag
  911                           // NONAME CANDIDATE!
  912                           // START: Handle minus sign by saving status on Return Stack.
  913                           // and incrementing to addr after it.
  914    00000024 .............         DC32    DUP, ONEP       // ( 0 0 addr addr+1 -- )
                  ...          
  915    0000002C ........              DC32    CAT                 // ( 0 0 addr 1rstchar -- )
  916    00000030 ........2D000         DC32    LIT, '-'        // ( 0 0 addr 1rstchar 0x2D --- )
                  000          
  917    00000038 ........              DC32    EQUAL             // ( 0 0 addr f -- )
  918                           #ifdef TRUE_EQU_NEG_ONE // EQUAL returns -1 NEED 0 or 1 here!
  919    0000003C .............   DC32  ONE, ANDD       // ( 0 0 addr f -- ) MAKE FLAG ONE OR ZERO!
                  ...          
  920                           #endif
  921    00000044 .............         DC32    DUP, TOR        // ( 0 0 addr f -- ) copy of f >R
                  ...          
  922                           // END: Handle - by saving status on Return Stack.
  923                           
  924                           // SETUP: addr pointing to 1rst digit.
  925                           // If minus sign, flag from above will increment to next char.
  926    0000004C ........              DC32    PLUS            // Increment (OR NOT) addr to next char
  927                           
  928                           // So could be at 1rst OR 2nd character in string here!
  929                           
  930                           // ENTER LOOP WITH -1 DPL = single number and sign flag on return stack.
  931    00000050 ........FFFFF         DC32  LIT, -1
                  FFF          
  932                           // PNUMBER is used in loop to convert string segment until non-mumeric chracter.
  933                           // A period in the string manipulates DPL to create a double number.
  934                           // A comma in the string resets DPL to create a single number.
  935                           // A null indicates the end of the string.
  936                           NUMB1:                          // Begin
  937    00000058 .............         DC32    DPL_SV, STORE   // PNUMBER creates whole, dot or comma number segment
                  ...          
  938                           
  939                           // PNUMBER converts one or more characters until first unconvertable digit.
  940                           // ud and addr in string is maintained while in loop.
  941    00000060 ........        DC32  PNUMBER         // ( 0 0 addr -- ud=(LSW MSW) ADDR=PAST#)
  942                           // Perform check for period, comma and null.
  943                           // Any other character here invalidates this number conversion.
  944                           
  945                           // Null Test: = end of string.
  946    00000064 .............   DC32    DUP, CAT
                  ...          
  947    0000006C ........        DC32    ZERO            // End of string used to be BLANK, is now Null.
  948    00000070 ........              DC32    SUBB
  949    00000074 ........              DC32    ZBRAN           // IF emd of number string conversion is
  950    00000078 68000000          DC32  NUMB2-.       // DONE UNLESS IT NEEDS TO BE NEGATED.
  951                           
  952                           // Period Test: = increment DPL.
  953    0000007C .............         DC32    DUP, CAT
                  ...          
  954    00000084 ........2E000         DC32    LIT, '.'        // 2Eh = period.
                  000          
  955    0000008C ........              DC32    SUBB
  956    00000090 ........        DC32  ZBRAN
  957    00000094 40000000        DC32  DPL_ZERO_INCR-.
  958                           
  959                           #ifdef  comma_test
  960                           // Comma Test: = reset DPL.
  961    00000098 .............   DC32  DUP, CAT
                  ...          
  962    000000A0 ........2C000         DC32    LIT, ','        // 2CH comma
                  000          
  963    000000A8 ........        DC32  EQUAL
  964    000000AC ........        DC32  ZBRAN
  965    000000B0 10000000          DC32  BASE_RESET_THEN_ERROR-.
  966                           
  967                           // Fall thru if comma so reset DPL to create a single number.
  968                           DPL_RESET:
  969    000000B4 ........        DC32  TRUE_NEG_1
  970    000000B8 ........              DC32    BRAN
  971    000000BC 9CFFFFFF              DC32  NUMB1-.
  972                           #endif
  973                           
  974                           BASE_RESET_THEN_ERROR:
  975                           // GOING TO ERROR SO RESTORE BASE!
  976    000000C0 ........        DC32  BASE_FROM_R12   // Restore BASE
  977                           //NO_BASE_RESTORE:
  978    000000C4 ........        DC32  ONE     // provide non zero flag for error
  979    000000C8 .............         DC32    LIT, msg_number_error
                  ...          
  980    000000D0 ........              DC32    QERROR // ( f nullstr-addr -- ) IF f TRUE EXECUTE ERROR!
  981                           
  982                           DPL_ZERO_INCR:      // set DPL to zero
  983    000000D4 ........              DC32    ZERO
  984    000000D8 ........              DC32    BRAN
  985    000000DC 7CFFFFFF          DC32  NUMB1-.
  986                           
  987                           NUMB2:
  988    000000E0 ........              DC32    DROP
  989    000000E4 ........              DC32    RFROM           // FLAG OF "-" TEST
  990                                                           // IF
  991    000000E8 ........              DC32    ZBRAN
  992    000000EC 08000000          DC32  NUMB3-.
  993                           
  994    000000F0 ........              DC32    DNEGATE
  995                           
  996                           NUMB3:                          // endif
  997    000000F4 ........        DC32  BASE_FROM_R12   // Restore BASE
  998    000000F8 ........        DC32  SEMIS
  999                           
 1000                           //      ERROR ERROR:    ( nullstr --- )
 1001                           //      Execute error notification and restart of system.
 1002                           //  IN_SV is saved to assist in determining the location of the error.
 1003                            SECTION .text : CONST (2)
 1004                           ERROR_NFA:
 1005    00000000 85                    DC8     0x85
 1006    00000001 4552524F              DC8     'ERRO'
 1007    00000005 D2                    DC8     'R'+0x80
 1008    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1009                           //      DC32    DFIND_NFA
 1010    00000008 ........              DC32    NUMBER_NFA
 1011                           ERROR:
 1012    0000000C ........              DC32    DOCOL
 1013    00000010 .............         DC32    HERE, COUNT, TYPE       // Offending item
                  ...........  
 1014    0000001C .............         DC32    NULLSTRLEN, TYPE        // Passed in null string
                  ...          
 1015                           #ifdef IO2TP
 1019                           #endif
 1020                           #ifdef XON_XOFF
 1021    00000024 ........        DC32    XOFF    // TEMP TEST THRE
 1022                           #endif
 1023                           
 1024                           //      DO THIS WHERE STATE IS SET BACK TO ZERO
 1025    00000028 .............   DC32  STATE_SV, AT
                  ...          
 1026    00000030 ........        DC32  ZBRAN
 1027    00000034 40000000          DC32  CREATED_OK-.
 1028                           
 1029                           //      NON-ZERO CSDP = RESTORE DP TO forget DAMAGED WORDS
 1030    00000038 .............   DC32  CSDP_SV, AT   // Create saves dp here for if word exists err
                  ...          
 1031    00000040 ........        DC32  ZBRAN
 1032    00000044 30000000          DC32  CREATED_OK-.
 1033                           
 1034                           // assume ITS A CREATE'd WORD!!!!
 1035                           ERROR_FIXUP:     // CSDP_SV contains NFA of definition that has error.
 1036    00000048 .............   DC32  CSDP_SV, AT     // SHOULD BE AT NFA!!
                  ...          
 1037    00000050 ........        DC32  PFA     // \ nfa -- pfa
 1038    00000054 .............   DC32  LFA, AT // \ pfa --- lfa
                  ...          
 1039    0000005C .............   DC32  CURRENT_SV, STORE       // Has to be NFA of last good word
                  ...          
 1040                           // RESET DP!
 1041    00000064 .............   DC32  CSDP_SV, AT
                  ...          
 1042    0000006C .............   DC32  DP_SV, STORE
                  ...          
 1043                           
 1044                           CREATED_OK:
 1045    00000074 ........        DC32  SEMIC_CREATE            // RESET CSDP FOR AUTO FORGET
 1046                           #ifdef ABORT_STOP_TILL_CO
 1047    00000078 ........        DC32  ABORT
 1048                           #else
 1050                           #endif
 1051                           //      DC32    QUIT    // FROM Error
 1052                           
 1053                           
 1054                           //      ' TICK: ( -- pfa ) IMMEDIATE
 1055                           //      Used in the form: .
 1056                           //      ' CCcc
 1057                           //      Leaves the parameter field address of dictionary word CCcc.
 1058                           //      If the word is not found after a search of CURRENT,
 1059                           //      an appropriate error message is given.
 1060                           //      As a compiler directive, executed in a colon-definition to compile
 1061                           //      the address as a literal.
 1062                           //      Pronounced "TICK".
 1063                           
 1064                            SECTION .text : CONST (2)
 1065                           TICK_NFA:
 1066    00000000 C1                    DC8     0x0C1
 1067    00000001 A7                    DC8     ''''+0x80
 1068    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1069    00000004 ........              DC32    ERROR_NFA
 1070                           TICK:
 1071    00000008 ........              DC32    DOCOL
 1072    0000000C ........              DC32    DFIND   // noop there for TIB entry
 1073    00000010 ........              DC32    ZEQU
 1074    00000014 .............         DC32    LIT, msg_word_error
                  ...          
 1075    0000001C ........              DC32    QERROR    // \ f nullstr-addr --
 1076    00000020 ........              DC32    DROP
 1077    00000024 ........              DC32    LITERAL
 1078    00000028 ........              DC32    SEMIS
 1079                           
 1080                           
 1081                           //      EXPECT EXPECT:  ( addr count -- )
 1082                           //      Transfer characters from the terminal to the buffer starting at addr+1,
 1083                           //      until a "return" or the count of characters have been received.
 1084                           //      One or two nulls are added at the end creating a null-terminated string.
 1085                           //  A count byte is placed at addr, the count being derived by $LEN
 1086                           //      Use COUNT with TYPE for strings saved this way.
 1087                           //  Strings longer that 255 will have an invalid count byte. Use $LEN:
 1088                           //  $LEN and TYPE can be used when the argument to $LEN is addr+1.
 1089                           
 1090                           //  Comments below use TIB input (QUERY in INTERPRET) as an example.
 1091                           
 1092                            SECTION .text : CONST (2)
 1093                           EXPECT_NFA:
 1094    00000000 86                    DC8     0x86
 1095    00000001 4558504543            DC8     'EXPEC'
 1096    00000006 D4                    DC8     'T'+0x80
 1097    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1098    00000008 ........              DC32    TICK_NFA
 1099                           EXPECT:                 // ( NOS TOS -- NOS TOS )
 1100    0000000C ........              DC32    DOCOL   // ( TIB LEN -- )
 1101    00000010 .............   DC32  zero_OUT, zero_IN
                  ...          
 1102    00000018 ........        DC32  ONEP  // ( TIB LEN+1 -- ) (Index and Limit)+1 for count byte
 1103    0000001C ........              DC32    OVER    // ( TIB LEN+1 TIB -- )
 1104    00000020 ........              DC32    PLUS    // ( TIB TIB+LEN+1 -- )
 1105    00000024 ........              DC32    OVER    // ( TIB TIB+LEN+1 TIB -- )
 1106    00000028 ........        DC32  ONEP  // ( TIB TIB+LEN+1 TIB+1 -- ) SKIP COUNT BYTE
 1107                           
 1108                           ///* FISH System compiled KEY does not issue XON - user version does!
 1109                           #ifdef XON_XOFF
 1110    0000002C ........              DC32    XON
 1111                           #endif
 1112                           // ( ORGIGINAL-TIB TIB+LEN+1 TIB+1 -- ORGIGINAL-TIB )
 1113                           //                (Index & Limit)+1 for count byte
 1114    00000030 ........              DC32    XDO     // DO   Index = addr, Limit = addr+cnt
 1115                           EXPE1:
 1116    00000034 ........              DC32    KEY     // CAN BREAKPOINT OR CHANGE TO BE 0x0D ONLY
 1117                           #ifdef XON_XOFF
 1118    00000038 ........        DC32  IF_EOL_SEND_XOFF        // IF CR QUICK XOFF!
 1119                           #endif
 1120                           // goto main branch (EL1:)if not tab
 1121    0000003C .............         DC32    DUP, LIT, 9, EQUAL      // ? TAB
                  ...09000000..
                  ......       
 1122    0000004C ........        DC32  ZBRAN               // Not tab
 1123    00000050 0C000000          DC32  EL1-.             // Goto MAIN LOOP
 1124                           
 1125                           // REPLACE TAB WITH SPACE       // -- ch f
 1126    00000054 .............   DC32  DROP, BLANK             // Convert tab to space
                  ...          
 1127                           EL1:
 1128                           // MAIN LOOP ENTERED WITH CHAR ON TOS
 1129    0000005C ........              DC32    DUP             // ( TIB key key -- )
 1130                           // FALL THRU IF BACKSPACE OR DELETE KEY
 1131    00000060 ........              DC32    BACKSPACE_CHAR
 1132    00000064 ........        DC32  EQUAL
 1133    00000068 ........        DC32  OVER
 1134    0000006C ........7F000   DC32  LIT, 07Fh       // DEL KEY
                  000          
 1135    00000074 ........        DC32  EQUAL
 1136    00000078 ........        DC32  OR
 1137                           // BRANCH IF NOT BACKSPACE OR DELETE KEY
 1138    0000007C ........              DC32    ZBRAN     // If not backspace
 1139    00000080 50000000          DC32  EXPE2-. // go here
 1140                           
 1141                           // CASE OF BACKSPACE/DELETE KEY
 1142    00000084 ........              DC32    DROP  // ( TOS> 8 TIB -- TIB ) Drop Backspace on stack
 1143    00000088 ........              DC32    DUP   // ( TOS> TIB -- TOS> TIB TIB )  Current TIB addr
 1144    0000008C ........              DC32    I     // ( TOS> TIB TIB -- I=TIB+? TIB TIB )
 1145                           // COMPENSATE FOR COUNT BYTE - BUMP ADDR+1 (NEXT CHAR LOCATION) BACK TO CURRENT
 1146    00000090 ........        DC32  ONEM
 1147    00000094 ........              DC32    EQUAL // ( TOS> I=TIB+? TIB TIB -- f TIB )
 1148    00000098 ........              DC32    DUP   // ( TOS> f TIB -- f f TIB )
 1149                           // I AND RFROM STARTS AT TIB+1
 1150                           // REMOVE INDEX FROM LOOP TO REPLACE IT WITH BACKSPACE CORRECTED ADDRESS
 1151    0000009C ........              DC32    RFROM           // ( TOS> f f TIB -- TIB+1 f f TIB )
 1152                           // ADDING 2 BECAUSE TIB+1 IS FROM I AND FLAG MAKES IT = TO 1
 1153                           // WHEN AT THE BEGIINING (ADDR+1) OF THE ADDR BUFFER
 1154    000000A0 ........              DC32    TWO
 1155    000000A4 ........              DC32    SUBB
 1156                           // ADD FLAG
 1157    000000A8 ........              DC32    PLUS
 1158    000000AC ........              DC32    TOR
 1159    000000B0 ........              DC32    ZBRAN     // If not at beginning of line
 1160    000000B4 10000000              DC32     EXPE6-.  // Goto bsout
 1161                           
 1162    000000B8 ........              DC32    BELL      // At beginning of TIB issue bell
 1163    000000BC ........              DC32    BRAN      // Goto end of loop
 1164    000000C0 6C000000              DC32     EXPE33-.
 1165                           
 1166                           EXPE6:
 1167    000000C4 ........              DC32    BSOUT           // endif
 1168                           EXPE7:  // LABEL NOT USED BECAUSE BELL AND BSOUT Emit THEMSELVES
 1169    000000C8 ........              DC32    BRAN            // Goto end of loop
 1170    000000CC 60000000          DC32         EXPE33-.
 1171                           
 1172                           EXPE2:
 1173    000000D0 ........              DC32    DUP
 1174    000000D4 ........0D000         DC32    LIT, 0x0D       // cr
                  000          
 1175    000000DC ........              DC32    EQUAL
 1176    000000E0 ........              DC32    ZBRAN       // If not cr
 1177    000000E4 1C000000          DC32  EXPE4-.   // Goto save this char and loop again
 1178                           
 1179    000000E8 ........              DC32    LEAVE       // ( TOS> ODh TIB --  )
 1180                           #ifdef  IOBUFS_DEBUG
 1182                           #endif
 1183                                   // CR DROPPED HERE I USED AT END FOR CASE OF EXPECT COUNT REACHED
 1184    000000EC ........              DC32    DROP            // ( TOS> TIB -- )
 1185    000000F0 ........              DC32    BLANK           // ( TOS> 20h TIB -- ) space IS FOR EMIT!
 1186    000000F4 ........              DC32    ZERO            // ( TOS> 0 20h TIB -- ) null
 1187    000000F8 ........              DC32    BRAN            // Goto store these at end of loop
 1188    000000FC 08000000          DC32         EXPE5-.
 1189                           
 1190                           EXPE4:
 1191    00000100 ........              DC32    DUP             // Regular char
 1192                           
 1193                           EXPE5:
 1194    00000104 ........              DC32    I               // I=TIB Store char
 1195    00000108 ........              DC32    CSTORE          // or 1rst null in CASE OF CR
 1196    0000010C .............   DC32  ONE, IN_SV, PSTORE
                  ...........  
 1197    00000118 ........              DC32    ZERO            // 1rst or second null if cr
 1198                                   // CASE OF CR ( TOS> 0 20h TIB -- )
 1199    0000011C ........              DC32    I
 1200    00000120 ........              DC32    ONEP
 1201    00000124 ........              DC32    CSTORE
 1202                           EXPE3:
 1203                                   // CASE OF CR ( TOS> 20H TIB -- )
 1204    00000128 ........              DC32    EMIT
 1205                           EXPE33:
 1206    0000012C ........              DC32    XLOOP
 1207    00000130 04FFFFFF          DC32         EXPE1-.        // Loop is LEAVE'd
 1208                           
 1209                           #ifdef XON_XOFF
 1210    00000134 ........              DC32    XOFF            // Count reached or cr = 2nd XOFF
 1211                           #endif
 1212                           // Creat count byte
 1213                                   // ( ORIGINAL ADDR -- )
 1214                                   // ORIGINAL ADDR (TIB) ON STACK HERE SO CORRECT FOR $LEN
 1215    00000138 ........        DC32  ONEP        // PAST COUNT BYTE FOR CORRECT COUNT
 1216                             // NULLSTRLEN:    // ( addr -- addr len )
 1217    0000013C ........        DC32  NULLSTRLEN  // ( TOS> LEN TIB+1 -- )
 1218    00000140 .............   DC32  SWAP, ONEM  // BACK UP TO COUNT BYTE
                  ...          
 1219    00000148 ........        DC32  CSTORE
 1220    0000014C ........              DC32    SEMIS
 1221                           
 1222                           
 1223                           //      COUNT COUNT:    ( addr1 --- addr2 n )
 1224                           //      Leave the byte address addr2 and byte count n of a count byte string,
 1225                           //  beginning at address addr1. It is presumed that the first byte at
 1226                           //  addr1 contains the text byte count and the actual text starts with
 1227                           //  the second byte. NFA's may report SMUDGE'd byte counts, handled only
 1228                           //  by ID. User Strings may be up to 255 characters.
 1229                           //  Typically COUNT is followed by TYPE.
 1230                           //  See TYPE $LEN and EXPECT
 1231                           
 1232                            SECTION .text : CONST (2)
 1233                           COUNT_NFA:
 1234    00000000 85                    DC8     0x85
 1235    00000001 434F554E              DC8     'COUN'
 1236    00000005 D4                    DC8     'T'+0x80
 1237    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1238    00000008 ........              DC32    EXPECT_NFA
 1239                           COUNT:
 1240    0000000C ........              DC32    DOCOL
 1241    00000010 ........              DC32    DUP
 1242    00000014 ........              DC32    ONEP
 1243    00000018 ........              DC32    SWAP
 1244                           //  DC32    CATLT7F
 1245    0000001C ........              DC32    CAT     // n could be SMUDGE'd count from NFA's
 1246    00000020 ........              DC32    SEMIS   // Only internal usage of smudged count is ID.
 1247                           
 1248                           
 1249                           //  $LEN NULLSTRLEN:    ( addr --- addr len )
 1250                           //  Count length of null terminated string like 'c' does,
 1251                           //  and return the string len after addr.
 1252                           //  TYPE can be used after this word.
 1253                           
 1254                            SECTION .text : CONST (2)
 1255                           NULLSTRLEN_NFA:
 1256    00000000 84                    DC8     0x84
 1257    00000001 244C45                DC8     '$LE'
 1258    00000004 CE                    DC8     'N'+0x80
 1259    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1260    00000008 ........              DC32    COUNT_NFA
 1261                           NULLSTRLEN:
 1262    0000000C ........              DC32    .+5
 1263                            SECTION .text : CODE (2)
 1264                                   NDPOP2w                 // Put addr in w_R2 yet leave addr on stack
 1264.1  00000000 3A68                  LDR     w, [p]
 1264.2                                 ENDM
 1265                                                     // Usually TIB.
 1266    00000002 4040                  EORS    t_r0, t_r0, t_r0  // zero count
 1267                           
 1268                           NSLEN_LOOP:
 1269    00000004 115C                  LDRB  n, [w_r2, t_r0]
 1270    00000006 0943                  ORRS  n, n, n
 1271    00000008 01D0                  BEQ NSLEN_DONE
 1272    0000000A 401C                  ADDS  t_r0, t_r0, #1
 1273    0000000C FAE7                  B NSLEN_LOOP
 1274                           
 1275                           NSLEN_DONE:
 1276                                   TPUSH_r0
 1276                                   PUSHt_r0        // push t to p, pre decrement p
 1276.1  0000000E 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1276.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1276.3                         //      STR     t, [p]
 1276.4                                 ENDM
 1276                                   NEXT
 1276.1                         // ARMv7-M Thumb = .+5
 1276.2  00000012 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1276.3                         // ARMv6-M Thumb = .+4
 1276.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1276                                   NEXT1
 1276.1  00000016 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1276.2  0000001A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1276.3  0000001E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1276.4                         // ARMv6-M Thumb = .+4
 1276.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1276.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1276.7                                 ENDM
 1276.8                                 ENDM
 1276.9                                 ENDM
 1277                           
 1278                           //      FORGET FORGET:  ( -- )
 1279                           //      PRINTS NEW HERE IF SUCCESSFUL. FIXED FIG VERSION MEMORY LEAK.
 1280                           //      Executed in the form:
 1281                           //      FORGET CCcc
 1282                           //      Deletes definition named CCcc from the dictionary with all entries
 1283                           //      physically following it. In fig-FORTH, an error message will occur
 1284                           //      if the CURRENT and CONTEXT vocabularies are not currently the same.
 1285                           //      MODIFIED: To update Current along with context and reset DP,
 1286                           //      and execute .DS and .VS
 1287                            SECTION .text : CONST (2)
 1288                           FORGET_NFA:
 1289    00000000 86                    DC8     0x86
 1290    00000001 464F524745            DC8     'FORGE'
 1291    00000006 D4                    DC8     'T'+0x80
 1292    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1293    00000008 ........              DC32    NULLSTRLEN_NFA
 1294                           FORGET:
 1295    0000000C ........              DC32    DOCOL
 1296    00000010 ........              DC32    TICK                    // \ -- pfa ELSE error message
 1297    00000014 ........              DC32    DUP
 1298    00000018 ........00000   DC32  LIT, FLASH_SPAGE        // DONT FORGET FISH WORDS SAVED IN FLASH
                  208          
 1299    00000020 ........              DC32    LESSTHAN
 1300    00000024 .............         DC32    LIT, msg_forget_fish
                  ...          
 1301    0000002C ........              DC32    QERROR                  // \ f nullstr-addr --
 1302    00000030 ........        DC32  DUP
 1303    00000034 ........00001   DC32  LIT, FLASH_PPAGE        // DONT FORGET USER WORDS IN FLASH
                  008          
 1304    0000003C ........              DC32    LESSTHAN
 1305    00000040 .............         DC32    LIT, msg_forget_saved
                  ...          
 1306    00000048 ........              DC32    QERROR                  // \ f nullstr-addr --
 1307                           //      MOVE NFA update of the DP to after Currrent and Context
 1308    0000004C ........              DC32    DUP                     // PFA PFA --
 1309    00000050 ........              DC32    LFA           // PFA LFA --
 1310                           
 1311                           // VAR space reclamation starts here:
 1312                           // PFA LFA --
 1313    00000054 ........        DC32  TOR           // LFA_BOT
 1314                           
 1315                           VS_RECVR_LOOP:
 1316    00000058 .............   DC32  LATEST, PFA, LFA        // LFA_TOP
                  ...........  
 1317    00000064 .............   DC32  DUP, AT                 // LFA NEXT_LFA
                  ...          
 1318    0000006C .............   DC32  CURRENT_SV, STORE       // SET NEXT WORD TO CHECK
                  ...          
 1319    00000074 .............   DC32  DUP, FOURP, AT          // GET CFA
                  ...........  
 1320    00000080 .............   DC32  LIT, DOVAR, EQUAL       // IS IT A DOVAR
                  ...........  
 1321    0000008C ........        DC32  ZBRAN
 1322    00000090 14000000          DC32  VS_RECVR_NEXT-.
 1323                           
 1324    00000094 ........FCFFF   DC32  LIT, -4, UP_SV, PSTORE  // DECREMENT UP
                  FFF..........
                  ......       
 1325                           
 1326                           VS_RECVR_NEXT:
 1327    000000A4 .............   DC32  R, EQUAL
                  ...          
 1328    000000AC ........        DC32  ZBRAN
 1329    000000B0 A8FFFFFF          DC32  VS_RECVR_LOOP-.
 1330                           
 1331    000000B4 ........        DC32  RFROM
 1332                           // VAR SPACE RECLAMATION DONE
 1333                           
 1334                           // PFA LFA --
 1335    000000B8 ........              DC32    AT              // LFA
 1336    000000BC ........              DC32    CURRENT_SV
 1337    000000C0 ........              DC32    STORE
 1338    000000C4 ........              DC32    NFA             // FROM PFA
 1339    000000C8 ........              DC32    DP_SV
 1340    000000CC ........              DC32    STORE
 1341    000000D0 .............         DC32    DOTVARSPACE, DOTDICTSPACE
                  ...          
 1342    000000D8 ........              DC32    SEMIS
 1343                           
 1344                           
 1345                           //      BYE BYE: ( -- ) COLD RESTART WITH SERIAL INITIALIZATION
 1346                           
 1347                            SECTION .text : CONST (2)
 1348                           BYE_NFA:
 1349    00000000 83                    DC8     0x83
 1350    00000001 4259                  DC8     'BY'
 1351    00000003 C5                    DC8     'E'+0x80
 1352                            ALIGNROM 2,0xFFFFFFFF
 1353    00000004 ........              DC32    FORGET_NFA
 1354                           BYE:
 1355    00000008 ........              DC32    .+5
 1356                            SECTION .text : CODE (2)
 1357                           //  B FM3_COLD      // __iar_program_start
 1358    00000000 ........        B STM32Fx_COLD_FISH
 1359                            LTORG
 1360                           
 1361                           //      ABORT ABORT:    ( -- )
 1362                           //      Clear the stacks, zero's out, and execute RUN or QUIT
 1363                           //      DOES NOT RESET DICTIONAIRY. SEE COLD.
 1364                           // When QUIT is run you have to type a CR to see PROMPT_SV
 1365                            SECTION .text : CONST (2)
 1366                           ABORT_NFA:
 1367    00000000 85                    DC8     0x85
 1368    00000001 41424F52              DC8     'ABOR'
 1369    00000005 D4                    DC8     'T'+0x80
 1370    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1371    00000008 ........              DC32    BYE_NFA
 1372                           ABORT:
 1373    0000000C ........              DC32    DOCOL
 1374    00000010 ........              DC32    SPSTO
 1375    00000014 ........              DC32    RPSTO
 1376                           #ifdef IO2TP
 1381                           #endif
 1382    00000018 ........              DC32    zero_OUT
 1383                           // 2018nOV08 FIND
 1384                           //      DC32    QSTACK  // IF STACK error abort using QERROR->ERROR
 1385                           
 1386                           // LOOK UP RUN AND EXEC IT
 1387    0000001C .............         DC32  LIT, msg_RUN
                  ...          
 1388    00000024 ........              DC32  LATEST
 1389                           //ABORT_BP1_B4_PFIND_RUN:
 1390                           // DC32 NOOP
 1391    00000028 ........              DC32  PFIND   // 0 OR pfa len 1
 1392    0000002C ........              DC32  ZBRAN
 1393    00000030 10000000          DC32  ABORT_QUIT-.
 1394                           
 1395    00000034 ........              DC32  DROP    // LEN
 1396    00000038 .............         DC32  CFA, EXEC
                  ...          
 1397                           ABORT_QUIT:
 1398                           //      DC32  SEMIC_CREATE // Use ERROR if need to recover from bad definition
 1399                           #ifdef ABORT_STOP_TILL_CO
 1400    00000040 .............         DC32  LIT, ERROR_HALT, AT
                  ...........  
 1401    0000004C ........              DC32  ZBRAN
 1402    00000050 6C000000          DC32  CO_END-.
 1403                           // halt on all errors until "CO" entered
 1404                           // BEGIN
 1405    00000054 .............         DC32    LIT, msg_CO, NULLSTRLEN, TYPE
                  .............
                  ......       
 1406                           NOT_CO:
 1407    00000064 ........              DC32  QKEY
 1408    00000068 ........              DC32  ZBRAN
 1409    0000006C F8FFFFFF              DC32  NOT_CO-.
 1410                           // IF KEY = "C'
 1411    00000070 .............         DC32  KEY, LIT, 43h, EQUAL
                  ...43000000..
                  ......       
 1412    00000080 ........              DC32  ZBRAN
 1413    00000084 E0FFFFFF              DC32  NOT_CO-.
 1414                           // NEXT KEY "0"
 1415    00000088 .............         DC32  KEY, LIT, 4Fh, EQUAL
                  ...4F000000..
                  ......       
 1416    00000098 ........              DC32  ZBRAN
 1417    0000009C C8FFFFFF          DC32  NOT_CO-.
 1418                           // NEXT KEY "Enter"
 1419    000000A0 .............         DC32  KEY, LIT, 0Dh, EQUAL
                  ...0D000000..
                  ......       
 1420    000000B0 ........              DC32  ZBRAN
 1421    000000B4 B0FFFFFF              DC32  NOT_CO-.
 1422                           // UNTIL
 1423    000000B8 ........              DC32  CR
 1424                           CO_END:
 1425                           #endif
 1426    000000BC ........              DC32    QUIT    // OI
 1427                           #ifdef ABORT_STOP_TILL_CO
 1428                           $FISH_CO_MSGS.h
    1                           // Valid only on v1.8 onward
    2                           //------------------------------------------------------------------------------
    3                           
    4                            SECTION .text : CONST (2)
    5                           
    6                           // DC8 "?" IS A NULL TERMINATED STRING
    7                           // DC8 '?' IS NOT
    8                           
    9                            ALIGNROM 2,0xFFFFFFFF
   10                           
   11                           // IF this fits in 1114 move to FISH_RM_MSGS.h 
   12                           
   13                           msg_CO:
   14    00000000 204572726F722         DC8     " Error Halt (EHON/EHOFF) - To COntinue Type CO then Enter: "
                  048616C742028
                  45484F4E2F454
                  84F464629202D
                  20546F20434F6
                  E74696E756520
                  5479706520434
                  F207468656E20
                  456E7465723A2
                  000          
   15                           
 1429                           #endif
 1430                           
 1431                           //      COLD COLD:      ( -- )  MODIFIED:
 1432                           //      FIGISH SYSTEM COLD = WARM (INIT RAMVARSPACE) -> type signon MSG ->ABORT
 1433                           //      CLEARS DICTIONAIRY. SEE ABORT.
 1434                           
 1435                            SECTION .text : CONST (2)
 1436                           COLD_NFA:
 1437    00000000 84                    DC8     0x84
 1438    00000001 434F4C                DC8     'COL'
 1439    00000004 C4                    DC8     'D'+0x80
 1440    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1441    00000008 ........              DC32    ABORT_NFA
 1442                           COLD:
 1443    0000000C ........              DC32    DOCOL
 1444    00000010 ........              DC32    WARM            // RAMVARSPACE Init
 1445    00000014 ........        DC32  CLS
 1446    00000018 ........              DC32    SIGNON
 1447                           #ifdef ABORT_STOP_TILL_CO
 1448    0000001C ........        DC32  QUIT
 1449                           #else
 1451                           #endif
 1452                           
 1453                           //=============================== WORDCAT ====================================//
 1454                           //NOEXEC HEADERFORWORDCATEGORIES
 1455                           //      WC_FISH_SYS: = FISH System: CATEGORY
 1456                           
 1457                            SECTION .text : CONST (2)
 1458                           WC_FISH_SYS_NFA:
 1459    00000000 90                    DC8     0x80+4+12        // +4 is format chars constant
 1460                                                  // +n is Name lenght
 1461    00000001 0D0A            DC8 0x0D, 0x0A
 1462    00000003 4649534820537         DC8     'FISH System:'
                  97374656D3A  
 1463    0000000F 0D8A            DC8 0x0D, 0x0A+0x80
 1464    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1465    00000014 ........        DC32  COLD_NFA
 1466                           
 1467                           
 1468                           //----------------------------- DOTSTACK SECTION -------------------------------
 1469                           
 1470                           //      .SH DOTSHEX:    ( -- )
 1471                           //      Nondestructively print items on stack in HEX, preserving base.
 1472                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1473                           
 1474                            SECTION .text : CONST (2)
 1475                           DOTSHEX_NFA:
 1476    00000000 83                    DC8     0x83
 1477    00000001 2E53                  DC8     '.S'
 1478    00000003 C8                    DC8     'H'+0x80
 1479                            ALIGNROM 2,0xFFFFFFFF
 1480    00000004 ........              DC32    WC_FISH_SYS_NFA
 1481                           DOTSHEX:
 1482    00000008 ........              DC32    DOCOL
 1483    0000000C ........10000   DC32  LIT, 16, DOTSBASE
                  000........  
 1484    00000018 ........              DC32    SEMIS
 1485                           
 1486                           
 1487                           //      .SD DOTSDEC:    ( -- )
 1488                           //      Nondestructively print items on stack in DECIMAL, preserving base.
 1489                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1490                           
 1491                            SECTION .text : CONST (2)
 1492                           DOTSDEC_NFA:
 1493    00000000 83                    DC8     0x83
 1494    00000001 2E53                  DC8     '.S'
 1495    00000003 C4                    DC8     'D'+0x80
 1496                            ALIGNROM 2,0xFFFFFFFF
 1497    00000004 ........              DC32    DOTSHEX_NFA
 1498                           DOTSDEC:
 1499    00000008 ........              DC32    DOCOL
 1500    0000000C ........0A000   DC32  LIT, 10, DOTSBASE
                  000........  
 1501    00000018 ........              DC32    SEMIS
 1502                           
 1503                           
 1504                           //      .SB DOTSBIN:    ( -- )
 1505                           //      Nondestructively print items on stack in BINARY, preserving base.
 1506                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1507                           
 1508                            SECTION .text : CONST (2)
 1509                           DOTSBIN_NFA:
 1510    00000000 83                    DC8     0x83
 1511    00000001 2E53                  DC8     '.S'
 1512    00000003 C2                    DC8     'B'+0x80
 1513                            ALIGNROM 2,0xFFFFFFFF
 1514    00000004 ........              DC32    DOTSDEC_NFA
 1515                           DOTSBIN:
 1516    00000008 ........              DC32    DOCOL
 1517    0000000C .............         DC32    TWO, DOTSBASE
                  ...          
 1518    00000014 ........              DC32    SEMIS
 1519                           
 1520                           
 1521                           //      .S DOTS:        ( -- )
 1522                           //      Nondestructively print items on stack in current base.
 1523                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1524                           
 1525                            SECTION .text : CONST (2)
 1526                           DOTS_NFA:
 1527    00000000 82                    DC8     0x82
 1528    00000001 2E                    DC8     '.'
 1529    00000002 D3                    DC8     'S'+0x80
 1530    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1531    00000004 ........              DC32    DOTSBIN_NFA
 1532                           DOTS:
 1533    00000008 ........              DC32    DOCOL
 1534    0000000C .............         DC32    INITSO_SV, AT, SPAT, FOURP
                  .............
                  ......       
 1535    0000001C .............         DC32    EQUAL, ZEQU, ZBRAN
                  ...........  
 1536    00000028 68000000              DC32    DOTSEND-.                       // IF NOTHING ON STACK
 1537                           
 1538    0000002C ........              DC32    PDOTQ
 1539    00000030 05                    DC8     5
 1540    00000031 544F533E20            DC8     'TOS> '
 1541    00000036 FFFF           ALIGNROM 2,0xFFFFFFFF
 1542                           
 1543    00000038 .............         DC32    INITSO_SV, AT, SPAT, FOURP
                  .............
                  ......       
 1544    00000048 ........              DC32    XDO
 1545                           
 1546                           DOTSLOOP:
 1547    0000004C .............         DC32    I, AT
                  ...          
 1548    00000054 .............         DC32    BASE_SV, AT
                  ...          
 1549    0000005C ........0A000   DC32  LIT, 10, EQUAL                  //
                  000........  
 1550    00000068 ........        DC32  ZBRAN                           // NOT = DECIMAL
 1551    0000006C 10000000          DC32  DBSUSEDUDOT-.
 1552    00000070 ........        DC32  DOT_BASE_SUFFIX
 1553    00000074 ........        DC32  BRAN
 1554    00000078 08000000          DC32  DBSUSEDOT-.
 1555                           
 1556                           DBSUSEDUDOT:
 1557    0000007C ........        DC32  UDOT_BASE_SUFFIX
 1558                           
 1559                           DBSUSEDOT:
 1560    00000080 ........        DC32  SPACE
 1561    00000084 .............         DC32    FOUR, XPLOOP
                  ...          
 1562    0000008C C0FFFFFF              DC32    DOTSLOOP-.
 1563                           
 1564                           DOTSEND:
 1565    00000090 ........              DC32    SEMIS
 1566                           
 1567                           //      2DUP TDUP:      ( n2 n1 -- n2 n1 n2 n1 )
 1568                           //      Duplicate top two stack items. The prefix 2 convention means
 1569                           //      an operation on the top two stack items.
 1570                            SECTION .text : CONST (2)
 1571                           TDUP_NFA:
 1572    00000000 84                    DC8     0x84
 1573    00000001 324455                DC8     '2DU'
 1574    00000004 D0                    DC8     'P'+0x80
 1575    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1576    00000008 ........              DC32    DOTS_NFA
 1577                           TDUP:
 1578    0000000C ........              DC32    .+5
 1579                            SECTION .text : CODE (2)
 1580                           // TDUP: OPT by picking pops
 1581    00000000 3868                  LDR t_r0, [p]
 1582    00000002 7A68                  LDR w_r2, [p, #4]
 1583                                   DPUSH_r0_then_r1
 1583                                   PUSHw   // push w to p, post decrement p
 1583.1  00000004 47F8042D              STR     w, [p, #-4]!
 1583.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1583.3                         //      STR     w, [p]
 1583.4                                 ENDM
 1583                                   TPUSH_r0
 1583                                   PUSHt_r0        // push t to p, pre decrement p
 1583.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1583.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1583.3                         //      STR     t, [p]
 1583.4                                 ENDM
 1583                                   NEXT
 1583.1                         // ARMv7-M Thumb = .+5
 1583.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1583.3                         // ARMv6-M Thumb = .+4
 1583.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1583                                   NEXT1
 1583.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1583.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1583.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1583.4                         // ARMv6-M Thumb = .+4
 1583.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1583.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1583.7                                 ENDM
 1583.8                                 ENDM
 1583.9                                 ENDM
 1583.10                                ENDM
 1584                           
 1585                           //      -DUP ZNDUP:     ( n1 -- n1 (if zero)
 1586                           //  ( n1 -- n1 n1 (non-zero)
 1587                           //      Reproduce n1 only if it is non-zero. Used in type andSPACES.
 1588                           //  This is usually used to copy a value just before IF, to eliminate
 1589                           //  the need for an ELSE part to drop it.
 1590                            SECTION .text : CONST (2)
 1591                           DDUP_NFA:
 1592    00000000 84                    DC8     0x84
 1593    00000001 2D4455                DC8     '-DU'
 1594    00000004 D0                    DC8     'P'+0x80
 1595    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1596    00000008 ........              DC32    TDUP_NFA
 1597                           ZNDUP:
 1598    0000000C ........              DC32    DOCOL
 1599    00000010 ........              DC32    DUP
 1600    00000014 ........              DC32    ZBRAN   // IF
 1601    00000018 08000000          DC32        DDUP1-.
 1602                           
 1603    0000001C ........              DC32    DUP     //endif
 1604                           DDUP1:
 1605    00000020 ........              DC32    SEMIS
 1606                           
 1607                           //      ROT ROT: ( nl n2 n3 --- n2 n3 nl )
 1608                           //      Rotate the top three values on the stack, bringing the third to the top.
 1609                            SECTION .text : CONST (2)
 1610                           ROT_NFA:
 1611    00000000 83                    DC8     0x83
 1612    00000001 524F                  DC8     'RO'
 1613    00000003 D4                    DC8     'T'+0x80
 1614                            ALIGNROM 2,0xFFFFFFFF
 1615    00000004 ........              DC32    DDUP_NFA
 1616                           ROT:
 1617    00000008 ........              DC32    .+5
 1618                            SECTION .text : CODE (2)
 1619                                   POP2w_r2
 1619.1  00000000 57F8042B              LDR     w, [p],#4
 1619.2                         //      LDR     w, [p]
 1619.3                         //      ADDS    p, p, #4
 1619.4                                 ENDM
 1620                                   POP2n_r1
 1620.1  00000004 57F8041B              LDR     n, [p],#4
 1620.2                         //      LDR     n, [p]
 1620.3                         //      ADDS    p, p, #4
 1620.4                                 ENDM
 1621                           #ifdef TOSCT
 1623                           #endif
 1624                                   POP2t_r0
 1624.1  00000008 57F8040B              LDR     t, [p],#4       // Post-increment
 1624.2                         //#ifndef TOSCT
 1624.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1624.4                         //#endif
 1624.5                         //      ADDS    p, p, #4
 1624.6                                 ENDM
 1625                                   PUSHn
 1625.1  0000000C 47F8041D              STR     n, [p, #-4]!
 1625.2                         //      SUBS    p, p, #4        // push n to p, pre decrement p
 1625.3                         //      STR     n, [p]
 1625.4                                 ENDM
 1626                                   DPUSH_r0_then_r1                //  --  LSW MSW )
 1626                                   PUSHw   // push w to p, post decrement p
 1626.1  00000010 47F8042D              STR     w, [p, #-4]!
 1626.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1626.3                         //      STR     w, [p]
 1626.4                                 ENDM
 1626                                   TPUSH_r0
 1626                                   PUSHt_r0        // push t to p, pre decrement p
 1626.1  00000014 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1626.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1626.3                         //      STR     t, [p]
 1626.4                                 ENDM
 1626                                   NEXT
 1626.1                         // ARMv7-M Thumb = .+5
 1626.2  00000018 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1626.3                         // ARMv6-M Thumb = .+4
 1626.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1626                                   NEXT1
 1626.1  0000001C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1626.2  00000020 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1626.3  00000024 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1626.4                         // ARMv6-M Thumb = .+4
 1626.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1626.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1626.7                                 ENDM
 1626.8                                 ENDM
 1626.9                                 ENDM
 1626.10                                ENDM
 1627                           
 1628                           //      I I:    ( -- n )
 1629                           //      Used within a DO-LOOP to copy the loop index to the stack. Other use
 1630                           //      is implementation dependent.
 1631                           //      See R.
 1632                            SECTION .text : CONST (2)
 1633                           I_NFA:
 1634    00000000 81                    DC8     0x81
 1635    00000001 C9                    DC8     'I'+0x80
 1636    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1637    00000004 ........              DC32    ROT_NFA
 1638                           I:
 1639    00000008 ........              DC32    .+5
 1640                            SECTION .text : CODE (2)
 1641    00000000 3068                  LDR t_r0, [r]   // GET INDEX VALUE
 1642                                   TPUSH_r0
 1642                                   PUSHt_r0        // push t to p, pre decrement p
 1642.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1642.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1642.3                         //      STR     t, [p]
 1642.4                                 ENDM
 1642                                   NEXT
 1642.1                         // ARMv7-M Thumb = .+5
 1642.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1642.3                         // ARMv6-M Thumb = .+4
 1642.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1642                                   NEXT1
 1642.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1642.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1642.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1642.4                         // ARMv6-M Thumb = .+4
 1642.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1642.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1642.7                                 ENDM
 1642.8                                 ENDM
 1642.9                                 ENDM
 1643                           
 1644                           //      SP@ SPAT:       ( -- addr )
 1645                           //      \ -- addr = Current TOP of the parameter stack (p) )
 1646                           //  Place the address of the TOP of the parameter stack (p)
 1647                           //      on the parameter stack (p) as it was before RP@ was executed.
 1648                           //  e.g.  1  2  SP@  @  .   .   .     would type 2  2  1
 1649                            SECTION .text : CONST (2)
 1650                           SPAT_NFA:
 1651    00000000 83                    DC8     0x83
 1652    00000001 5350                  DC8     'SP'
 1653    00000003 C0                    DC8     '@'+0x80
 1654                            ALIGNROM 2,0xFFFFFFFF
 1655    00000004 ........              DC32    I_NFA
 1656                           SPAT:
 1657    00000008 ........              DC32    .+5
 1658                            SECTION .text : CODE (2)
 1659    00000000 3846                  MOV     t_r0, p
 1660                                   TPUSH_r0
 1660                                   PUSHt_r0        // push t to p, pre decrement p
 1660.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1660.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1660.3                         //      STR     t, [p]
 1660.4                                 ENDM
 1660                                   NEXT
 1660.1                         // ARMv7-M Thumb = .+5
 1660.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1660.3                         // ARMv6-M Thumb = .+4
 1660.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1660                                   NEXT1
 1660.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1660.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1660.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1660.4                         // ARMv6-M Thumb = .+4
 1660.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1660.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1660.7                                 ENDM
 1660.8                                 ENDM
 1660.9                                 ENDM
 1661                           
 1662                           //      RP@ RPAT:       ( -- addr )
 1663                           //      \ -- addr = Current TOP of the Return Stack (r) )
 1664                           //      Place the address of the TOP of the return stack (r)
 1665                           //      on the parameter stack (p) as it was before RP@ was executed.
 1666                           //      e.g.  1 >R  2 >R  RP@  @  .   .   . would type 2  2  1
 1667                            SECTION .text : CONST (2)
 1668                           RPAT_NFA:
 1669    00000000 83                    DC8     0x83
 1670    00000001 5250                  DC8     'RP'
 1671    00000003 C0                    DC8     '@'+0x80
 1672                            ALIGNROM 2,0xFFFFFFFF
 1673    00000004 ........              DC32    SPAT_NFA
 1674                           RPAT:
 1675    00000008 ........              DC32    .+5
 1676                            SECTION .text : CODE (2)
 1677    00000000 3046                  MOV     t_r0, r
 1678                                   TPUSH_r0
 1678                                   PUSHt_r0        // push t to p, pre decrement p
 1678.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1678.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1678.3                         //      STR     t, [p]
 1678.4                                 ENDM
 1678                                   NEXT
 1678.1                         // ARMv7-M Thumb = .+5
 1678.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1678.3                         // ARMv6-M Thumb = .+4
 1678.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1678                                   NEXT1
 1678.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1678.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1678.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1678.4                         // ARMv6-M Thumb = .+4
 1678.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1678.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1678.7                                 ENDM
 1678.8                                 ENDM
 1678.9                                 ENDM
 1679                           
 1680                           //      LEAVE LEAVE:    ( -- )
 1681                           //      Force termination of a DO-LOOP at the next opportunity by setting
 1682                           //      the loop limit equal to the current value of the index. The index
 1683                           //      itself remains unchanged, and execution proceeds until LOOP
 1684                           //      or +LOOP is encountered.
 1685                            SECTION .text : CONST (2)
 1686                           LEAVE_NFA:
 1687    00000000 85                    DC8     0x85
 1688    00000001 4C454156              DC8     'LEAV'
 1689    00000005 C5                    DC8     'E'+0x80
 1690    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1691                           //      DC32    RPSTO_NFA
 1692    00000008 ........              DC32    RPAT_NFA
 1693                           LEAVE:
 1694    0000000C ........              DC32    .+5
 1695                            SECTION .text : CODE (2)
 1696    00000000 3268                  LDR w_r2, [r_r6]       // GET Index
 1697    00000002 7260                  STR w_r2, [r_r6, #4]   // Store it at Limit
 1698                                   NEXT
 1698.1                         // ARMv7-M Thumb = .+5
 1698.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1698.3                         // ARMv6-M Thumb = .+4
 1698.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1698                                   NEXT1
 1698.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1698.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1698.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1698.4                         // ARMv6-M Thumb = .+4
 1698.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1698.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1698.7                                 ENDM
 1698.8                                 ENDM
 1699                           
 1700                           //      R> RFROM:       ( -- n )
 1701                           //      Remove the top value from the return stack and leave it on the
 1702                           //      computation stack. See >R and R.
 1703                            SECTION .text : CONST (2)
 1704                           RFROM_NFA:
 1705    00000000 82                    DC8     0x82
 1706    00000001 52                    DC8     'R'
 1707    00000002 BE                    DC8     '>'+0x80
 1708    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1709    00000004 ........              DC32    LEAVE_NFA
 1710                           RFROM:
 1711    00000008 ........              DC32    .+5
 1712                            SECTION .text : CODE (2)
 1713                                   POPr2t
 1713.1  00000000 56F8040B              LDR     t, [r],#4
 1713.2                         //      LDR     t, [r]
 1713.3                         //      ADDS    r, r, #4
 1713.4                                 ENDM
 1714                                   TPUSH_r0
 1714                                   PUSHt_r0        // push t to p, pre decrement p
 1714.1  00000004 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1714.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1714.3                         //      STR     t, [p]
 1714.4                                 ENDM
 1714                                   NEXT
 1714.1                         // ARMv7-M Thumb = .+5
 1714.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1714.3                         // ARMv6-M Thumb = .+4
 1714.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1714                                   NEXT1
 1714.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1714.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1714.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1714.4                         // ARMv6-M Thumb = .+4
 1714.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1714.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1714.7                                 ENDM
 1714.8                                 ENDM
 1714.9                                 ENDM
 1715                           
 1716                           //      R R:    ( -- n )
 1717                           //      Copy the top of the return stack to the computation stack.
 1718                            SECTION .text : CONST (2)
 1719                           R_NFA:
 1720    00000000 81                    DC8     0x81
 1721    00000001 D2                    DC8     'R'+0x80
 1722    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1723    00000004 ........              DC32    RFROM_NFA
 1724                           R:
 1725    00000008 ........              DC32    .+5
 1726                            SECTION .text : CODE (2)
 1727    00000000 3068                  LDR t_r0, [r]   // Get Index
 1728                                   TPUSH_r0
 1728                                   PUSHt_r0        // push t to p, pre decrement p
 1728.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1728.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1728.3                         //      STR     t, [p]
 1728.4                                 ENDM
 1728                                   NEXT
 1728.1                         // ARMv7-M Thumb = .+5
 1728.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1728.3                         // ARMv6-M Thumb = .+4
 1728.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1728                                   NEXT1
 1728.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1728.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1728.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1728.4                         // ARMv6-M Thumb = .+4
 1728.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1728.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1728.7                                 ENDM
 1728.8                                 ENDM
 1728.9                                 ENDM
 1729                           
 1730                           //      >R TOR: ( n -- )
 1731                           //      Remove a number from the computation stack and place as the most
 1732                           //      accessable on the return stack. Use should be balanced with R> in
 1733                           //      the same definition.
 1734                            SECTION .text : CONST (2)
 1735                           TOR_NFA:
 1736    00000000 82                    DC8     0x82
 1737    00000001 3E                    DC8     '>'
 1738    00000002 D2                    DC8     'R'+0x80
 1739    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1740    00000004 ........              DC32    R_NFA
 1741                           TOR:
 1742    00000008 ........              DC32    .+5
 1743                            SECTION .text : CODE (2)
 1744                                   POP2n_r1   // preserve TOS
 1744.1  00000000 57F8041B              LDR     n, [p],#4
 1744.2                         //      LDR     n, [p]
 1744.3                         //      ADDS    p, p, #4
 1744.4                                 ENDM
 1745                                   PUSHn2r
 1745.1  00000004 46F8041D              STR     n, [r, #-4]!
 1745.2                         //      SUBS    r, r, #4        //  push t to r, pre decrement r
 1745.3                         //      STR     n, [r]
 1745.4                                 ENDM
 1746                           #ifdef TOSCT
 1748                           #endif
 1749                                   NEXT
 1749.1                         // ARMv7-M Thumb = .+5
 1749.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1749.3                         // ARMv6-M Thumb = .+4
 1749.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1749                                   NEXT1
 1749.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1749.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1749.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1749.4                         // ARMv6-M Thumb = .+4
 1749.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1749.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1749.7                                 ENDM
 1749.8                                 ENDM
 1750                           
 1751                           //      OVER OVER:      ( nl n2 -- nl n2 n1 )
 1752                           //      Copy the second stack value, placing it as the new top.
 1753                            SECTION .text : CONST (2)
 1754                           OVER_NFA:
 1755    00000000 84                    DC8     0x84
 1756    00000001 4F5645                DC8     'OVE'
 1757    00000004 D2                    DC8     'R'+0x80
 1758    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1759    00000008 ........              DC32    TOR_NFA
 1760                           OVER:
 1761    0000000C ........              DC32    .+5
 1762                            SECTION .text : CODE (2)
 1763                                   POP2w_r2        // n2
 1763.1  00000000 57F8042B              LDR     w, [p],#4
 1763.2                         //      LDR     w, [p]
 1763.3                         //      ADDS    p, p, #4
 1763.4                                 ENDM
 1764                           #ifdef TOSCT
 1768                           #else
 1769                                   POP2t_r0          // n1
 1769.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 1769.2                         //#ifndef TOSCT
 1769.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1769.4                         //#endif
 1769.5                         //      ADDS    p, p, #4
 1769.6                                 ENDM
 1770                           #endif
 1771                                   PUSHt_r0          // -- n1 )
 1771.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1771.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1771.3                         //      STR     t, [p]
 1771.4                                 ENDM
 1772                                   DPUSH_r0_then_r1  // --  LSW MSW )
 1772                                   PUSHw   // push w to p, post decrement p
 1772.1  0000000C 47F8042D              STR     w, [p, #-4]!
 1772.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1772.3                         //      STR     w, [p]
 1772.4                                 ENDM
 1772                                   TPUSH_r0
 1772                                   PUSHt_r0        // push t to p, pre decrement p
 1772.1  00000010 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1772.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1772.3                         //      STR     t, [p]
 1772.4                                 ENDM
 1772                                   NEXT
 1772.1                         // ARMv7-M Thumb = .+5
 1772.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1772.3                         // ARMv6-M Thumb = .+4
 1772.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1772                                   NEXT1
 1772.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1772.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1772.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1772.4                         // ARMv6-M Thumb = .+4
 1772.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1772.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1772.7                                 ENDM
 1772.8                                 ENDM
 1772.9                                 ENDM
 1772.10                                ENDM
 1773                           
 1774                           //      DROP DROP:      ( n1 -- )
 1775                           //      Drop n1 from the stack.
 1776                            SECTION .text : CONST (2)
 1777                           DROP_NFA:
 1778    00000000 84                    DC8     0x84
 1779    00000001 44524F                DC8     'DRO'
 1780    00000004 D0                    DC8     'P'+0x80
 1781    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1782    00000008 ........              DC32    OVER_NFA
 1783                           DROP:
 1784    0000000C ........              DC32    .+5
 1785                            SECTION .text : CODE (2)
 1786                           #ifdef TOSCT
 1790                           #else // DROP:
 1791                           //  POP2t_r0              // Opt to just do p
 1792    00000000 3F1D            ADDS  p, p, #4
 1793                           #endif
 1794                             NEXT
 1794.1                         // ARMv7-M Thumb = .+5
 1794.2  00000002 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1794.3                         // ARMv6-M Thumb = .+4
 1794.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1794                                   NEXT1
 1794.1  00000006 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1794.2  0000000A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1794.3  0000000E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1794.4                         // ARMv6-M Thumb = .+4
 1794.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1794.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1794.7                                 ENDM
 1794.8                                 ENDM
 1795                           
 1796                           //      SWAP SWAP:      ( nl n2 -- n2 n1 )
 1797                           //      Exchange the top two values On the stack.
 1798                            SECTION .text : CONST (2)
 1799                           SWAP_NFA:
 1800    00000000 84                    DC8     0x84
 1801    00000001 535741                DC8     'SWA'
 1802    00000004 D0                    DC8     'P'+0x80
 1803    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1804    00000008 ........              DC32    DROP_NFA
 1805                           SWAP:
 1806    0000000C ........              DC32    .+5
 1807                            SECTION .text : CODE (2)
 1808                           #ifdef TOSCT
 1812                           #else // SWAP:
 1813                                   POP2w_r2                        // n2
 1813.1  00000000 57F8042B              LDR     w, [p],#4
 1813.2                         //      LDR     w, [p]
 1813.3                         //      ADDS    p, p, #4
 1813.4                                 ENDM
 1814                                   POP2t_r0                        // n1
 1814.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 1814.2                         //#ifndef TOSCT
 1814.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1814.4                         //#endif
 1814.5                         //      ADDS    p, p, #4
 1814.6                                 ENDM
 1815                           #endif
 1816                                   DPUSH_r0_then_r1                //  --  LSW MSW )
 1816                                   PUSHw   // push w to p, post decrement p
 1816.1  00000008 47F8042D              STR     w, [p, #-4]!
 1816.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 1816.3                         //      STR     w, [p]
 1816.4                                 ENDM
 1816                                   TPUSH_r0
 1816                                   PUSHt_r0        // push t to p, pre decrement p
 1816.1  0000000C 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1816.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1816.3                         //      STR     t, [p]
 1816.4                                 ENDM
 1816                                   NEXT
 1816.1                         // ARMv7-M Thumb = .+5
 1816.2  00000010 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1816.3                         // ARMv6-M Thumb = .+4
 1816.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1816                                   NEXT1
 1816.1  00000014 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1816.2  00000018 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1816.3  0000001C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1816.4                         // ARMv6-M Thumb = .+4
 1816.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1816.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1816.7                                 ENDM
 1816.8                                 ENDM
 1816.9                                 ENDM
 1816.10                                ENDM
 1817                           
 1818                           //      DUP DUP:        ( n1 -- n1 n1 )
 1819                           //      Duplicate the value n1 on the stack.
 1820                            SECTION .text : CONST (2)
 1821                           DUP_NFA:
 1822    00000000 83                    DC8     0x83
 1823    00000001 4455                  DC8     'DU'
 1824    00000003 D0                    DC8     'P'+0x80
 1825                            ALIGNROM 2,0xFFFFFFFF
 1826    00000004 ........              DC32    SWAP_NFA
 1827                           DUP:
 1828    00000008 ........              DC32    .+5
 1829                            SECTION .text : CODE (2)
 1830                           //#ifdef TOSCT
 1831                           // NO NEED TO REFRESH t ?
 1832                           //#else DUP:
 1833                           // OPT by picking pops
 1834    00000000 3868                  LDR t_r0, [p] //t_r0 p_r7
 1835                           //#endif
 1836                                   TPUSH_r0      // push t to p, pre decrement p
 1836                                   PUSHt_r0        // push t to p, pre decrement p
 1836.1  00000002 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1836.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1836.3                         //      STR     t, [p]
 1836.4                                 ENDM
 1836                                   NEXT
 1836.1                         // ARMv7-M Thumb = .+5
 1836.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1836.3                         // ARMv6-M Thumb = .+4
 1836.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1836                                   NEXT1
 1836.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1836.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1836.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1836.4                         // ARMv6-M Thumb = .+4
 1836.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1836.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1836.7                                 ENDM
 1836.8                                 ENDM
 1836.9                                 ENDM
 1837                           
 1838                           //=============================== WORDCAT ====================================//
 1839                           //NOEXEC HEADERFORWORDCATEGORIES
 1840                           //      WC_STACK_NFA = Stack Stuff: CATEGORY
 1841                           
 1842                            SECTION .text : CONST (2)
 1843                           WC_STACK_NFA:
 1844    00000000 90                    DC8     0x80+4+12
 1845    00000001 0D0A            DC8 0x0D, 0x0A
 1846    00000003 537461636B205         DC8     'Stack Stuff:'
                  3747566663A  
 1847    0000000F 0D8A            DC8 0x0D, 0x0A+0x80
 1848    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1849    00000014 ........        DC32  DUP_NFA
 1850                           
 1851                           //      CMOVE CMOVE:    ( from to count -- )
 1852                           //      Move the specified quantity of bytes beginning at address from to
 1853                           //      address to. The contents of address from is moved first proceeding
 1854                           //      toward high memory. Further specification is necessary on word
 1855                           //      addressing computers.
 1856                            SECTION .text : CONST (2)
 1857                           CMOVE_NFA:
 1858    00000000 85                    DC8     0x85
 1859    00000001 434D4F56              DC8     'CMOV'
 1860    00000005 C5                    DC8     'E'+0x80
 1861    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1862    00000008 ........              DC32    WC_STACK_NFA
 1863                           CMOVE:
 1864    0000000C ........              DC32    .+5
 1865                            SECTION .text : CODE (2)
 1866                                   POP2n_r1        //    ldr       n, [p],#4       //COUNT
 1866.1  00000000 57F8041B              LDR     n, [p],#4
 1866.2                         //      LDR     n, [p]
 1866.3                         //      ADDS    p, p, #4
 1866.4                                 ENDM
 1867                                   POP2w_r2        //    ldr       w_r2, [p],#4    //DEST
 1867.1  00000004 57F8042B              LDR     w, [p],#4
 1867.2                         //      LDR     w, [p]
 1867.3                         //      ADDS    p, p, #4
 1867.4                                 ENDM
 1868                                   POP2x           //    ldr       x, [p],#4       //SOURCE
 1868.1  00000008 57F8043B              LDR     x, [p],#4
 1868.2                         //      LDR     x, [p]
 1868.3                         //      ADDS    p, p, #4
 1868.4                                 ENDM
 1869    0000000C 0029                  CMP n_r1, #0
 1870    0000000E 07D0                  BEQ CM2
 1871                           CM1:
 1872                           //not for THUMB
 1873                           //strcpy  LDRB R2, [R1], #1
 1874                           //  STRB R2, [R0], #1
 1875                           //  TST R2, R2      // repeat if R2 is nonzero
 1876                           //  BNE strcpy
 1877    00000010 1878                  LDRB  t_r0, [x]
 1878    00000012 1070                  STRB  t_r0, [w]
 1879    00000014 491E                  SUBS  n_r1, n_r1, #1
 1880    00000016 0029                  CMP n_r1, #0
 1881    00000018 02D0                  BEQ CM2
 1882                           
 1883    0000001A 521C                  ADDS    w_r2, w_r2, #1
 1884    0000001C 5B1C                  ADDS    x_r3, x_r3, #1
 1885    0000001E F7D1                  BNE CM1
 1886                           CM2:
 1887                           #ifdef TOSCT
 1889                           #endif
 1890                                   NEXT
 1890.1                         // ARMv7-M Thumb = .+5
 1890.2  00000020 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1890.3                         // ARMv6-M Thumb = .+4
 1890.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1890                                   NEXT1
 1890.1  00000024 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1890.2  00000028 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1890.3  0000002C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1890.4                         // ARMv6-M Thumb = .+4
 1890.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1890.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1890.7                                 ENDM
 1890.8                                 ENDM
 1891                           
 1892                           //      FILL FILL:      ( addr quan b -- )
 1893                           //      Fill memory at the address with the specified quantity of bytes b.
 1894                            SECTION .text : CONST (2)
 1895                           FILL_NFA:
 1896    00000000 84                    DC8     0x84
 1897    00000001 46494C                DC8     'FIL'
 1898    00000004 CC                    DC8     'L'+0x80
 1899    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1900    00000008 ........              DC32    CMOVE_NFA
 1901                           FILL:
 1902    0000000C ........              DC32    .+5
 1903                            SECTION .text : CODE (2)
 1904                                   POP2t_r0                // Fill CHAR
 1904.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 1904.2                         //#ifndef TOSCT
 1904.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1904.4                         //#endif
 1904.5                         //      ADDS    p, p, #4
 1904.6                                 ENDM
 1905                                   POP2n_r1                // Fill COUNT
 1905.1  00000004 57F8041B              LDR     n, [p],#4
 1905.2                         //      LDR     n, [p]
 1905.3                         //      ADDS    p, p, #4
 1905.4                                 ENDM
 1906                                   POP2w_r2                // Beginning ADDR
 1906.1  00000008 57F8042B              LDR     w, [p],#4
 1906.2                         //      LDR     w, [p]
 1906.3                         //      ADDS    p, p, #4
 1906.4                                 ENDM
 1907    0000000C 0029                  CMP   n_r1, #0
 1908    0000000E 04D0                  BEQ   FEND            // Count is zero
 1909    00000010 8B18                  ADDS  x, n, w
 1910                           FLOOP:
 1911    00000012 1070                  STRB    t_r0, [w]
 1912    00000014 521C                  ADDS    w_r2, w_r2, #1
 1913    00000016 9A42                  CMP   w_r2, x
 1914    00000018 FBD1                  BNE   FLOOP
 1915                           FEND:
 1916                           #ifdef TOSCT
 1918                           #endif
 1919                                   NEXT
 1919.1                         // ARMv7-M Thumb = .+5
 1919.2  0000001A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1919.3                         // ARMv6-M Thumb = .+4
 1919.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1919                                   NEXT1
 1919.1  0000001E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1919.2  00000022 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1919.3  00000026 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1919.4                         // ARMv6-M Thumb = .+4
 1919.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1919.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1919.7                                 ENDM
 1919.8                                 ENDM
 1920                           
 1921                           //      ERASE ERASE:    ( addr n -- )
 1922                           //      Clear a region of memory to zero from addr over n addresses.
 1923                            SECTION .text : CONST (2)
 1924                           ERASE_NFA:
 1925    00000000 85                    DC8     0x85
 1926    00000001 45524153              DC8     'ERAS'
 1927    00000005 C5                    DC8     'E'+0x80
 1928    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1929    00000008 ........              DC32    FILL_NFA
 1930                           ERASE:
 1931    0000000C ........              DC32    DOCOL
 1932    00000010 ........              DC32    ZERO
 1933    00000014 ........              DC32    FILL
 1934    00000018 ........              DC32    SEMIS
 1935                           
 1936                           //      BLANKS BLANKS:  ( addr count -- )
 1937                           //      Fill an area of memory beginning at addr with blanks (0x20).
 1938                            SECTION .text : CONST (2)
 1939                           BLANKS_NFA:
 1940    00000000 86                    DC8     0x86
 1941    00000001 424C414E4B            DC8     'BLANK'
 1942    00000006 D3                    DC8     'S'+0x80
 1943    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1944    00000008 ........              DC32    ERASE_NFA
 1945                           BLANKS:
 1946    0000000C ........              DC32    DOCOL
 1947    00000010 ........              DC32    BLANK
 1948    00000014 ........              DC32    FILL
 1949    00000018 ........              DC32    SEMIS
 1950                           
 1951                           //      +! PSTORE:      ( n addr -- )
 1952                           //      Add n to the value at the address.
 1953                           //      Pronounced Plus Store
 1954                            SECTION .text : CONST (2)
 1955                           PSTORE_NFA:
 1956    00000000 82                    DC8     0x82
 1957    00000001 2B                    DC8     '+'
 1958    00000002 A1                    DC8     '!'+0x80
 1959    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1960    00000004 ........              DC32    BLANKS_NFA
 1961                           PSTORE:
 1962    00000008 ........              DC32    .+5
 1963                            SECTION .text : CODE (2)
 1964                                   POP2n_r1                              // ADDRESS
 1964.1  00000000 57F8041B              LDR     n, [p],#4
 1964.2                         //      LDR     n, [p]
 1964.3                         //      ADDS    p, p, #4
 1964.4                                 ENDM
 1965                           #ifdef TOSCT
 1967                           #endif
 1968                                   POP2t_r0                        // INCREMENT
 1968.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 1968.2                         //#ifndef TOSCT
 1968.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 1968.4                         //#endif
 1968.5                         //      ADDS    p, p, #4
 1968.6                                 ENDM
 1969    00000008 0A68                  LDR   w_r2, [n_r1]
 1970    0000000A 8018                  ADDS  t_r0, t_r0, w_r2
 1971    0000000C 0860                  STR   t_r0, [n_r1]
 1972                                   NEXT
 1972.1                         // ARMv7-M Thumb = .+5
 1972.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1972.3                         // ARMv6-M Thumb = .+4
 1972.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1972                                   NEXT1
 1972.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1972.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1972.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1972.4                         // ARMv6-M Thumb = .+4
 1972.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1972.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1972.7                                 ENDM
 1972.8                                 ENDM
 1973                           
 1974                           //      @ AT:   ( addr -- n )
 1975                           //      Read 32 bit contents of address to TOS.
 1976                           //      Pronounced Fetch, as in Fetch word at addr.
 1977                            SECTION .text : CONST (2)
 1978                           AT_NFA:
 1979    00000000 81                    DC8     0x81
 1980    00000001 C0                    DC8     '@'+0x80 //C0H
 1981    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1982                           //      DC32    TOGGLE_NFA
 1983    00000004 ........              DC32    PSTORE_NFA
 1984                           AT:
 1985    00000008 ........              DC32    .+5
 1986                            SECTION .text : CODE (2)
 1987                           //#ifdef TOSCT
 1988                           //        LDR     t_r0, [t_r0]
 1989                           //        STR     t_r0, [p]
 1990                           //        NEXT
 1991                           //#else AT:
 1992                                   POP2n_r1
 1992.1  00000000 57F8041B              LDR     n, [p],#4
 1992.2                         //      LDR     n, [p]
 1992.3                         //      ADDS    p, p, #4
 1992.4                                 ENDM
 1993    00000004 0868                  LDR     t_r0, [n_r1]
 1994                                   TPUSH_r0
 1994                                   PUSHt_r0        // push t to p, pre decrement p
 1994.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 1994.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 1994.3                         //      STR     t, [p]
 1994.4                                 ENDM
 1994                                   NEXT
 1994.1                         // ARMv7-M Thumb = .+5
 1994.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 1994.3                         // ARMv6-M Thumb = .+4
 1994.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 1994                                   NEXT1
 1994.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 1994.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 1994.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 1994.4                         // ARMv6-M Thumb = .+4
 1994.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1994.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1994.7                                 ENDM
 1994.8                                 ENDM
 1994.9                                 ENDM
 1995                           //#endif
 1996                           
 1997                           //      C@ CAT: ( addr -- b )
 1998                           //      Leave the 8 bit contents of addr on the stack.
 1999                           //      Pronounced "Char Fetch", as in Fetch byte at addr.
 2000                           
 2001                            SECTION .text : CONST (2)
 2002                           CAT_NFA:
 2003    00000000 82                    DC8     0x82
 2004    00000001 43                    DC8     'C'
 2005    00000002 C0                    DC8     '@'+0x80 //C0H
 2006    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2007    00000004 ........              DC32    AT_NFA
 2008                           CAT:
 2009    00000008 ........              DC32    .+5
 2010                            SECTION .text : CODE (2)
 2011                                   POP2n_r1
 2011.1  00000000 57F8041B              LDR     n, [p],#4
 2011.2                         //      LDR     n, [p]
 2011.3                         //      ADDS    p, p, #4
 2011.4                                 ENDM
 2012    00000004 0878                  LDRB    t_r0, [n]
 2013                                   TPUSH_r0
 2013                                   PUSHt_r0        // push t to p, pre decrement p
 2013.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 2013.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 2013.3                         //      STR     t, [p]
 2013.4                                 ENDM
 2013                                   NEXT
 2013.1                         // ARMv7-M Thumb = .+5
 2013.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 2013.3                         // ARMv6-M Thumb = .+4
 2013.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 2013                                   NEXT1
 2013.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 2013.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 2013.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 2013.4                         // ARMv6-M Thumb = .+4
 2013.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2013.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2013.7                                 ENDM
 2013.8                                 ENDM
 2013.9                                 ENDM
 2014                           
 2015                           
 2016                           //      ! STORE:        ( n addr -- )
 2017                           //      Store n at address. Pronounced "Store".
 2018                           
 2019                            SECTION .text : CONST (2)
 2020                           STORE_NFA:
 2021    00000000 81                    DC8     0x81
 2022    00000001 A1                    DC8     '!'+0x80
 2023    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2024    00000004 ........              DC32    CAT_NFA
 2025                           STORE:
 2026    00000008 ........              DC32    .+5
 2027                            SECTION .text : CODE (2)
 2028                                   POP2t_r0        // ADDR t_r0
 2028.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 2028.2                         //#ifndef TOSCT
 2028.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 2028.4                         //#endif
 2028.5                         //      ADDS    p, p, #4
 2028.6                                 ENDM
 2029                                   POP2n_r1        // DATA n_r1
 2029.1  00000004 57F8041B              LDR     n, [p],#4
 2029.2                         //      LDR     n, [p]
 2029.3                         //      ADDS    p, p, #4
 2029.4                                 ENDM
 2030    00000008 0160                  STR     n_r1, [t_r0]
 2031                                   NEXT
 2031.1                         // ARMv7-M Thumb = .+5
 2031.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 2031.3                         // ARMv6-M Thumb = .+4
 2031.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 2031                                   NEXT1
 2031.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 2031.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 2031.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 2031.4                         // ARMv6-M Thumb = .+4
 2031.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2031.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2031.7                                 ENDM
 2031.8                                 ENDM
 2032                           
 2033                           
 2034                           //      C! CSTORE:      ( n addr -- )
 2035                           //      Store LS 8 bits of n at address. Pronounced "Char Store".
 2036                           
 2037                            SECTION .text : CONST (2)
 2038                           CSTORE_NFA:
 2039    00000000 82                    DC8     0x82
 2040    00000001 43                    DC8     'C'
 2041    00000002 A1                    DC8     '!'+0x80
 2042    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2043    00000004 ........              DC32    STORE_NFA
 2044                           CSTORE:
 2045    00000008 ........              DC32    .+5
 2046                            SECTION .text : CODE (2)
 2047                                   POP2t_r0
 2047.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 2047.2                         //#ifndef TOSCT
 2047.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 2047.4                         //#endif
 2047.5                         //      ADDS    p, p, #4
 2047.6                                 ENDM
 2048                                   POP2n_r1
 2048.1  00000004 57F8041B              LDR     n, [p],#4
 2048.2                         //      LDR     n, [p]
 2048.3                         //      ADDS    p, p, #4
 2048.4                                 ENDM
 2049    00000008 0170                  STRB    n_r1, [t_r0]
 2050                                   NEXT
 2050.1                         // ARMv7-M Thumb = .+5
 2050.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 2050.3                         // ARMv6-M Thumb = .+4
 2050.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 2050                                   NEXT1
 2050.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 2050.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 2050.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 2050.4                         // ARMv6-M Thumb = .+4
 2050.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2050.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2050.7                                 ENDM
 2050.8                                 ENDM
 2051                           
 2052                           
 2053                           //=============================== WORDCAT ====================================//
 2054                           //NOEXEC HEADERFORWORDCATEGORIES
 2055                           //      WC_RWMEMORY_NFA = Read and Write Memory With: CATEGORY
 2056                           
 2057                            SECTION .text : CONST (2)
 2058                           WC_RWMEMORY_NFA:
 2059    00000000 9F                    DC8     0x80+31
 2060    00000001 0D0A                  DC8     0x0D, 0x0A
 2061    00000003 5265616420616         DC8     'Read and Write Memory With:'
                  E642057726974
                  65204D656D6F7
                  2792057697468
                  3A           
 2062    0000001E 0D8A                  DC8     0x0D, 0x0A+0x80
 2063                            ALIGNROM 2,0xFFFFFFFF
 2064    00000020 ........              DC32    CSTORE_NFA
 2065                           
 2066                           
 2067                           //      ] RBRAC:        ( -- )
 2068                           //      Resume compilation, by STATE back to 0xC0 (zero is interpreting)
 2069                           //      0xC0 STATE  used in INTERPRET to execute Immediate words while compiling
 2070                           //      See [.
 2071                           
 2072                            SECTION .text : CONST (2)
 2073                           RBRAC_NFA:
 2074    00000000 81                    DC8     0x81
 2075    00000001 DD                    DC8     ']'+0x80
 2076    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2077                           //      DC32    SMUDGE_NFA
 2078    00000004 ........              DC32    WC_RWMEMORY_NFA
 2079                           RBRAC:
 2080    00000008 ........              DC32    DOCOL
 2081    0000000C ........C0000         DC32    strva, 0xC0, CSTATE
                  000........  
 2082    00000018 ........              DC32    SEMIS
 2083                           
 2084                           
 2085                           //      [ LBRAC:        ( -- ) IMMEDIATE
 2086                           //      Used in a colon-definition in form
 2087                           //              xxx    [  words   ]    more
 2088                           //      Suspend compilation by setting STATE to zero (0xC0 is compiling).
 2089                           //      The words after [ are executed, not compiled. This allows calculation
 2090                           //      or compilation exceptions before resuming compilation with ] .
 2091                           //      See LITERAL and ]
 2092                           
 2093                            SECTION .text : CONST (2)
 2094                           LBRAC_NFA:
 2095    00000000 C1                    DC8     0x0C1
 2096    00000001 DB                    DC8     '['+0x80
 2097    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2098    00000004 ........              DC32    RBRAC_NFA
 2099                           LBRAC:
 2100    00000008 ........              DC32    DOCOL
 2101    0000000C ........00000         DC32    strva, 0, CSTATE
                  000........  
 2102    00000018 ........              DC32    SEMIS
 2103                           
 2104                           
 2105                           //      [COMPILE] BCOMP:        ( -- ) IMMEDIATE
 2106                           //      Used in a colon-definition in form:
 2107                           //              :  xxx    [COMPILE]   immediate_word   ;
 2108                           //      [COMPILE] will force the compilation of an IMMEDIATE WORD
 2109                           //      that would otherwise execute during compilation. The above example
 2110                           //      will select the FORTH vocabulary then xxx executes, rather than at
 2111                           //      compile time.
 2112                           
 2113                            SECTION .text : CONST (2)
 2114                           BCOMP_NFA:
 2115    00000000 C9                    DC8     0x0C9
 2116    00000001 5B434F4D50494         DC8     '[COMPILE'
                  C45          
 2117    00000009 DD                    DC8     ']'+0x80
 2118    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 2119    0000000C ........              DC32    LBRAC_NFA
 2120                           BCOMP:
 2121    00000010 ........              DC32    DOCOL
 2122    00000014 ........              DC32    DFIND   // no-op there for TIB entry
 2123                           //      -FIND \ --- pfa len tf (found) \ --- ff (not found)
 2124    00000018 ........              DC32    ZEQU
 2125    0000001C .............         DC32    LIT, msg_qstack
                  ...          
 2126    00000024 ........              DC32    QERROR    // \ f nullstr-addr --
 2127    00000028 ........              DC32    DROP
 2128    0000002C ........              DC32    CFA
 2129    00000030 ........              DC32    COMMA   // alighned, INCREMENTS DP REFLECTED by HERE
 2130    00000034 ........              DC32    SEMIS
 2131                           
 2132                           
 2133                           //      DLITERAL DLITERAL:      ( d -- d ) IMMEDIATE
 2134                           //                              ( d -- )   (compiling)
 2135                           //      If compiling, compile a stack double number into a literal. Later
 2136                           //      execution of the definition containing the literal will push it to
 2137                           //      the stack. If executing, the number will remain on the stack.
 2138                           //      : xxx    [ calculate ]  DLITERAL  ; //
 2139                           
 2140                            SECTION .text : CONST (2)
 2141                           DLITERAL_NFA:
 2142    00000000 C8                    DC8     0x0C8
 2143    00000001 444C495445524         DC8     'DLITERA'
                  1            
 2144    00000008 CC                    DC8     'L'+0x80
 2145    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2146    0000000C ........              DC32    BCOMP_NFA
 2147                           DLITERAL:
 2148    00000010 ........              DC32    DOCOL
 2149    00000014 ........              DC32    STATE_SV
 2150    00000018 ........              DC32    AT
 2151    0000001C ........              DC32    ZBRAN   // IF
 2152    00000020 10000000              DC32     DLIT1-.
 2153                           
 2154    00000024 ........              DC32    SWAP
 2155    00000028 ........              DC32    LITERAL
 2156    0000002C ........              DC32    LITERAL // endif
 2157                           DLIT1:
 2158    00000030 ........              DC32    SEMIS
 2159                           
 2160                           
 2161                           //      LITERAL LITERAL:        ( n -- ) IMMEDIATE
 2162                           //      If compiling, then compile the stack value n as a 32 bit literal.
 2163                           //      This definition is immediate so that it will execute during a colon
 2164                           //      definition. The intended use is:
 2165                           //      : xxx    [ calculate ]  LITERAL  ; //
 2166                           //      Compilation is suspended for the compile time calculation of value.
 2167                           //      Compilation is resumed and LITERAL compiles this value.
 2168                           
 2169                            SECTION .text : CONST (2)
 2170                           LITERAL_NFA:
 2171    00000000 C7                    DC8     0x0C7
 2172    00000001 4C4954455241          DC8     'LITERA'
 2173    00000007 CC                    DC8     'L'+0x80
 2174                            ALIGNROM 2,0xFFFFFFFF
 2175    00000008 ........              DC32    DLITERAL_NFA
 2176                           LITERAL:
 2177    0000000C ........              DC32    DOCOL
 2178    00000010 ........              DC32    STATE_SV
 2179    00000014 ........              DC32    AT
 2180    00000018 ........              DC32    ZBRAN           // If not compiling
 2181    0000001C 10000000              DC32     LITE1-.        // go here
 2182                           
 2183    00000020 ........              DC32    COMP            // Compile
 2184    00000024 ........              DC32    LIT             // Literal
 2185    00000028 ........              DC32    COMMA           // Then COMPILE THE LITERAL VALUE
 2186                           LITE1:
 2187    0000002C ........              DC32    SEMIS
 2188                           
 2189                           
 2190                           //      #> EDIGS:       ( d=(LSW MSW) -- addr count )
 2191                           //      Terminates numeric output conversion by dropping dnum,
 2192                           //      leaving the text address and character count suitable for type.
 2193                           
 2194                            SECTION .text : CONST (2)
 2195                           EDIGS_NFA:
 2196    00000000 82                    DC8     0x82
 2197    00000001 23                    DC8     '#'
 2198    00000002 BE                    DC8     '>'+0x80
 2199    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2200    00000004 ........              DC32    LITERAL_NFA
 2201                           EDIGS:
 2202    00000008 ........              DC32    DOCOL
 2203    0000000C ........              DC32    DROP
 2204    00000010 ........              DC32    DROP
 2205    00000014 ........              DC32    HLD_SV
 2206    00000018 ........              DC32    AT
 2207    0000001C ........              DC32    PAD_SV
 2208    00000020 ........              DC32    OVER
 2209    00000024 ........              DC32    SUBB
 2210    00000028 ........              DC32    SEMIS
 2211                           
 2212                           
 2213                           //      HOLD HOLD:      ( c -- )
 2214                           //      Used between <# and #> to insert an ascii character into a pictured
 2215                           //      numeric output string.
 2216                           //      e.g. 0x2E HOLD will place a decimal point.
 2217                           
 2218                            SECTION .text : CONST (2)
 2219                           HOLD_NFA:
 2220    00000000 84                    DC8     0x84
 2221    00000001 484F4C                DC8     'HOL'
 2222    00000004 C4                    DC8     'D'+0x80
 2223    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2224    00000008 ........              DC32    EDIGS_NFA
 2225                           HOLD:
 2226    0000000C ........              DC32    DOCOL
 2227    00000010 ........FFFFF         DC32    LIT,-1
                  FFF          
 2228    00000018 ........              DC32    HLD_SV
 2229    0000001C ........              DC32    PSTORE
 2230    00000020 ........              DC32    HLD_SV
 2231    00000024 ........              DC32    AT
 2232    00000028 ........              DC32    CSTORE
 2233    0000002C ........              DC32    SEMIS
 2234                           
 2235                           
 2236                           //      SIGN SIGN:      ( n d=<LSW MSW> -- d=<LSW MSW> )
 2237                           //      Place an ascii "-" sign just before a converted numeric output
 2238                           //      string in the text output buffer when n is negative. n is discarded
 2239                           //      but double number dnum is maintained. Must be used between <# and #>.
 2240                           
 2241                            SECTION .text : CONST (2)
 2242                           SIGN_NFA:
 2243    00000000 84                    DC8     0x84
 2244    00000001 534947                DC8     'SIG'
 2245    00000004 CE                    DC8     'N'+0x80
 2246    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2247    00000008 ........              DC32    HOLD_NFA
 2248                           SIGN:
 2249    0000000C ........              DC32    DOCOL
 2250    00000010 ........              DC32    ROT
 2251    00000014 ........              DC32    ZLESS
 2252    00000018 ........              DC32    ZBRAN           // If
 2253    0000001C 10000000              DC32     SIGN1-.
 2254                           
 2255    00000020 ........2D000         DC32    LIT, '-'        // 0x2D
                  000          
 2256    00000028 ........              DC32    HOLD            // Endif
 2257                           SIGN1:
 2258    0000002C ........              DC32    SEMIS
 2259                           
 2260                           
 2261                           //      #S DIGS:        ( d1=<LSW MSW> -- d2=<LSW MSW> )
 2262                           //      Generates ascii text in the text output buffer, by the use of #,
 2263                           //      until a zero double number d2 results.
 2264                           //      Used between <# and #>.
 2265                           //      EACH NUMBER = BASE*number+(character-'0')
 2266                           
 2267                            SECTION .text : CONST (2)
 2268                           DIGS_NFA:
 2269    00000000 82                    DC8     0x82
 2270    00000001 23                    DC8     '#'
 2271    00000002 D3                    DC8     'S'+0x80
 2272    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2273    00000004 ........              DC32    SIGN_NFA
 2274                           DIGS:
 2275    00000008 ........              DC32    DOCOL
 2276                           DIGS1:                          // Begin generating ascii chars by DIG
 2277    0000000C ........              DC32    DIG             //\ d1=<LSW MSW> -- d2=QUO=<LSW MSW>
 2278    00000010 ........              DC32    OVER
 2279    00000014 ........              DC32    OVER
 2280    00000018 ........              DC32    OR
 2281    0000001C ........              DC32    ZEQU
 2282    00000020 ........              DC32    ZBRAN           //UNTIL
 2283    00000024 E8FFFFFF              DC32     DIGS1-.
 2284    00000028 ........              DC32    SEMIS
 2285                           
 2286                           
 2287                           //      # DIG:  ( d1=<LSW MSW> -- d2=QUO=<LSW MSW> ) BASE MUST BE SET!
 2288                           //      Generate from a double number d1, the next ascii character which is
 2289                           //      placed in an output string. Result d2 is the quotient after division
 2290                           //      by base, and is maintained for further processing.
 2291                           //      Used between <# and #>.
 2292                           //      See #S.
 2293                           //      EACH NUMBER = BASE*number+(character-'0')
 2294                           
 2295                            SECTION .text : CONST (2)
 2296                           DIG_NFA:
 2297    00000000 81                    DC8     0x81
 2298    00000001 A3                    DC8     '#'+0x80
 2299    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2300    00000004 ........              DC32    DIGS_NFA
 2301                           DIG:
 2302    00000008 ........              DC32    DOCOL
 2303    0000000C ........              DC32    BASE_SV         // EX 0 1 0
 2304    00000010 ........              DC32    AT              // -- 0 1 0 A
 2305    00000014 ........              DC32    MSMOD           // -- 0 1 0 0
 2306    00000018 ........              DC32    ROT             // -- 0 0 0 1
 2307    0000001C ........09000         DC32    LIT,9
                  000          
 2308    00000024 ........              DC32    OVER
 2309    00000028 ........              DC32    LESSTHAN
 2310    0000002C ........              DC32    ZBRAN           // If
 2311    00000030 10000000              DC32     DIG1-.
 2312                           
 2313    00000034 ........07000         DC32    LIT,7
                  000          
 2314    0000003C ........              DC32    PLUS            // Endif
 2315                           DIG1:
 2316    00000040 ........30000         DC32    LIT, 0x30
                  000          
 2317    00000048 ........              DC32    PLUS
 2318    0000004C ........              DC32    HOLD
 2319    00000050 ........              DC32    SEMIS
 2320                           
 2321                           
 2322                           //      <# BDIGS:       ( -- )
 2323                           //      Setup for pictured numeric output formatting using the words:
 2324                           //              <# # #S SIGN HOLD #>
 2325                           //      The conversion is done on a double number producing text at Pad
 2326                           
 2327                            SECTION .text : CONST (2)
 2328                           BDIGS_NFA:
 2329    00000000 82                    DC8     0x82
 2330    00000001 3C                    DC8     '<'
 2331    00000002 A3                    DC8     '#'+0x80
 2332    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2333    00000004 ........              DC32    DIG_NFA
 2334                           BDIGS:
 2335    00000008 ........              DC32    DOCOL
 2336    0000000C .............         DC32    strva, PAD, NHLD
                  ...........  
 2337    00000018 ........              DC32    SEMIS
 2338                           
 2339                           
 2340                           //      DOES> DOES:     ( pfa -- ) MODIFIED:
 2341                           //      A word which defines the run-time action within a high-level
 2342                           //      defining word. DOES> alters the code field and first parameter of
 2343                           //      the new word to execute the sequence of compiled word addresses
 2344                           //      following DOES>. Used in combination with <BUILDS. When the DOES>
 2345                           //      part executes it begins with the address of the first parameter of
 2346                           //      the new word on the stack. This allows interpretation using this
 2347                           //      area or its contents. Typical uses include the Forth assembler,
 2348                           //      multidimensional arrays, and compiler generation.
 2349                           
 2350                            SECTION .text : CONST (2)
 2351                           DOES_NFA:
 2352    00000000 85                    DC8     0x85
 2353    00000001 444F4553              DC8     'DOES'
 2354    00000005 BE                    DC8     '>'+0x80
 2355    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2356    00000008 ........              DC32    BDIGS_NFA
 2357                           DOES:
 2358    0000000C ........              DC32    DOCOL
 2359    00000010 ........              DC32    RFROM   // Get the addr of the first word after DOES>
 2360    00000014 ........              DC32    LATEST  // ( -- addr ) nfa OF the current <creator> word
 2361    00000018 ........              DC32    PFA     // Use the pfa to store a run-time cfa
 2362    0000001C .............         DC32    DUP, CFA
                  ...          
 2363    00000024 .............         DC32    LIT, CREATE_DOES_GOTO
                  ...          
 2364    0000002C .............         DC32    SWAP, STORE     // STORE GOTO
                  ...          
 2365    00000034 ........              DC32    STORE   // Store the run-time cfa as 1rst pfa Parameter.
 2366    00000038 ........              DC32    SEMIS
 2367                           
 2368                           
 2369                           //      <BUILDS BUILDS: ( -- )  MODIFIED: See CREATE and DOES>
 2370                           //      Used within a colon-definition
 2371                           //              CCcc  <BUILDS  ...  DOES>     ...
 2372                           //      Each time CCcc is executed, <BUILDS defines a new word with a
 2373                           //      high-level execution proceedure. Executing CCcc in the form
 2374                           //              CCcc nnnn
 2375                           //      uses <BUILDS to create a dictionary entry for nnnn with a call to
 2376                           //      the DOES> part for nnnn. When nnnn is later executed, it has the
 2377                           //      address of its parameter area on the stack and executes the words
 2378                           //      after DOES> in CCcc. <BUILDS and DOES> allow runtime proceedures to
 2379                           //      written in high-level code.
 2380                           
 2381                            SECTION .text : CONST (2)
 2382                           BUILDS_NFA:
 2383    00000000 87                    DC8     0x87
 2384    00000001 3C4255494C44          DC8     '<BUILD'
 2385    00000007 D3                    DC8     'S'+0x80
 2386                            ALIGNROM 2,0xFFFFFFFF
 2387    00000008 ........              DC32    DOES_NFA
 2388                           BUILDS:
 2389    0000000C ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 2390    00000010 ........              DC32    CREATE                  // CREATE's A CON POINTING TO IT'S PFA
 2391    00000014 ........              DC32    SEMIS
 2392                           
 2393                           
 2394                           //      +LOOP PLOOP:    ( n1 -- ) IMMEDIATE
 2395                           //                      ( addr n2 -- ) COMPILE
 2396                           //      At run time, DO begins a sequence with repetitive execution
 2397                           //      controlled by a loop limit n1 and an index with initial value n2. DO
 2398                           //      removes these from the stack. Upon reaching LOOP the index is
 2399                           //      incremented by one.
 2400                           //      Until the new index equals or exceeds the limit, execution loops
 2401                           //      back to just after DO// otherwise the loop parameters are discarded
 2402                           //      and execution continues ahead. Both n1 and n2 are determined at
 2403                           //      run-time and may be the result of other operations.
 2404                           //      Within a loop 'I' will copy the current value of the index to the
 2405                           //      stack. See I, LOOP, +LOOP, LEAVE.
 2406                           //
 2407                           //      When compiling within the colon definition, DO compiles (DO), leaves
 2408                           //      the following address addr and n for later error checking.
 2409                           
 2410                            SECTION .text : CONST (2)
 2411                           PLOOP_NFA:
 2412    00000000 C5                    DC8     0x0C5
 2413    00000001 2B4C4F4F              DC8     '+LOO'
 2414    00000005 D0                    DC8     'P'+0x80
 2415    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2416    00000008 ........              DC32    BUILDS_NFA
 2417                           PLOOP:
 2418    0000000C ........              DC32    DOCOL
 2419    00000010 ........              DC32    THREE
 2420    00000014 ........              DC32    QPAIR
 2421    00000018 ........              DC32    COMP
 2422    0000001C ........              DC32    XPLOOP
 2423    00000020 ........              DC32    BACK
 2424    00000024 ........              DC32    SEMIS
 2425                           
 2426                           
 2427                           //      LOOP LOOP:      ( addr n -- ) IMMEDIATE
 2428                           //      Occurs in a colon-definition in form:
 2429                           //              DO ... LOOP
 2430                           //      At run-time, LOOP selectively controls branching back to the
 2431                           //      corresponding DO based on the loop index and limit. The loop index
 2432                           //      is incremented by one and compared to the limit. The branch back to
 2433                           //      DO occurs until the index equals or exceeds the limit, then
 2434                           //      the parameters are discarded and execution continues ahead.
 2435                           //
 2436                           //      At compile-time. LOOP compiles (LOOP) and uses addr to calculate an
 2437                           //      offset to DO. n is used for error testing.
 2438                           
 2439                            SECTION .text : CONST (2)
 2440                           LOOP_NFA:
 2441    00000000 C4                    DC8     0x0C4
 2442    00000001 4C4F4F                DC8     'LOO'
 2443    00000004 D0                    DC8     'P'+0x80
 2444    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2445    00000008 ........              DC32    PLOOP_NFA
 2446                           LOOP:
 2447    0000000C ........              DC32    DOCOL
 2448    00000010 ........              DC32    THREE
 2449    00000014 ........              DC32    QPAIR
 2450    00000018 ........              DC32    COMP
 2451    0000001C ........              DC32    XLOOP
 2452    00000020 ........              DC32    BACK
 2453    00000024 ........              DC32    SEMIS
 2454                           
 2455                           
 2456                           //      DO DO:  ( n1 n2 -- ) IMMEDIATE
 2457                           //              (addr n -- ) COMPILE
 2458                           //      Occurs in a colon-definition in form:
 2459                           //      DO ... LOOP
 2460                           
 2461                            SECTION .text : CONST (2)
 2462                           DO_NFA:
 2463    00000000 C2                    DC8     0x0C2
 2464    00000001 44                    DC8     'D'
 2465    00000002 CF                    DC8     'O'+0x80
 2466    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2467    00000004 ........              DC32    LOOP_NFA
 2468                           DO:
 2469    00000008 ........              DC32    DOCOL
 2470    0000000C ........              DC32    COMP
 2471    00000010 ........              DC32    XDO
 2472    00000014 ........              DC32    HERE
 2473    00000018 ........              DC32    THREE
 2474    0000001C ........              DC32    SEMIS
 2475                           
 2476                           
 2477                           //      ENDIF ENDIF:    ( addr n -- ) IMMEDIATE
 2478                           //      Occurs in a colon-definition in form:
 2479                           //              IF ... ENDIF
 2480                           //              IF ... ELSE ... ENDIF
 2481                           //      At run-time, ENDIF serves only as the destination of a forward
 2482                           //      branch from IF or ELSE. It marks the conclusion of the conditional
 2483                           //      structure. THEN is another name for ENDIF. Both names are supported
 2484                           //      in fig-FORTH. See also IF and ELSE.
 2485                           //
 2486                           //      At compile-time, ENDIF computes the forward branch offset from addr
 2487                           //      to HERE and stores it at addr. n is used for error tests.
 2488                           
 2489                            SECTION .text : CONST (2)
 2490                           ENDIF_NFA:
 2491    00000000 C5                    DC8     0x0C5
 2492    00000001 454E4449              DC8     'ENDI'
 2493    00000005 C6                    DC8     'F'+0x80
 2494    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2495    00000008 ........              DC32    DO_NFA
 2496                           ENDIF:
 2497    0000000C ........              DC32    DOCOL
 2498    00000010 ........              DC32    QCOMP
 2499    00000014 ........              DC32    TWO     // 2 is the Error checking number for if.
 2500    00000018 ........              DC32    QPAIR
 2501    0000001C ........              DC32    HERE
 2502    00000020 ........              DC32    OVER
 2503    00000024 ........              DC32    SUBB
 2504    00000028 ........              DC32    SWAP
 2505    0000002C ........              DC32    STORE
 2506    00000030 ........              DC32    SEMIS
 2507                           
 2508                           
 2509                           //      THEN THEN:      ( -- ) IMMEDIATE
 2510                           //      An alias for ENDIF.
 2511                           
 2512                            SECTION .text : CONST (2)
 2513                           THEN_NFA:
 2514    00000000 C4                    DC8     0x0C4
 2515    00000001 544845                DC8     'THE'
 2516    00000004 CE                    DC8     'N'+0x80
 2517    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2518    00000008 ........              DC32    ENDIF_NFA
 2519                           THEN:
 2520    0000000C ........              DC32    DOCOL
 2521    00000010 ........              DC32    ENDIF
 2522    00000014 ........              DC32    SEMIS
 2523                           
 2524                           
 2525                           //      ELSE ELSE:      ( addr1 n1 -- ) IMMEDIATE
 2526                           //                      ( addr2 n2 -- ) COMPILING
 2527                           //      Occurs within a colon-definition in the form:
 2528                           //              IF ... ELSE ... ENDIF
 2529                           //      At run-time, ELSE executes after the true part following IF. ELSE
 2530                           //      forces execution to skip over the following false part and resumes
 2531                           //      execution after the ENDIF. It has no stack effect.
 2532                           //
 2533                           //      At compile-time ELSE emplaces BRANCH reserving a branch offset,
 2534                           //      leaves the address addr2 and n2 for error testing. ELSE also
 2535                           //      resolves the pending forward branch from IF by calculating the
 2536                           //      offset from addr1 to HERE and storing at addr1.
 2537                           
 2538                            SECTION .text : CONST (2)
 2539                           ELSE_NFA:
 2540    00000000 C4                    DC8     0x0C4
 2541    00000001 454C53                DC8     'ELS'
 2542    00000004 C5                    DC8     'E'+0x80
 2543    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2544    00000008 ........              DC32    THEN_NFA
 2545                           ELSE:
 2546    0000000C ........              DC32    DOCOL
 2547    00000010 ........              DC32    TWO
 2548    00000014 ........              DC32    QPAIR
 2549    00000018 ........              DC32    COMP
 2550    0000001C ........              DC32    BRAN
 2551    00000020 ........              DC32    HERE
 2552    00000024 ........              DC32    ZERO
 2553    00000028 ........              DC32    COMMA   // aligned, INCREMENTS DP REFLECTED by HERE
 2554    0000002C ........              DC32    SWAP
 2555    00000030 ........              DC32    TWO
 2556    00000034 ........              DC32    ENDIF
 2557    00000038 ........              DC32    TWO
 2558    0000003C ........              DC32    SEMIS
 2559                           
 2560                           
 2561                           //      IF IF:  ( f -- ) IMMEDIATE
 2562                           //              ( -- addr n ) COMPILE
 2563                           //      Occurs is a colon-definition in form:
 2564                           //              IF (tp) ...  ENDIF      .
 2565                           //              IF (tp) ... ELSE (fp) ... ENDIF
 2566                           //      At run-time, IF selects execution based on a boolean flag. If f is
 2567                           //      true (non-zero), execution continues ahead thru the true part. If f
 2568                           //      is false (zero), execution skips till just after ELSE to execute
 2569                           //      the false part. After either part, execution resumes after ENDIF.
 2570                           //      ELSE and its false part are optional.; if missing, false execution
 2571                           //      skips to just after ENDIF..
 2572                           //
 2573                           //      At compile-time IF compiles 0BRANCH and reserves space for an offset
 2574                           //      at addr. addr and n are used later for resolution of the offset and
 2575                           //      error testing.
 2576                           
 2577                            SECTION .text : CONST (2)
 2578                           IF_NFA:
 2579    00000000 C2                    DC8     0x0C2
 2580    00000001 49                    DC8     'I'
 2581    00000002 C6                    DC8     'F'+0x80
 2582    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2583    00000004 ........              DC32    ELSE_NFA
 2584                           IF:
 2585    00000008 ........              DC32    DOCOL
 2586    0000000C ........              DC32    COMP
 2587    00000010 ........              DC32    ZBRAN
 2588    00000014 ........              DC32    HERE
 2589    00000018 ........              DC32    ZERO
 2590    0000001C ........              DC32    COMMA
 2591    00000020 ........              DC32    TWO     // 2 is the Error checking number for if.
 2592    00000024 ........              DC32    SEMIS
 2593                           
 2594                           ////////////////////////////////////////////////////////////////////////////////
 2595                           // zzzt this is compille time.
 2596                           ///The ZBRAN control structure is comparing [ QPAIR COMP ]to the old true, ONE
 2597                           // instead of ZERO. Comparing to ZERO allows ONE and the new -1 TRUE to work~!
 2598                           
 2599                           
 2600                           //      UNTIL UNTIL:    ( f -- ) IMMEDIATE
 2601                           //                      ( addr n -- ) COMPILE:
 2602                           //      Occurs within a colon-definition in the form:
 2603                           //              BEGIN ... UNTIL
 2604                           //      At run-time, UNTIL controls the conditional branch back to the
 2605                           //      corresponding BEGIN. If f is false, execution returns to just after.
 2606                           //      BEGIN:  if true, execution continues ahead.
 2607                           //      At compile-time, UNTIL compiles (0BRANCH) and an offset from HERE to
 2608                           //      addr. n is used for error tests.
 2609                           
 2610                            SECTION .text : CONST (2)
 2611                           UNTIL_NFA:
 2612    00000000 C5                    DC8     0x0C5
 2613    00000001 554E5449              DC8     'UNTI'
 2614    00000005 CC                    DC8     'L'+0x80
 2615    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2616    00000008 ........              DC32    IF_NFA
 2617                           UNTIL:
 2618    0000000C ........              DC32    DOCOL
 2619    00000010 ........              DC32    ONE
 2620                                   // QPAIR \ ( n1 n2 -- ) COMPILE time Issue an error message if n1 does not equal n2.
 2621    00000014 ........              DC32    QPAIR
 2622    00000018 ........              DC32    COMP
 2623    0000001C ........              DC32    ZBRAN
 2624    00000020 ........              DC32    BACK
 2625    00000024 ........              DC32    SEMIS
 2626                           
 2627                           
 2628                           //      AGAIN AGAIN:    ( addr n -- ) IMMEDIATE
 2629                           //      Used in a colon-definition in the form:
 2630                           //                      BEGIN ... AGAIN
 2631                           //      At run-time, AGAIN forces execution to return to corresponding BEGIN.
 2632                           //      There is no effect on the stack. Execution cannot leave this loop
 2633                           //      (unless R> DROP is executed one level below).
 2634                           //
 2635                           //      At compile time, AGAIN compiles BRANCH with an offset from HERE to
 2636                           //      addr. n is used for compile-time error checking.
 2637                           
 2638                            SECTION .text : CONST (2)
 2639                           AGAIN_NFA:
 2640    00000000 C5                    DC8     0x0C5
 2641    00000001 41474149              DC8     'AGAI'
 2642    00000005 CE                    DC8     'N'+0x80
 2643    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2644    00000008 ........              DC32    UNTIL_NFA
 2645                           AGAIN:
 2646    0000000C ........              DC32    DOCOL
 2647    00000010 ........              DC32    ONE
 2648    00000014 ........              DC32    QPAIR
 2649    00000018 ........              DC32    COMP
 2650    0000001C ........              DC32    BRAN
 2651    00000020 ........              DC32    BACK
 2652    00000024 ........              DC32    SEMIS
 2653                           
 2654                           
 2655                           //      REPEAT REPEAT:  ( addr n -- ) IMMEDIATE
 2656                           //      Used within a colon-definition in the form:
 2657                           //              BEGIN ... WHILE ... REPEAT
 2658                           //      At run-time, REPEAT forces an unconditional branch back to just
 2659                           //      after the corresponding BEGIN.
 2660                           //
 2661                           //      At compile-time, REPEAT compiles BRANCH and the offset from HERE to
 2662                           //      addr. n is used for error testing.
 2663                           
 2664                            SECTION .text : CONST (2)
 2665                           REPEAT_NFA:
 2666    00000000 C6                    DC8     0x0C6
 2667    00000001 5245504541            DC8     'REPEA'
 2668    00000006 D4                    DC8     'T'+0x80
 2669    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2670    00000008 ........              DC32    AGAIN_NFA
 2671                           REPEAT:
 2672    0000000C ........              DC32    DOCOL
 2673    00000010 ........              DC32    TOR
 2674    00000014 ........              DC32    TOR
 2675    00000018 ........              DC32    AGAIN
 2676    0000001C ........              DC32    RFROM
 2677    00000020 ........              DC32    RFROM
 2678    00000024 ........              DC32    TWO
 2679    00000028 ........              DC32    SUBB
 2680    0000002C ........              DC32    ENDIF
 2681    00000030 ........              DC32    SEMIS
 2682                           
 2683                           
 2684                           //      WHILE WHILE:    ( f -- ) IMMEDIATE
 2685                           //                      (ad1 nl -- ad1 n1 ad2 n2 ) COMPILE
 2686                           //      Occurs in a colon-definition in the form:
 2687                           //              BEGIN ... WHILE (tp) ... REPEAT
 2688                           //      At run-time, WHILE selects conditional execution based on boolean
 2689                           //      flag f. If f is true (non-zero), WHILE continues execution of the
 2690                           //      true part thru to REPEAT, which then branches back to BEGIN. If f is
 2691                           //      false (zero), execution skips to just after REPEAT, exiting the
 2692                           //      structure.
 2693                           //
 2694                           //      At compile time, WHILE emplaces (0BRANCH) and leaves ad2 of the
 2695                           //      reserved offset. The stack values will be resolved by REPEAT.
 2696                           
 2697                            SECTION .text : CONST (2)
 2698                           WHILE_NFA:
 2699    00000000 C5                    DC8     0x0C5
 2700    00000001 5748494C              DC8     'WHIL'
 2701    00000005 C5                    DC8     'E'+0x80
 2702    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2703    00000008 ........              DC32    REPEAT_NFA
 2704                           WHILE:
 2705    0000000C ........              DC32    DOCOL
 2706    00000010 ........              DC32    IF
 2707    00000014 ........              DC32    TWOP
 2708    00000018 ........              DC32    SEMIS
 2709                           
 2710                           
 2711                           //      BEGIN BEGIN:    ( -- addr n ) IMMEDIATE
 2712                           //      Occurs in a colon-definition in form:
 2713                           //      BEGIN ... UNTIL
 2714                           //      BEGIN ... AGAIN
 2715                           //      BEGIN ... WHILE ... REPEAT
 2716                           //      At run-time, BEGIN marks the start of a sequence that may be
 2717                           //      repetitively executed. It serves as a return point from the
 2718                           //      corresponding UNTIL, AGAIN or REPEAT. When executing UNTIL, a return
 2719                           //      to BEGIN will occur if the top of the stack is false//
 2720                           //      for AGAIN and REPEAT a return to BEGIN always occurs.
 2721                           //
 2722                           //      At compile time BEGIN leaves its return address and n for compiler
 2723                           //      error checking.
 2724                           
 2725                            SECTION .text : CONST (2)
 2726                           BEGIN_NFA:
 2727    00000000 C5                    DC8     0x0C5
 2728    00000001 42454749              DC8     'BEGI'
 2729    00000005 CE                    DC8     'N'+0x80
 2730    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2731    00000008 ........              DC32    WHILE_NFA
 2732                           BEGIN:
 2733    0000000C ........              DC32    DOCOL
 2734    00000010 ........              DC32    QCOMP
 2735    00000014 ........              DC32    HERE
 2736    00000018 ........              DC32    ONE
 2737    0000001C ........              DC32    SEMIS
 2738                           
 2739                           
 2740                           //=============================== WORDCAT ====================================//
 2741                           //NOEXEC HEADERFORWORDCATEGORIES
 2742                           //      WC_COMPILE_NFA = Inside Colon WORDS: CATEGORY
 2743                           
 2744                            SECTION .text : CONST (2)
 2745                           WC_COMPILE_NFA:
 2746    00000000 97                    DC8     0x80+4+19
 2747    00000001 0D0A                  DC8     0x0D, 0x0A
 2748    00000003 496E736964652         DC8     'Inside Colon WORDS:'
                  0436F6C6F6E20
                  574F5244533A 
 2749    00000016 0D8A                  DC8     0x0D, 0x0A+0x80
 2750                            ALIGNROM 2,0xFFFFFFFF
 2751    00000018 ........              DC32    BEGIN_NFA
 2752                           
 2753                           
 2754                           //      IMMEDIATE IMMED:        ( -- )
 2755                           //      Mark the most recently made definition so that when encountered at
 2756                           //      compile time, it will be executed rather than being compiled. i.e.
 2757                           //      the precedence bit in its header is set.
 2758                           //      This method allows definitions to handle unusual compiling
 2759                           //      situations, rather. than build them into the fundamental compiler.
 2760                           //      The system may force compilation of an immediate definition by
 2761                           //      preceeding it with [COMPILE].
 2762                           
 2763                            SECTION .text : CONST (2)
 2764                           IMMED_NFA:
 2765    00000000 89                    DC8     0x89
 2766    00000001 494D4D4544494         DC8     'IMMEDIAT'
                  154          
 2767    00000009 C5                    DC8     'E'+0x80
 2768    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 2769    0000000C ........              DC32    WC_COMPILE_NFA
 2770                           IMMED:
 2771    00000010 ........              DC32    DOCOL
 2772    00000014 ........              DC32    LATEST
 2773    00000018 ........40000         DC32    LIT, 0x40
                  000          
 2774    00000020 ........              DC32    TOGGLE
 2775    00000024 ........              DC32    SEMIS
 2776                           
 2777                           
 2778                           //      CREATE CREATE:  ( -- )
 2779                           //      Create a word in The Dictionary.
 2780                           //      Make searchable and forgetable NFA/LFA, DOCON, ADDR->PFA
 2781                           //      USE <BUILDS with DOES> instead of CREATE.
 2782                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 2783                           //
 2784                           //      Saves HERE in CSDP in case there's an error creating a word.
 2785                           //      CSDP is reset when a word is completed, by ; <BUILDS (?) CON and VAR.
 2786                           //
 2787                           //      A defining word used in the form:
 2788                           //              CREATE CCcc
 2789                           //      by such words as VAR, CON AND <BUILDS to create a dictionary header for
 2790                           //      a new word. The code field contains the address of the words
 2791                           //      parameter field.
 2792                           
 2793                            SECTION .text : CONST (2)
 2794                           CREATE_NFA:
 2795    00000000 86                    DC8     0x86
 2796    00000001 4352454154            DC8     'CREAT'
 2797    00000006 C5                    DC8     'E'+0x80
 2798    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2799    00000008 ........              DC32    IMMED_NFA
 2800                           CREATE:
 2801    0000000C ........              DC32    DOCOL
 2802    00000010 ........              DC32    DICTSPACE       //      \ -- n
 2803    00000014 ........0F000         DC32    LIT, 15, SUBB   // One less than smallest definition
                  000........  
 2804    00000020 ........              DC32    ZLESS
 2805    00000024 ........              DC32    ZBRAN
 2806    00000028 08000000              DC32    CREATEOK-.
 2807                           
 2808    0000002C ........              DC32    DICTFULL_ABORT
 2809                           
 2810                           CREATEOK:
 2811    00000030 ........              DC32    DFIND                   // Parse nfa
 2812                           //      -FIND DFIND \ --- pfa len tf (found) \ --- ff (not found)
 2813    00000034 ........              DC32    ZBRAN
 2814    00000038 24000000              DC32     CREA1-.
 2815                           
 2816                           #ifdef IO2TP
 2820                           #endif
 2821    0000003C ........              DC32    DROP
 2822    00000040 ........              DC32    NFA
 2823    00000044 ........              DC32    IDDOT
 2824    00000048 .............         DC32    LIT, msg_wordexists
                  ...          
 2825                           // Nothing created yet so ABORT is correct.
 2826                           //        DC32    ERROR
 2827    00000050 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 2828    00000058 ........              DC32    ABORT
 2829                           
 2830                           CREA1:
 2831                           // Save HERE in CSDP so ERROR can reset DP if this definition fails.
 2832                           // CSDP is reset by SEMIC_CREATE when this definition is completed.
 2833                           // SEMIC_CREATE used in ; CON and VAR to reset CSDP.
 2834                           
 2835                           // This new definitions cstring name has been moved to HERE
 2836    0000005C .............         DC32    HERE, DUP       // This will become the new CURRENT (this NFA).
                  ...          
 2837    00000064 .............         DC32    CSDP_SV, STORE  // HERE to CSDP to restore in case of error.
                  ...          
 2838                           // Dup HERE-NFA to allot NFAx
 2839    0000006C ........              DC32    DUP
 2840                           // Limit NFA allot to maxwordlen. DOES NOT CHANGE actual count!
 2841                           // If count is larger than MAXWORDLEN behaviour of this def is unpredictable!
 2842    00000070 ........              DC32    CAT
 2843    00000074 ........1F000         DC32    LIT, MAXWORDLEN // ELIMINATED WIDTH AND WIDTH_SV
                  000          
 2844    0000007C ........              DC32    MIN
 2845    00000080 ........              DC32    ALLOT_PRIM      // HERE (DP) at end of NFA with padding.
 2846                           // Dup HERE-NFA to set count byte, and to be consumed later
 2847                           // for setting CURRENT after previous CURRENT compiled into LFA.
 2848    00000084 ........              DC32    DUP
 2849                           // Make regular (not immediate) NFA count byte
 2850    00000088 ........80000         DC32    LIT, 0x80
                  000          
 2851    00000090 ........              DC32    TOGGLE          // Count Byte = 80+count
 2852                           // HERE is new now. Mark end of NFA for PFIND search
 2853    00000094 ........              DC32    HERE            // DP after allot of NFA
 2854    00000098 ........80000         DC32    LIT,0x80        // Set last character in NFA
                  000          
 2855    000000A0 ........              DC32    TOGGLE          // smudge bit
 2856                           // Bump DP to LFA
 2857    000000A4 .............         DC32    ONE, DP_SV      // MOVE HERE (DP)
                  ...          
 2858    000000AC ........              DC32    PSTORE          // TO LFA
 2859                           // Set LFA
 2860    000000B0 ........              DC32    LATEST          // LATEST = CURRENT_SV -> MOST RECENT DEF NFA
 2861    000000B4 ........              DC32    COMMA           // Compile last words NFA into this link field.
 2862                                                           // DUP'd HERE should be on stack
 2863                           // Have to set CURRENT with last dup's HERE-NFA after LATEST is compiled
 2864    000000B8 ........              DC32    CURRENT_SV      // LATEST = CURRENT_SV
 2865    000000BC ........              DC32    STORE           // so storing NEWWORD_NFA into CURRENT.
 2866    000000C0 .............         DC32    COMP, DOCON     // Compile DOCON as CFA
                  ...          
 2867    000000C8 .............         DC32    HERE, FOURP     // Compute and
                  ...          
 2868    000000D0 ........              DC32    COMMA           // COMPILE Addr of PFA
 2869                           //      DC32    SMUDGE          // ELIMINATED
 2870                           //      DC32    SEMIC_CREATE    // USED IN CALLERS OF CREATE, NOT HERE!
 2871    000000D4 ........              DC32    SEMIS
 2872                           
 2873                           
 2874                           //      CON CON:        ( n -- )  MODIFIED: and CONSTANT renamed CON
 2875                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 2876                           //      A defining word used in the form:
 2877                           //              n CONSTANT CCcc
 2878                           //      to create word CCcc, with its parameter field containing n. When
 2879                           //      CCcc is later executed, it will push the value of n to the stack.
 2880                           
 2881                            SECTION .text : CONST (2)
 2882                           CONSTANT_NFA:
 2883    00000000 88                    DC8     0x88
 2884    00000001 434F4E5354414         DC8     'CONSTAN'
                  E            
 2885    00000008 D4                    DC8     'T'+0x80
 2886    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2887    0000000C ........              DC32    CREATE_NFA
 2888                           CONSTANT:
 2889    00000010 .............         DC32    DOCOL, CON, SEMIS   // CREATE DOES DICTSPACE CHECK
                  ...........  
 2890                           
 2891                            SECTION .text : CONST (2)
 2892                           CON_NFA:
 2893    00000000 83                    DC8     0x83
 2894    00000001 434F                  DC8     'CO'
 2895    00000003 CE                    DC8     'N'+0x80
 2896                            ALIGNROM 2,0xFFFFFFFF
 2897                           //      DC32    CREATE_NFA
 2898    00000004 ........              DC32    CONSTANT_NFA
 2899                           CON:
 2900    00000008 ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 2901    0000000C ........              DC32    CREATE  // Make Header NFA/LFA, DOCON, ADDR->PFA
 2902    00000010 ........FCFFF         DC32    LIT, -4, DP_SV, PSTORE  // back up to ADDR->PFA
                  FFF..........
                  ......       
 2903    00000020 ........              DC32    COMMA                   // Replace with Con value
 2904    00000024 ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 2905                           //        DC32    DOTDICTSPACE
 2906    00000028 ........              DC32    SEMIS
 2907                           
 2908                           
 2909                           //      VAR VAR:        ( -- ) RENAMED: VARIABLE to VAR
 2910                           //      IF RAMVARSPACE FULL PRINT Error MESSAGE AND Abort.
 2911                           //      A defining word used in the form:
 2912                           //              VARIABLE CCcc
 2913                           //      When VARIABLE is executed, it creates the definition CCcc with its
 2914                           //      with its cell space uninitialized. When CCcc is executed,
 2915                           //      its cell space address is put on the stack. Use with @ or !
 2916                           //      NOTE: VAR's cell space is allocated in ram. See UP and VARALLOT.
 2917                           
 2918                            SECTION .text : CONST (2)
 2919                           VARIABLE_NFA:
 2920    00000000 88                    DC8     0x88
 2921    00000001 5641524941424         DC8     'VARIABL'
                  C            
 2922    00000008 C5                    DC8     'E'+0x80
 2923    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2924    0000000C ........              DC32    CON_NFA
 2925                           VARIABLE:
 2926    00000010 .............         DC32    DOCOL, VAR_, SEMIS   // CREATE DOES DICTSPACE CHECK
                  ...........  
 2927                           
 2928                            SECTION .text : CONST (2)
 2929                           VAR_NFA:
 2930    00000000 83                    DC8     0x83
 2931    00000001 5641                  DC8     'VA'
 2932    00000003 D2                    DC8     'R'+0x80
 2933                            ALIGNROM 2,0xFFFFFFFF
 2934                           //      DC32    CON_NFA
 2935    00000004 ........              DC32    VARIABLE_NFA
 2936                           VAR_:
 2937    00000008 ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 2938    0000000C ........              DC32    CREATE  // Make Header NFA and LFA, update CURRENT
 2939    00000010 ........F8FFF         DC32    LIT, -8, DP_SV, PSTORE
                  FFF..........
                  ......       
 2940    00000020 .............         DC32    COMP, DOVAR     // CFA of VAR's
                  ...          
 2941                           //        DC32    COMP, DOCON     // CFA of VAR's
 2942                           // aligned, INCREMENTS DP REFLECTED by HERE
 2943                           // compile the value \ v --
 2944    00000028 ........              DC32    ONE
 2945    0000002C ........              DC32    VARALLOT        // Do .VS check and return VAR addr.
 2946    00000030 ........              DC32    COMMA           // Compile address of the ram allotment.
 2947    00000034 ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 2948                           //        DC32    DOTDICTSPACE
 2949                           //        DC32    DOTVARSPACE
 2950    00000038 ........              DC32    SEMIS
 2951                           
 2952                           
 2953                           //      ; SEMI: ( -- ) IMMEDIATE
 2954                           //      Terminate a colon-definition and stop further compilation.
 2955                           //      Compiles the run-time ;S.
 2956                           
 2957                            SECTION .text : CONST (2)
 2958                           SEMI_NFA:
 2959    00000000 C1                    DC8     0x0C1
 2960    00000001 BB                    DC8     ';'+0x80
 2961    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2962    00000004 ........              DC32    VAR_NFA
 2963                           SEMI:
 2964    00000008 ........              DC32    DOCOL
 2965    0000000C ........              DC32    QCSP
 2966    00000010 ........              DC32    COMP
 2967    00000014 ........              DC32    SEMIS
 2968    00000018 ........              DC32    LBRAC
 2969    0000001C ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 2970                           //        DC32    DOTDICTSPACE
 2971    00000020 ........              DC32    SEMIS
 2972                           
 2973                           
 2974                           //      : COLON:        ( -- ) IMMEDIATE
 2975                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 2976                           //      Used in the form called a colon-definition:
 2977                           //              : CCcc     ...     //
 2978                           //      Creates a dictionary entry defining CCcc as equivalent to the
 2979                           //      following sequence of Forth word definitions '...' until the next
 2980                           //      ';' or ';CODE'.
 2981                           //      The compiling process is done by the text interpreter as long as
 2982                           //      STATE is non-zero. Other details are that the CONTEXT vocabulary is
 2983                           //      set to the CURRENT vocabulary and that words with the precedence bit
 2984                           //      set (P) are executed rather than being compiled.
 2985                           
 2986                            SECTION .text : CONST (2)
 2987                           COLON_NFA:
 2988    00000000 C1                    DC8     0x0C1
 2989    00000001 BA                    DC8     ':'+0x80
 2990    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2991    00000004 ........              DC32    SEMI_NFA
 2992                           COLON:
 2993    00000008 ........              DC32    DOCOL
 2994                           //      DICTSPACE TEST DONE IN CREATE
 2995    0000000C ........              DC32    QEXEC
 2996    00000010 ........              DC32    SCSP    // Save the stack position in CSP. Compiler security.
 2997    00000014 ........              DC32    CREATE  // Make Header NFA and LFA, update CURRENT
 2998    00000018 ........              DC32    RBRAC   // Resume compiliting by setting STATE_SV to 0xC0
 2999    0000001C ........F8FFF         DC32    LIT, -8, DP_SV, PSTORE
                  FFF..........
                  ......       
 3000    0000002C .............         DC32    COMP, DOCOL     // aligned, INCREMENTS DP REFLECTED by HERE
                  ...          
 3001    00000034 ........              DC32    SEMIS
 3002                           
 3003                           
 3004                           //=============================== WORDCAT ====================================//
 3005                           //NOEXEC HEADERFORWORDCATEGORIES
 3006                           //      WC_CREATE_NFA = CREATE WORDS With: CATEGORY
 3007                           
 3008                            SECTION .text : CONST (2)
 3009                           WC_CREATE_NFA:
 3010    00000000 96                    DC8     0x80+22
 3011    00000001 0D0A                  DC8     0x0D, 0x0A
 3012    00000003 4352454154452         DC8     'CREATE WORDS With:'
                  0574F52445320
                  576974683A   
 3013    00000015 0D8A                  DC8     0x0D, 0x0A+0x80
 3014    00000017 FF             ALIGNROM 2,0xFFFFFFFF
 3015    00000018 ........              DC32    COLON_NFA
 3016                           
 3017                           //      DABS DABS: ( sd=(LSW MSW) -- ud=(LSW MSW) )
 3018                           //      Leave the absolute value ud of a signed double number.
 3019                           
 3020                            SECTION .text : CONST (2)
 3021                           DABS_NFA:
 3022    00000000 84                    DC8     0x84
 3023    00000001 444142                DC8     'DAB'
 3024    00000004 D3                    DC8     'S'+0x80
 3025    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3026    00000008 ........              DC32    WC_CREATE_NFA
 3027                           DABSF:
 3028                           DABS:
 3029    0000000C ........              DC32    DOCOL
 3030    00000010 ........              DC32    DUP
 3031    00000014 ........              DC32    DPM
 3032    00000018 ........              DC32    SEMIS
 3033                           
 3034                           
 3035                           //      DNEGATE DNEGATE: ( d1 -- d<2>=(LSW MSW) ) RENAMED: DMINUS to DNEGATE
 3036                           //      Convert d1 to its double number two's complement d2.
 3037                           
 3038                            SECTION .text : CONST (2)
 3039                           DNEGATE_NFA:
 3040    00000000 87                    DC8     0x87
 3041    00000001 444E45474154          DC8     'DNEGAT'
 3042    00000007 C5                    DC8     'E'+0x80
 3043                            ALIGNROM 2,0xFFFFFFFF
 3044    00000008 ........              DC32    DABS_NFA
 3045                           DNEGATE:
 3046    0000000C ........              DC32    .+5
 3047                            SECTION .text : CODE (2)
 3048                                   POP2t_r0                        // MSW   //POP  BX
 3048.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3048.2                         //#ifndef TOSCT
 3048.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3048.4                         //#endif
 3048.5                         //      ADDS    p, p, #4
 3048.6                                 ENDM
 3049                                   POP2w_r2                        // LSW   //POP  CX
 3049.1  00000004 57F8042B              LDR     w, [p],#4
 3049.2                         //      LDR     w, [p]
 3049.3                         //      ADDS    p, p, #4
 3049.4                                 ENDM
 3050    00000008 C043                  MVNS    t_r0, t_r0              // negate MSW
 3051    0000000A D243                  MVNS    w_r2, w_r2              // negate LSW
 3052    0000000C 521C                  ADDS    w_r2, w_r2, #1          // add 1 to LSW
 3053                                   DPUSH_r0_then_r1               //  --  LSW MSW )
 3053                                   PUSHw   // push w to p, post decrement p
 3053.1  0000000E 47F8042D              STR     w, [p, #-4]!
 3053.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 3053.3                         //      STR     w, [p]
 3053.4                                 ENDM
 3053                                   TPUSH_r0
 3053                                   PUSHt_r0        // push t to p, pre decrement p
 3053.1  00000012 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3053.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3053.3                         //      STR     t, [p]
 3053.4                                 ENDM
 3053                                   NEXT
 3053.1                         // ARMv7-M Thumb = .+5
 3053.2  00000016 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3053.3                         // ARMv6-M Thumb = .+4
 3053.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3053                                   NEXT1
 3053.1  0000001A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3053.2  0000001E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3053.3  00000022 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3053.4                         // ARMv6-M Thumb = .+4
 3053.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3053.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3053.7                                 ENDM
 3053.8                                 ENDM
 3053.9                                 ENDM
 3053.10                                ENDM
 3054                           
 3055                           
 3056                           //      DPL_SV: ( -- addr of NDPL ) Contains # of digits after . in double number
 3057                           //      A system variable containing the number of digits to the right of the
 3058                           //      decimal on double integer input. It may also be used to hold output
 3059                           //      column location of a decimal point, in system generated formating. The
 3060                           //      default value on single number input is -1.
 3061                            SECTION .text : CONST (2)
 3062                           DPL_NFA:
 3063    00000000 83                    DC8     0x83
 3064    00000001 4450                  DC8     'DP'
 3065    00000003 CC                    DC8     'L'+0x80
 3066                            ALIGNROM 2,0xFFFFFFFF
 3067    00000004 ........              DC32    DNEGATE_NFA
 3068                           DPL_SV:
 3069    00000008 .............         DC32    DOCON, NDPL
                  ...          
 3070                           
 3071                           
 3072                           //      D.R DDOTR:      ( sd=<LSW MSW> n -- ) SIGNED:
 3073                           //      Print a signed double number sd right aligned
 3074                           //      in a field n characters wide.
 3075                           
 3076                            SECTION .text : CONST (2)
 3077                           DDOTR_NFA:
 3078    00000000 83                    DC8     0x83
 3079    00000001 442E                  DC8     'D.'
 3080    00000003 D2                    DC8     'R'+0x80
 3081                            ALIGNROM 2,0xFFFFFFFF
 3082    00000004 ........              DC32    DPL_NFA
 3083                           DDOTR:
 3084    00000008 ........              DC32    DOCOL
 3085    0000000C ........              DC32    TOR     // N CHAR FIELD LEN to r
 3086    00000010 ........              DC32    SWAP    // ( LSW MSW -- MSW LSW )
 3087    00000014 ........              DC32    OVER    // ( MSW LSW -- MSW LSW MSW )
 3088    00000018 ........              DC32    DABS    // ( MSW LSW MSW -- MSW uLSW uMSW )
 3089    0000001C ........              DC32    BDIGS   // <# SET HLD to Pad
 3090    00000020 ........              DC32    DIGS    // ( d=<LSW MSW> -- d=<LSW MSW> )
 3091    00000024 ........              DC32    SIGN    // ( d=<LSW MSW> -- d=<LSW MSW> )
 3092    00000028 ........              DC32    EDIGS   //      #>  ( d=<LSW MSW>  ---  addr  count )
 3093    0000002C ........              DC32    RFROM   // GET THE N CHAR FIELD LEN
 3094    00000030 ........              DC32    OVER    // ( addr count n -- addr count n count )
 3095    00000034 ........              DC32    SUBB    // ( n addr count addr -- n addr count-n )
 3096    00000038 ........              DC32    SPACES  // SPACES  ( n -- )
 3097    0000003C ........              DC32    TYPE    // ( n addr -- )
 3098    00000040 ........              DC32    SEMIS
 3099                           
 3100                           
 3101                           //      D. DDOT:        ( S32-2'S COMPLEMET = (d=<LSW MSW> -- )
 3102                           //      Print a signed double number from a 32 bit two's complement value.
 3103                           //      The high-order 32 bits are most accessable on the stack. Conversion
 3104                           //      is performed according to the current base. A blank follows.
 3105                           
 3106                            SECTION .text : CONST (2)
 3107                           DDOT_NFA:
 3108    00000000 82                    DC8     0x82
 3109    00000001 44                    DC8     'D'
 3110    00000002 AE                    DC8     '.'+0x80
 3111    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3112    00000004 ........              DC32    DDOTR_NFA
 3113                           DDOT:
 3114    00000008 ........              DC32    DOCOL
 3115    0000000C ........              DC32    ZERO
 3116    00000010 ........              DC32    DDOTR
 3117    00000014 ........              DC32    SPACE
 3118    00000018 ........              DC32    SEMIS
 3119                           
 3120                           
 3121                           //      D+ DPLUS:       ( LSW1 MSW1 LSW2 MSW2 --- LSW MSW )  SIGNED:
 3122                           //      Leave the signed double number sum of two signed double numbers.
 3123                           
 3124                            SECTION .text : CONST (2)
 3125                           DPLUS_NFA:
 3126    00000000 82                    DC8     0x82
 3127    00000001 44                    DC8     'D'
 3128    00000002 AB                    DC8     '+'+0x80
 3129    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3130    00000004 ........              DC32    DDOT_NFA
 3131                           DPLUS:
 3132    00000008 ........              DC32    .+5
 3133                            SECTION .text : CODE (2)
 3134                                   POP2t_r0        //    ldr     t_r0, [p_r7],#4      // MS
 3134.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3134.2                         //#ifndef TOSCT
 3134.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3134.4                         //#endif
 3134.5                         //      ADDS    p, p, #4
 3134.6                                 ENDM
 3135                                   POP2n_r1        //    ldr     n_r1, [p_r7],#4      // LS
 3135.1  00000004 57F8041B              LDR     n, [p],#4
 3135.2                         //      LDR     n, [p]
 3135.3                         //      ADDS    p, p, #4
 3135.4                                 ENDM
 3136                                   POP2x           //    ldr     x_r3, [p_r7],#4      // MS
 3136.1  00000008 57F8043B              LDR     x, [p],#4
 3136.2                         //      LDR     x, [p]
 3136.3                         //      ADDS    p, p, #4
 3136.4                                 ENDM
 3137                                   POP2w_r2        //    ldr     w_r2, [p_r7],#4      // LS
 3137.1  0000000C 57F8042B              LDR     w, [p],#4
 3137.2                         //      LDR     w, [p]
 3137.3                         //      ADDS    p, p, #4
 3137.4                                 ENDM
 3138    00000010 5218                  ADDS    w_r2, w_r2, n_r1        // LS sum, set status flags
 3139    00000012 5841                  ADCS    t_r0, t_r0, x_r3        // MS sum + carry
 3140                                   DPUSH_r0_then_r1               //  --  LSW MSW )
 3140                                   PUSHw   // push w to p, post decrement p
 3140.1  00000014 47F8042D              STR     w, [p, #-4]!
 3140.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 3140.3                         //      STR     w, [p]
 3140.4                                 ENDM
 3140                                   TPUSH_r0
 3140                                   PUSHt_r0        // push t to p, pre decrement p
 3140.1  00000018 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3140.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3140.3                         //      STR     t, [p]
 3140.4                                 ENDM
 3140                                   NEXT
 3140.1                         // ARMv7-M Thumb = .+5
 3140.2  0000001C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3140.3                         // ARMv6-M Thumb = .+4
 3140.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3140                                   NEXT1
 3140.1  00000020 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3140.2  00000024 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3140.3  00000028 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3140.4                         // ARMv6-M Thumb = .+4
 3140.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3140.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3140.7                                 ENDM
 3140.8                                 ENDM
 3140.9                                 ENDM
 3140.10                                ENDM
 3141                           
 3142                           
 3143                           //      S->D STOD:      ( n -- d=<LSW MSW> ) SIGNED:
 3144                           //      Sign extend a single number to form a double number.
 3145                           //      : S->D DUP 0< NEGATE // hi level equivalent
 3146                           
 3147                            SECTION .text : CONST (2)
 3148                           STOD_NFA:
 3149    00000000 84                    DC8     0x84
 3150    00000001 532D3E                DC8     'S->'
 3151    00000004 C4                    DC8     'D'+0x80
 3152    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3153    00000008 ........              DC32    DPLUS_NFA
 3154                           STOD:
 3155    0000000C ........              DC32    .+5
 3156                            SECTION .text : CODE (2)
 3157                                   POP2w_r2                        // POP LSW
 3157.1  00000000 57F8042B              LDR     w, [p],#4
 3157.2                         //      LDR     w, [p]
 3157.3                         //      ADDS    p, p, #4
 3157.4                                 ENDM
 3158    00000004 4040                  EORS    t_r0, t_r0              // Zero MSW
 3159    00000006 1243                  ORRS    w_r2, w_r2, w_r2        // OR LSW
 3160    00000008 00D5                  BPL     STOD1                   // LSW is POS
 3161                           
 3162    0000000A 401E                  SUBS     t_r0, t_r0, #1         // LSW is NEG
 3163                           STOD1:
 3164                                   DPUSH_r0_then_r1               //  --  LSW MSW )
 3164                                   PUSHw   // push w to p, post decrement p
 3164.1  0000000C 47F8042D              STR     w, [p, #-4]!
 3164.2                         //      SUBS    p, p, #4        //  push w to p, pre decrement p
 3164.3                         //      STR     w, [p]
 3164.4                                 ENDM
 3164                                   TPUSH_r0
 3164                                   PUSHt_r0        // push t to p, pre decrement p
 3164.1  00000010 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3164.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3164.3                         //      STR     t, [p]
 3164.4                                 ENDM
 3164                                   NEXT
 3164.1                         // ARMv7-M Thumb = .+5
 3164.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3164.3                         // ARMv6-M Thumb = .+4
 3164.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3164                                   NEXT1
 3164.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3164.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3164.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3164.4                         // ARMv6-M Thumb = .+4
 3164.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3164.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3164.7                                 ENDM
 3164.8                                 ENDM
 3164.9                                 ENDM
 3164.10                                ENDM
 3165                           
 3166                           
 3167                           //      2* TWOSTAR:     ( n -- n*2 ) LSL 1
 3168                           
 3169                            SECTION .text : CONST (2)
 3170                           TWOSTAR_NFA:
 3171    00000000 82                    DC8     0x82
 3172    00000001 32                    DC8     '2'
 3173    00000002 AA                    DC8     '*'+0x80
 3174    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3175    00000004 ........              DC32    STOD_NFA
 3176                           TWOSTAR:
 3177    00000008 ........              DC32    .+5
 3178                            SECTION .text : CODE (2)
 3179                                   POP2t_r0
 3179.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3179.2                         //#ifndef TOSCT
 3179.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3179.4                         //#endif
 3179.5                         //      ADDS    p, p, #4
 3179.6                                 ENDM
 3180    00000004 4000                  LSLS    t_r0, t_r0, #1  //
 3181                                   TPUSH_r0
 3181                                   PUSHt_r0        // push t to p, pre decrement p
 3181.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3181.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3181.3                         //      STR     t, [p]
 3181.4                                 ENDM
 3181                                   NEXT
 3181.1                         // ARMv7-M Thumb = .+5
 3181.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3181.3                         // ARMv6-M Thumb = .+4
 3181.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3181                                   NEXT1
 3181.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3181.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3181.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3181.4                         // ARMv6-M Thumb = .+4
 3181.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3181.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3181.7                                 ENDM
 3181.8                                 ENDM
 3181.9                                 ENDM
 3182                           
 3183                           
 3184                           //      2/ TWOSLASH:    ( n -- n/1 ) ASR 1 (FLOORED)
 3185                           
 3186                            SECTION .text : CONST (2)
 3187                           TWOSLASH_NFA:
 3188    00000000 82                    DC8     0x82
 3189    00000001 32                    DC8     '2'
 3190    00000002 AF                    DC8     '/'+0x80
 3191    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3192    00000004 ........              DC32    TWOSTAR_NFA
 3193                           TWOSLASH:
 3194    00000008 ........              DC32    .+5
 3195                            SECTION .text : CODE (2)
 3196                                   POP2t_r0
 3196.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3196.2                         //#ifndef TOSCT
 3196.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3196.4                         //#endif
 3196.5                         //      ADDS    p, p, #4
 3196.6                                 ENDM
 3197    00000004 4010                  ASRS    t_r0, t_r0, #1  //
 3198                                   TPUSH_r0
 3198                                   PUSHt_r0        // push t to p, pre decrement p
 3198.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3198.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3198.3                         //      STR     t, [p]
 3198.4                                 ENDM
 3198                                   NEXT
 3198.1                         // ARMv7-M Thumb = .+5
 3198.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3198.3                         // ARMv6-M Thumb = .+4
 3198.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3198                                   NEXT1
 3198.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3198.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3198.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3198.4                         // ARMv6-M Thumb = .+4
 3198.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3198.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3198.7                                 ENDM
 3198.8                                 ENDM
 3198.9                                 ENDM
 3199                           
 3200                           
 3201                           //      1- ONEM:        ( n -- n-1 )
 3202                           
 3203                            SECTION .text : CONST (2)
 3204                           ONEM_NFA:
 3205    00000000 82                    DC8     0x82
 3206    00000001 31                    DC8     '1'
 3207    00000002 AD                    DC8     '-'+0x80
 3208    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3209    00000004 ........              DC32    TWOSLASH_NFA
 3210                           ONEM:
 3211    00000008 ........              DC32    .+5
 3212                            SECTION .text : CODE (2)
 3213                                   POP2t_r0
 3213.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3213.2                         //#ifndef TOSCT
 3213.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3213.4                         //#endif
 3213.5                         //      ADDS    p, p, #4
 3213.6                                 ENDM
 3214    00000004 401E                  SUBS    t_r0, t_r0, #1  //
 3215                                   TPUSH_r0
 3215                                   PUSHt_r0        // push t to p, pre decrement p
 3215.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3215.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3215.3                         //      STR     t, [p]
 3215.4                                 ENDM
 3215                                   NEXT
 3215.1                         // ARMv7-M Thumb = .+5
 3215.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3215.3                         // ARMv6-M Thumb = .+4
 3215.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3215                                   NEXT1
 3215.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3215.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3215.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3215.4                         // ARMv6-M Thumb = .+4
 3215.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3215.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3215.7                                 ENDM
 3215.8                                 ENDM
 3215.9                                 ENDM
 3216                           
 3217                           
 3218                           //      1+ ONEP:        ( n -- n+1 )
 3219                           
 3220                            SECTION .text : CONST (2)
 3221                           ONEP_NFA:
 3222    00000000 82                    DC8     0x82
 3223    00000001 31                    DC8     '1'
 3224    00000002 AB                    DC8     '+'+0x80
 3225    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3226    00000004 ........              DC32    ONEM_NFA
 3227                           ONEP:
 3228    00000008 ........              DC32    .+5
 3229                            SECTION .text : CODE (2)
 3230                                   POP2t_r0
 3230.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3230.2                         //#ifndef TOSCT
 3230.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3230.4                         //#endif
 3230.5                         //      ADDS    p, p, #4
 3230.6                                 ENDM
 3231    00000004 401C                  ADDS    t_r0, t_r0, #1  //
 3232                                   TPUSH_r0
 3232                                   PUSHt_r0        // push t to p, pre decrement p
 3232.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3232.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3232.3                         //      STR     t, [p]
 3232.4                                 ENDM
 3232                                   NEXT
 3232.1                         // ARMv7-M Thumb = .+5
 3232.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3232.3                         // ARMv6-M Thumb = .+4
 3232.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3232                                   NEXT1
 3232.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3232.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3232.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3232.4                         // ARMv6-M Thumb = .+4
 3232.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3232.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3232.7                                 ENDM
 3232.8                                 ENDM
 3232.9                                 ENDM
 3233                           
 3234                           
 3235                           //      2+ TWOP:        ( n -- n+2 )
 3236                           
 3237                            SECTION .text : CONST (2)
 3238                           TWOP_NFA:
 3239    00000000 82                    DC8     0x82
 3240    00000001 32                    DC8     '2'
 3241    00000002 AB                    DC8     '+'+0x80
 3242    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3243    00000004 ........              DC32    ONEP_NFA
 3244                           TWOP:
 3245    00000008 ........              DC32    .+5
 3246                            SECTION .text : CODE (2)
 3247                                   POP2t_r0
 3247.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3247.2                         //#ifndef TOSCT
 3247.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3247.4                         //#endif
 3247.5                         //      ADDS    p, p, #4
 3247.6                                 ENDM
 3248    00000004 801C                  ADDS    t_r0, t_r0, #2
 3249                                   TPUSH_r0
 3249                                   PUSHt_r0        // push t to p, pre decrement p
 3249.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3249.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3249.3                         //      STR     t, [p]
 3249.4                                 ENDM
 3249                                   NEXT
 3249.1                         // ARMv7-M Thumb = .+5
 3249.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3249.3                         // ARMv6-M Thumb = .+4
 3249.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3249                                   NEXT1
 3249.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3249.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3249.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3249.4                         // ARMv6-M Thumb = .+4
 3249.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3249.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3249.7                                 ENDM
 3249.8                                 ENDM
 3249.9                                 ENDM
 3250                           
 3251                           
 3252                           //      4+ FOURP:       ( n -- n+4 )
 3253                           
 3254                            SECTION .text : CONST (2)
 3255                           FOURP_NFA:
 3256    00000000 82                    DC8     0x82
 3257    00000001 34                    DC8     '4'
 3258    00000002 AB                    DC8     '+'+0x80
 3259    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3260    00000004 ........              DC32    TWOP_NFA
 3261                           FOURP:
 3262    00000008 ........              DC32    .+5
 3263                            SECTION .text : CODE (2)
 3264                                   POP2t_r0
 3264.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3264.2                         //#ifndef TOSCT
 3264.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3264.4                         //#endif
 3264.5                         //      ADDS    p, p, #4
 3264.6                                 ENDM
 3265    00000004 001D                  ADDS    t_r0, t_r0, #4
 3266                                   TPUSH_r0
 3266                                   PUSHt_r0        // push t to p, pre decrement p
 3266.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3266.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3266.3                         //      STR     t, [p]
 3266.4                                 ENDM
 3266                                   NEXT
 3266.1                         // ARMv7-M Thumb = .+5
 3266.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3266.3                         // ARMv6-M Thumb = .+4
 3266.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3266                                   NEXT1
 3266.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3266.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3266.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3266.4                         // ARMv6-M Thumb = .+4
 3266.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3266.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3266.7                                 ENDM
 3266.8                                 ENDM
 3266.9                                 ENDM
 3267                           
 3268                           
 3269                           //      4- FOURM:       ( n -- n-4 )
 3270                           
 3271                            SECTION .text : CONST (2)
 3272                           FOURM_NFA:
 3273    00000000 82                    DC8     0x82
 3274    00000001 34                    DC8     '4'
 3275    00000002 AD                    DC8     '-'+0x80
 3276    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3277    00000004 ........              DC32    FOURP_NFA
 3278                           FOURM:
 3279    00000008 ........              DC32    .+5
 3280                            SECTION .text : CODE (2)
 3281                                   POP2t_r0
 3281.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3281.2                         //#ifndef TOSCT
 3281.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3281.4                         //#endif
 3281.5                         //      ADDS    p, p, #4
 3281.6                                 ENDM
 3282    00000004 001F                  SUBS    t_r0, t_r0, #4
 3283                                   TPUSH_r0
 3283                                   PUSHt_r0        // push t to p, pre decrement p
 3283.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3283.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3283.3                         //      STR     t, [p]
 3283.4                                 ENDM
 3283                                   NEXT
 3283.1                         // ARMv7-M Thumb = .+5
 3283.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3283.3                         // ARMv6-M Thumb = .+4
 3283.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3283                                   NEXT1
 3283.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3283.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3283.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3283.4                         // ARMv6-M Thumb = .+4
 3283.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3283.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3283.7                                 ENDM
 3283.8                                 ENDM
 3283.9                                 ENDM
 3284                           
 3285                           
 3286                           //      0 ZERO: ( -- 0 )
 3287                           
 3288                            SECTION .text : CONST (2)
 3289                           ZERO_NFA:
 3290    00000000 81                    DC8     0x81
 3291    00000001 B0                    DC8     '0'+0x80
 3292    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3293    00000004 ........              DC32    FOURM_NFA
 3294                           ZERO:
 3295    00000008 ........00000         DC32    DOCON, 0x0
                  000          
 3296                           
 3297                           
 3298                           //      1 ONE: ( -- 1 )
 3299                           
 3300                            SECTION .text : CONST (2)
 3301                           ONE_NFA:
 3302    00000000 81                    DC8     0x81
 3303    00000001 B1                    DC8     '1'+0x80
 3304    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3305    00000004 ........              DC32    ZERO_NFA
 3306                           ONE:
 3307    00000008 ........01000         DC32    DOCON, 0x1
                  000          
 3308                           
 3309                           
 3310                           //      2 TWO: ( -- 2 )
 3311                           
 3312                            SECTION .text : CONST (2)
 3313                           TWO_NFA:
 3314    00000000 81                    DC8     0x81
 3315    00000001 B2                    DC8     '2'+0x80
 3316    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3317    00000004 ........              DC32    ONE_NFA
 3318                           TWO:
 3319    00000008 ........02000         DC32    DOCON, 0x2
                  000          
 3320                           
 3321                           
 3322                           //      3 THREE: ( -- 3 )
 3323                           
 3324                            SECTION .text : CONST (2)
 3325                           THREE_NFA:
 3326    00000000 81                    DC8     0x81
 3327    00000001 B3                    DC8     '3'+0x80
 3328    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3329    00000004 ........              DC32    TWO_NFA
 3330                           THREE:
 3331    00000008 ........03000         DC32    DOCON, 0x3
                  000          
 3332                           
 3333                           
 3334                           //      4 FOUR: ( -- 4 )
 3335                           
 3336                            SECTION .text : CONST (2)
 3337                           FOUR_NFA:
 3338    00000000 81                    DC8     0x81
 3339    00000001 B4                    DC8     '4'+0x80
 3340    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3341    00000004 ........              DC32    THREE_NFA
 3342                           FOUR:
 3343    00000008 ........04000         DC32    DOCON, 0x4
                  000          
 3344                           
 3345                           
 3346                           //      M* MSTAR:       ( n1 n2 -- d=<S32LSW S32MSW> )  SIGNED:
 3347                           //      A mixed magnitude math operation which leaves the double number
 3348                           //      signed product of two signed number.
 3349                           
 3350                            SECTION .text : CONST (2)
 3351                           MSTAR_NFA:
 3352    00000000 82                    DC8     0x82
 3353    00000001 4D                    DC8     'M'
 3354    00000002 AA                    DC8     '*'+0x80
 3355    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3356    00000004 ........              DC32    FOUR_NFA
 3357                           MSTAR:
 3358    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3359    00000010 ........              DC32    XORR
 3360    00000014 ........              DC32    TOR
 3361    00000018 ........              DC32    ABS
 3362    0000001C ........              DC32    SWAP
 3363    00000020 ........              DC32    ABS
 3364    00000024 ........              DC32    USTAR
 3365    00000028 ........              DC32    RFROM
 3366    0000002C ........              DC32    DPM
 3367    00000030 ........              DC32    SEMIS
 3368                           
 3369                           
 3370                           //      M/ MSLASH:      ( sd  n1  ---  d=<s32REM  S32QUO> )
 3371                           //      A mixed magnitude math operator which leaves the signed remainder
 3372                           //      and signed quotient from sd, a double number dividend and divisor n1.
 3373                           //      The remainder takes its sign from the dividend.
 3374                           
 3375                            SECTION .text : CONST (2)
 3376                           MSLASH_NFA:
 3377    00000000 82                    DC8     0x82
 3378    00000001 4D                    DC8     'M'
 3379    00000002 AF                    DC8     '/'+0x80
 3380    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3381    00000004 ........              DC32    MSTAR_NFA
 3382                           MSLASH:
 3383    00000008 ........              DC32    DOCOL
 3384    0000000C ........              DC32    OVER
 3385    00000010 ........              DC32    TOR
 3386    00000014 ........              DC32    TOR
 3387    00000018 ........              DC32    DABS    // ( LSW MSW -- uLSW uMSW )
 3388    0000001C ........              DC32    R
 3389    00000020 ........              DC32    ABS
 3390    00000024 ........              DC32    USLASH
 3391    00000028 ........              DC32    RFROM
 3392    0000002C ........              DC32    R
 3393    00000030 ........              DC32    XORR
 3394    00000034 ........              DC32    PM
 3395    00000038 ........              DC32    SWAP
 3396    0000003C ........              DC32    RFROM
 3397    00000040 ........              DC32    PM
 3398    00000044 ........              DC32    SWAP
 3399    00000048 ........              DC32    SEMIS
 3400                           
 3401                           
 3402                           //      * STAR: ( n1 n2 -- prod=n3 )
 3403                           //      Leave the signed product n3 of two (32bit) signed numbers n1 and n2.
 3404                           
 3405                            SECTION .text : CONST (2)
 3406                           STAR_NFA:
 3407    00000000 81                    DC8     0x81
 3408    00000001 AA                    DC8     '*'+0x80
 3409    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3410    00000004 ........              DC32    MSLASH_NFA
 3411                           STAR:
 3412    00000008 ........              DC32    DOCOL
 3413    0000000C ........              DC32    MSTAR
 3414    00000010 ........              DC32    DROP
 3415    00000014 ........              DC32    SEMIS
 3416                           
 3417                           
 3418                           //      /MOD SLMOD:     ( n1 n2 -- rem quot )   SIGNED:
 3419                           //      Leave the remainder and signed quotient of n1/n2. The remainder has
 3420                           //      the sign of the dividend.
 3421                           
 3422                            SECTION .text : CONST (2)
 3423                           SLMOD_NFA:
 3424    00000000 84                    DC8     0x84
 3425    00000001 2F4D4F                DC8     '/MO'
 3426    00000004 C4                    DC8     'D'+0x80
 3427    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3428    00000008 ........              DC32    STAR_NFA
 3429                           SLMOD:
 3430    0000000C ........              DC32    DOCOL
 3431    00000010 ........              DC32    TOR
 3432    00000014 ........              DC32    STOD
 3433    00000018 ........              DC32    RFROM
 3434    0000001C ........              DC32    MSLASH
 3435    00000020 ........              DC32    SEMIS
 3436                           
 3437                           
 3438                           //      / SLASH:        ( sn1 sn2 -- sn ) SIGNED:
 3439                           //      Leave the signed quotient sn of sn1/sn2.
 3440                           
 3441                            SECTION .text : CONST (2)
 3442                           SLASH_NFA:
 3443    00000000 81                    DC8     0x81
 3444    00000001 AF                    DC8     '/'+0x80
 3445    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3446    00000004 ........              DC32    SLMOD_NFA
 3447                           SLASH:
 3448    00000008 ........              DC32    DOCOL
 3449    0000000C ........              DC32    SLMOD
 3450    00000010 ........              DC32    SWAP
 3451    00000014 ........              DC32    DROP
 3452    00000018 ........              DC32    SEMIS
 3453                           
 3454                           
 3455                           //      MOD MOD:        ( sn1 n2 -- modulo )
 3456                           //      Leave the remainder of sn1/n2, with the same sign as sn1.
 3457                           
 3458                            SECTION .text : CONST (2)
 3459                           MODD_NFA:
 3460    00000000 83                    DC8     0x83
 3461    00000001 4D4F                  DC8     'MO'
 3462    00000003 C4                    DC8     'D'+0x80
 3463                            ALIGNROM 2,0xFFFFFFFF
 3464    00000004 ........              DC32    SLASH_NFA
 3465                           MOD:
 3466    00000008 ........              DC32    DOCOL
 3467    0000000C ........              DC32    SLMOD
 3468    00000010 ........              DC32    DROP
 3469    00000014 ........              DC32    SEMIS
 3470                           
 3471                           
 3472                           //      */MOD SSMOD:    ( n1 n2 n3 -- n4 n5 )
 3473                           //      Leave the quotient n5 and remainder n4 of the operation n1*n2/n3 A
 3474                           //      31 bit intermediate product is used as for */.
 3475                           
 3476                            SECTION .text : CONST (2)
 3477                           SSMOD_NFA:
 3478    00000000 85                    DC8     0x85
 3479    00000001 2A2F4D4F              DC8     '*/MO'
 3480    00000005 C4                    DC8     'D'+0x80
 3481    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3482    00000008 ........              DC32    MODD_NFA
 3483                           SSMOD:
 3484    0000000C ........              DC32    DOCOL
 3485    00000010 ........              DC32    TOR
 3486    00000014 ........              DC32    MSTAR
 3487    00000018 ........              DC32    RFROM
 3488    0000001C ........              DC32    MSLASH
 3489    00000020 ........              DC32    SEMIS
 3490                           
 3491                           
 3492                           //      */ SSLASH:      ( n1 n2 n3 -- n4 )
 3493                           //      Leave the ratio n4 = n1*n2/n3 where all are signed numbers.
 3494                           //      Retention of an intermediate 31 bit product permits greater accuracy
 3495                           //      than would. be available with the sequence:
 3496                           //              n1  n2  *  n3  /
 3497                           
 3498                            SECTION .text : CONST (2)
 3499                           SSLASH_NFA:
 3500    00000000 82                    DC8     0x82
 3501    00000001 2A                    DC8     '*'
 3502    00000002 AF                    DC8     '/'+0x80
 3503    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3504    00000004 ........              DC32    SSMOD_NFA
 3505                           SSLASH:
 3506    00000008 ........              DC32    DOCOL
 3507    0000000C ........              DC32    SSMOD
 3508    00000010 ........              DC32    SWAP
 3509    00000014 ........              DC32    DROP
 3510    00000018 ........              DC32    SEMIS
 3511                           
 3512                           
 3513                           //      + PLUS: ( n1 n2 -- n3 )
 3514                           //      Add n1 and n2, leaving sum n3
 3515                           
 3516                            SECTION .text : CONST (2)
 3517                           PLUS_NFA:
 3518    00000000 81                    DC8     0x81
 3519    00000001 AB                    DC8     0xAB    // '+' + 0x80
 3520    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3521    00000004 ........              DC32    SSLASH_NFA
 3522                           PLUS:
 3523    00000008 ........              DC32    .+5
 3524                            SECTION .text : CODE (2)
 3525                                   POP2t_r0
 3525.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3525.2                         //#ifndef TOSCT
 3525.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3525.4                         //#endif
 3525.5                         //      ADDS    p, p, #4
 3525.6                                 ENDM
 3526                                   POP2n_r1
 3526.1  00000004 57F8041B              LDR     n, [p],#4
 3526.2                         //      LDR     n, [p]
 3526.3                         //      ADDS    p, p, #4
 3526.4                                 ENDM
 3527    00000008 4018                  ADDS    t_r0, t_r0, n
 3528                                   TPUSH_r0
 3528                                   PUSHt_r0        // push t to p, pre decrement p
 3528.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3528.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3528.3                         //      STR     t, [p]
 3528.4                                 ENDM
 3528                                   NEXT
 3528.1                         // ARMv7-M Thumb = .+5
 3528.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3528.3                         // ARMv6-M Thumb = .+4
 3528.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3528                                   NEXT1
 3528.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3528.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3528.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3528.4                         // ARMv6-M Thumb = .+4
 3528.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3528.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3528.7                                 ENDM
 3528.8                                 ENDM
 3528.9                                 ENDM
 3529                           
 3530                           
 3531                           //      - SUBB: ( n1 n2 -- n3 )
 3532                           //      Leave the difference of n1-n2 as n3.
 3533                           //      1 2 - . -1
 3534                           //      2 1 - .  1
 3535                           
 3536                            SECTION .text : CONST (2)
 3537                           SUB_NFA:
 3538    00000000 81                    DC8     0x81
 3539    00000001 AD                    DC8     '-'+0x80
 3540    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3541    00000004 ........              DC32    PLUS_NFA
 3542                           SUBB:
 3543    00000008 ........              DC32    .+5
 3544                            SECTION .text : CODE (2)
 3545                                   POP2t_r0
 3545.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3545.2                         //#ifndef TOSCT
 3545.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3545.4                         //#endif
 3545.5                         //      ADDS    p, p, #4
 3545.6                                 ENDM
 3546                                   POP2n_r1
 3546.1  00000004 57F8041B              LDR     n, [p],#4
 3546.2                         //      LDR     n, [p]
 3546.3                         //      ADDS    p, p, #4
 3546.4                                 ENDM
 3547    00000008 081A                  SUBS    t_r0, n, t_r0
 3548                                   TPUSH_r0
 3548                                   PUSHt_r0        // push t to p, pre decrement p
 3548.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3548.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3548.3                         //      STR     t, [p]
 3548.4                                 ENDM
 3548                                   NEXT
 3548.1                         // ARMv7-M Thumb = .+5
 3548.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3548.3                         // ARMv6-M Thumb = .+4
 3548.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3548                                   NEXT1
 3548.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3548.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3548.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3548.4                         // ARMv6-M Thumb = .+4
 3548.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3548.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3548.7                                 ENDM
 3548.8                                 ENDM
 3548.9                                 ENDM
 3549                           
 3550                           
 3551                           //      = EQUAL:        (n1 n2 -- f )
 3552                           //      Leave a true flag if n1=n2// otherwise leave a false flag.
 3553                           
 3554                            SECTION .text : CONST (2)
 3555                           EQUAL_NFA:
 3556    00000000 81                    DC8     0x81
 3557    00000001 BD                    DC8     '='+0x80
 3558    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3559    00000004 ........              DC32    SUB_NFA
 3560                           EQUAL:
 3561    00000008 ........              DC32    .+5
 3562                            SECTION .text : CODE (2)
 3563                           #ifdef TRUE_EQU_NEG_ONE
 3564    00000000 4040                  EORS    t_r0, t_r0
 3565                           #endif
 3566                                   POP2t_r0
 3566.1  00000002 57F8040B              LDR     t, [p],#4       // Post-increment
 3566.2                         //#ifndef TOSCT
 3566.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3566.4                         //#endif
 3566.5                         //      ADDS    p, p, #4
 3566.6                                 ENDM
 3567                                   POP2n_r1
 3567.1  00000006 57F8041B              LDR     n, [p],#4
 3567.2                         //      LDR     n, [p]
 3567.3                         //      ADDS    p, p, #4
 3567.4                                 ENDM
 3568    0000000A 401A                  SUBS    t_r0, t_r0, n
 3569    0000000C 09D0                  BEQ     EQUAL_TRUE
 3570    0000000E 4040                  EORS    t_r0, t_r0
 3571                                   TPUSH_r0
 3571                                   PUSHt_r0        // push t to p, pre decrement p
 3571.1  00000010 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3571.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3571.3                         //      STR     t, [p]
 3571.4                                 ENDM
 3571                                   NEXT
 3571.1                         // ARMv7-M Thumb = .+5
 3571.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3571.3                         // ARMv6-M Thumb = .+4
 3571.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3571                                   NEXT1
 3571.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3571.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3571.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3571.4                         // ARMv6-M Thumb = .+4
 3571.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3571.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3571.7                                 ENDM
 3571.8                                 ENDM
 3571.9                                 ENDM
 3572                           
 3573                           EQUAL_TRUE:
 3574                           #ifdef TRUE_EQU_NEG_ONE
 3575    00000022 0138                  SUBS    t_r0, #1 // -1
 3576                           #else
 3578                           #endif
 3579                                   TPUSH_r0
 3579                                   PUSHt_r0        // push t to p, pre decrement p
 3579.1  00000024 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3579.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3579.3                         //      STR     t, [p]
 3579.4                                 ENDM
 3579                                   NEXT
 3579.1                         // ARMv7-M Thumb = .+5
 3579.2  00000028 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3579.3                         // ARMv6-M Thumb = .+4
 3579.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3579                                   NEXT1
 3579.1  0000002C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3579.2  00000030 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3579.3  00000034 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3579.4                         // ARMv6-M Thumb = .+4
 3579.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3579.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3579.7                                 ENDM
 3579.8                                 ENDM
 3579.9                                 ENDM
 3580                           /*
 3581                                   DC32    DOCOL
 3582                                   DC32    SUBB
 3583                                   DC32    ZEQU
 3584                                   DC32    SEMIS
 3585                           */
 3586                           
 3587                           
 3588                           //      < LESSTHAN:     ( n1 n2 -- f ) SIGNED:
 3589                           //      Leave a true flag if n1 is less than n2 otherwise leave a false flag.
 3590                           //      C0 1 < . 0  -1 C0 < . 1
 3591                           
 3592                            SECTION .text : CONST (2)
 3593                           LESSTHAN_NFA:
 3594    00000000 81                    DC8     0x81
 3595    00000001 BC                    DC8     '<'+0x80
 3596    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3597    00000004 ........              DC32    EQUAL_NFA
 3598                           LESSTHAN:
 3599    00000008 ........              DC32    .+5
 3600                            SECTION .text : CODE (2)
 3601                           #ifdef TRUE_EQU_NEG_ONE
 3602    00000000 4040                  EORS    t_r0, t_r0      // zero t
 3603    00000002 0138                  SUBS    t_r0, #1        // -1
 3604                           #else
 3606                           #endif
 3607                                   POP2n_r1        // n2
 3607.1  00000004 57F8041B              LDR     n, [p],#4
 3607.2                         //      LDR     n, [p]
 3607.3                         //      ADDS    p, p, #4
 3607.4                                 ENDM
 3608                                   POP2w_r2        // n1
 3608.1  00000008 57F8042B              LDR     w, [p],#4
 3608.2                         //      LDR     w, [p]
 3608.3                         //      ADDS    p, p, #4
 3608.4                                 ENDM
 3609    0000000C 9142                  CMP     n, w    // n1 < n2
 3610    0000000E 00DC                  BGT     LESS1
 3611                           
 3612    00000010 4040                  EORS    t_r0, t_r0    // zero t =< n
 3613                           LESS1:
 3614                                   TPUSH_r0
 3614                                   PUSHt_r0        // push t to p, pre decrement p
 3614.1  00000012 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3614.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3614.3                         //      STR     t, [p]
 3614.4                                 ENDM
 3614                                   NEXT
 3614.1                         // ARMv7-M Thumb = .+5
 3614.2  00000016 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3614.3                         // ARMv6-M Thumb = .+4
 3614.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3614                                   NEXT1
 3614.1  0000001A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3614.2  0000001E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3614.3  00000022 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3614.4                         // ARMv6-M Thumb = .+4
 3614.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3614.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3614.7                                 ENDM
 3614.8                                 ENDM
 3614.9                                 ENDM
 3615                           
 3616                           
 3617                           //      U< ULESSTHAN:   ( n1 n2 -- f )  UNSIGNED:
 3618                           //      Leave a true flag if n1 is less than n2 otherwise leave a false flag.
 3619                           //      -1 -2 U< . 0  -1 2 U< . 0  1 2 U< . 1
 3620                           
 3621                            SECTION .text : CONST (2)
 3622                           ULESSTHAN_NFA:
 3623    00000000 82                    DC8     0x82
 3624    00000001 55                    DC8     'U'
 3625    00000002 BC                    DC8     '<'+0x80
 3626    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3627    00000004 ........              DC32    LESSTHAN_NFA
 3628                           ULESSTHAN:
 3629    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3630    00000010 .............         DC32    XORR, ZLESS
                  ...          
 3631    00000018 ........              DC32    ZBRAN
 3632    0000001C 18000000              DC32    ULES1-. //IF
 3633                           
 3634    00000020 .............         DC32    DROP, ZLESS
                  ...          
 3635    00000028 ........              DC32    ZEQU
 3636    0000002C ........              DC32    BRAN
 3637    00000030 0C000000              DC32    ULES2-.
 3638                           
 3639                           ULES1:
 3640    00000034 .............         DC32    SUBB,ZLESS      //ELSE
                  ...          
 3641                           
 3642                           ULES2:
 3643    0000003C ........              DC32    SEMIS           //endif
 3644                           
 3645                           
 3646                           //      > GREATERTHAN:  ( n1 n2 -- f )  SIGNED: L0
 3647                           //      Leave a true flag if n1 is greater than n2 otherwise a false flag.
 3648                           //      -1 1 > . 0  1 -1 > . 1
 3649                           
 3650                            SECTION .text : CONST (2)
 3651                           GREATERTHAN_NFA:
 3652    00000000 81                    DC8     0x81
 3653    00000001 BE                    DC8     '>'+0x80
 3654    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3655    00000004 ........              DC32    ULESSTHAN_NFA
 3656                           GREATERTHAN:
 3657    00000008 ........              DC32    DOCOL
 3658    0000000C ........              DC32    SWAP
 3659    00000010 ........              DC32    LESSTHAN
 3660    00000014 ........              DC32    SEMIS
 3661                           
 3662                           
 3663                           //      0= ZEQU:        ( n -- f )
 3664                           //      Leave a true flag is the number is equal to zero, otherwise leave a
 3665                           //      false flag. CHANGED Code dependent on true flag being 1 FOR -1 TRUE
 3666                           
 3667                            SECTION .text : CONST (2)
 3668                           ZEQU_NFA:
 3669    00000000 82                    DC8     0x82
 3670    00000001 30                    DC8     '0'
 3671    00000002 BD                    DC8     '='+0x80
 3672    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3673    00000004 ........              DC32    GREATERTHAN_NFA
 3674                           ZEQU:
 3675    00000008 ........              DC32    .+5
 3676                            SECTION .text : CODE (2)
 3677    00000000 4040                  EORS    t_r0, t_r0
 3678                                   POP2n_r1
 3678.1  00000002 57F8041B              LDR     n, [p],#4
 3678.2                         //      LDR     n, [p]
 3678.3                         //      ADDS    p, p, #4
 3678.4                                 ENDM
 3679    00000006 0029                  CMP     n, #0
 3680    00000008 00D1                  BNE     ZEQU_ZERO
 3681                           
 3682                           #ifdef TRUE_EQU_NEG_ONE
 3683    0000000A 401E                  SUBS    t_r0, t_r0, #1
 3684                           #else
 3686                           #endif
 3687                           
 3688                           ZEQU_ZERO:
 3689                                   TPUSH_r0
 3689                                   PUSHt_r0        // push t to p, pre decrement p
 3689.1  0000000C 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3689.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3689.3                         //      STR     t, [p]
 3689.4                                 ENDM
 3689                                   NEXT
 3689.1                         // ARMv7-M Thumb = .+5
 3689.2  00000010 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3689.3                         // ARMv6-M Thumb = .+4
 3689.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3689                                   NEXT1
 3689.1  00000014 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3689.2  00000018 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3689.3  0000001C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3689.4                         // ARMv6-M Thumb = .+4
 3689.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3689.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3689.7                                 ENDM
 3689.8                                 ENDM
 3689.9                                 ENDM
 3690                           
 3691                           
 3692                           //      0< ZLESS:       ( n -- f )
 3693                           //      Leave a true flag if the number is less than zero (negative),
 3694                           //      otherwise leave a false flag.
 3695                           
 3696                            SECTION .text : CONST (2)
 3697                           ZLESS_NFA:
 3698    00000000 82                    DC8     0x82
 3699    00000001 30                    DC8     '0'
 3700    00000002 BC                    DC8     '<'+0x80
 3701    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3702    00000004 ........              DC32    ZEQU_NFA
 3703                           ZLESS:
 3704    00000008 ........              DC32    .+5
 3705                            SECTION .text : CODE (2)
 3706                           #ifdef TOSCT    // REPLACING t SO THIS IS FASTER THAN POP2n
 3709                           #else
 3710                                   POP2n_r1
 3710.1  00000000 57F8041B              LDR     n, [p],#4
 3710.2                         //      LDR     n, [p]
 3710.3                         //      ADDS    p, p, #4
 3710.4                                 ENDM
 3711                           #endif
 3712                           #ifdef TRUE_EQU_NEG_ONE
 3713    00000004 4040            EORS    t_r0, t_r0
 3714    00000006 0138                  SUBS    t_r0, #1        // TRUE -1
 3715                           #else
 3717                           #endif
 3718    00000008 0943                  ORRS    n, n, n // SET FLAGS
 3719    0000000A 00D4                  BMI     ZLESS1    // JS ZLESS1
 3720                           
 3721    0000000C 4040                  EORS    t_r0, t_r0      // FALSE
 3722                           ZLESS1:
 3723                                   TPUSH_r0
 3723                                   PUSHt_r0        // push t to p, pre decrement p
 3723.1  0000000E 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3723.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3723.3                         //      STR     t, [p]
 3723.4                                 ENDM
 3723                                   NEXT
 3723.1                         // ARMv7-M Thumb = .+5
 3723.2  00000012 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3723.3                         // ARMv6-M Thumb = .+4
 3723.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3723                                   NEXT1
 3723.1  00000016 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3723.2  0000001A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3723.3  0000001E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3723.4                         // ARMv6-M Thumb = .+4
 3723.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3723.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3723.7                                 ENDM
 3723.8                                 ENDM
 3723.9                                 ENDM
 3724                           
 3725                           
 3726                           //      BIN BIN:        ( -- )
 3727                           //      Set the numeric conversion base to TWO (bianry).
 3728                           
 3729                            SECTION .text : CONST (2)
 3730                           BIN_NFA:
 3731    00000000 83                    DC8     0x83
 3732    00000001 4249                  DC8     'BI'
 3733    00000003 CE                    DC8     'N'+0x80
 3734                            ALIGNROM 2,0xFFFFFFFF
 3735    00000004 ........              DC32    ZLESS_NFA
 3736                           BIN:
 3737    00000008 ........              DC32    DOCOL
 3738    0000000C ........02000   DC32  STRVA, 2, NBASE
                  000........  
 3739    00000018 ........              DC32    SEMIS
 3740                           
 3741                           
 3742                           //      HEX HEX:        ( -- )
 3743                           //      Set the numeric conversion base to sixteen (hexadecimal).
 3744                           
 3745                            SECTION .text : CONST (2)
 3746                           HEX_NFA:
 3747    00000000 83                    DC8     0x83
 3748    00000001 4845                  DC8     'HE'
 3749    00000003 D8                    DC8     'X'+0x80
 3750                            ALIGNROM 2,0xFFFFFFFF
 3751    00000004 ........              DC32    BIN_NFA
 3752                           HEX:
 3753    00000008 ........              DC32    DOCOL
 3754    0000000C ........10000   DC32  STRVA, 16, NBASE
                  000........  
 3755    00000018 ........              DC32    SEMIS
 3756                           
 3757                           
 3758                           //      DECIMAL DECIMAL:        ( -- )
 3759                           //      Set the numeric conversion base to TEN (decimal).
 3760                           //      DEC IS A NUMBER!
 3761                           
 3762                            SECTION .text : CONST (2)
 3763                           DECIMAL_NFA:
 3764    00000000 87                    DC8     0x87
 3765    00000001 444543494D41          DC8     'DECIMA'
 3766    00000007 CC                    DC8     'L'+0x80
 3767                            ALIGNROM 2,0xFFFFFFFF
 3768    00000008 ........              DC32    HEX_NFA
 3769                           DECIMAL:
 3770    0000000C ........              DC32    DOCOL
 3771    00000010 ........0A000   DC32  STRVA, 10, NBASE
                  000........  
 3772    0000001C ........              DC32    SEMIS
 3773                           
 3774                           
 3775                           //      NEGATE NEGATE: ( n1 -- n2 ) RENAMED: MINUS to NEGATE
 3776                           //      Leave the two's complement of a number.
 3777                           
 3778                            SECTION .text : CONST (2)
 3779                           NEGATE_NFA:
 3780    00000000 86                    DC8     0x86
 3781    00000001 4E45474154            DC8     'NEGAT'
 3782    00000006 C5                    DC8     'E'+0x80
 3783    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 3784    00000008 ........              DC32    DECIMAL_NFA
 3785                           NEGATE:
 3786    0000000C ........              DC32    .+5
 3787                            SECTION .text : CODE (2)
 3788                                   POP2t_r0                // MVN YES
 3788.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3788.2                         //#ifndef TOSCT
 3788.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3788.4                         //#endif
 3788.5                         //      ADDS    p, p, #4
 3788.6                                 ENDM
 3789    00000004 C043                  MVNS  t_r0, t_r0     // 1's compliment
 3790    00000006 401C                  ADDS  t_r0, t_r0, #1 // 2's compliment
 3791                                   TPUSH_r0
 3791                                   PUSHt_r0        // push t to p, pre decrement p
 3791.1  00000008 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3791.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3791.3                         //      STR     t, [p]
 3791.4                                 ENDM
 3791                                   NEXT
 3791.1                         // ARMv7-M Thumb = .+5
 3791.2  0000000C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3791.3                         // ARMv6-M Thumb = .+4
 3791.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3791                                   NEXT1
 3791.1  00000010 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3791.2  00000014 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3791.3  00000018 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3791.4                         // ARMv6-M Thumb = .+4
 3791.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3791.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3791.7                                 ENDM
 3791.8                                 ENDM
 3791.9                                 ENDM
 3792                           
 3793                           
 3794                           //      ABS ABS:        ( n -- ub )
 3795                           //      Leave the absolute value of n as un.
 3796                           
 3797                            SECTION .text : CONST (2)
 3798                           ABS1_NFA:
 3799    00000000 83                    DC8     0x83
 3800    00000001 4142                  DC8     'AB'
 3801    00000003 D3                    DC8     'S'+0x80
 3802                            ALIGNROM 2,0xFFFFFFFF
 3803    00000004 ........              DC32    NEGATE_NFA
 3804                           ABS:
 3805    00000008 ........              DC32    DOCOL
 3806    0000000C ........              DC32    DUP
 3807    00000010 ........              DC32    PM
 3808    00000014 ........              DC32    SEMIS
 3809                           
 3810                           
 3811                           //      MIN MIN:        ( n1 n2 -- min )
 3812                           //      Leave the smaller of two numbers.
 3813                           
 3814                            SECTION .text : CONST (2)
 3815                           MIN_NFA:
 3816    00000000 83                    DC8     0x83
 3817    00000001 4D49                  DC8     'MI'
 3818    00000003 CE                    DC8     'N'+0x80
 3819                            ALIGNROM 2,0xFFFFFFFF
 3820    00000004 ........              DC32    ABS1_NFA
 3821                           MIN:
 3822    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3823    00000010 ........              DC32    GREATERTHAN
 3824    00000014 ........              DC32    ZBRAN   //IF
 3825    00000018 08000000              DC32     MIN1-.
 3826                           
 3827    0000001C ........              DC32    SWAP    //endif
 3828                           MIN1:
 3829    00000020 ........              DC32    DROP
 3830    00000024 ........              DC32    SEMIS
 3831                           
 3832                           
 3833                           //      MAX MAX:        ( n1 n2 -- max )
 3834                           //      Leave the greater of two numbers.
 3835                           
 3836                            SECTION .text : CONST (2)
 3837                           MAX_NFA:
 3838    00000000 83                    DC8     0x83
 3839    00000001 4D41                  DC8     'MA'
 3840    00000003 D8                    DC8     'X'+0x80
 3841                            ALIGNROM 2,0xFFFFFFFF
 3842    00000004 ........              DC32    MIN_NFA
 3843                           MAX:
 3844    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3845    00000010 ........              DC32    LESSTHAN
 3846    00000014 ........              DC32    ZBRAN   //IF
 3847    00000018 08000000              DC32     MAX1-.
 3848                           
 3849    0000001C ........              DC32    SWAP    //endif
 3850                           MAX1:
 3851    00000020 ........              DC32    DROP
 3852    00000024 ........              DC32    SEMIS
 3853                           
 3854                           
 3855                           //      AND ANDD:       ( n1 n2 -- n2 )
 3856                           //      Leave the bitwise logical and of n1 and n2 as n3.
 3857                           
 3858                            SECTION .text : CONST (2)
 3859                           ANDD_NFA:
 3860    00000000 83                    DC8     0x83
 3861    00000001 414E                  DC8     'AN'
 3862    00000003 C4                    DC8     'D'+0x80
 3863                            ALIGNROM 2,0xFFFFFFFF
 3864    00000004 ........              DC32    MAX_NFA
 3865                           ANDD:
 3866    00000008 ........              DC32    .+5
 3867                            SECTION .text : CODE (2)
 3868                                   POP2t_r0
 3868.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3868.2                         //#ifndef TOSCT
 3868.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3868.4                         //#endif
 3868.5                         //      ADDS    p, p, #4
 3868.6                                 ENDM
 3869                                   POP2n_r1
 3869.1  00000004 57F8041B              LDR     n, [p],#4
 3869.2                         //      LDR     n, [p]
 3869.3                         //      ADDS    p, p, #4
 3869.4                                 ENDM
 3870    00000008 0840                  ANDS     t_r0, t_r0, n_r1
 3871                                   TPUSH_r0
 3871                                   PUSHt_r0        // push t to p, pre decrement p
 3871.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3871.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3871.3                         //      STR     t, [p]
 3871.4                                 ENDM
 3871                                   NEXT
 3871.1                         // ARMv7-M Thumb = .+5
 3871.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3871.3                         // ARMv6-M Thumb = .+4
 3871.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3871                                   NEXT1
 3871.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3871.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3871.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3871.4                         // ARMv6-M Thumb = .+4
 3871.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3871.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3871.7                                 ENDM
 3871.8                                 ENDM
 3871.9                                 ENDM
 3872                           
 3873                           
 3874                           //      OR OR:  ( n1 n2 -- n3 )
 3875                           //      Leave the bit-wise logical or of n1 and n2 as n3.
 3876                           
 3877                            SECTION .text : CONST (2)
 3878                           OR_NFA:
 3879    00000000 82                    DC8     0x82
 3880    00000001 4F                    DC8     'O'
 3881    00000002 D2                    DC8     'R'+0x80
 3882    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3883    00000004 ........              DC32    ANDD_NFA
 3884                           OR:
 3885    00000008 ........              DC32    .+5
 3886                            SECTION .text : CODE (2)
 3887                                   POP2t_r0
 3887.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3887.2                         //#ifndef TOSCT
 3887.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3887.4                         //#endif
 3887.5                         //      ADDS    p, p, #4
 3887.6                                 ENDM
 3888                                   POP2n_r1
 3888.1  00000004 57F8041B              LDR     n, [p],#4
 3888.2                         //      LDR     n, [p]
 3888.3                         //      ADDS    p, p, #4
 3888.4                                 ENDM
 3889    00000008 0843                  ORRS     t_r0, t_r0, n_r1
 3890                                   TPUSH_r0
 3890                                   PUSHt_r0        // push t to p, pre decrement p
 3890.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3890.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3890.3                         //      STR     t, [p]
 3890.4                                 ENDM
 3890                                   NEXT
 3890.1                         // ARMv7-M Thumb = .+5
 3890.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3890.3                         // ARMv6-M Thumb = .+4
 3890.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3890                                   NEXT1
 3890.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3890.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3890.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3890.4                         // ARMv6-M Thumb = .+4
 3890.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3890.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3890.7                                 ENDM
 3890.8                                 ENDM
 3890.9                                 ENDM
 3891                           
 3892                           
 3893                           //      NOT NOT: ( nl -- n2 )
 3894                           //      Leave the bitwise logical not of n1 as n2
 3895                           
 3896                            SECTION .text : CONST (2)
 3897                           NOT_NFA:
 3898    00000000 83                    DC8     0x83
 3899    00000001 4E4F                  DC8     'NO'
 3900    00000003 D4                    DC8     'T'+0x80
 3901                            ALIGNROM 2,0xFFFFFFFF
 3902    00000004 ........              DC32    OR_NFA
 3903                           NOT:
 3904    00000008 ........              DC32    .+5
 3905                            SECTION .text : CODE (2)
 3906                                   POP2t_r0
 3906.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3906.2                         //#ifndef TOSCT
 3906.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3906.4                         //#endif
 3906.5                         //      ADDS    p, p, #4
 3906.6                                 ENDM
 3907    00000004 C043                  MVNS    t_r0, t_r0      // 1's compliment
 3908                                   TPUSH_r0
 3908                                   PUSHt_r0        // push t to p, pre decrement p
 3908.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3908.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3908.3                         //      STR     t, [p]
 3908.4                                 ENDM
 3908                                   NEXT
 3908.1                         // ARMv7-M Thumb = .+5
 3908.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3908.3                         // ARMv6-M Thumb = .+4
 3908.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3908                                   NEXT1
 3908.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3908.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3908.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3908.4                         // ARMv6-M Thumb = .+4
 3908.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3908.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3908.7                                 ENDM
 3908.8                                 ENDM
 3908.9                                 ENDM
 3909                           
 3910                           
 3911                           //      XORR XOR:       ( nl n2 -- n3 )
 3912                           //      Leave the bitwise logical exclusive or n1 and n2 as n3
 3913                           
 3914                            SECTION .text : CONST (2)
 3915                           XORR_NFA:
 3916    00000000 83                    DC8     0x83
 3917    00000001 584F                  DC8     'XO'
 3918    00000003 D2                    DC8     'R'+0x80
 3919                            ALIGNROM 2,0xFFFFFFFF
 3920    00000004 ........              DC32    NOT_NFA
 3921                           XORR:
 3922    00000008 ........              DC32    .+5
 3923                            SECTION .text : CODE (2)
 3924                                   POP2t_r0
 3924.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3924.2                         //#ifndef TOSCT
 3924.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3924.4                         //#endif
 3924.5                         //      ADDS    p, p, #4
 3924.6                                 ENDM
 3925                                   POP2n_r1
 3925.1  00000004 57F8041B              LDR     n, [p],#4
 3925.2                         //      LDR     n, [p]
 3925.3                         //      ADDS    p, p, #4
 3925.4                                 ENDM
 3926    00000008 4840                  EORS     t_r0, t_r0, n_r1
 3927                                   TPUSH_r0
 3927                                   PUSHt_r0        // push t to p, pre decrement p
 3927.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3927.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3927.3                         //      STR     t, [p]
 3927.4                                 ENDM
 3927                                   NEXT
 3927.1                         // ARMv7-M Thumb = .+5
 3927.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3927.3                         // ARMv6-M Thumb = .+4
 3927.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3927                                   NEXT1
 3927.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3927.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3927.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3927.4                         // ARMv6-M Thumb = .+4
 3927.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3927.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3927.7                                 ENDM
 3927.8                                 ENDM
 3927.9                                 ENDM
 3928                           
 3929                           //      SXTH SXTH:      ( nl -- n3 )
 3930                           //      Sign extend HALFWORD on the stack
 3931                           
 3932                            SECTION .text : CONST (2)
 3933                           SXTH_NFA:
 3934    00000000 84                    DC8     0x84
 3935    00000001 535854                DC8     'SXT'
 3936    00000004 C8                    DC8     'H'+0x80
 3937    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3938    00000008 ........              DC32    XORR_NFA
 3939                           SXH:
 3940    0000000C ........              DC32    .+5
 3941                            SECTION .text : CODE (2)
 3942                                   POP2t_r0
 3942.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3942.2                         //#ifndef TOSCT
 3942.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3942.4                         //#endif
 3942.5                         //      ADDS    p, p, #4
 3942.6                                 ENDM
 3943    00000004 00B2                  SXTH     t_r0, t_r0
 3944                                   TPUSH_r0
 3944                                   PUSHt_r0        // push t to p, pre decrement p
 3944.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3944.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3944.3                         //      STR     t, [p]
 3944.4                                 ENDM
 3944                                   NEXT
 3944.1                         // ARMv7-M Thumb = .+5
 3944.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3944.3                         // ARMv6-M Thumb = .+4
 3944.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3944                                   NEXT1
 3944.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3944.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3944.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3944.4                         // ARMv6-M Thumb = .+4
 3944.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3944.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3944.7                                 ENDM
 3944.8                                 ENDM
 3944.9                                 ENDM
 3945                           
 3946                           
 3947                           //      SXTB SXTB:      ( nl -- n3 )
 3948                           //      Sign extend byte in the word on the stack
 3949                           
 3950                            SECTION .text : CONST (2)
 3951                           SXTB_NFA:
 3952    00000000 84                    DC8     0x84
 3953    00000001 535854                DC8     'SXT'
 3954    00000004 C2                    DC8     'B'+0x80
 3955    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3956    00000008 ........              DC32    SXTH_NFA
 3957                           SXB:
 3958    0000000C ........              DC32    .+5
 3959                            SECTION .text : CODE (2)
 3960                                   POP2t_r0
 3960.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3960.2                         //#ifndef TOSCT
 3960.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3960.4                         //#endif
 3960.5                         //      ADDS    p, p, #4
 3960.6                                 ENDM
 3961    00000004 40B2                  SXTB     t_r0, t_r0
 3962                                   TPUSH_r0
 3962                                   PUSHt_r0        // push t to p, pre decrement p
 3962.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3962.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3962.3                         //      STR     t, [p]
 3962.4                                 ENDM
 3962                                   NEXT
 3962.1                         // ARMv7-M Thumb = .+5
 3962.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3962.3                         // ARMv6-M Thumb = .+4
 3962.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3962                                   NEXT1
 3962.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3962.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3962.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3962.4                         // ARMv6-M Thumb = .+4
 3962.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3962.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3962.7                                 ENDM
 3962.8                                 ENDM
 3962.9                                 ENDM
 3963                           
 3964                           
 3965                           //      REVW REVW:      ( n -- n )
 3966                           //      Reverse bytes in n.
 3967                           
 3968                            SECTION .text : CONST (2)
 3969                           REVW_NFA:
 3970    00000000 84                    DC8     0x84
 3971    00000001 524556                DC8     'REV'
 3972    00000004 D7                    DC8     'W'+0x80
 3973    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3974    00000008 ........              DC32    SXTB_NFA
 3975                           REVW:
 3976    0000000C ........              DC32    .+5
 3977                            SECTION .text : CODE (2)
 3978                                   POP2t_r0
 3978.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 3978.2                         //#ifndef TOSCT
 3978.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3978.4                         //#endif
 3978.5                         //      ADDS    p, p, #4
 3978.6                                 ENDM
 3979    00000004 00BA                  REV     t_r0, t_r0
 3980                                   TPUSH_r0
 3980                                   PUSHt_r0        // push t to p, pre decrement p
 3980.1  00000006 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 3980.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 3980.3                         //      STR     t, [p]
 3980.4                                 ENDM
 3980                                   NEXT
 3980.1                         // ARMv7-M Thumb = .+5
 3980.2  0000000A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 3980.3                         // ARMv6-M Thumb = .+4
 3980.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 3980                                   NEXT1
 3980.1  0000000E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 3980.2  00000012 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 3980.3  00000016 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 3980.4                         // ARMv6-M Thumb = .+4
 3980.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3980.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3980.7                                 ENDM
 3980.8                                 ENDM
 3980.9                                 ENDM
 3981                           
 3982                           
 3983                           //      ASR ASR:   ( sn count -- sn' )
 3984                           //      Shift sn (sign-extended) right by count.
 3985                           //      Valid count values are 0 to 31.
 3986                           
 3987                            SECTION .text : CONST (2)
 3988                           ASR_NFA:
 3989    00000000 83                    DC8     0x83
 3990    00000001 4153                  DC8     'AS'
 3991    00000003 D2                    DC8     'R'+0x80
 3992                            ALIGNROM 2,0xFFFFFFFF
 3993    00000004 ........              DC32    REVW_NFA
 3994                           ASR:
 3995    00000008 ........              DC32    .+5
 3996                            SECTION .text : CODE (2)
 3997                                   POP2w_r2        ; shift count
 3997.1  00000000 57F8042B              LDR     w, [p],#4
 3997.2                         //      LDR     w, [p]
 3997.3                         //      ADDS    p, p, #4
 3997.4                                 ENDM
 3998                                   POP2t_r0        ; original data
 3998.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 3998.2                         //#ifndef TOSCT
 3998.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 3998.4                         //#endif
 3998.5                         //      ADDS    p, p, #4
 3998.6                                 ENDM
 3999    00000008 1041                  ASRS    t_r0, t_r0, w_r2
 4000                                   TPUSH_r0        ; shifted data
 4000                                   PUSHt_r0        // push t to p, pre decrement p
 4000.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4000.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4000.3                         //      STR     t, [p]
 4000.4                                 ENDM
 4000                                   NEXT
 4000.1                         // ARMv7-M Thumb = .+5
 4000.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4000.3                         // ARMv6-M Thumb = .+4
 4000.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4000                                   NEXT1
 4000.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4000.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4000.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4000.4                         // ARMv6-M Thumb = .+4
 4000.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4000.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4000.7                                 ENDM
 4000.8                                 ENDM
 4000.9                                 ENDM
 4001                           
 4002                           
 4003                           //      LSR LSR:   ( n count -- n' )
 4004                           //      Logical (zero-extended) shift right by count.
 4005                           //      Valid count values are 0 to 31.
 4006                           
 4007                            SECTION .text : CONST (2)
 4008                           LSR_NFA:
 4009    00000000 83                    DC8     0x83
 4010    00000001 4C53                  DC8     'LS'
 4011    00000003 D2                    DC8     'R'+0x80
 4012                            ALIGNROM 2,0xFFFFFFFF
 4013    00000004 ........              DC32    ASR_NFA
 4014                           LSR:
 4015    00000008 ........              DC32    .+5
 4016                            SECTION .text : CODE (2)
 4017                                   POP2w_r2        ; shift count
 4017.1  00000000 57F8042B              LDR     w, [p],#4
 4017.2                         //      LDR     w, [p]
 4017.3                         //      ADDS    p, p, #4
 4017.4                                 ENDM
 4018                                   POP2t_r0        ; original data
 4018.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 4018.2                         //#ifndef TOSCT
 4018.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 4018.4                         //#endif
 4018.5                         //      ADDS    p, p, #4
 4018.6                                 ENDM
 4019    00000008 D040                  LSRS    t_r0, t_r0, w
 4020                                   TPUSH_r0        ; shifted data
 4020                                   PUSHt_r0        // push t to p, pre decrement p
 4020.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4020.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4020.3                         //      STR     t, [p]
 4020.4                                 ENDM
 4020                                   NEXT
 4020.1                         // ARMv7-M Thumb = .+5
 4020.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4020.3                         // ARMv6-M Thumb = .+4
 4020.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4020                                   NEXT1
 4020.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4020.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4020.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4020.4                         // ARMv6-M Thumb = .+4
 4020.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4020.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4020.7                                 ENDM
 4020.8                                 ENDM
 4020.9                                 ENDM
 4021                           
 4022                           
 4023                           //      LSL LSL:   ( n count -- n' )
 4024                           //      Logical (zero-extended) shift left by count.
 4025                           //      Valid count values are 0 to 31.
 4026                           
 4027                            SECTION .text : CONST (2)
 4028                           LSL_NFA:
 4029    00000000 83                    DC8     0x83
 4030    00000001 4C53                  DC8     'LS'
 4031    00000003 CC                    DC8     'L'+0x80
 4032                            ALIGNROM 2,0xFFFFFFFF
 4033    00000004 ........              DC32    LSR_NFA
 4034                           LSL:
 4035    00000008 ........              DC32    .+5
 4036                            SECTION .text : CODE (2)
 4037                                   POP2w_r2        ; shift count
 4037.1  00000000 57F8042B              LDR     w, [p],#4
 4037.2                         //      LDR     w, [p]
 4037.3                         //      ADDS    p, p, #4
 4037.4                                 ENDM
 4038                                   POP2t_r0        ; original data
 4038.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 4038.2                         //#ifndef TOSCT
 4038.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 4038.4                         //#endif
 4038.5                         //      ADDS    p, p, #4
 4038.6                                 ENDM
 4039    00000008 9040                  LSLS    t_r0, t_r0, w
 4040                                   TPUSH_r0        ; shifted data---
 4040                                   PUSHt_r0        // push t to p, pre decrement p
 4040.1  0000000A 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4040.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4040.3                         //      STR     t, [p]
 4040.4                                 ENDM
 4040                                   NEXT
 4040.1                         // ARMv7-M Thumb = .+5
 4040.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4040.3                         // ARMv6-M Thumb = .+4
 4040.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4040                                   NEXT1
 4040.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4040.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4040.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4040.4                         // ARMv6-M Thumb = .+4
 4040.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4040.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4040.7                                 ENDM
 4040.8                                 ENDM
 4040.9                                 ENDM
 4041                           
 4042                           
 4043                           //      .R DOTR:        ( sn1 n2 -- ) SIGNED:
 4044                           //      Print the signed number sn1 right aligned in a field whose width is n2.
 4045                           //      No following blank is printed.
 4046                           
 4047                            SECTION .text : CONST (2)
 4048                           DOTR_NFA:
 4049    00000000 82                    DC8     0x82
 4050    00000001 2E                    DC8     '.'
 4051    00000002 D2                    DC8     'R'+0x80
 4052    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4053    00000004 ........              DC32    LSL_NFA
 4054                           DOTR:
 4055    00000008 ........              DC32    DOCOL
 4056    0000000C ........              DC32    TOR
 4057    00000010 ........              DC32    STOD
 4058    00000014 ........              DC32    RFROM
 4059    00000018 ........              DC32    DDOTR
 4060    0000001C ........              DC32    SEMIS
 4061                           
 4062                           
 4063                           //      .RU DOTRU:      ( n1 n2 -- ) UNSIGNED:
 4064                           //      Print the unsigned number n1 right aligned in a field whose width is n2.
 4065                           //      No following blank is printed.
 4066                           
 4067                            SECTION .text : CONST (2)
 4068                           DOTRU_NFA:
 4069    00000000 83                    DC8     0x83
 4070    00000001 2E52                  DC8     '.R'
 4071    00000003 D5                    DC8     'U'+0x80
 4072                            ALIGNROM 2,0xFFFFFFFF
 4073    00000004 ........              DC32    DOTR_NFA
 4074                           DOTRU:
 4075    00000008 ........              DC32    DOCOL
 4076    0000000C ........              DC32    TOR
 4077    00000010 ........              DC32    ZERO
 4078    00000014 .............         DC32    BDIGS, DIGS, EDIGS
                  ...........  
 4079    00000020 .............         DC32    DUP, RFROM
                  ...          
 4080    00000028 .............         DC32    SWAP, SUBB, SPACES, TYPE
                  .............
                  ......       
 4081                           #ifdef IO2TP
 4084                           #endif
 4085    00000038 ........              DC32    SEMIS
 4086                           
 4087                           
 4088                           //      U. UDOT:        ( n -- ) USIGNED DOT
 4089                           
 4090                            SECTION .text : CONST (2)
 4091                           UDOT_NFA:
 4092    00000000 82                    DC8     0x82
 4093    00000001 55                    DC8     'U'
 4094    00000002 AE                    DC8     '.'+0x80
 4095    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4096    00000004 ........              DC32    DOTRU_NFA
 4097                           UDOT:
 4098    00000008 ........              DC32    DOCOL
 4099    0000000C ........              DC32    ZERO
 4100    00000010 ........              DC32    DDOT    // SPACE DONE HERE
 4101    00000014 ........              DC32    SEMIS
 4102                           
 4103                           
 4104                           //      ? QUES: ( addr -- )
 4105                           //      Print the value contained at the address in free format according to
 4106                           //      the current base using DOT.
 4107                           
 4108                            SECTION .text : CONST (2)
 4109                           QUES_NFA:
 4110    00000000 81                    DC8     0x81
 4111    00000001 BF                    DC8     '?'+0x80
 4112    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4113    00000004 ........              DC32    UDOT_NFA
 4114                           QUES:
 4115    00000008 ........              DC32    DOCOL
 4116    0000000C ........              DC32    AT
 4117    00000010 ........              DC32    DOT
 4118    00000014 ........              DC32    SEMIS
 4119                           
 4120                           
 4121                           //      . DOT:  ( n -- ) SIGNED 2'S COMPLEMENT:
 4122                           //      Print a number from a signed 32 bit two's complement value,
 4123                           //      converted according to the numeric base.
 4124                           //      A trailing blanks follows.
 4125                           
 4126                            SECTION .text : CONST (2)
 4127                           DOT_NFA:
 4128    00000000 81                    DC8     0x81
 4129    00000001 AE                    DC8     '.'+0x80
 4130    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4131    00000004 ........              DC32    QUES_NFA
 4132                           DOT:
 4133    00000008 ........              DC32    DOCOL
 4134    0000000C ........              DC32    STOD
 4135    00000010 ........              DC32    DDOT    // SPACE DONE HERE
 4136    00000014 ........              DC32    SEMIS
 4137                           
 4138                           
 4139                           //------------------------------ DOTBASE SECTION -------------------------------
 4140                           //      .H DOTHEX:      ( n -- )
 4141                           //      Prints TOS in Hex using DOT, not affecting Base in the system
 4142                           
 4143                           #ifndef SRM
 4144                           //      .B DOTBIN:      ( n -- )
 4145                           //      Prints TOS in BINARY using DOT, not affecting Base in the system
 4146                           
 4147                            SECTION .text : CONST (2)
 4148                           DOTBIN_NFA:
 4149    00000000 82                    DC8     0x82
 4150    00000001 2E                    DC8     '.'
 4151    00000002 C2                    DC8     'B'+0x80
 4152    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4153    00000004 ........              DC32    DOT_NFA
 4154                           DOTBIN:
 4155    00000008 ........              DC32    DOCOL
 4156    0000000C .............         DC32    TWO, DOTBASE
                  ...          
 4157    00000014 ........              DC32    SEMIS
 4158                           #endif  // not SRM
 4159                           
 4160                           
 4161                           //      .H DOTHEX:      ( n -- )
 4162                           //      Prints TOS in Hex using DOT, not affecting Base in the system
 4163                            SECTION .text : CONST (2)
 4164                           DOTHEX_NFA:
 4165    00000000 82                    DC8     0x82
 4166    00000001 2E                    DC8     '.'
 4167    00000002 C8                    DC8     'H'+0x80
 4168    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4169    00000004 ........              DC32    DOTBIN_NFA
 4170                           DOTHEX:
 4171    00000008 ........              DC32    DOCOL
 4172                           #ifdef SRM
 4174                           #else
 4175    0000000C ........10000         DC32    LIT, 16, DOTBASE        // this version appends BASE Suffix
                  000........  
 4176                           #endif
 4177    00000018 ........              DC32    SEMIS
 4178                           
 4179                           
 4180                           #ifndef SRM
 4181                           //      .D DOTDEC:      ( n -- )
 4182                           //      Prints TOS in DECIMAL using DOT, not affecting Base in the system
 4183                           
 4184                            SECTION .text : CONST (2)
 4185                           DOTDEC_NFA:
 4186    00000000 82                    DC8     0x82
 4187    00000001 2E                    DC8     '.'
 4188    00000002 C4                    DC8     'D'+0x80
 4189    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4190    00000004 ........              DC32    DOTHEX_NFA
 4191                           DOTDEC:
 4192    00000008 ........              DC32    DOCOL
 4193    0000000C ........0A000         DC32    LIT, 10, DOTBASE
                  000........  
 4194    00000018 ........              DC32    SEMIS
 4195                           #endif  // not SRM
 4196                           
 4197                           //      OFF:    ( -- 0 ) FALSE/OFF is 0 is FISH
 4198                            SECTION .text : CONST (2)
 4199                           OFF_ZERO_NFA:
 4200    00000000 83                DC8 0x83
 4201    00000001 4F46              DC8 'OF'
 4202    00000003 C6                DC8 'F'+0x80
 4203                            ALIGNROM 2,0xFFFFFFFF
 4204    00000004 ........          DC32        DOTDEC_NFA
 4205                           OFF_ZERO:
 4206    00000008 ........00000     DC32        DOCON, 0X0
                  000          
 4207                           
 4208                           //      ON:     ( -- -1 ) TRUE/ON is -1 is FISH
 4209                            SECTION .text : CONST (2)
 4210                           TRUE_NEG_1_NFA:
 4211    00000000 82                DC8 0x82
 4212    00000001 4F                DC8 'O'
 4213    00000002 CE                DC8 'N'+0x80
 4214    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4215    00000004 ........          DC32        OFF_ZERO_NFA
 4216                           TRUE_NEG_1:
 4217                           ON:
 4218    00000008 ........FFFFF     DC32        DOCON, -1
                  FFF          
 4219                           
 4220                           //=============================== WORDCAT ====================================//
 4221                           // NOEXEC HEADERFORWORDCATEGORIES
 4222                           // WC_NUMBERS_NFA = NUMBER Stuff: CATEGORY
 4223                           
 4224                            SECTION .text : CONST (2)
 4225                           WC_NUMBERS_NFA:
 4226    00000000 91                    DC8     0x80+4+13
 4227    00000001 0D0A                  DC8     0x0D, 0x0A
 4228    00000003 4E554D4245522         DC8     'NUMBER Stuff:'
                  053747566663A
 4229    00000010 0D8A                  DC8     0x0D, 0x0A+0x80
 4230    00000012 FFFF           ALIGNROM 2,0xFFFFFFFF
 4231                           //        DC32    DOTDEC_NFA
 4232    00000014 ........              DC32    TRUE_NEG_1_NFA
 4233                           
 4234                           
 4235                           //=============================== UART3_INIT =================================//
 4236                           
 4237                           // LFA ABOVE NEEDS TO BE WC_NUMBERS_NFA OR CHANGE IT IN THIS LINKED FILE:
 4238                           $FISH_STM32F4_UART3_INIT.s
    1                           //      FISH_STM32F4_UART3_INIT.s
    2                           // Valid thru v1.8
    3                           
    4                           //      STM32F4 UART3_INIT UART3_INIT: ( -- )
    5                           //UART3_INIT: should be renamed. It sets baud rates for the UART's BRR register
    6                           //and programs the BRR, determined by system vars DBAUD and UBAUD or a user
    7                           //supplied decimal baud rate value.
    8                           //Can this handle a baud parameter without breaking UBAUD's concept?
    9                           
   10                           //      User use of this word MUST use MYBAUD first. IT MUST BE USED FIRST.
   11                           //      THIS IS TO PRESERVE YOUR BAUD DURING HARD FAULT RESET, which will 
   12                           //      get reset to default baud ~ mucking your terminal up. No fun~!
   13                           
   14                           //      Logic in this word:
   15                           //      WHEN DBAUD IS NOT ZERO USE DEFAULT_BAUD         // pwrup unint ram
   16                           //      WHEN DBAUD IS ZERO USE UBAUD                    // when called or reset
   17                           
   18                            SECTION .text : CONST (2)
   19                           UART3_INIT_NFA:
   20    00000000 8A                    DC8     0x8A
   21    00000001 55415254335F4         DC8     'UART3_INI'
                  94E49        
   22    0000000A D4                    DC8     'T'+0x80
   23    0000000B FF             ALIGNROM 2,0xFFFFFFFF
   24    0000000C ........              DC32    WC_NUMBERS_NFA
   25                           UART3_INIT:
   26    00000010 ........              DC32    DOCOL
   27                           // GET DEFAULT OR USER SET BAUD (MYBAUD)
   28    00000014 .............         DC32    LIT, DBAUD, AT, ZEQU
                  .............
                  ......       
   29    00000024 ........              DC32    ZBRAN
   30    00000028 1C000000              DC32    BAUDDEFAULT-.           // IF DBAUD not ZERO SET DEFAULT_BAUD
   31    0000002C .............         DC32    LIT, UBAUD, AT          // IARBUG , TOR
                  ...........  
   32    00000038 ........              DC32    TOR                     // ELSE USE UBAUD
   33    0000003C ........              DC32    BRAN
   34    00000040 10000000              DC32    BAUD1-.                 // SET UBAUD TO ZERO TO PRESERVE UBAUD
   35                           BAUDDEFAULT:                            // ELSE
   36    00000044 ........00C20         DC32    LIT, DEFAULT_BAUD       // IARBUG , TOR
                  100          
   37    0000004C ........              DC32    TOR                     // SET
   38                           BAUD1:
   39                           // BAUD IS ON R STACK
   40                           // USE IT TO CALCULATE UART3_BRR VALUE
   41                           // HAVE TO USE PCLK1 WHICH IS EQUATED IN SOCINIT
   42                           // PCLK1 = 42000000 
   43    00000050 ........80DE8         DC32    LIT, PCLK1      // 280DE80h @ 168MHZ SYSCLK
                  002          
   44    00000058 ........              DC32    RFROM           // 2580h = 9600 DEFAULT_BAUD
   45    0000005C ........              DC32    SLASH
   46    00000060 ........08480         DC32    LIT, USART3_BRR
                  040          
   47                           //        DC32 NOOP
   48    00000068 ........              DC32    STORE           // 1117h FOR 9600/42MHZ PCLK1D
   49    0000006C ........              DC32    SEMIS
   50                           
 4239                           // LFA BELOW NEEDS TO BE UART3_INIT_NFA
 4240                           
 4241                           //=============================== UART3_INIT =================================//
 4242                           
 4243                           //      MYBAUD MYBAUD: ( n -- ) BAUD MUST BE IN DECIMAL or EQUIVALENT!!!
 4244                           //      MUST BE USED BEFORE USING UART0_INIT!!!
 4245                           //      Because FISH does a reset if you invoke a HARD FAULT RESET
 4246                           //      THIS MECHANISM IS ESSENTIAL TO STAYING AT USER SET BAUDRATE THRU A RESET!
 4247                           //      SET NON-INIT RAM VARIABLES DBAUD TO ZERO AND UBAUD n.
 4248                           //      See UART0_INIT
 4249                           
 4250                            SECTION .text : CONST (2)
 4251                           MYBAUD_NFA:
 4252    00000000 86                    DC8     0x86
 4253    00000001 4D59424155            DC8     'MYBAU'
 4254    00000006 C4                    DC8     'D'+0x80
 4255    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 4256    00000008 ........              DC32    UART3_INIT_NFA
 4257                           MYBAUD:
 4258    0000000C ........              DC32    DOCOL
 4259    00000010 ........00000         DC32    strva, 0, DBAUD
                  000........  
 4260    0000001C .............         DC32    LIT, UBAUD, STORE       // SET UBAUD TO NEW BAUD FOR UART0_INIT
                  ...........  
 4261    00000028 ........              DC32    SEMIS
 4262                           
 4263                           
 4264                           //      STM32F4 UART3_LSR UART3_LSR: ( -- value )
 4265                           
 4266                            SECTION .text : CONST (2)
 4267                           UART3_LSR_NFA:
 4268    00000000 89                    DC8     0x89
 4269    00000001 55415254335F4         DC8     'UART3_LS'
                  C53          
 4270    00000009 D2                    DC8     'R'+0x80
 4271    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 4272    0000000C ........              DC32    MYBAUD_NFA
 4273                           UART3_LSR:
 4274    00000010 ........              DC32    .+5
 4275                            SECTION .text : CODE (2)
 4276    00000000 0549                  LDR     n, = USART3_SR
 4277    00000002 0878                  LDRB    t_r0, [n]
 4278                                   TPUSH_r0
 4278                                   PUSHt_r0        // push t to p, pre decrement p
 4278.1  00000004 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4278.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4278.3                         //      STR     t, [p]
 4278.4                                 ENDM
 4278                                   NEXT
 4278.1                         // ARMv7-M Thumb = .+5
 4278.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4278.3                         // ARMv6-M Thumb = .+4
 4278.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4278                                   NEXT1
 4278.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4278.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4278.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4278.4                         // ARMv6-M Thumb = .+4
 4278.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4278.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4278.7                                 ENDM
 4278.8                                 ENDM
 4278.9                                 ENDM
 4279    00000016 0000           LTORG
 4279.1                                  TABLE
 4279.2  00000018 00480040              Reference on line 4276
 4280                           
 4281                           
 4282                           //      STM32F4 UART3_RX UART3_RX: ( -- addr )
 4283                           //      This is the serial terminal.
 4284                           
 4285                            SECTION .text : CONST (2)
 4286                           UART3_RX_NFA:
 4287    00000000 88                    DC8     0x88
 4288    00000001 55415254335F5         DC8     'UART3_R'
                  2            
 4289    00000008 D8                    DC8     'X'+0x80
 4290    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4291    0000000C ........              DC32    UART3_LSR_NFA
 4292                           UART0_RX:
 4293    00000010 ........04480         DC32    DOCON, USART3_DR
                  040          
 4294                           
 4295                           //      STM32F4 UART3_TX UART3_TX: ( -- addr )
 4296                           //      This is the serial terminal.
 4297                           
 4298                            SECTION .text : CONST (2)
 4299                           UART3_TX_NFA:
 4300    00000000 88                    DC8     0x88
 4301    00000001 55415254335F5         DC8     'UART3_T'
                  4            
 4302    00000008 D8                    DC8     'X'+0x80
 4303    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4304    0000000C ........              DC32    UART3_RX_NFA
 4305                           UART3_TX:
 4306    00000010 ........04480         DC32    DOCON, USART3_DR
                  040          
 4307                           
 4308                           
 4309                           #ifdef XON_XOFF
 4310                           //      XOFF XOFF: ( -- ) Send XOFF
 4311                           
 4312                            SECTION .text : CONST (2)
 4313                           XOFF_NFA:
 4314    00000000 84                    DC8     0x84
 4315    00000001 584F46                DC8     'XOF'
 4316    00000004 C6                    DC8     'F'+0x80
 4317    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4318    00000008 ........              DC32    UART3_TX_NFA
 4319                           XOFF:
 4320    0000000C ........              DC32    .+5
 4321                            SECTION .text : CODE (2)       // Does not incr OUT and wait for line status
 4322                           #ifdef IO2TP
 4324                           #else
 4325    00000000 ........              BL      TXRDY_SUBR
 4326    00000004 ........              BL      XOFF_SUBR
 4327                                   NEXT
 4327.1                         // ARMv7-M Thumb = .+5
 4327.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4327.3                         // ARMv6-M Thumb = .+4
 4327.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4327                                   NEXT1
 4327.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4327.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4327.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4327.4                         // ARMv6-M Thumb = .+4
 4327.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4327.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4327.7                                 ENDM
 4327.8                                 ENDM
 4328                           #endif // #else IO2TP
 4329                           //#endif // XON_XOFF after XON:
 4330                           
 4331                           
 4332                           //      XON XON: ( -- ) Send XON
 4333                           
 4334                            SECTION .text : CONST (2)
 4335                           XON_NFA:
 4336    00000000 83                    DC8     0x83
 4337    00000001 584F                  DC8     'XO'
 4338    00000003 CE                    DC8     'N'+0x80
 4339                            ALIGNROM 2,0xFFFFFFFF
 4340    00000004 ........              DC32    XOFF_NFA
 4341                           XON:
 4342    00000008 ........              DC32    .+5
 4343                            SECTION .text : CODE (2)       // Does not incr OUT or wait for line status.
 4344                           #ifdef IO2TP
 4346                           #else
 4347                           // Required, no 'quick send'
 4348    00000000 ........              BL      TXRDY_SUBR
 4349    00000004 ........              BL      XON_SUBR
 4350                                   NEXT
 4350.1                         // ARMv7-M Thumb = .+5
 4350.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4350.3                         // ARMv6-M Thumb = .+4
 4350.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4350                                   NEXT1
 4350.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4350.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4350.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4350.4                         // ARMv6-M Thumb = .+4
 4350.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4350.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4350.7                                 ENDM
 4350.8                                 ENDM
 4351                           #endif // #else IO2TP
 4352                           #endif // XON_XOFF
 4353                           
 4354                           //---------------- EMIT KEY ?KEY CR SECTION ------------------------------
 4355                           
 4356                           //      SPACES SPACES:  ( n -- )
 4357                           //      Transmit n ascii blanks (0x20) to the output device.
 4358                           
 4359                            SECTION .text : CONST (2)
 4360                           SPACES_NFA:
 4361    00000000 86                    DC8     0x86
 4362    00000001 5350414345            DC8     'SPACE'
 4363    00000006 D3                    DC8     'S'+0x80
 4364    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 4365                           #ifdef XON_XOFF
 4366    00000008 ........              DC32    XON_NFA
 4367                           #else
 4369                           #endif
 4370                           SPACES:
 4371    0000000C ........              DC32    DOCOL
 4372    00000010 ........              DC32    ZERO
 4373    00000014 ........              DC32    MAX
 4374    00000018 ........              DC32    ZNDUP
 4375    0000001C ........              DC32    ZBRAN
 4376    00000020 18000000              DC32     SPACES_DONE-.
 4377                           
 4378    00000024 ........              DC32    ZERO
 4379    00000028 ........              DC32    XDO     //DO
 4380                           
 4381                           SPACES_DO:
 4382    0000002C ........              DC32    SPACE
 4383    00000030 ........              DC32    XLOOP   //LOOP
 4384    00000034 F8FFFFFF              DC32     SPACES_DO-.
 4385                           
 4386                           SPACES_DONE:
 4387    00000038 ........              DC32    SEMIS
 4388                           
 4389                           
 4390                           //      SPACE SPACE: ( -- )
 4391                           //      Emit a space character, 0x20.
 4392                           
 4393                            SECTION .text : CONST (2)
 4394                           SPACE_NFA:
 4395    00000000 85                    DC8     0x85
 4396    00000001 53504143              DC8     'SPAC'
 4397    00000005 C5                    DC8     'E'+0x80
 4398    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4399    00000008 ........              DC32    SPACES_NFA
 4400                           SPACE:
 4401    0000000C ........              DC32    DOCOL
 4402    00000010 ........              DC32    BLANK
 4403    00000014 ........              DC32    EMIT
 4404    00000018 ........              DC32    SEMIS
 4405                           
 4406                           
 4407                           //      ID. IDDOT:      ( NFA-addr -- ) ?RENAME .NFA
 4408                           //      Print a definition's name from its name field address.
 4409                           
 4410                            SECTION .text : CONST (2)
 4411                           IDDOT_NFA:
 4412    00000000 83                    DC8     0x83
 4413    00000001 4944                  DC8     'ID'
 4414    00000003 AE                    DC8     '.'+0x80
 4415                            ALIGNROM 2,0xFFFFFFFF
 4416    00000004 ........              DC32    SPACE_NFA
 4417                           IDDOT:
 4418    00000008 ........              DC32    DOCOL
 4419                           //      NOW COUNT is on NFA, fig code copied it out to pad
 4420    0000000C ........              DC32    COUNT   // Count could be SMUDGE'd.
 4421    00000010 ........1F000         DC32    LIT, MAXWORDLEN // Strip SMUDGEing from count
                  000          
 4422    00000018 ........              DC32    ANDD            // only time
 4423    0000001C ........              DC32    TYPE    // TYPE needs actual count un SMUDGE'd
 4424    00000020 ........              DC32    SPACE
 4425    00000024 ........              DC32    SEMIS
 4426                           
 4427                           
 4428                           //      ." DOTQ:        ( -- ) IMMEDIATE
 4429                           //      Type quoted string out or compile inline string to be typed at runtime
 4430                           //      CHANGED COMPILE TIME ACTION TO WORK WITH 4 byte alighment REQUIREMENT.
 4431                           //      Used in the form:
 4432                           //              .' CCcc"
 4433                           //      Compiles an in-line string CCcc (delimited by the trailing ") with
 4434                           //      an execution proceedure to transmit the text to the output device.
 4435                           //      If executed outside a definition, ." will immediately print the text
 4436                           //      until the final ',. The maximum number of characters may be an
 4437                           //      installation dependent value. See (.").
 4438                           
 4439                            SECTION .text : CONST (2)
 4440                           DOTQ_NFA:
 4441    00000000 C2                    DC8     0x0C2
 4442    00000001 2E                    DC8     '.'
 4443    00000002 A2                    DC8     '"'+0x80
 4444    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4445    00000004 ........              DC32    IDDOT_NFA
 4446                           DOTQ:
 4447    00000008 ........              DC32    DOCOL
 4448    0000000C ........22000         DC32    LIT, '"'        // 0x22 ending qoute delimiter for WORD
                  000          
 4449    00000014 ........              DC32    STATE_SV
 4450    00000018 ........              DC32    AT
 4451    0000001C ........              DC32    ZBRAN   // IF Not COMPILING
 4452    00000020 2C000000              DC32     DOTQ1-.
 4453                           
 4454    00000024 ........              DC32    COMP    // COMPILING
 4455    00000028 ........              DC32    PDOTQ   // compile LIT, cnt-str-addr, count, type
 4456    0000002C ........              DC32    WORD   // \ cH-DELIM  --  CHCNT-STR OF TOKEN TO HERE
 4457    00000030 ........              DC32    HERE
 4458    00000034 ........              DC32    CAT
 4459    00000038 ........              DC32    ONEP
 4460    0000003C ........              DC32    ALIGNED
 4461    00000040 ........              DC32    ALLOT_PRIM
 4462    00000044 ........              DC32    BRAN    // ELSE
 4463    00000048 14000000              DC32     DOTQ2-.
 4464                           DOTQ1:
 4465    0000004C ........              DC32    WORD   // \ cH-DELIM  --  CHCNT-STR OF TOKEN TO HERE
 4466    00000050 ........              DC32    HERE
 4467    00000054 ........              DC32    COUNT
 4468    00000058 ........              DC32    TYPE    // TYPE needs actual count un SMUDGE'd
 4469                                                   // endif
 4470                           #ifdef IO2TP
 4474                           #endif
 4475                           DOTQ2:
 4476    0000005C ........              DC32    SEMIS
 4477                           
 4478                           
 4479                           //      TYPE TYPE:      ( addr count -- )
 4480                           //      ADDR must be ALIGNED!
 4481                           //      OUT MUST BE INITIALIZED!!
 4482                           //      EMIT COUNT OF 8-bits in a string, preferably ascii characters,
 4483                           //      (last nfa char (+80h)ok!) from addr thru count,
 4484                           
 4485                            SECTION .text : CONST (2)
 4486                           TYPE_NFA:
 4487    00000000 84                    DC8     0x84
 4488    00000001 545950                DC8     'TYP'
 4489    00000004 C5                    DC8     'E'+0x80
 4490    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4491    00000008 ........              DC32    DOTQ_NFA
 4492                           TYPE:
 4493    0000000C ........              DC32    DOCOL
 4494    00000010 ........              DC32    ZNDUP
 4495    00000014 ........              DC32    ZBRAN   // IF NOTHING TO TYPE
 4496    00000018 34000000              DC32     TYPE1-.
 4497                           
 4498                           #ifdef XON_XOFF
 4499    0000001C ........              DC32    XOFF    // TEMP TEST THRE
 4500                           #endif
 4501    00000020 ........              DC32    OVER
 4502    00000024 ........              DC32    PLUS
 4503    00000028 ........              DC32    SWAP
 4504    0000002C ........              DC32    XDO     // DO
 4505                           TYPE2:
 4506    00000030 ........              DC32    I
 4507    00000034 ........              DC32    CATLT7F // Limit output to ASCII characters under 80h
 4508    00000038 ........              DC32    EMIT
 4509                           tt1:
 4510    0000003C ........              DC32    XLOOP   // LOOP
 4511                           tt2:
 4512    00000040 F0FFFFFF              DC32     TYPE2-.
 4513                           
 4514    00000044 ........              DC32    BRAN    // ELSE
 4515    00000048 08000000              DC32     TYPE3-.
 4516                           TYPE1:
 4517    0000004C ........              DC32    DROP    // endif
 4518                           TYPE3:
 4519    00000050 ........              DC32    SEMIS
 4520                           
 4521                           
 4522                           //      EMIT EMIT:      ( c -- )
 4523                           //      Transmit ascii character c to the selected output device. OUT is
 4524                           //      incremented for each character output.
 4525                           
 4526                            SECTION .text : CONST (2)
 4527                           EMIT_NFA:
 4528    00000000 84                    DC8     0x84
 4529    00000001 454D49                DC8     'EMI'
 4530    00000004 D4                    DC8     'T'+0x80
 4531    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4532    00000008 ........              DC32    TYPE_NFA
 4533                           EMIT:
 4534                           #ifndef IO2TP
 4535                           // NOT IO2TP SECTION:
 4536    0000000C ........              DC32    .+5
 4537                            SECTION .text : CODE (2)
 4538                                   POP2t_r0        // GET CHAR
 4538.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
 4538.2                         //#ifndef TOSCT
 4538.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 4538.4                         //#endif
 4538.5                         //      ADDS    p, p, #4
 4538.6                                 ENDM
 4539    00000004 ........              BL      TXRDY_SUBR
 4540    00000008 0649                  LDR     n, = USART3_DR //
 4541                           // BSOUT handles negative out issue
 4542    0000000A 0870                  STRB    t_r0, [n]          // EMIT (Send) Char
 4543    0000000C 0649                  LDR     n, = OUT        // Increment Out
 4544    0000000E 0868                  LDR     t_r0, [n]
 4545    00000010 401C                  ADDS    t_r0, t_r0, #1
 4546    00000012 0860                  STR     t_r0, [n]
 4547                                   NEXT
 4547.1                         // ARMv7-M Thumb = .+5
 4547.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4547.3                         // ARMv6-M Thumb = .+4
 4547.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4547                                   NEXT1
 4547.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4547.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4547.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4547.4                         // ARMv6-M Thumb = .+4
 4547.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4547.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4547.7                                 ENDM
 4547.8                                 ENDM
 4548                           #else // if IO2TP Transmit char to PAD, increment OUT
 4563                           #endif  // else IO2TP
 4564    00000022 0000           LTORG
 4564.1                                  TABLE
 4564.2  00000024 04480040              Reference on line 4540
 4564.3  00000028 ........              Reference on line 4543
 4565                           
 4566                           
 4567                           //      KEY KEY:        (  -- ch )
 4568                           
 4569                            SECTION .text : CONST (2)
 4570                           KEY_NFA:
 4571    00000000 83                    DC8     0x83
 4572    00000001 4B45                  DC8     'KE'
 4573    00000003 D9                    DC8     'Y'+0x80
 4574                            ALIGNROM 2,0xFFFFFFFF
 4575    00000004 ........              DC32    EMIT_NFA
 4576                           KEY_INTERPRETED_ENTRY:
 4577                           #ifndef IO2TP
 4578    00000008 ........              DC32    DOCOL
 4579    0000000C ........              DC32    XON     // EXEC SETS XOFF SO UNDO IT
 4580    00000010 ........              DC32    KEY     // Then GET KEY!
 4581    00000014 ........        DC32  SEMIS
 4582                           
 4583                           //:NONAME KEY KEY:      ( -- CH )
 4584                           // This is the FISH System KEY compiled in the FISH RM
 4585                           // KEY_INTERPRETED_ENTRY is the user interpreted/compiled hi-level version
 4586                           // That issues XON  before calling this KEY
 4587                           KEY:
 4588    00000018 ........              DC32    .+5
 4589                            SECTION .text : CODE (2)
 4590    00000000 074A                  LDR     w_r2, = USART3_DR // Data Register w_r2
 4591    00000002 084B                  LDR     x, = USART3_SR // Status Register x_r3
 4592                                   // USART3_SR = COh IS NO KEY, GOES TO 03 QND WAITS FOR A KEY
 4593                                   // USART3_SR = F0h THE COh ?
 4594                           rxRDY?:
 4595    00000004 1968                  LDR     n, [x]         // Get Line Status value from [x_r3], put in n_r2
 4596                           //      LSRS    n, n, #5       // Bit 5 RXNE: Read data register not empty
 4597                           // THIS IS ___ AND FAILS TEXT DOWNLOAD
 4598    00000006 8909                  LSRS    n, n, #6       // Bit 6 ORIG - REQ'D FOR TEXT FILE DOWNLOAD
 4599                                                           // Bit 6 TC: Transmission complete
 4600    00000008 FCD3                  BCC     rxRDY?         // sets carry flag to fall thru
 4601                           
 4602    0000000A 1068                  LDR     t_r0, [w]         // t_r0 w_r2 should be uart data register
 4603                                   TPUSH_r0
 4603                                   PUSHt_r0        // push t to p, pre decrement p
 4603.1  0000000C 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4603.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4603.3                         //      STR     t, [p]
 4603.4                                 ENDM
 4603                                   NEXT
 4603.1                         // ARMv7-M Thumb = .+5
 4603.2  00000010 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4603.3                         // ARMv6-M Thumb = .+4
 4603.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4603                                   NEXT1
 4603.1  00000014 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4603.2  00000018 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4603.3  0000001C 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4603.4                         // ARMv6-M Thumb = .+4
 4603.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4603.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4603.7                                 ENDM
 4603.8                                 ENDM
 4603.9                                 ENDM
 4604                           #else
 4606                           #endif  // IO2TP
 4607    0000001E 0000           LTORG
 4607.1                                  TABLE
 4607.2  00000020 04480040              Reference on line 4590
 4607.3  00000024 00480040              Reference on line 4591
 4608                           
 4609                           
 4610                           //      ?KEY QKEY: ( -- f )
 4611                           //      Return zero unless key in fifo - key is not consumed.
 4612                           //      : TB BEGIN ?KEY UNTIL ; Will execute until any key is entered.
 4613                           
 4614                            SECTION .text : CONST (2)
 4615                           QKEY_NFA:
 4616    00000000 84                    DC8     0x84
 4617    00000001 3F4B45                DC8     '?KE'
 4618    00000004 D9                    DC8     'Y'+0x80
 4619    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4620    00000008 ........              DC32    KEY_NFA // -1
 4621                           QKEY:
 4622    0000000C ........              DC32    .+5
 4623                            SECTION .text : CODE (2)
 4624                           #ifdef IO2TP
 4626                           #else
 4627                           #ifdef XON_XOFF // XON IN QKEY
 4628    00000000 ........              BL      TXRDY_SUBR
 4629    00000004 ........              BL      XON_SUBR
 4630                           #endif
 4631    00000008 4040                  EORS    t_r0, t_r0    // zero t
 4632    0000000A 074B                  LDR     x, = USART3_SR
 4633    0000000C 1968                  LDR     n, [x]          // Get Line Status
 4634    0000000E 8909                  LSRS    n, n, #6        // Char available
 4635    00000010 00D3                  BCC     NO_KEY          // No char, not Ready
 4636                           
 4637                           // HAVE A KEY - DON'T CONSUME IT
 4638                           #ifdef TRUE_EQU_NEG_ONE
 4639    00000012 0138                  SUBS    t_r0, #1   // -1
 4640                           #else
 4642                           #endif
 4643                           #endif  // DEFAULT TO NO KEY IF IO2TP
 4644                           NO_KEY:
 4645                                   TPUSH_r0
 4645                                   PUSHt_r0        // push t to p, pre decrement p
 4645.1  00000014 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 4645.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 4645.3                         //      STR     t, [p]
 4645.4                                 ENDM
 4645                                   NEXT
 4645.1                         // ARMv7-M Thumb = .+5
 4645.2  00000018 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4645.3                         // ARMv6-M Thumb = .+4
 4645.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4645                                   NEXT1
 4645.1  0000001C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4645.2  00000020 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4645.3  00000024 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4645.4                         // ARMv6-M Thumb = .+4
 4645.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4645.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4645.7                                 ENDM
 4645.8                                 ENDM
 4645.9                                 ENDM
 4646    00000026 0000           LTORG
 4646.1                                  TABLE
 4646.2  00000028 00480040              Reference on line 4632
 4647                           
 4648                           
 4649                           //      CRS CRS:        ( n -- )
 4650                           //      Emit n cr'S (0x0d) and lf (0x0A)
 4651                           
 4652                            SECTION .text : CONST (2)
 4653                           CRS_NFA:
 4654    00000000 83                    DC8     0x83
 4655    00000001 4352                  DC8     'CR'
 4656    00000003 D3                    DC8     'S'+0x80
 4657                            ALIGNROM 2,0xFFFFFFFF
 4658    00000004 ........              DC32    QKEY_NFA
 4659                           CRS:
 4660    00000008 ........              DC32    DOCOL
 4661    0000000C ........              DC32  ZERO
 4662    00000010 ........              DC32    XDO
 4663                           CRS_BEGIN:
 4664    00000014 ........              DC32    CR
 4665    00000018 ........              DC32    XLOOP
 4666    0000001C F8FFFFFF                      DC32     CRS_BEGIN-.
 4667    00000020 ........              DC32    SEMIS
 4668                           
 4669                           //      CR CR:  ( -- )
 4670                           //      Emit cr (0x0d) and lf (0x0A)
 4671                           
 4672                            SECTION .text : CONST (2)
 4673                           CR_NFA:
 4674    00000000 82                    DC8     0x82
 4675    00000001 43                    DC8     'C'
 4676    00000002 D2                    DC8     'R'+0x80
 4677    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4678    00000004 ........              DC32    CRS_NFA
 4679                           CR:
 4680                           #ifdef IO2TP
 4683                           #else
 4684    00000008 ........              DC32    DOCOL
 4685    0000000C ........              DC32  zero_OUT
 4686    00000010 ........              DC32    PDOTQ
 4687    00000014 02                    DC8     2
 4688    00000015 0D0A                  DC8     0x0D, 0x0A
 4689    00000017 FF             ALIGNROM 2,0xFFFFFFFF
 4690    00000018 ........              DC32    SEMIS
 4691                           #endif
 4692                           
 4693                           
 4694                           //=============================== WORDCAT ====================================//
 4695                           //NOEXEC HEADERFORWORDCATEGORIES
 4696                           //      WC_UART3_NFA = FISH IO: CATEGORY
 4697                           
 4698                            SECTION .text : CONST (2)
 4699                           WC_UARTx_NFA:
 4700    00000000 8C                    DC8     0x80+4+8
 4701    00000001 0D0A                  DC8     0x0D, 0x0A
 4702    00000003 4649534820494         DC8     'FISH IO:'
                  F3A          
 4703    0000000B 0D8A                  DC8     0x0D, 0x0A+0x80
 4704    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4705    00000010 ........              DC32    CR_NFA
 4706                           
 4707                           //      CMSIS_ENABLE_IRQS IRQS_RESUME:  ( -- )
 4708                            SECTION .text : CONST (2)
 4709                           IRQS_RESUME_NFA:
 4710    00000000 8B                    DC8     0x8B
 4711    00000001 495251535F524         DC8     'IRQS_RESUM'
                  553554D      
 4712    0000000B C5                    DC8     'E'+0x80
 4713                            ALIGNROM 2,0xFFFFFFFF
 4714    0000000C ........              DC32    WC_UARTx_NFA
 4715                           CMSIS_ENABLE_IRQS:
 4716    00000010 ........              DC32 .+5
 4717                            SECTION .text : CODE (2)
 4718                            ALIGNROM 2,0xFFFFFFFF
 4719                            IMPORT C_CMSIS_ENABLE_IRQS
 4720    00000000 ........              BL      C_CMSIS_ENABLE_IRQS
 4721                                   NEXT
 4721.1                         // ARMv7-M Thumb = .+5
 4721.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4721.3                         // ARMv6-M Thumb = .+4
 4721.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4721                                   NEXT1
 4721.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4721.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4721.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4721.4                         // ARMv6-M Thumb = .+4
 4721.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4721.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4721.7                                 ENDM
 4721.8                                 ENDM
 4722                           
 4723                           //      CMSIS_DISABLE_IRQS IRQS_SUSPEND:        ( -- )
 4724                            SECTION .text : CONST (2)
 4725                           IRQS_SUSPEND_NFA:
 4726    00000000 8C                    DC8     0x8C
 4727    00000001 495251535F535         DC8     'IRQS_SUSPEN'
                  55350454E    
 4728    0000000C C4                    DC8     'D'+0x80
 4729    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4730    00000010 ........              DC32    IRQS_RESUME_NFA
 4731                           CMSIS_DISABLE_IRQS:
 4732    00000014 ........              DC32 .+5
 4733                            SECTION .text : CODE (2)
 4734                            ALIGNROM 2,0xFFFFFFFF
 4735                            IMPORT C_CMSIS_DISABLE_IRQS
 4736    00000000 ........              BL      C_CMSIS_DISABLE_IRQS
 4737                                   NEXT
 4737.1                         // ARMv7-M Thumb = .+5
 4737.2  00000004 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4737.3                         // ARMv6-M Thumb = .+4
 4737.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4737                                   NEXT1
 4737.1  00000008 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4737.2  0000000C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4737.3  00000010 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4737.4                         // ARMv6-M Thumb = .+4
 4737.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4737.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4737.7                                 ENDM
 4737.8                                 ENDM
 4738                           
 4739                           //  SYSTICK_IRQ_OFF SYSTICK_IRQ_OFF:    ( -- )
 4740                           //  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/Bhccjgga.html
 4741                           //  SYSTICK IRQ IS DIFFERENT? THAN REGULAR IRQ'S
 4742                           //  IN THAT SYST_CSR IS HOW YOU ENABLE AND MONITOR IT.
 4743                           //  STCTR only incremented when SYSTICK interrupt is on.
 4744                            SECTION .text : CONST (2)
 4745                           SYSTICK_IRQ_OFF_NFA:
 4746    00000000 8F                    DC8     0x8F
 4747    00000001 5359535449434         DC8     'SYSTICK_IRQ_OF'
                  B5F4952515F4F
                  46           
 4748    0000000F C6                    DC8     'F'+0x80
 4749                            ALIGNROM 2,0xFFFFFFFF
 4750    00000010 ........              DC32    IRQS_SUSPEND_NFA
 4751                           SYSTICK_IRQ_OFF:
 4752    00000014 ........              DC32    .+5
 4753                            SECTION .text : CODE (2)
 4754    00000000 0449                  LDR       n, = SYST_CSR // SYSTICK Control and Status Register
 4755    00000002 0520                  MOVS    t_r0, #5
 4756    00000004 0860            STR   t_r0, [n]
 4757                                   NEXT
 4757.1                         // ARMv7-M Thumb = .+5
 4757.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4757.3                         // ARMv6-M Thumb = .+4
 4757.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4757                                   NEXT1
 4757.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4757.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4757.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4757.4                         // ARMv6-M Thumb = .+4
 4757.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4757.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4757.7                                 ENDM
 4757.8                                 ENDM
 4758                           // LTORG         //Always outside of code, else data in words
 4759                           
 4760                           //  SYSTICK_IRQ_ON SYSTICK_IRQ_ON:  ( -- )
 4761                           //  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/Bhccjgga.html
 4762                           //  SYSTICK IRQ IS DIFFERENT? THAN REGULAR IRQ'S
 4763                           //  IN THAT SYST_CSR IS HOW YOU ENABLE AND MONITOR IT.
 4764                           //  STCTR only incremented when SYSTICK interrupt is on.
 4764.1                                  TABLE
 4764.2  00000014 10E000E0              Reference on line 4754
 4765                            SECTION .text : CONST (2)
 4766                           SYSTICK_IRQ_ON_NFA:
 4767    00000000 8E                    DC8     0x8E
 4768    00000001 5359535449434         DC8     'SYSTICK_IRQ_O'
                  B5F4952515F4F
 4769    0000000E CE                    DC8     'N'+0x80
 4770    0000000F FF             ALIGNROM 2,0xFFFFFFFF
 4771    00000010 ........              DC32    SYSTICK_IRQ_OFF_NFA
 4772                           SYSTICK_IRQ_ON:
 4773    00000014 ........              DC32    .+5
 4774                            SECTION .text : CODE (2)
 4775    00000000 0449                  LDR       n, = SYST_CSR // SYSTICK Control and Status Register
 4776    00000002 0720                  MOVS    t_r0, #7
 4777    00000004 0860            STR   t_r0, [n]
 4778                                   NEXT
 4778.1                         // ARMv7-M Thumb = .+5
 4778.2  00000006 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 4778.3                         // ARMv6-M Thumb = .+4
 4778.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 4778                                   NEXT1
 4778.1  0000000A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 4778.2  0000000E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 4778.3  00000012 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 4778.4                         // ARMv6-M Thumb = .+4
 4778.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4778.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4778.7                                 ENDM
 4778.8                                 ENDM
 4779                            LTORG   //Always outside of code, else data in words
 4779.1                                  TABLE
 4779.2  00000014 10E000E0              Reference on line 4775
 4780                           
 4781                           //=============================== WORDCAT ====================================//
 4782                           //NOEXEC HEADERFORWORDCATEGORIES
 4783                           //      WC_IRQ_NFA = INTERRUPTS: CATEGORY
 4784                           
 4785                            SECTION .text : CONST (2)
 4786                           WC_IRQ_NFA:
 4787    00000000 8F                    DC8     0x80+4+11
 4788    00000001 0D0A                  DC8     0x0D, 0x0A
 4789    00000003 494E544552525         DC8     'INTERRUPTS:'
                  55054533A    
 4790    0000000E 0D8A                  DC8     0x0D, 0x0A+0x80
 4791                            ALIGNROM 2,0xFFFFFFFF
 4792    00000010 ........              DC32    SYSTICK_IRQ_ON_NFA
 4793                           
 4794                           
 4795                           //------------------------------------------------------------------------------
 4796                           $FISH_STM32F4_FLASH.s       // FLASH_SAVE and FLASH_FORGET Words
    1                           // FISH_STM32F4_FLASH.s
    2                           // Valid thru v1.8
    3                           // FLASH_SAVE, FLASH_FORGET, FLASH_SCAN and support :NONAME's 
    4                           
    5                           /* 2DO:
    6                           // FLASH_SAVE LEAVING HERE ON STACK
    7                           ---
    8                           // SAVE PAGE IF ENOUGH ROOM LEFT FOR THIS SAVE
    9                           FLPT:
   10                           // NOT IMPLEMENTED YET!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   11                           ---
   12                           // DETERMINE IF ASSUREPAGE NEEDED, IF SO REWRITE AND INCORPORATE
   13                           ---
   14                           // MAKE IRQ Wordcat AND ADD:
   15                           //:NONAME CMSIS_DISABLE_IRQS ( -- )
   16                           //:NONAME CMSIS_ENABLE_IRQS ( -- )
   17                           */
   18                           
   19                           //      FLASH_SAVE FLASH_SAVE:  ( -- ) Save RAM to Flash
   20                           //      EVERY SAVE HAS A HEADER SET FOR FLASH_SCAN TO USE
   21                           //      ALIGNED HERE IS BOUNDARY OF NEW WRITE
   22                           //      SAVES ARE CONTIGUOUS WORDS USING x32 WRITE SETTING
   23                            SECTION .text : CONST (2)
   24                           FLASH_SAVE_NFA:
   25    00000000 8A                    DC8     0x80+10
   26    00000001 464C4153485F5         DC8     'FLASH_SAV'
                  34156        
   27    0000000A C5                    DC8     'E'+0x80
   28    0000000B FF             ALIGNROM 2,0xFFFFFFFF
   29    0000000C ........              DC32    WC_IRQ_NFA
   30                           FLASH_SAVE:
   31    00000010 ........              DC32    DOCOL
   32                           // SOMETHING TO SAVE TEST - IF LATEST IS NOT IN ROM
   33    00000014 .............         DC32    LATEST, DBASE, LESSTHAN
                  ...........  
   34    00000020 ........              DC32    ZBRAN
   35    00000024 20000000              DC32     FLPT-.
   36                           
   37    00000028 ........              DC32    CR
   38    0000002C ........              DC32    PDOTQ
   39    00000030 0F                    DC8     15D
   40    00000031 4E4F5448494E4         DC8     'NOTHING TO SAVE'
                  720544F205341
                  5645         
   41                            ALIGNROM 2,0xFFFFFFFF
   42    00000040 ........              DC32    SEMIS
   43                           
   44                           // SINGLE ENTRY FROM ABOVE
   45                           // SAVE PAGE IF ENOUGH ROOM LEFT FOR THIS SAVE
   46                           FLPT:
   47                           // NOT IMPLEMENTED YET!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   48    00000044 .............         DC32    FPADDR, AT
                  ...          
   49    0000004C ........00001         DC32    LIT, FLASH_PPAGE
                  008          
   50    00000054 ........              DC32    EQUAL
   51                           // DC32 NOOP
   52    00000058 ........              DC32    ZBRAN           // then save it
   53    0000005C 28000000              DC32     FSAVE-.
   54                                   
   55                           FSLASTPAGE:
   56    00000060 ........              DC32    CR
   57    00000064 ........              DC32    PDOTQ
   58    00000068 14                    DC8     20D
   59    00000069 4C41535420464         DC8     'LAST FLASH AVAIL USED'  // 'NOT ENOUGH MEMORY'
                  C415348204156
                  41494C2055534
                  544          
   60    0000007E FFFF           ALIGNROM 2,0xFFFFFFFF
   61    00000080 ........              DC32    SEMIS
   62                           
   63                           // Setup for saving - Assumes no error in relocation
   64                           // Based on relocating UP and Latest to FPVAR and FPCURR
   65                           FSAVE:
   66                                  // MAKE SURE HERE IS ALIGNED
   67    00000084 ........              DC32    ALIGN32_DP_FF_PAD
   68                           // FPA SHOULD BE SET BY FLASH_SCAN IN WARM OR BY FISH OR FISH_ONLY
   69                                   // FPCURR AND FPVAR SAVE
   70    00000088 .............         DC32    UP_SV, AT, FPVAR, STORE
                  .............
                  ......       
   71    00000098 .............         DC32    LATEST, TOFA
                  ...          
   72                           //      DC32    LATEST, TOFRA ALL RELOCS NEED TO ADD TO BASE!
   73    000000A0 .............         DC32    FPCURR, STORE
                  ...          
   74                           
   75                           // KEEP RELOCATING ONE WORD AT A TIME UNTIL RECHING FIRST WORD (DBASE)
   76                           FS_BEGIN:
   77    000000A8 .............         DC32    LATEST, DBASE, EQUAL
                  ...........  
   78    000000B4 ........              DC32    ZBRAN
   79    000000B8 48000000              DC32     FS_RWORD-.
   80                           
   81                           // AFTER LAST WORD RELOCATED
   82                           FS_WRITE:
   83    000000BC ........              DC32    FLASHWRITE                      // Write page
   84    000000C0 .............         DC32    DBASE, DP_SV, STORE             // Reset DP
                  ...........  
   85    000000CC .............         DC32    FPVAR, AT, UP_SV, STORE         // and UP
                  .............
                  ......       
   86    000000DC .............         DC32    FPCURR, AT, CURRENT_SV, STORE   // and CURRENT to nothing in RAM
                  .............
                  ......       
   87                           
   88                           // FLASH_SAVE Finish
   89                           FS_EXIT:
   90    000000EC ........              DC32    FLASH_SCAN      // Show Save done via Flash Page status
   91    000000F0 .............         DC32    CR, DOTVARSPACE, DOTDICTSPACE
                  ...........  
   92    000000FC ........              DC32    SEMIS
   93                           
   94                           FS_RWORD:
   95    00000100 .............         DC32    LATEST, RWORD   // Relocate this word, unlink it
                  ...          
   96    00000108 ........              DC32    BRAN            // Repeat until LATEST = DBASE
   97    0000010C 9CFFFFFF              DC32     FS_BEGIN-.
   98                           
   99                           
  100                           //:NONAME       FPADDR: ( -- addr ) Flash Page Addreess to operate on.
  101                            SECTION .text : CONST (2)
  102                           FPADDR:
  103    00000000 .............         DC32    DOCON, FPA
                  ...          
  104                           
  105                           
  106                           //:NONAME       FPCURR: ( -- addr ) Flash Page CURRENT is NFA of last word saved in Flash.
  107                            SECTION .text : CONST (2)
  108                           FPCURR:
  109    00000000 .............         DC32    DOCON, FPC
                  ...          
  110                           
  111                           
  112                           //:NONAME       FPVAR:  ( -- addr ) Flash Page VAR is UP value when Flash page saved.
  113                            SECTION .text : CONST (2)
  114                           FPVAR:
  115    00000000 .............         DC32    DOCON, FPSV
                  ...          
  116                           
  117                           //:NONAME >FA TOFA:     ( addr -- raddr ) Relocate address relative to FPADDR.
  118                           //      Convert WORD addresses to flash using FPADDR, which must be initialized.
  119                            SECTION .text : CONST (2)
  120                           TOFA:
  121    00000000 ........              DC32    .+5
  122                            SECTION .text : CODE (2)
  123                                   POP2t_r0
  123.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  123.2                         //#ifndef TOSCT
  123.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  123.4                         //#endif
  123.5                         //      ADDS    p, p, #4
  123.6                                 ENDM
  124    00000004 064A                  LDR     w, = 0x0FFFFF   // 08100000 FLASH ADDR lIMIT
  125    00000006 1040                  ANDS    t, t, w         // Strip RAM address
  126    00000008 064A                  LDR     w, = FPA
  127    0000000A 1268                  LDR     w, [w]          // Get Flash save start address
  128    0000000C 8018                  ADDS    t, t, w         // add offset
  129                                   TPUSH_r0
  129                                   PUSHt_r0        // push t to p, pre decrement p
  129.1  0000000E 47F8040D              STR     t, [p, #-4]!    // Pre-increment
  129.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
  129.3                         //      STR     t, [p]
  129.4                                 ENDM
  129                                   NEXT
  129.1                         // ARMv7-M Thumb = .+5
  129.2  00000012 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  129.3                         // ARMv6-M Thumb = .+4
  129.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  129                                   NEXT1
  129.1  00000016 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  129.2  0000001A 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  129.3  0000001E 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  129.4                         // ARMv6-M Thumb = .+4
  129.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  129.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  129.7                                 ENDM
  129.8                                 ENDM
  129.9                                 ENDM
  130                            LTORG   //Always outside of code, else data in words
  130.1                                  TABLE
  130.2  00000020 FFFF0F00              Reference on line 124
  130.3  00000024 ........              Reference on line 126
  131                           
  132                           
  133                           //:NONAME RWORD:        ( nfa -- ) Relocate this word relative to FPADDR
  134                           //      Relocate word specified by it's NFA to FPADDR relative addresses
  135                           //      Handle case of CON/VAR, PDOTQ and LIT by not relocating them.
  136                           //      RLIT's WILL BE RELOCATED - LIT's WILL NOT.
  137                            SECTION .text : CONST (2)
  138                           RWORD:
  139    00000000 ........              DC32    DOCOL
  140    00000004 .............         DC32    PFA, DUP, TOR   // SAVE FOR RELOCATING LFA
                  ...........  
  141    00000010 ........              DC32    CFA             // REAL CFA OF THSI WORD
  142                           
  143                           CFA_CREATE_DOES_GOTO:
  144    00000014 .............         DC32    DUP, AT
                  ...          
  145    0000001C .............         DC32    LIT, CREATE_DOES_GOTO
                  ...          
  146    00000024 ........              DC32    EQUAL
  147    00000028 ........              DC32    ZBRAN           // IF NOT CREATE_DOES_GOTO
  148    0000002C 28000000              DC32     RW_DOCONVAR-.  // PROCESS WORD UNTIL SEMIS
  149                           
  150    00000030 .............         DC32    FOURP, DUP, DUP // INCR TO ADDR
                  ...........  
  151    0000003C .............         DC32    AT, TOFA        // TO RELOCATE
                  ...          
  152    00000044 .............         DC32    SWAP, STORE     // AND 
                  ...          
  153    0000004C ........              DC32    BRAN            // THEN
  154    00000050 00010000              DC32     RW_UNTIL-.     // DONE SO GO FIX LFA
  155                           
  156                           RW_DOCONVAR:
  157                           // CHECK FOR DOCON AND DOVAR
  158    00000054 .............         DC32    DUP, AT
                  ...          
  159    0000005C .............         DC32    LIT, DOCON
                  ...          
  160    00000064 ........              DC32    EQUAL
  161                           
  162    00000068 .............         DC32    OVER, AT        // COPY CFA AGAIN
                  ...          
  163    00000070 .............         DC32    LIT, DOVAR
                  ...          
  164    00000078 ........              DC32    EQUAL
  165                                   
  166    0000007C ........              DC32    OR
  167    00000080 ........              DC32    ZBRAN           // IF NOT DOCON OR DOVAR
  168    00000084 10000000              DC32     RW_BEGIN-.     // PROCESS WORD UNTIL SEMIS
  169                           // IS DOCON OR DOVAR
  170    00000088 ........              DC32    DROP            // CFA
  171    0000008C ........              DC32    BRAN
  172    00000090 C4000000              DC32     RW_LFA-.       // THIS WORD DONE - FIX LFA
  173                           
  174                           // CFA -- BECOMES EACH WORD IN BODY OF THIS DEFINITION
  175                           RW_BEGIN:
  176    00000094 .............         DC32    FOURP, DUP, AT  // Next WORD in body to evaluate
                  ...........  
  177                           CFA_LIT:
  178    000000A0 .............         DC32    LIT, LIT, EQUAL
                  ...........  
  179    000000AC ........              DC32    ZBRAN           // IF NOT LITERAL
  180    000000B0 10000000              DC32     CFA_PDOTQ-.    // CHECK FOR PDOTQ
  181                           // IS LITERAL SO SKIP OVER IT'S DATA
  182    000000B4 ........              DC32    FOURP
  183    000000B8 ........              DC32    BRAN
  184    000000BC D8FFFFFF              DC32     RW_BEGIN-.
  185                           
  186                           CFA_PDOTQ:
  187    000000C0 .............         DC32    DUP, AT
                  ...          
  188    000000C8 .............         DC32    LIT, PDOTQ, EQUAL
                  ...........  
  189    000000D4 ........              DC32    ZBRAN           // IF NOT PDOTQ
  190    000000D8 20000000              DC32     CFA_SEMIS-.    // LOOK FOR SEMIS
  191                           // PDOTQ SO BYPASS TEXT AND LOOK FOR NEXT WORD IN THIS DEFINITION
  192    000000DC .............         DC32    DUP, FOURP, CAT
                  ...........  
  193    000000E8 ........              DC32    PLUS
  194    000000EC ........              DC32    ALIGNED
  195    000000F0 ........              DC32    BRAN
  196    000000F4 A0FFFFFF              DC32     RW_BEGIN-.
  197                           
  198                           CFA_SEMIS:
  199    000000F8 .............         DC32    DUP, AT         // USE THIS AS UNTIL FLAG TO FINISH
                  ...          
  200    00000100 .............         DC32    LIT, SEMIS, EQUAL
                  ...........  
  201    0000010C .............         DC32    ZEQU, ZBRAN     // IF AT SEMIS
                  ...          
  202    00000114 3C000000              DC32     RW_UNTIL-.     // DONE SO GO FIX LFA
  203                           
  204                           RELOCATE_RAM_ADDR:
  205                           // NOT AT SEMIS - IF A RAM ADDRESS THEN IT's OK TO RELOCATE!
  206    00000118 .............         DC32    DUP, AT         // IF THIS IS NOT IN RAM
                  ...          
  207    00000120 .............         DC32    DBASE, GREATERTHAN
                  ...          
  208    00000128 ........              DC32    ZBRAN           // THEN CHECK NEXT WORD IN THIS DEFINITION
  209    0000012C 68FFFFFF              DC32     RW_BEGIN-.
  210                           // THIS IS A RAM ADDRESS THAT NEEDS TO BE RELOCATED TO A FLASH ADDRESS
  211                           // LIT's were left alone but RLIT value will be relocated here
  212    00000130 .............         DC32    DUP, DUP, AT    // PICKUP RAM ADDRESS
                  ...........  
  213    0000013C ........              DC32    TOFA            // RELOCATE THIS ADDRESS TO A FLASH ADDRESS
  214    00000140 .............         DC32    SWAP, STORE     // PUT IT BACK
                  ...          
  215    00000148 ........              DC32    BRAN
  216    0000014C 48FFFFFF              DC32     RW_BEGIN-.     // THEN CHECK NEXT WORD IN THIS DEFINITION
  217                           
  218                           RW_UNTIL:
  219                           // ADDRESS OF SEMI IN THIS DEFINITION
  220    00000150 ........              DC32    DROP            // COME FROM SEMIS MATCH
  221                           RW_LFA: // RELOCATE LFA AND SET CURRENT/LATEST TO Next WORD
  222    00000154 ........              DC32    RFROM           // PFA OF THIS DEFINITION
  223    00000158 .............         DC32    LFA, DUP, AT    // GET ADDR OF LFA AND NFA IT POINTS TO
                  ...........  
  224    00000164 ........              DC32    DUP             // AND STORE NEXT NFA TO
  225    00000168 .............         DC32    CURRENT_SV, STORE       // CURRENT
                  ...          
  226    00000170 .............         DC32    TOFA, SWAP, STORE       // AND THIS DEF'S LFA
                  ...........  
  227    0000017C ........              DC32    SEMIS
  228                           
  229                           
  230                           //------------------------------------------------------------------------------
  231                           //:NONAME FLASH_SCAN:       ( -- ) SCAN FLASH FOR SAVED CODE
  232                           //      Patch in FLASH_SAVE'd Code.
  233                            SECTION .text : CONST (2)
  234                           FLASH_SCAN:
  235    00000000 ........              DC32    DOCOL
  236                           
  237                           // FLASH_PPAGE can be reserved and Hard_fault if accessed!
  238    00000004 ........00000         DC32    LIT, FLASH_SPAGE        // Start at first page available
                  208          
  239                           CHECK_NEXT_FLASH_SAVE:
  240    0000000C .............         DC32    DUP, LIT, FPA, STORE
                  .............
                  ......       
  241    0000001C .............         DC32    DUP, TOR                // EACH SAVE
                  ...          
  242    00000024 ........              DC32    AT                      // Verify SYSCLK signature
  243    00000028 ........              DC32    SYSCLK
  244    0000002C ........              DC32    SUBB                    // ZBRAN IF SYSCLK FOUND
  245    00000030 ........              DC32    ZBRAN                   //  = HEADER OF SAVED CODE
  246    00000034 10000000              DC32     LINK_FLASHCODE_SEGMENT-.
  247                           
  248                           // NO CODE FOUND TO LINK EXIT
  249    00000038 .............         DC32    RFROM, DROP, SEMIS
                  ...........  
  250                           
  251                           LINK_FLASHCODE_SEGMENT:
  252                           //      PAGE PASSES SYSCLK VERIFICATION, LINK IT
  253    00000044 .............         DC32    R, FPADDR, STORE
                  ...........  
  254    00000050 .............         DC32    R, LIT, 8, PLUS         // FPCURR
                  ...08000000..
                  ......       
  255    00000060 .............         DC32    DUP, AT
                  ...          
  256    00000068 ........              DC32    CURRENT_SV              // TO DP
  257    0000006C ........              DC32    STORE
  258    00000070 .............         DC32    FOURP, AT               // FPVAR
                  ...          
  259    00000078 .............         DC32    UP_SV, STORE            // TO UP
                  ...          
  260                           
  261    00000080 ........              DC32    CR
  262    00000084 ........              DC32    PDOTQ
  263    00000088 17                    DC8     23D
  264    00000089 4144444544205         DC8     'ADDED WORDS FROM ADDR '
                  74F5244532046
                  524F4D2041444
                  45220        
  265    0000009F FF             ALIGNROM 2,0xFFFFFFFF
  266    000000A0 .............         DC32    R, DOTHEX
                  ...          
  267                           
  268    000000A8 .............         DC32    RFROM, FOURP, AT        // NEXT FPADDR TO CHECK FOR CODE!
                  ...........  
  269    000000B4 ........              DC32    BRAN
  270    000000B8 54FFFFFF              DC32     CHECK_NEXT_FLASH_SAVE-.
  271                           
  272                           
  273                           //:NONAME ASSUREPAGE: ( fpa -- next-fpa) Verify this Flash page has code or is empty.
  274                           //      Make sure PAGE IN fpa page is erased and let user know what you do.
  275                           //      NOT TESTED YET: erase this page and tell user<<<<<<<<<<<<<<<<<<<<<<<<<<<
  276                           
  277                           // 2 STACK ITEMS LEFT ON EXIT, BOTH ARE fpa+1000H LIKE WHATS PUT ON r<<<<<<<<<<<
  278                           
  279                            SECTION .text : CONST (2)
  280                           ASSUREPAGE:
  281    00000000 ........              DC32    DOCOL                   // verified ONLY fpa ON STACK Here
  282    00000004 ........              DC32    DUP                     // -- fpa fpa
  283                           //        DC32    LIT, FLASH_WR_SIZE      // PAGE SIZE WERE WRITING
  284    00000008 ........              DC32    PLUS
  285    0000000C ........              DC32    TOR                     // End of this page
  286    00000010 ........              DC32    DUP                     // Begin -- fpa fpa
  287                           
  288                           APNEXT:
  289    00000014 ........              DC32    AT                      // Should be -1 -- fpa
  290    00000018 ........              DC32    ONEP                    // if so
  291    0000001C ........              DC32    ZBRAN                   // -- addr 0|BADFLASHVALUE
  292    00000020 38000000              DC32     APCONT-.               // keep going
  293                           
  294                           //      ERASE THIS PAGE                 // -- fpa
  295                           //        DC32    FLASHPREP
  296                           //        DC32    FLASHESEC
  297    00000024 ........              DC32    CR
  298    00000028 ........              DC32    PDOTQ
  299    0000002C 17                    DC8     23D
  300    0000002D 4552415345442         DC8     'ERASED BAD FLASH PAGE  '
                  042414420464C
                  4153482050414
                  7452020      
  301                            ALIGNROM 2,0xFFFFFFFF
  302    00000044 ........              DC32    DOTHEX
  303                           
  304                           //        DC32    CR, DOTS // DEBUG
  305    00000048 ........              DC32    DROP
  306                           
  307    0000004C .............         DC32    RFROM, DROP
                  ...          
  308    00000054 ........              DC32    SEMIS
  309                           
  310                           //      SO FAR SO GOOD
  311                           APCONT:                                 // -- addr
  312    00000058 .............         DC32    FOURP, DUP              // -- addr addr
                  ...          
  313    00000060 .............         DC32    DUP, R, SWAP            // -- addr  r addr
                  ...........  
  314    0000006C ........              DC32    SUBB                    // End of this Page?
  315    00000070 ........              DC32    ZBRAN                   // -- addr f
  316    00000074 0C000000              DC32     APGOOD-.
  317                           
  318    00000078 ........              DC32    BRAN
  319    0000007C 98FFFFFF              DC32     APNEXT-.
  320                           
  321                           APGOOD:                                 // addr
  322    00000080 ........              DC32    CR
  323    00000084 ........              DC32    PDOTQ
  324    00000088 0E                    DC8     14D
  325    00000089 464C415348205         DC8     'FLASH PAGE OK '
                  0414745204F4B
                  20           
  326    00000097 FF             ALIGNROM 2,0xFFFFFFFF
  327                           //        DC32    DROP, LIT, FLASH_WR_SIZE      // PAGE SIZE WERE WRITING
  328    00000098 ........              DC32    SUBB
  329    0000009C ........              DC32    DOTHEX
  330                           
  331                           APDONE:
  332    000000A0 .............         DC32    RFROM, DROP
                  ...          
  333    000000A8 ........              DC32    SEMIS
  334                           
  335                           //------------------------------------------------------------------------------
  336                           //      FLASH_FORGET FLASH_FORGET:      ( --  ) Erase All User Flash Pages
  337                           
  338                            SECTION .text : CONST (2)
  339                           FLASH_FORGET_NFA:
  340    00000000 8C                    DC8     0x80+12
  341    00000001 464C4153485F4         DC8     'FLASH_FORGE'
                  64F524745    
  342    0000000C D4                    DC8     'T'+0x80
  343    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
  344    00000010 ........              DC32    FLASH_SAVE_NFA
  345                           FLASH_FORGET:
  346    00000014 ........              DC32    DOCOL
  347    00000018 ........              DC32    PDOTQ
  348    0000001C 17                    DC8     23D
  349    0000001D 54414B4553204         DC8     'TAKES ABOUT 6 SECONDS! '
                  1424F55542036
                  205345434F4E4
                  4532120      
  350                            ALIGNROM 2,0xFFFFFFFF
  351    00000034 ........              DC32    CMSIS_DISABLE_IRQS
  352    00000038 ........              DC32    FLASH_UNLOCK
  353    0000003C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  354                           // Erase sector at a time
  355                           // ?Break this out to a primitive looping from sector 4/5 to 11
  356                           // 4 Words / 32 bytes per sector erase - 7 = 28 words / 112 bytes
  357                           // Sector 4 is 64k, sector 0-3 are 16k, together they equal 1rst 128k of flash.
  358                           // 5 to 11 are the 7 other 128k sectors that amount to the full 1mb of flash.
  359                           
  360                           // 01 is start 02 is x32 2 is 4th sector 2 is sector erase
  361                           // 5 3 LSL 2 + .H 2Ah  ok, go fish in BASE 10d
  362                           // 6 3 LSL 2 + .H 32h  ok, go fish in BASE 10d
  363                           // 7 3 LSL 2 + .H 3Ah  ok, go fish in BASE 10d
  364                           // 8 3 LSL 2 + .H 42h  ok, go fish in BASE 10d
  365                           
  366                           //        DC32    strva, 010222h, FLASH_CR        // erase sector 4 0x08010000h
  367                           //        DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  368    00000040 ........2A020         DC32    strva, 01022Ah, FLASH_CR        // erase sector 5 0x08020000h
                  100103C0240  
  369    0000004C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  370    00000050 ........32020         DC32    strva, 010232h, FLASH_CR        // erase sector 6 0x08040000h
                  100103C0240  
  371    0000005C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  372    00000060 ........3A020         DC32    strva, 01023Ah, FLASH_CR        // erase sector 7 0x08060000h
                  100103C0240  
  373    0000006C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  374    00000070 ........42020         DC32    strva, 010242h, FLASH_CR        // erase sector 8 0x08080000h
                  100103C0240  
  375    0000007C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  376    00000080 ........4A020         DC32    strva, 01024Ah, FLASH_CR        // erase sector 9 0x080A0000h
                  100103C0240  
  377    0000008C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  378    00000090 ........52020         DC32    strva, 010252h, FLASH_CR        // erase sector 10 0x080C0000h
                  100103C0240  
  379    0000009C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  380    000000A0 ........5A020         DC32    strva, 01025Ah, FLASH_CR        // erase sector 11 0x080E0000h
                  100103C0240  
  381    000000AC ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  382                           // Lock Flash again
  383    000000B0 ........              DC32    FLASH_LOCK   // Top bit = Lock
  384    000000B4 ........              DC32    CMSIS_ENABLE_IRQS
  385                           
  386                           //      RESET DICTIONARY and FLASH POINTERS APPROPRIATELY 
  387                           FF_FINISH:
  388                           // IF NO WORDS IN RAM TEST
  389    000000B8 .............         DC32    RBASE, LATEST   // If Latest is GT RBASE ( Latest is in ram )
                  ...          
  390    000000C0 ........              DC32    GREATERTHAN     // This will be zero
  391    000000C4 ........              DC32    ZBRAN           // Meaning there are
  392    000000C8 10000000              DC32     RAMWORDS-.     // words in Ram
  393                           // RESET ALL POINTERS
  394    000000CC ........              DC32    FISH_ONLY       // No words so clean up
  395                           // RESET FPA
  396    000000D0 ........              DC32    BRAN
  397    000000D4 1C000000              DC32      FFDONE-.
  398                           
  399                           // Preserve words in ram exit point. EXPLAIN THIS MORE~!
  400                           RAMWORDS:
  401                           //        DC32    LIT, TASK_NFA         // Fish WITH TASKER IN RAM starts here
  402                           
  403                           /* Define TOP of Dictionary:  
  404                           The top of the dictionary is defined in these places
  405                           In SLIBS SV_INIT_VALUES:
  406                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here
  407                                   DC32    LIT, WC_FISH_GPIO_NFA // FISH in flash starts here
  408                           IN FLASH RAMWORDS:
  409                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here
  410                                   DC32    LIT, WC_FISH_GPIO_NFA // FISH in flash starts here
  411                           In IAR FISH_ONLY:
  412                           //        LDR     n, = WC_FISH_PubRel_NFA
  413                                   LDR     n, = WC_FISH_GPIO_NFA
  414                           
  415                           */
  416    000000D8 .............         DC32    LIT, WC_FISH_GPIO_NFA // FISH in flash starts here
                  ...          
  417                           
  418    000000E0 .............         DC32    DBASE, PFA, LFA         // RELINK THIS lfa, i.e.
                  ...........  
  419    000000EC ........              DC32    STORE                   // repatch to Fish in flash
  420                           
  421                           // FLASH_FORGET Finish
  422                           FFDONE:
  423    000000F0 ........00000         DC32    strva, FLASH_SPAGE, FPA 
                  208........  
  424    000000FC ........11111         DC32    LIT, 11111111h, DUP, FPCURR, STORE, FPVAR, STORE
                  111..........
                  .............
                  .............
                  ....         
  425                           // Show results
  426    00000118 ........              DC32    FLASH_SCAN      // Verify Erase done via *no* Flash Page status
  427    0000011C .............         DC32    CR, DOTVARSPACE, DOTDICTSPACE
                  ...........  
  428    00000128 ........              DC32    SEMIS
  429                           
  430                           //--------------------- Flash code copied to ram test --------------------------
  431                           
  432                           //:NONAME FLASH_TCODE_COPY ( End Start -- ) Copy Flash code to ram
  433                            SECTION .text : CONST (2)
  434                           FLASH_TCODE_COPY:
  435    00000000 ........              DC32 .+5
  436                            SECTION .text : CODE (2)
  437                            ALIGNROM 2,0xFFFFFFFF
  438                                   POP2t_r0        // LDR     t, =FLASH_TCODE_START
  438.1  00000000 57F8040B              LDR     t, [p],#4       // Post-increment
  438.2                         //#ifndef TOSCT
  438.3                         //      LDR     t, [p]          // pop tos to t, post increment p
  438.4                         //#endif
  438.5                         //      ADDS    p, p, #4
  438.6                                 ENDM
  439                                   POP2n_r1        // LDR     n, =FLASH_TCODE_END
  439.1  00000004 57F8041B              LDR     n, [p],#4
  439.2                         //      LDR     n, [p]
  439.3                         //      ADDS    p, p, #4
  439.4                                 ENDM
  440    00000008 064A                  LDR     w, =FLASH_CODE_SRAM2_START
  441                           FLASH_COPY_LOOP:
  442    0000000A 50F8044B              LDR     y_r4, [t_r0], #4
  443    0000000E 42F8044B              STR     y_r4, [w_r2], #4
  444    00000012 8842                  cmp     t_r0, n_r1
  445    00000014 F9D1                  BNE     FLASH_COPY_LOOP
  446                                   NEXT
  446.1                         // ARMv7-M Thumb = .+5
  446.2  00000016 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  446.3                         // ARMv6-M Thumb = .+4
  446.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  446                                   NEXT1
  446.1  0000001A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  446.2  0000001E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  446.3  00000022 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  446.4                         // ARMv6-M Thumb = .+4
  446.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  446.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  446.7                                 ENDM
  446.8                                 ENDM
  447                           
  448                           // Each one will use FLASH_RAMCODE_EXEC after copying it's code to ram..
  449                           //:NONAME FLASH_RAMCODE_EXEC ( -- )
  449.1                                  TABLE
  449.2  00000024 ........              Reference on line 440
  450                            SECTION .text : CONST (2)
  451                           FLASH_RAMCODE_EXEC:
  452    00000000 .............         DC32    LIT, FLASH_CODE_SRAM2_START
                  ...          
  453    00000008 ........              DC32    EXEC
  454    0000000C ........              DC32    SEMIS
  455                           
  456                           // Prototype for each function
  457                           //:NONAME FLASH_TEST_RAMCODE ( -- )
  458                            SECTION .text : CONST (2)
  459                           FLASH_TEST_CODE_IN_RAM:
  460    00000000 ........              DC32    DOCOL
  461    00000004 .............         DC32    LIT, FLASH_TCODE_END
                  ...          
  462    0000000C .............         DC32    LIT, FLASH_TCODE_START
                  ...          
  463    00000014 ........              DC32    FLASH_TCODE_COPY
  464    00000018 ........              DC32    FLASH_RAMCODE_EXEC
  465    0000001C ........              DC32    SEMIS
  466                           
  467                           //:NONAME FLASHWRITE:   ( --  ) Save Ram to Flash using FPADDR and valid HERE.
  468                           //      Header need to be completed at this point.
  469                           //      FPADDR needs to be Flash HERE, where the next save goes.
  470                           //      But current FPADDR must be uused for save
  471                            SECTION .text : CONST (2)
  472                           FLASHWRITE:
  473    00000000 ........              DC32    DOCOL
  474                           /* THIS WAS ADDED BECAUSE 2ND SAVE BOMBED WITH FPCURR -> HEADER NOT DBASE START
  475                           // SET FPCURR TO NEW LATEST
  476                                   DC32    FPADDR, AT
  477                                   DC32    LIT, 16, PLUS
  478                                   DC32    FPCURR, STORE
  479                            DC32 NOOP
  480                            */
  481    00000004 ........              DC32    CMSIS_DISABLE_IRQS
  482    00000008 ........              DC32    FLASH_UNLOCK
  483    0000000C ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  484                           // Set PSIZE to x32 and the Program Start bit
  485    00000010 ........01020         DC32    strva,  0201h, FLASH_CR // x32 & start programming
                  000103C0240  
  486                           // SAVE FPA AS HEADER ADDR
  487    0000001C .............         DC32    FPADDR, AT, TOR         /// SAVE FPA HEADER ADDR
                  ...........  
  488                           // BUMP FPA TO DICT OFFSET
  489    00000028 ........10000         DC32    LIT, 16, FPADDR, PSTORE  // SET FPA PAST HEADER
                  000..........
                  ......       
  490                           // COPY DBASE TO HERE TO FLASH
  491                           // AFTER RWORD IS HERE VALID????
  492    00000038 .............         DC32    HERE, TOR               // length of save
                  ...          
  493    00000040 ........              DC32    DBASE
  494                           //        DC32    RBASE
  495                           FLASH_WRITE_LOOP:
  496    00000044 .............         DC32    DUP, AT                 // GET DICT
                  ...          
  497    0000004C .............         DC32    FPADDR, AT              // FLASH
                  ...          
  498    00000054 .............         DC32    STORE, FLASH_NOT_BSY    // WRITE & VERIFY NOT BUSY
                  ...          
  499    0000005C .............         DC32    FOUR, FPADDR, PSTORE    // INC FPA
                  ...........  
  500    00000068 ........              DC32    FOURP                   // INC DICT
  501    0000006C .............         DC32    DUP, R, SUBB            // EQUAL HERE YET?
                  ...........  
  502    00000078 ........              DC32    ZBRAN
  503    0000007C 0C000000              DC32     FLASH_WRITE_EXIT_LOOP-.
  504    00000080 ........              DC32    BRAN
  505    00000084 C0FFFFFF              DC32     FLASH_WRITE_LOOP-.
  506                           FLASH_WRITE_EXIT_LOOP:
  507    00000088 ........              DC32    RFROM
  508    0000008C .............         DC32    DROP, DROP     // THE FPADDR AND HERE LIMIT
                  ...          
  509                           
  510                           // WRITE HEADER WITH ORIGINAL FPA ( 4 WORDS )
  511                           // NEW FPA SET HERE - DOES IT NEED 4+ BUMP HERE?
  512                           // FPVAR AND FPCURR SET IN CALLING FUNCTION - FLASH_SAVE
  513                           // DEFINE SRBASE        DC32    SRBASE, AT, R           // WRITE SYSCLK
  514    00000094 .............         DC32    LIT, RAM_START, AT, R        // GET SYSCLK AND
                  .............
                  ......       
  515    000000A4 .............         DC32    STORE, FLASH_NOT_BSY    // WRITE & VERIFY NOT BUSY
                  ...          
  516    000000AC .............         DC32    FPADDR, AT              // NEW FPADDR
                  ...          
  517    000000B4 .............         DC32    R, FOURP
                  ...          
  518    000000BC .............         DC32    STORE, FLASH_NOT_BSY    // WRITE & VERIFY NOT BUSY
                  ...          
  519    000000C4 .............         DC32    FPCURR, AT              // HAVE TO MAKE FPCURR
                  ...          
  520                           //        DC32    LIT, 16, PLUS           // PAST HEADER
  521    000000CC .............         DC32    R, EIGHT, PLUS
                  ...........  
  522    000000D8 .............         DC32    STORE, FLASH_NOT_BSY    // WRITE & VERIFY NOT BUSY
                  ...          
  523    000000E0 .............         DC32    FPVAR, AT, RFROM, LIT, 12, PLUS
                  .............
                  ......0C00000
                  0........    
  524    000000F8 .............         DC32    STORE, FLASH_NOT_BSY    // WRITE & VERIFY NOT BUSY
                  ...          
  525                           FLASH_WRITE_FINISH:
  526    00000100 ........              DC32    FLASH_LOCK   // Top bit = Lock
  527    00000104 ........              DC32    CMSIS_ENABLE_IRQS
  528    00000108 ........              DC32    SEMIS
  529                           
  530                           //--------------------- Flash code copied to ram test --------------------------
  531                           FLASH_TCODE_START:
  532                           // WORDS and CODE to evaluate for copying to RAM ( for each flash function ).
  533                           
  534                           //:NONAME FLASH_TEST_CODE_IN_FLASH: ( -- )
  535                            SECTION .text : CONST (2)
  536                           FLASH_TEST_CODE_IN_FLASH:
  537    00000000 ........              DC32    DOCOL
  538    00000004 ........              DC32    FLASH_FORGET    // Atomic Primitive: erase all user sectors
  539    00000008 ........              DC32    CMSIS_DISABLE_IRQS
  540    0000000C ........              DC32    FLASH_UNLOCK
  541    00000010 ........              DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  542                           // Set PSIZE to x32 and the Program Start bit
  543    00000014 ........01020         DC32    strva,  0201h, FLASH_CR // x32 & start programming
                  000103C0240  
  544    00000020 ........00000         DC32    strva, 08020000h, FPA
                  208........  
  545    0000002C ........10000         DC32    LIT, 16, DP_SV, PSTORE
                  000..........
                  ......       
  546    0000003C ........              DC32    NOOP
  547    00000040 ........              DC32    FLASHWRITE
  548    00000044 ........              DC32    NOOP
  549    00000048 ........              DC32    FLASH_FORGET    // Atomic Primitive: erase all user sectors
  550                           /* Write and erase test
  551                           // User Code Flash Save starts in sector 5, the 1rst of 7 128k sectors
  552                                   DC32    strva,  -3, 08020000h   // The beginning of sector 5
  553                                   DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  554                                   DC32    strva,  -4, 08040000h   // The beginning of sector 6
  555                                   DC32    FLASH_NOT_BSY   // VERIFY NOT BUSY
  556                                   DC32    NOOP
  557                                   DC32    FLASH_FORGET    // Atomic Primitive: erase all user sectors
  558                           */
  559    0000004C ........              DC32    FLASH_LOCK   // Top bit = Lock
  560    00000050 ........              DC32    CMSIS_ENABLE_IRQS
  561                           // Lock Flash again
  562    00000054 ........              DC32    SEMIS
  563                           
  564                           
  565                            SECTION .text : CONST (2)
  566                           FLASH_NOT_BSY:
  567    00000000 ........              DC32 .+5
  568                            SECTION .text : CODE (2)
  569                            ALIGNROM 2,0xFFFFFFFF
  570    00000000 0549                  LDR     n, =FLASH_SR    // 40023C00h is FLASH CTRL 40023C0Ch is FLASH_SR
  571                           _WaitBsy10:
  572    00000002 0868                  LDR     t, [n]
  573    00000004 0004                  LSLS    t, t, #16       // BSY - Bit 16
  574    00000006 FCD2                  BCS     _WaitBsy10
  575                                   NEXT
  575.1                         // ARMv7-M Thumb = .+5
  575.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  575.3                         // ARMv6-M Thumb = .+4
  575.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  575                                   NEXT1
  575.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  575.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  575.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  575.4                         // ARMv6-M Thumb = .+4
  575.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  575.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  575.7                                 ENDM
  575.8                                 ENDM
  576                           // Commit literal constants to pool to be copied!
  577    00000016 0000           LTORG
  577.1                                  TABLE
  577.2  00000018 0C3C0240              Reference on line 570
  578                           
  579                           //:NONAME FLASH_UNLOCK ( -- ) // Unlock Flash Programming Functionality
  580                            SECTION .text : CONST (2)
  581                           FLASH_UNLOCK:
  582    00000000 ........              DC32    DOCOL
  583    00000004 ........23016         DC32    strva,  045670123h, FLASH_KEYR // Key1
                  745043C0240  
  584    00000010 ........AB89E         DC32    strva,  0CDEF89ABh, FLASH_KEYR // Key2
                  FCD043C0240  
  585    0000001C ........              DC32    SEMIS
  586                           
  587                           //:NONAME FLASH_LOCK ( -- ) // Lock Flash Programming Functionality
  588                            SECTION .text : CONST (2)
  589                           FLASH_LOCK:
  590    00000000 ........              DC32    DOCOL
  591                           //      SETBITS SETBITS:        ( addr val -- ) OR val bits into addr.
  592                           //        DC32    LIT, FLASH_CR, LIT, 080000000h, SETBITS // Preserve other bits
  593    00000004 ........00000         DC32    strva,   080000000h, FLASH_CR   // Top bit = Lock
                  080103C0240  
  594    00000010 ........              DC32    SEMIS
  595                           
  596                           FLASH_TCODE_END:
  597                           
 4797                           // LFA BELOW NEEDS TO BE FLASH_FORGET_NFA
 4798                           //------------------------------------------------------------------------------
 4799                           
 4800                           //-------------------------- PROMPT VECTOR SECTION -----------------------------
 4801                           
 4802                           //      POFF ( -- )   Set NULL$ address in PROMPT to zero so quit does CR only.
 4803                           
 4804                            SECTION .text : CONST (2)
 4805                           POFF_NFA:
 4806    00000000 84                    DC8     0x84
 4807    00000001 504F46                DC8     'POF'
 4808    00000004 C6                    DC8     'F'+0x80
 4809    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4810    00000008 ........              DC32    FLASH_FORGET_NFA
 4811                           POFF:
 4812    0000000C ........              DC32    DOCOL
 4813    00000010 ........00000         DC32    STRVA, 0, PROMPT
                  000........  
 4814    0000001C ........              DC32    SEMIS
 4815                           
 4816                           //      PON ( -- )   Set NULL$ address in PROMPT to msg_MY_OK
 4817                           
 4818                            SECTION .text : CONST (2)
 4819                           PON_NFA:
 4820    00000000 83                    DC8     0x83
 4821    00000001 504F                  DC8     'PO'
 4822    00000003 CE                    DC8     'N'+0x80
 4823                            ALIGNROM 2,0xFFFFFFFF
 4824    00000004 ........              DC32    POFF_NFA
 4825                           PON:
 4826    00000008 ........              DC32    DOCOL
 4827    0000000C .............         DC32    STRVA, msg_MY_OK, PROMPT
                  ...........  
 4828    00000018 ........              DC32    SEMIS
 4829                           
 4830                           //      P ( -- addr )   Address of PROMPT, contains 0 or NULL$ address.
 4831                           
 4832                            SECTION .text : CONST (2)
 4833                           P_NFA:
 4834    00000000 81                    DC8     0x81
 4835    00000001 D0                    DC8     'P'+0x80
 4836    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4837    00000004 ........              DC32    PON_NFA
 4838                           P:
 4839    00000008 .............         DC32    DOCON, PROMPT
                  ...          
 4840                           
 4841                           //-------------------------- ERROR_HALT SECTION -----------------------------
 4842                           
 4843                           //      EHOFF ( -- )   Set ERROR_HALT to 0
 4844                           
 4845                            SECTION .text : CONST (2)
 4846                           EHOFF_NFA:
 4847    00000000 85                    DC8     0x85
 4848    00000001 45484F46              DC8     'EHOF'
 4849    00000005 C6                    DC8     'F'+0x80
 4850    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4851    00000008 ........              DC32    P_NFA
 4852                           EHOFF:
 4853    0000000C .............         DC32    DOCOL, ZERO, LIT, ERROR_HALT, STORE, SEMIS
                  .............
                  .............
                  .........    
 4854                           
 4855                           //      EHON ( -- )   Set ERROR_HALT to 1
 4856                           
 4857                            SECTION .text : CONST (2)
 4858                           EHON_NFA:
 4859    00000000 84                    DC8     0x84
 4860    00000001 45484F                DC8     'EHO'
 4861    00000004 CE                    DC8     'N'+0x80
 4862    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4863    00000008 ........              DC32    EHOFF_NFA
 4864                           EHON:
 4865    0000000C .............         DC32    DOCOL, ONE, LIT, ERROR_HALT, STORE, SEMIS
                  .............
                  .............
                  .........    
 4866                           
 4867                           //-------------------------- DOTDICTSPACE SECTION ------------------------------
 4868                           
 4869                           //      .DS DOTDICTSPACE:       ( n -- )
 4870                           //      Prints number of bytes availble in dictionary in DECIMAL using DOT,
 4871                           //      not affecting Base in the system
 4872                           
 4873                            SECTION .text : CONST (2)
 4874                           DOTDICTSPACE_NFA:
 4875    00000000 83                    DC8     0x83
 4876    00000001 2E44                  DC8     '.D'
 4877    00000003 D3                    DC8     'S'+0x80
 4878                            ALIGNROM 2,0xFFFFFFFF
 4879                           //      DC32    FLASH_FORGET_NFA
 4880                           //      DC32    P_NFA
 4881    00000004 ........              DC32    EHON_NFA
 4882                           DOTDICTSPACE:
 4883    00000008 ........              DC32    DOCOL
 4884    0000000C ........              DC32    DICTSPACE
 4885    00000010 ........              DC32    BASE_TO_R12     // Save current BASE
 4886    00000014 ........              DC32    DOTDEC
 4887    00000018 ........              DC32    BASE_FROM_R12   // Restore BASE
 4888    0000001C .............         DC32    LIT, msg_dictspace
                  ...          
 4889    00000024 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 4890                           #ifdef IO2TP
 4894                           #endif
 4895    0000002C ........              DC32    SEMIS
 4896                           
 4897                           
 4898                           //-------------------------- DOTVARSPACE SECTION -------------------------------
 4899                           
 4900                           //      .VS DOTVARSPACE:        ( n -- )
 4901                           //      Prints number of bytes availble in RAM VAR SPACE in DECIMAL using DOT,
 4902                           //      not affecting Base in the system.
 4903                           
 4904                            SECTION .text : CONST (2)
 4905                           DOTVARSPACE_NFA:
 4906    00000000 83                    DC8     0x83
 4907    00000001 2E56                  DC8     '.V'
 4908    00000003 D3                    DC8     'S'+0x80
 4909                            ALIGNROM 2,0xFFFFFFFF
 4910    00000004 ........              DC32    DOTDICTSPACE_NFA
 4911                           DOTVARSPACE:
 4912    00000008 ........              DC32    DOCOL
 4913    0000000C ........              DC32    VARSPACE
 4914    00000010 ........              DC32    BASE_TO_R12     // Save current BASE
 4915    00000014 .............         DC32    FOUR, SLASH
                  ...          
 4916    0000001C ........              DC32    DOTDEC
 4917    00000020 ........              DC32    BASE_FROM_R12   // Restore BASE
 4918    00000024 .............         DC32    LIT, msg_uvspace
                  ...          
 4919    0000002C .............         DC32    NULLSTRLEN, TYPE
                  ...          
 4920                           #ifdef IO2TP
 4924                           #endif
 4925    00000034 ........              DC32    SEMIS
 4926                           
 4927                           
 4928                           //      DUMP DUMP:      ( addr n -- )
 4929                           //      Print adrr and n lines of 4 columns of memory values in hexadecimal.
 4930                           //      Address must be even and a multiple of 4 else error message issued.
 4931                           //      Any key presssed will stop DUMP.
 4932                           
 4933                            SECTION .text : CONST (2)
 4934                           DUMP_NFA:
 4935    00000000 84                    DC8     0x84
 4936    00000001 44554D                DC8     'DUM'
 4937    00000004 D0                    DC8     'P'+0x80
 4938    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4939    00000008 ........              DC32    DOTVARSPACE_NFA
 4940                           DUMP:
 4941    0000000C ........              DC32    DOCOL
 4942                           
 4943    00000010 .............         DC32    OVER, QALIGNED  // \ -- addr n
                  ...          
 4944                           // DON'T SAVE BASE UNTIL AFTER ALIGNED TEST
 4945    00000018 ........              DC32    BASE_TO_R12     // Save current BASE
 4946    0000001C ........              DC32    HEX
 4947    00000020 .............         DC32    ZERO, XDO
                  ...          
 4948                           DUMP_ADDR_LINE:
 4949    00000028 ........              DC32    CR
 4950    0000002C .............         DC32    DUP, LIT, 10, DOTRU     // Print addr in Field
                  ...0A000000..
                  ......       
 4951    0000003C .............         DC32    FOUR, ZERO, XDO         // Four colum loop
                  ...........  
 4952                           DUMP_EACH_LOC:
 4953    00000048 .............         DC32    DUP, AT
                  ...          
 4954                           // Little Endian means addresses will print correctly
 4955                           // but to see character strings REVW is needed
 4956                           // but the addresses are scrambled!
 4957                           //        DC32    REVW                    // Reverse bytes in word
 4958    00000050 ........0E000         DC32    LIT, 14, DOTRU          // Diplay in Field
                  000........  
 4959    0000005C ........              DC32    FOURP
 4960    00000060 ........              DC32    XLOOP
 4961    00000064 E4FFFFFF              DC32      DUMP_EACH_LOC-.
 4962                           
 4963                           #ifdef IO2TP
 4967                           #endif
 4968    00000068 ........              DC32    QKEY
 4969    0000006C ........              DC32    ZBRAN
 4970    00000070 08000000              DC32     DUMP_CONT-.
 4971    00000074 ........              DC32    LEAVE
 4972                           DUMP_CONT:
 4973    00000078 ........              DC32    XLOOP
 4974    0000007C ACFFFFFF              DC32    DUMP_ADDR_LINE-.
 4975                           
 4976    00000080 .............         DC32    DROP, CR
                  ...          
 4977    00000088 ........              DC32    BASE_FROM_R12   // Restore BASE
 4978    0000008C ........              DC32    SEMIS
 4979                           
 4980                           
 4981                           //      VBASE VBASE:    ( -- addr )
 4982                           //       Return base addr of VAR's .
 4983                           
 4984                            SECTION .text : CONST (2)
 4985                           VBASE_NFA:
 4986    00000000 85                    DC8     0x85
 4987    00000001 56424153              DC8     'VBAS'
 4988    00000005 C5                    DC8     'E'+0x80
 4989    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4990    00000008 ........              DC32    DUMP_NFA
 4991                           VBASE:
 4992    0000000C .............         DC32    DOCON,  RAMVARSPACE_START
                  ...          
 4993                           
 4994                           
 4995                           //      DBASE DBASE:    ( -- addr )
 4996                           //      Return base addr of the dictionary.
 4997                           
 4998                            SECTION .text : CONST (2)
 4999                           DBASE_NFA:
 5000    00000000 85                    DC8     0x85
 5001    00000001 44424153              DC8     'DBAS'
 5002    00000005 C5                    DC8     'E'+0x80
 5003    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5004    00000008 ........              DC32    VBASE_NFA
 5005                           DBASE:
 5006    0000000C .............         DC32    DOCON,  ORIG
                  ...          
 5007                           
 5008                           
 5009                           //      RBASE RBASE:    ( -- addr )
 5010                           //      Return base addr of RAM.
 5011                           
 5012                            SECTION .text : CONST (2)
 5013                           RBASE_NFA:
 5014    00000000 85                    DC8     0x85
 5015    00000001 52424153              DC8     'RBAS'
 5016    00000005 C5                    DC8     'E'+0x80
 5017    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5018    00000008 ........              DC32    DBASE_NFA
 5019                           RBASE:
 5020    0000000C .............         DC32    DOCON,  RAM_START    // RAM WHERE DICT ALLOACTED IN MEMMAP
                  ...          
 5021                           
 5022                           
 5023                           //      CLS CLS:        ( -- )
 5024                           //      Clear serial terminal screen using a formfeed character
 5025                           
 5026                            SECTION .text : CONST (2)
 5027                           CLS_NFA:
 5028    00000000 83                    DC8     0x83
 5029    00000001 434C                  DC8     'CL'
 5030    00000003 D3                    DC8     'S'+0x80
 5031                            ALIGNROM 2,0xFFFFFFFF
 5032    00000004 ........              DC32    RBASE_NFA
 5033                           CLS:
 5034    00000008 ........              DC32    DOCOL
 5035    0000000C ........              DC32    PDOTQ
 5036    00000010 04                    DC8     4
 5037    00000011 1B5B                  DC8     0x1B, '['       // ESC[ = ANSI VT100 ESC SETUP
 5038    00000013 324A                  DC8     '2J'            // Clearscreen
 5039    00000015 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5040    00000018 ........              DC32    PDOTQ
 5041    0000001C 04                    DC8     4
 5042    0000001D 1B5B                  DC8     0x1B, '['       // ESC[ = ANSI VT00 ESC SETUP
 5043    0000001F 3B48                  DC8     ';H'            // CURSORHOME \ upper left corner
 5044    00000021 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5045    00000024 ........              DC32    CR              // Reset OUT
 5046    00000028 ........              DC32    SEMIS
 5047                           
 5048                           
 5049                           //      ( PAREN:        ( -- ) IMMEDIATE
 5050                           //      Used in the form:
 5051                           //              ( CCcc )
 5052                           //      Ignore comments within parenthesis. A right parenthesis ends comment.
 5053                           //      The comments may be multi-line but a space or tab is required
 5054                           //      for any line that is otherwise empty for formatting purposes,
 5055                           //      else a comment error will be printed. May occur during execution or in a
 5056                           //      colon-definition. A blank after the leading parenthesis is required.
 5057                           
 5058                            SECTION .text : CONST (2)
 5059                           PAREN_NFA:
 5060    00000000 C1                    DC8     0x0C1
 5061    00000001 A8                    DC8     '('+0x80
 5062    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5063    00000004 ........              DC32    CLS_NFA
 5064                           PAREN:
 5065                           // Slow Single line comment
 5066                           //      DC32    DOCOL, LIT, ')', WORD, SEMIS
 5067    00000008 ........              DC32    DOCOL
 5068                           PML_LOOP:
 5069    0000000C ........29000         DC32    LIT, ')'
                  000          
 5070    00000014 ........              DC32    TIB_CHAR_SCAN   // ( c -- f )
 5071                           //
 5072    00000018 ........              DC32    ZEQU            // If null
 5073    0000001C ........              DC32    ZBRAN           // found fall thru
 5074    00000020 34000000              DC32      PE_DONE-.     // else were done
 5075                           
 5076                           // Acting like the outer interpreter here, signal DLE
 5077    00000024 .............         DC32    CR, LIT, 0x10, EMIT
                  ...10000000..
                  ......       
 5078    00000034 ........              DC32    QUERY
 5079                           //  AND IF ONLY CR (null) ERR
 5080                           //        DC32    TIB_SV, CAT
 5081    00000038 .............         DC32    LIT, TIB+1, CAT // PAST COUNT BYTE
                  ...........  
 5082    00000044 ........              DC32    ZBRAN
 5083    00000048 10000000              DC32      PAREN_ERR-.
 5084                           
 5085                           //  If closing paren not in this line LOOP
 5086    0000004C ........              DC32    BRAN
 5087    00000050 BCFFFFFF              DC32      PML_LOOP-.
 5088                           
 5089                           PE_DONE:
 5090    00000054 ........              DC32    SEMIS
 5091                           
 5092                           PAREN_ERR:
 5093    00000058 .............         DC32    LIT, msg_paren_err
                  ...          
 5094    00000060 .............         DC32    NULLSTRLEN, TYPE        // Passed in null string
                  ...          
 5095    00000068 ........              DC32    SEMIS
 5096                           
 5097                           
 5098                           //      BACKSLASH BACKSLASH:    ( --  )
 5099                           //      After a trailing space treat the rest of the line as a comment.
 5100                           //      By setting a null terminator in TIB
 5101                           
 5102                            SECTION .text : CONST (2)
 5103                           BACKSLASH_NFA:
 5104    00000000 C1                    DC8     0x0C1
 5105    00000001 DC                    DC8     '\\'+0x80
 5106    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5107    00000004 ........              DC32    PAREN_NFA
 5108                           BACKSLASH:
 5109    00000008 ........              DC32    DOCOL
 5110    0000000C .............         DC32    ZERO, TIB_SV, IN_SV, AT, PLUS, CSTORE
                  .............
                  .............
                  .........    
 5111    00000024 ........              DC32    SEMIS
 5112                           
 5113                           
 5114                           //      SYSCLK SYSCLK:  ( -- value )
 5115                           //      Returns system clock value in Hz, i.e. 48000000 = 48Mhz.
 5116                           
 5117                            SECTION .text : CONST (2)
 5118                           SYSCLK_NFA:
 5119    00000000 86                    DC8     0x86
 5120    00000001 535953434C            DC8     'SYSCL'
 5121    00000006 CB                    DC8     'K'+0x80
 5122    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5123    00000008 ........              DC32    BACKSLASH_NFA
 5124                           SYSCLK:
 5125    0000000C ........              DC32    .+5
 5126                            SECTION .text : CODE (2)
 5127    00000000 0549                  LDR     n, = SYSCLOCK   // SystemCoreClock
 5128    00000002 0868                  LDR     t_r0, [n]
 5129                                   TPUSH_r0        // Push -- t_r0
 5129                                   PUSHt_r0        // push t to p, pre decrement p
 5129.1  00000004 47F8040D              STR     t, [p, #-4]!    // Pre-increment
 5129.2                         //      SUBS    p, p, #4        // push t to p, pre decrement p
 5129.3                         //      STR     t, [p]
 5129.4                                 ENDM
 5129                                   NEXT
 5129.1                         // ARMv7-M Thumb = .+5
 5129.2  00000008 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 5129.3                         // ARMv6-M Thumb = .+4
 5129.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 5129                                   NEXT1
 5129.1  0000000C 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 5129.2  00000010 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 5129.3  00000014 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 5129.4                         // ARMv6-M Thumb = .+4
 5129.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5129.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5129.7                                 ENDM
 5129.8                                 ENDM
 5129.9                                 ENDM
 5130    00000016 0000           LTORG   //Always outside of code, else data in words
 5130.1                                  TABLE
 5130.2  00000018 ........              Reference on line 5127
 5131                           
 5132                           
 5133                           //      STCTR   ( -- addr ) SYSTICK Interrupt increments this with 32but wrap.
 5134                           //      STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 5135                            SECTION .text : CONST (2)
 5136                           STCTR_NFA:
 5137    00000000 85                    DC8     0x85
 5138    00000001 53544354              DC8     'STCT'
 5139    00000005 D2                    DC8     'R'+0x80
 5140    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5141                           //      DC32    STI_ON_NFA
 5142    00000008 ........              DC32    SYSCLK_NFA
 5143                           STCTR:
 5144    0000000C .............         DC32    DOCON, STICKER
                  ...          
 5145                           
 5146                           
 5147                           //      DELAY ( n value -- ) 7 E000E010h !   5 E000E010h !
 5148                            SECTION .text : CONST (2)
 5149                           DELAY_NFA:
 5150    00000000 85                    DC8     0x85
 5151    00000001 44454C41              DC8     'DELA'
 5152    00000005 D9                    DC8     'Y'+0x80
 5153    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5154    00000008 ........              DC32    STCTR_NFA
 5155                           DELAY:
 5156    0000000C ........              DC32    .+5
 5157                            SECTION .text : CODE (2)
 5158                             POP2n_r1                // Reload value in n
 5158.1  00000000 57F8041B              LDR     n, [p],#4
 5158.2                         //      LDR     n, [p]
 5158.3                         //      ADDS    p, p, #4
 5158.4                                 ENDM
 5159                             POP2t_r0                // loop count in t
 5159.1  00000004 57F8040B              LDR     t, [p],#4       // Post-increment
 5159.2                         //#ifndef TOSCT
 5159.3                         //      LDR     t, [p]          // pop tos to t, post increment p
 5159.4                         //#endif
 5159.5                         //      ADDS    p, p, #4
 5159.6                                 ENDM
 5160                           // SET STCTR TO NEGATIVE LOOP COUNT TO END AT ZERO
 5161    00000008 0C4C            LDR     y_r4, = STICKER
 5162    0000000A C043                  MVNS    t_r0, t_r0      // 1's compliment
 5163    0000000C 401C                  ADDS    t_r0, t_r0, #1  // 2's compliment
 5164    0000000E 2060            STR     t_r0, [y_r4]
 5165                           // Load SYST_RVR with countdown value
 5166    00000010 0B4A            LDR     w_r2, = SYST_RVR
 5167    00000012 1160            STR     n_r1, [w_r2]
 5168                           // and reset SYST_CVR to start countdown.
 5169    00000014 0B4A            LDR     w_r2, = SYST_CVR
 5170                           // Writing it clears the System Tick counter and the COUNTFLAG bit in SYST_CSR.
 5171    00000016 1160            STR     n_r1, [w]
 5172                           // If n=0 in t user is just setting reload value
 5173    00000018 0028            CMP     t_r0, #0        // LOOP OF ZERO
 5174    0000001A 06D0            BEQ     DELAY_DONE
 5175                           // INTERRUPT VERSION: negate n to STCTR and leave when STCTR = 0
 5176                           // SYSTICK_IRQ_ON: 7 E000E010h !  SYSTICK_IRQ_OFF: 5 E000E010h ! E000E010h @ .H
 5177                           // Save and restore user interrupt setting
 5178                           // y = STICKER
 5179    0000001C 0A4A            LDR     w_r2, = SYST_CSR
 5180    0000001E 1068            LDR     t_r0, [w_r2]    // Save user SYSTICK interrupt setting
 5181    00000020 0721            MOVS    n_r1, #7
 5182    00000022 1160            STR     n_r1, [w_r2]    // Turn SYSTICK interrupt on in case it's off
 5183                           DELAY_LOOP:
 5184    00000024 2168            LDR     n_r1, [y_r4]
 5185    00000026 0029            CMP     n_r1, #0
 5186    00000028 FCD1            BNE     DELAY_LOOP
 5187                           DELAY_DONE:
 5188    0000002A 1060            STR     t_r0, [w_r2]    // Restore user SYSTICK interrupt setting
 5189                                   NEXT
 5189.1                         // ARMv7-M Thumb = .+5
 5189.2  0000002C 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 5189.3                         // ARMv6-M Thumb = .+4
 5189.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 5189                                   NEXT1
 5189.1  00000030 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 5189.2  00000034 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 5189.3  00000038 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 5189.4                         // ARMv6-M Thumb = .+4
 5189.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5189.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5189.7                                 ENDM
 5189.8                                 ENDM
 5190    0000003A 0000           LTORG
 5190.1                                  TABLE
 5190.2  0000003C ........              Reference on line 5161
 5190.3  00000040 14E000E0              Reference on line 5166
 5190.4  00000044 18E000E0              Reference on line 5169
 5190.5  00000048 10E000E0              Reference on line 5179
 5191                           
 5192                           
 5193                           //      MS MS: ( n -- ) n * 1 millisecond execution time
 5194                           //      SYSTICK_IRQ_ON/OFF  STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h !
 5195                           
 5196                            SECTION .text : CONST (2)
 5197                           MS_NFA:
 5198    00000000 82                    DC8     0x82
 5199    00000001 4D                    DC8     'M'
 5200    00000002 D3                    DC8     'S'+0x80
 5201    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 5202    00000004 ........              DC32    DELAY_NFA
 5203                           MS:
 5204    00000008 ........        DC32    DOCOL
 5205                           #ifdef STM32F4_IRC16_48MHZ
 5207                           #endif
 5208                           #ifdef STM32F205RC_XRC10_118MHZ // VERIFY THIS!
 5210                           #endif
 5211                           #ifdef STM32F4_XRC08_168MHZ
 5212    0000000C ........3F900   DC32    LIT, 167999d    // 2903Fh 1ms @ 168mhz RELOAD COUNTER VALUE
                  200          
 5213                           #endif
 5214    00000014 ........        DC32    DELAY
 5215    00000018 ........        DC32    SEMIS
 5216                           
 5217                           //      WORDCAT WORDCAT: ( -- )
 5218                           //      Creates a Word Category NFA and LFA that cannot be searched for,
 5219                           //      but is displayed by WORDS and MYWORDS to label a group of Words.
 5220                           //      Define a group of Words and then add a category name with WORDCAT.
 5221                           //      EX: WORDCAT MY APP WORDS:
 5222                           //      It must be on a line of it's own.
 5223                           //      The colon at the end is FISH convention.
 5224                            SECTION .text : CONST (2)
 5225                           WORDCAT_NFA:
 5226    00000000 87                    DC8     0x87
 5227    00000001 574F52444341          DC8     'WORDCA'
 5228    00000007 D4                    DC8     'T'+0x80
 5229                            ALIGNROM 2,0xFFFFFFFF
 5230    00000008 ........        DC32    MS_NFA
 5231                           WORDCAT:
 5232    0000000C ........              DC32    DOCOL
 5233    00000010 .............   DC32  HERE, TOR
                  ...          
 5234    00000018 .............   DC32  ZERO, CCOMMA    // Count byte place holder
                  ...          
 5235    00000020 ........0D000   DC32  LIT, 0Dh, CCOMMA
                  000........  
 5236    0000002C ........        DC32  HERE
 5237    00000030 ........0D000   DC32  LIT, 0Dh, WORD
                  000........  
 5238    0000003C .............   DC32  DUP, CAT
                  ...          
 5239    00000044 ........0A000   DC32  LIT, 0Ah, ROT, CSTORE
                  000..........
                  ......       
 5240    00000054 .............   DC32  DUP, ONEP, ALLOT
                  ...........  
 5241    00000060 ........84000   DC32  LIT, 084h        // Count before system text
                  000          
 5242    00000068 .............   DC32  PLUS, R, CSTORE
                  ...........  
 5243    00000074 ........0D000   DC32  LIT, 0Dh, CCOMMA
                  000........  
 5244    00000080 ........8A000   DC32  LIT, 08Ah, CCOMMA
                  000........  
 5245    0000008C ........        DC32  ALIGN32_DP_FF_PAD
 5246    00000090 .............   DC32  LATEST, COMMA
                  ...          
 5247    00000098 ........        DC32  RFROM
 5248    0000009C .............   DC32  LIT, CURRENT
                  ...          
 5249    000000A4 ........        DC32  STORE
 5250    000000A8 ........              DC32  SEMIS
 5251                           
 5252                           
 5253                           //      WORDS WORDS:    ( -- ) RENAMED: VLIST to WORDS
 5254                           //      Output list of Words in the dictionary in search order.
 5255                           //      Uses WC_ nfa's to format Word Categories.
 5256                           //      Uses FENCE for where to stop.
 5257                           //      See MYWORDS.
 5258                           
 5259                            SECTION .text : CONST (2)
 5260                           WORDS_NFA:
 5261    00000000 85                    DC8     0x85
 5262    00000001 574F5244              DC8     'WORD'
 5263    00000005 D3                    DC8     'S'+0x80
 5264    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5265    00000008 ........              DC32    WORDCAT_NFA
 5266                           WORDS:
 5267    0000000C ........              DC32    DOCOL
 5268    00000010 .............   DC32  THREE, SPACES
                  ...          
 5269    00000018 ........              DC32    LATEST
 5270                           #ifdef XON_XOFF
 5271    0000001C ........        DC32  XOFF    // TEMP TEST THRE
 5272                           #endif
 5273                           WORDS1:  // ADD nfa length to current out_uv & verify it doesn't violate csll.
 5274    00000020 .............   DC32  ZERO, OVER      // -- nfa zero nfa
                  ...          
 5275    00000028 .............   DC32  ONEP, CAT       // If wc_ header skip
                  ...          
 5276    00000030 ........0D000   DC32  LIT, 0x0D       // -- nfa zero (c@) 0x0D
                  000          
 5277    00000038 .............   DC32  EQUAL, ZEQU     // -- nfa zerro flag
                  ...          
 5278    00000040 ........        DC32  ZBRAN           // -- nfa zero
 5279    00000044 1C000000        DC32  WORDS2-.       // wc_ goto
 5280                           
 5281    00000048 ........        DC32  DROP            // -- nfa
 5282    0000004C .............   DC32  DUP, PFA, LFA   // -- nfa lfa
                  ...........  
 5283    00000058 .............   DC32  OVER, SUBB      // -- nfa (lfa - nfa)
                  ...          
 5284                           
 5285                           WORDS2: // -- nfa n
 5286                           
 5287    00000060 .............         DC32    OUT_SV, AT      // Use OUT to regulate line length.
                  ...          
 5288    00000068 ........        DC32  PLUS
 5289    0000006C ........4A000         DC32    LIT, 74         // was :NONAME CSLL - WORDS line length constant.
                  000          
 5290    00000074 ........              DC32    GREATERTHAN
 5291    00000078 ........              DC32    ZBRAN           // If not at end of line
 5292    0000007C 10000000              DC32  WORD21-.        // skip cr and out reset
 5293                           
 5294    00000080 ........              DC32    CR              // Start another line
 5295    00000084 .............   DC32  THREE, SPACES
                  ...          
 5296                           
 5297                           WORD21:
 5298                           #ifdef  IO2TP
 5301                           #endif
 5302                           // For MYWORDS test FENCE and stop if less
 5303    0000008C ........        DC32    DUP             // nfa
 5304    00000090 .............   DC32    FENCE_SV, AT
                  ...          
 5305    00000098 ........        DC32    LESSTHAN
 5306    0000009C ........        DC32    ZBRAN
 5307    000000A0 0C000000        DC32     WORDSCONT-.
 5308                           
 5309    000000A4 ........        DC32    BRAN
 5310    000000A8 54000000        DC32     WORDSDONE-.
 5311                           
 5312                           WORDSCONT:
 5313    000000AC ........              DC32    DUP             // nfa
 5314    000000B0 ........              DC32    IDDOT
 5315    000000B4 .............         DC32    TWO, SPACES
                  ...          
 5316                           
 5317    000000BC .............   DC32    DUP, ONEP, CAT  // Take nfa and look for WORDCAT signature
                  ...........  
 5318    000000C8 ........0D000   DC32    LIT, 0x0D       // which is cr
                  000          
 5319    000000D0 ........        DC32    EQUAL
 5320    000000D4 ........        DC32    ZBRAN           // If not wordcat
 5321    000000D8 08000000        DC32     NOT_WC-.       // skip
 5322                           
 5323    000000DC ........        DC32    zero_OUT
 5324                           
 5325                           NOT_WC:
 5326    000000E0 ........              DC32    PFA             // \ nfa -- pfa
 5327    000000E4 ........              DC32    LFA             // \ pfa -- lfa
 5328    000000E8 ........              DC32    AT    // Is next lfa
 5329    000000EC ........              DC32    DUP
 5330    000000F0 ........              DC32    ZEQU  // Zero = end of dictionary
 5331                           
 5332                           // REMOVED SO WORDS AND MYWORDS CAN BE USED IN DOWNLOAD FILES
 5333                           //      DC32    QKEY           // Zero or break key \ ^C = 0x03
 5334                           //      DC32    OR
 5335                           
 5336    000000F4 ........              DC32  ZBRAN             // Until break key or end of dictionary
 5337    000000F8 28FFFFFF              DC32     WORDS1-.
 5338                           
 5339                           #ifdef  IO2TP
 5342                           #endif
 5343                           WORDSDONE:
 5344    000000FC .............         DC32    DROP, CR
                  ...          
 5345    00000104 ........              DC32    SEMIS
 5346                           
 5347                           
 5348                           //      MYWORDS MYWORDS: ( -- )
 5349                           //      Print only system defined words by manipulating FENCE.
 5350                           
 5351                            SECTION .text : CONST (2)
 5352                           MYWORDS_NFA:
 5353    00000000 87                    DC8     0x87
 5354    00000001 4D59574F5244          DC8     'MYWORD'
 5355    00000007 D3                    DC8     'S'+0x80
 5356                            ALIGNROM 2,0xFFFFFFFF
 5357    00000008 ........              DC32    WORDS_NFA
 5358                           MYWORDS:
 5359    0000000C ........              DC32    DOCOL
 5360    00000010 ........00000   DC32  strva , FLASH_SPAGE, FENCE
                  208........  
 5361    0000001C ........        DC32  WORDS                   // now print words in ram
 5362    00000020 ........00000   DC32  strva, 0 , FENCE
                  000........  
 5363    0000002C ........        DC32  SEMIS
 5364                           
 5365                           
 5366                           //      FISH_ONLY FISH_ONLY     ( -- ) MODIFIED:
 5367                           //      RESET DP, UP AND CURRENT TO ORIGINAL FLASH IMAGE
 5368                           
 5369                            SECTION .text : CONST (2)
 5370                           FISH_ONLY_NFA:
 5371    00000000 89                    DC8     0x80+9
 5372    00000001 464953485F4F4         DC8     'FISH_ONL'
                  E4C          
 5373    00000009 D9                    DC8     'Y'+0x80
 5374    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 5375    0000000C ........              DC32    MYWORDS_NFA
 5376                           FISH_ONLY:
 5377    00000010 ........              DC32    .+5
 5378                            SECTION .text : CODE (2)
 5379                           //      LDR     n, = TASK_NFA           // preserve TOS
 5380                           
 5381                           /* To make a new WORDCAT the current TOP of the Dictionary:
 5382                           iNCLUDE NEW WC FILE IN IAR.S: FISH OEM WORDCAT LIST
 5383                           The top of the dictionary is defined in these places:
 5384                           In SLIBS SV_INIT_VALUES:
 5385                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here
 5386                                   DC32    LIT, WC_FISH_GPIO_NFA // FISH in flash starts here
 5387                           IN FLASH RAMWORDS:
 5388                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here
 5389                                   DC32    LIT, WC_FISH_GPIO_NFA // FISH in flash starts here
 5390                           In IAR FISH_ONLY:
 5391                           //        LDR     n, = WC_FISH_PubRel_NFA
 5392                           */
 5393                           
 5394                           // THe wordcat is at the end of the file.
 5395                           // The words are defined ahead of the wordcat.
 5396                           
 5397                           // BTW the flashloader demo is here:
 5398                           // https://www.st.com/en/development-tools/flasher-stm32.html
 5399                           
 5400                           */
 5401    00000000 0949            LDR     n, = WC_FISH_GPIO_NFA
 5402                           
 5403    00000002 0A4C                  LDR     y, = CURRENT                  // CURRENT SETTING
 5404    00000004 2160                  STR     n, [y]
 5405    00000006 0A4C            LDR     y, = FPC                // FLASH CURRENT
 5406    00000008 2160            STR     n, [y]
 5407    0000000A 0A49                  LDR     n, = RAMVARSPACE_START
 5408    0000000C 0A4C                  LDR     y, = UP                                 // UP SETTING
 5409    0000000E 2160                  STR     n, [y]
 5410    00000010 0A4C            LDR     y, = FPSV         // FLASH USER VARS
 5411    00000012 2160            STR     n, [y]
 5412    00000014 0A49                  LDR     n, = ORIG
 5413    00000016 0B4C                  LDR     y, = DP                     // DP SETTING
 5414    00000018 2160                  STR     n, [y]
 5415                                   NEXT
 5415.1                         // ARMv7-M Thumb = .+5
 5415.2  0000001A 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
 5415.3                         // ARMv6-M Thumb = .+4
 5415.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
 5415                                   NEXT1
 5415.1  0000001E 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
 5415.2  00000022 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
 5415.3  00000026 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
 5415.4                         // ARMv6-M Thumb = .+4
 5415.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5415.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5415.7                                 ENDM
 5415.8                                 ENDM
 5416                            LTORG
 5416.1                                  TABLE
 5416.2  00000028 ........              Reference on line 5401
 5416.3  0000002C ........              Reference on line 5403
 5416.4  00000030 ........              Reference on line 5405
 5416.5  00000034 ........              Reference on line 5407
 5416.6  00000038 ........              Reference on line 5408
 5416.7  0000003C ........              Reference on line 5410
 5416.8  00000040 ........              Reference on line 5412
 5416.9  00000044 ........              Reference on line 5413
 5417                           
 5418                           
 5419                           //      FISH FISH:      ( -- )
 5420                           //      Print Flash Status and FISH Signon Message.
 5421                           
 5422                            SECTION .text : CONST (2)
 5423                           FISH_NFA:
 5424    00000000 84                    DC8     0x84
 5425    00000001 464953                DC8     'FIS'
 5426    00000004 C8                    DC8     'H'+0x80
 5427    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5428    00000008 ........              DC32    FISH_ONLY_NFA
 5429                           FISH:
 5430    0000000C ........              DC32    DOCOL
 5431    00000010 ........        DC32  FLASH_SCAN
 5432    00000014 ........              DC32    SIGNON
 5433    00000018 ........              DC32    SEMIS
 5434                           
 5435                           //=============================== WORDCAT ====================================//
 5436                           //NOEXEC HEADERFORWORDCATEGORIES
 5437                           //      WC_FISH_PubRel: = FISH Reference Model: CATEGORY
 5438                            SECTION .text : CONST (2)
 5439                           WC_FISH_PubRel_NFA:
 5440    00000000 99                    DC8     0x80+4+21        // +4 is format chars constant
 5441                                                           // +n is Name lenght
 5442    00000001 0D0A            DC8 0x0D, 0x0A
 5443    00000003 4649534820526         DC8     'FISH Reference Model:'
                  5666572656E63
                  65204D6F64656
                  C3A          
 5444    00000018 0D8A            DC8 0x0D, 0x0A+0x80
 5445    0000001A FFFF           ALIGNROM 2,0xFFFFFFFF
 5446    0000001C ........        DC32    FISH_NFA
 5447                           
 5448                           ;**** FIRST WORD LISTED IS A WORDCAT~!****
 5449                           
 5450                           //========================== FISH OEM WORDCAT LIST ===========================//
 5451                           /* To make a new WORDCAT the current TOP of the Dictionary:
 5452                           iNCLUDE NEW WC FILE IN IAR.S: FISH OEM WORDCAT LIST
 5453                           The top of the dictionary is defined in these places:
 5454                           In SLIBS SV_INIT_VALUES:
 5455                           //        DC32    WC_FISH_PubRel_NFA // FISH in flash starts here = CURRENT
 5456                           IN FLASH RAMWORDS:
 5457                           //        DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here = CURRENT
 5458                           In IAR FISH_ONLY:
 5459                           //        LDR     n, = WC_FISH_PubRel_NFA
 5460                           */
 5461                           //======================== B.I.G.PSTAT GPIO WORDCAT ==========================//
 5462                           $FISH_GPIO_WC.h
    1                           // FISH_GPIO.h
    2                           
    3                           // FISH_GPIO_WC.h
    4                           
    5                           // All spi1 chip selects are active low, INIT'D HIGH in SOC_INIT.
    6                           //
    7                           // DC32 WC_FISH_PubRel_NFA  // Links THIS CODE into THE BASE FISH WORDCAT.
    8                           
    9                           /* File include explains how to make a new WORDCAT:
   10                           How to make it the current TOP of the Dictionary:
   11                           $Wordcats_HowTo.c
   12                           // THe wordcat is at the end of the file.
   13                           // The words are defined ahead of the wordcat.
   14                           
   15                           // BTW the flashloader demo is here:
   16                           // https://www.st.com/en/development-tools/flasher-stm32.html
   17                           */
   18                           //=============================== GPIO WORDs =================================//
   19                           
   20                           // IMPLEMENT THE PORT B AND PORTC CONSTANTS
   21                           
   22                           //      GPIOB_ODR: ( -- addr )
   23                            SECTION .text : CONST (2)
   24                           GPIOC_ODR_NFA:
   25    00000000 89                    DC8     0x80 +09d
   26    00000001 4750494F432D4         DC8     'GPIOC-OD'
                  F44          
   27    00000009 D2                    DC8     'R'+0x80
   28    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
   29    0000000C ........              DC32    WC_FISH_PubRel_NFA
   30                           RM_GPIOC_ODR:
   31    00000010 ........14080   DC32  DOCON, GPIOC_ODR
                  240          
   32                           
   33                           //      GPIOB_IDR: ( -- addr )
   34                            SECTION .text : CONST (2)
   35                           GPIOC_IDR_NFA:
   36    00000000 89                    DC8     0x80 +09d
   37    00000001 4750494F432D4         DC8     'GPIOC-ID'
                  944          
   38    00000009 D2                    DC8     'R'+0x80
   39    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
   40    0000000C ........              DC32    GPIOC_ODR_NFA
   41                           RM_GPIOC_IDR:
   42    00000010 ........10080   DC32  DOCON, GPIOC_IDR
                  240          
   43                           
   44                           //      GPIOC_MODER: ( -- addr )
   45                            SECTION .text : CONST (2)
   46                           GPIOC_MODER_NFA:
   47    00000000 8B                    DC8     0x80 +011d
   48    00000001 4750494F432D4         DC8     'GPIOC-MODE'
                  D4F4445      
   49    0000000B D2                    DC8     'R'+0x80
   50                            ALIGNROM 2,0xFFFFFFFF
   51    0000000C ........              DC32    GPIOC_IDR_NFA
   52                           RM_GPIOC_MODER:
   53    00000010 ........00080   DC32  DOCON, GPIOC_MODER
                  240          
   54                           
   55                           //      GPIOB_ODR: ( -- addr )
   56                            SECTION .text : CONST (2)
   57                           GPIOB_ODR_NFA:
   58    00000000 89                    DC8     0x80 +09d
   59    00000001 4750494F422D4         DC8     'GPIOB-OD'
                  F44          
   60    00000009 D2                    DC8     'R'+0x80
   61    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
   62    0000000C ........              DC32    GPIOC_MODER_NFA
   63                           RM_GPIOB_ODR:
   64    00000010 ........14040   DC32  DOCON, GPIOB_ODR
                  240          
   65                           
   66                           //      GPIOB_IDR: ( -- addr )
   67                            SECTION .text : CONST (2)
   68                           GPIOB_IDR_NFA:
   69    00000000 89                    DC8     0x80 +09d
   70    00000001 4750494F422D4         DC8     'GPIOB-ID'
                  944          
   71    00000009 D2                    DC8     'R'+0x80
   72    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
   73    0000000C ........              DC32    GPIOB_ODR_NFA
   74                           RM_GPIOB_IDR:
   75    00000010 ........10040   DC32  DOCON, GPIOB_IDR
                  240          
   76                           
   77                           //      GPIOB_MODER: ( -- addr )
   78                            SECTION .text : CONST (2)
   79                           GPIOB_MODER_NFA:
   80    00000000 8B                    DC8     0x80 +011d
   81    00000001 4750494F422D4         DC8     'GPIOB-MODE'
                  D4F4445      
   82    0000000B D2                    DC8     'R'+0x80
   83                            ALIGNROM 2,0xFFFFFFFF
   84    0000000C ........              DC32    GPIOB_IDR_NFA
   85                           RM_GPIOB_MODER:
   86    00000010 ........00040   DC32  DOCON, GPIOB_MODER
                  240          
   87                           
   88                           //  SEEBIT  ( 0-based-bit# adrr -- )
   89                           /*
   90                           : SEEBIT@ ( 1-based-bit# addr -- )
   91                                   SWAP \ MAKES STACK ARGS SAME AS SETBIT/CLRBIT
   92                                   1 SWAP LSL >R @ R AND R> AND IF ." ON" ELSE ." OFF" THEN ;
   93                           
   94                           */
   95                            SECTION .text : CONST (2)
   96                           SEEBIT_NFA:
   97    00000000 86                    DC8     0x80+6
   98    00000001 5345454249            DC8     'SEEBI'
   99    00000006 D4                    DC8     'T'+0x80
  100    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  101    00000008 ........        DC32  GPIOB_MODER_NFA
  102                           SEEBIT:
  103    0000000C ........        DC32  DOCOL
  104    00000010 .............   DC32  TOR, ONE, SWAP, LSL
                  .............
                  ......       
  105    00000020 .............   DC32  RFROM, AT, ANDD
                  ...........  
  106    0000002C ........        DC32  ZBRAN
  107    00000030 10000000            DC32  BITOFF-.
  108                           BITON:
  109    00000034 ........        DC32  PDOTQ
  110    00000038 02                    DC8     2
  111    00000039 4F4E                  DC8     'O', 'N'
  112    0000003B FF             ALIGNROM 2,0xFFFFFFFF
  113    0000003C ........        DC32    SEMIS
  114                           
  115                           BITOFF:
  116    00000040 ........        DC32  PDOTQ
  117    00000044 03                    DC8     3
  118    00000045 4F4646                DC8     'O', 'F', 'F'
  119                            ALIGNROM 2,0xFFFFFFFF
  120    00000048 ........        DC32  SEMIS
  121                           
  122                           
  123                           /*  SETBIT ( 0-based-bit# adrr -- )
  124                           : SB
  125                                   >R              \ STORE @ADDR VALUE
  126                                   1h SWAP LSL
  127                                   R  @ OR
  128                                   R>
  129                           \       CR .SH
  130                                   !
  131                           ;
  132                           */
  133                           //  SETBIT  ( 0-based-bit# adrr -- )
  134                            SECTION .text : CONST (2)
  135                           SETBIT_NFA:
  136    00000000 86                    DC8     0x80+6
  137    00000001 5345544249            DC8     'SETBI'
  138    00000006 D4                    DC8     'T'+0x80
  139    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  140    00000008 ........        DC32  SEEBIT_NFA
  141                           SETBIT:
  142    0000000C ........              DC32    .+5
  143                            SECTION .text : CODE (2)
  144                                   POPp2w      // val
  144.1                                 // as in xeq token on ToS setup for exec
  144.2  00000000 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  144.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  144.4                                 ENDM
  145                                   POP2n_r1                // addr
  145.1  00000004 57F8041B              LDR     n, [p],#4
  145.2                         //      LDR     n, [p]
  145.3                         //      ADDS    p, p, #4
  145.4                                 ENDM
  146    00000008 1068                  LDR   t_r0, [w_r2]      // read [val]
  147    0000000A 4FF00103        MOV   x_r3, #1
  148    0000000E 8B40            LSLS   x_r3, n_r1
  149    00000010 1843                  ORRS    t_r0, t_r0, x_r3  // modify val
  150    00000012 1060                  STR  t_r0, [w_r2]       // Write val
  151                                   NEXT
  151.1                         // ARMv7-M Thumb = .+5
  151.2  00000014 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  151.3                         // ARMv6-M Thumb = .+4
  151.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  151                                   NEXT1
  151.1  00000018 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  151.2  0000001C 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  151.3  00000020 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  151.4                         // ARMv6-M Thumb = .+4
  151.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  151.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  151.7                                 ENDM
  151.8                                 ENDM
  152                           
  153                           /*
  154                            CLRBIT ( 0-based-bit# addr -- )
  155                           : CB
  156                                   >R              \ STORE @ADDR VALUE
  157                                   1h SWAP LSL
  158                                   R  @ NOT AND
  159                                   R>
  160                           \       CR .SH
  161                                   !
  162                           ;
  163                           */
  164                           
  165                           //  CLRBIT  ( 0-based-bit# adrr -- )
  166                            SECTION .text : CONST (2)
  167                           CLRBIT_NFA:
  168    00000000 86                    DC8     0x80+6
  169    00000001 434C524249            DC8     'CLRBI'
  170    00000006 D4                    DC8     'T'+0x80
  171    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  172    00000008 ........        DC32  SETBIT_NFA
  173                           CLRBIT:
  174    0000000C ........              DC32    .+5
  175                            SECTION .text : CODE (2)
  176                                   POPp2w                  // addr
  176.1                                 // as in xeq token on ToS setup for exec
  176.2  00000000 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  176.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  176.4                                 ENDM
  177                                   POP2n_r1                            // val      
  177.1  00000004 57F8041B              LDR     n, [p],#4
  177.2                         //      LDR     n, [p]
  177.3                         //      ADDS    p, p, #4
  177.4                                 ENDM
  178    00000008 1068                  LDR   t_r0, [w_r2]      // read [val]
  179    0000000A 4FF00103        MOV   x_r3, #1
  180    0000000E 8B40            LSLS   x_r3, n_r1
  181    00000010 20EA0300              BIC     t_r0, t_r0, x_r3    // modify val
  182    00000014 1060                  STR   t_r0, [w_r2]      // Write val
  183                                   NEXT
  183.1                         // ARMv7-M Thumb = .+5
  183.2  00000016 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  183.3                         // ARMv6-M Thumb = .+4
  183.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  183                                   NEXT1
  183.1  0000001A 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  183.2  0000001E 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  183.3  00000022 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  183.4                         // ARMv6-M Thumb = .+4
  183.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  183.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  183.7                                 ENDM
  183.8                                 ENDM
  184                           
  185                           //      ANDBITS ANDBITS:        ( addr val -- )
  186                           
  187                            SECTION .text : CONST (2)
  188                           ANDBITS_NFA:
  189    00000000 87                    DC8     0x87
  190    00000001 414E44424954          DC8     'ANDBIT'
  191    00000007 D3                    DC8     'S'+0x80
  192                            ALIGNROM 2,0xFFFFFFFF
  193    00000008 ........              DC32    CLRBIT_NFA
  194                           ANDBITS:
  195    0000000C ........              DC32    .+5
  196                            SECTION .text : CODE (2)
  197                                   POPp2w      // val
  197.1                                 // as in xeq token on ToS setup for exec
  197.2  00000000 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  197.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  197.4                                 ENDM
  198                                   POP2n_r1                // addr
  198.1  00000004 57F8041B              LDR     n, [p],#4
  198.2                         //      LDR     n, [p]
  198.3                         //      ADDS    p, p, #4
  198.4                                 ENDM
  199    00000008 0868                  LDR   t_r0, [n]       // read [val]
  200    0000000A 1040                  ANDS    t_r0, t_r0, w     // modify val
  201    0000000C 0860                  STR       t_r0, [n]           // Write val
  202                                   NEXT
  202.1                         // ARMv7-M Thumb = .+5
  202.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  202.3                         // ARMv6-M Thumb = .+4
  202.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  202                                   NEXT1
  202.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  202.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  202.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  202.4                         // ARMv6-M Thumb = .+4
  202.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  202.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  202.7                                 ENDM
  202.8                                 ENDM
  203                           
  204                           //      SETBITS SETBITS:        ( addr val -- )
  205                           //      OR val bits into addr. See also CLRBITS.
  206                           //      Preserves bits at addr - useful for ARM SoC initialization.
  207                           
  208                            SECTION .text : CONST (2)
  209                           SETBITS_NFA:
  210    00000000 87                    DC8     0x87
  211    00000001 534554424954          DC8     'SETBIT'
  212    00000007 D3                    DC8     'S'+0x80
  213                            ALIGNROM 2,0xFFFFFFFF
  214    00000008 ........              DC32    ANDBITS_NFA
  215                           SETBITS:
  216    0000000C ........              DC32    .+5
  217                            SECTION .text : CODE (2)
  218                                   POPp2w              // val w_r2
  218.1                                 // as in xeq token on ToS setup for exec
  218.2  00000000 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  218.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  218.4                                 ENDM
  219                                   POP2n_r1                        // addr n_r1
  219.1  00000004 57F8041B              LDR     n, [p],#4
  219.2                         //      LDR     n, [p]
  219.3                         //      ADDS    p, p, #4
  219.4                                 ENDM
  220    00000008 0868                  LDR   t_r0, [n]     // read[val]t_r0
  221    0000000A 1043                  ORRS    t_r0, t_r0, w   // modify val
  222    0000000C 0860                  STR       t_r0, [n]         // Write val
  223                                   NEXT
  223.1                         // ARMv7-M Thumb = .+5
  223.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  223.3                         // ARMv6-M Thumb = .+4
  223.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  223                                   NEXT1
  223.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  223.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  223.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  223.4                         // ARMv6-M Thumb = .+4
  223.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  223.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  223.7                                 ENDM
  223.8                                 ENDM
  224                           
  225                           
  226                           //      CLRBITS CLRBITS:        ( addr val -- )
  227                           //      XOR val bits into addr. See also SETBITS.
  228                           //      Preserves bits at addr - useful for ARM SoC initialization.
  229                           
  230                            SECTION .text : CONST (2)
  231                           CLRBITS_NFA:
  232    00000000 87                    DC8     0x87
  233    00000001 434C52424954          DC8     'CLRBIT'
  234    00000007 D3                    DC8     'S'+0x80
  235                            ALIGNROM 2,0xFFFFFFFF
  236    00000008 ........              DC32    SETBITS_NFA
  237                           CLRBITS:
  238    0000000C ........              DC32    .+5
  239                            SECTION .text : CODE (2)
  240                                   POPp2w                    // val
  240.1                                 // as in xeq token on ToS setup for exec
  240.2  00000000 57F8042B              LDR     w, [p], #4      ; xeq token at ToS
  240.3                         //      LDM     p!, {w} // fetch memory p points to into {w}, inc p
  240.4                                 ENDM
  241                                   POP2n_r1                              // addr
  241.1  00000004 57F8041B              LDR     n, [p],#4
  241.2                         //      LDR     n, [p]
  241.3                         //      ADDS    p, p, #4
  241.4                                 ENDM
  242    00000008 0868                  LDR       t_r0, [n_r1]        // read [val]
  243    0000000A 9043            BICS  t_r0, t_r0, w_r2    // modify val  - AND-NOT
  244    0000000C 0860                  STR       t_r0, [n_r1]              // write val
  245                                   NEXT
  245.1                         // ARMv7-M Thumb = .+5
  245.2  0000000E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
  245.3                         // ARMv6-M Thumb = .+4
  245.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
  245                                   NEXT1
  245.1  00000012 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
  245.2  00000016 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
  245.3  0000001A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
  245.4                         // ARMv6-M Thumb = .+4
  245.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  245.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  245.7                                 ENDM
  245.8                                 ENDM
  246                           
  247                           
  248                           //  PC0 GPIO_Output     GS0
  249                           //      GS0:    ( -1 | 0 -- ) Use ON and OFF
  250                            SECTION .text : CONST (2)
  251                           GS0_NFA:
  252    00000000 83                    DC8     0x80+3
  253    00000001 4753                  DC8     'GS'
  254    00000003 B0                    DC8     '0'+0x80
  255                            ALIGNROM 2,0xFFFFFFFF
  256    00000004 ........        DC32  CLRBITS_NFA
  257                           GS0: // BIT 01h IN GPIOC_ODR - PC0 GS0
  258    00000008 ........          DC32    DOCOL
  259                           // ZBRAN USES TOS
  260    0000000C ........          DC32  ZBRAN
  261    00000010 1C000000          DC32    GS0_OFF-.
  262                           GS0_ON:
  263    00000014 ........00000     DC32    LIT, 0d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  264    00000028 ........          DC32    SEMIS
  265                           GS0_OFF:
  266    0000002C ........00000     DC32    LIT, 0d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  267    00000040 ........          DC32    SEMIS
  268                           
  269                           //  PC1 GPIO_Output     GS1 POTC BOT 0
  270                           //      GS1:    ( -1 | 0 -- ) Use ON and OFF
  271                            SECTION .text : CONST (2)
  272                           GS1_NFA:
  273    00000000 83                    DC8     0x80+3
  274    00000001 4753                  DC8     'GS'
  275    00000003 B1                    DC8     '1'+0x80
  276                            ALIGNROM 2,0xFFFFFFFF
  277    00000004 ........              DC32    GS0_NFA
  278                           GS1: // BIT 0h IN GPIOC_ODR - PC0 GS0
  279    00000008 ........                      DC32    DOCOL
  280                           // ZBRAN USES TOS
  281    0000000C ........          DC32  ZBRAN
  282    00000010 1C000000          DC32    GS1_OFF-.
  283                           GS1_ON:
  284    00000014 ........01000     DC32    LIT, 1d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  285    00000028 ........          DC32    SEMIS
  286                           GS1_OFF:
  287    0000002C ........01000     DC32    LIT, 1d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  288    00000040 ........          DC32    SEMIS
  289                           
  290                           //  PC2 GPIO_Output     GS2
  291                           //      GS2:    ( -1 | 0 -- ) Use ON and OFF
  292                            SECTION .text : CONST (2)
  293                           GS2_NFA:
  294    00000000 83                    DC8     0x80+3
  295    00000001 4753                  DC8     'GS'
  296    00000003 B2                    DC8     '2'+0x80
  297                            ALIGNROM 2,0xFFFFFFFF
  298                                   //DC32  WC_FISH_PubRel_NFA
  299    00000004 ........              DC32    GS1_NFA
  300                           GS2: // BIT 01h IN GPIOC_ODR - PC0 GS0
  301    00000008 ........          DC32    DOCOL
  302                           // ZBRAN USES TOS
  303    0000000C ........          DC32  ZBRAN
  304    00000010 1C000000          DC32    GS2_OFF-.
  305                           GS2_ON:
  306    00000014 ........02000     DC32    LIT, 2d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  307    00000028 ........          DC32    SEMIS
  308                           GS2_OFF:
  309    0000002C ........02000     DC32    LIT, 2d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  310    00000040 ........          DC32    SEMIS
  311                           
  312                           
  313                           //  PC9 GPIO_Output     SW4
  314                           //      SW4:    ( -1 | 0 -- ) Use ON and OFF
  315                            SECTION .text : CONST (2)
  316                           SW4_NFA:
  317    00000000 83                    DC8     0x80+3
  318    00000001 5357                  DC8     'SW'
  319    00000003 B4                    DC8     '4'+0x80
  320                            ALIGNROM 2,0xFFFFFFFF
  321    00000004 ........              DC32    GS2_NFA
  322                           SW4: // BIT 0200h IN GPIOC_ODR - PC9 SW4
  323    00000008 ........          DC32    DOCOL
  324                           // ZBRAN USES TOS
  325    0000000C ........          DC32  ZBRAN
  326    00000010 1C000000          DC32    SW4_OFF-.
  327                           SW4_ON:
  328    00000014 ........09000     DC32    LIT, 9d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  329    00000028 ........          DC32    SEMIS
  330                           SW4_OFF:
  331    0000002C ........09000     DC32    LIT, 9d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  332    00000040 ........          DC32    SEMIS
  333                           
  334                           //  PC8 GPIO_Output     SW3
  335                           //      SW3:    ( -1 | 0 -- ) Use ON and OFF
  336                            SECTION .text : CONST (2)
  337                           SW3_NFA:
  338    00000000 83                    DC8     0x80+3
  339    00000001 5357                  DC8     'SW'
  340    00000003 B3                    DC8     '3'+0x80
  341                            ALIGNROM 2,0xFFFFFFFF
  342    00000004 ........              DC32    SW4_NFA
  343                           SW3: // BIT 0100h IN GPIOC_ODR - PC8 SW3
  344    00000008 ........          DC32    DOCOL
  345                           // ZBRAN USES TOS
  346    0000000C ........          DC32  ZBRAN
  347    00000010 1C000000          DC32    SW3_OFF-.
  348                           SW3_ON:
  349    00000014 ........08000     DC32    LIT, 8d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  350    00000028 ........          DC32    SEMIS
  351                           SW3_OFF:
  352    0000002C ........08000     DC32    LIT, 8d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  353    00000040 ........          DC32    SEMIS
  354                           
  355                           //  PC7 GPIO_Output     SW2
  356                           //      SW2:    ( -1 | 0 -- ) Use ON and OFF
  357                            SECTION .text : CONST (2)
  358                           SW2_NFA:
  359    00000000 83                    DC8     0x80+3
  360    00000001 5357                  DC8     'SW'
  361    00000003 B2                    DC8     '2'+0x80
  362                            ALIGNROM 2,0xFFFFFFFF
  363    00000004 ........              DC32    SW3_NFA
  364                           SW2: // BIT 080h IN GPIOC_ODR - PC7 SW2
  365    00000008 ........              DC32    DOCOL
  366                           // ZBRAN USES TOS
  367    0000000C ........          DC32  ZBRAN
  368    00000010 1C000000          DC32    SW2_OFF-.
  369                           SW2_ON:
  370    00000014 ........07000     DC32    LIT, 7d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  371    00000028 ........          DC32    SEMIS
  372                           SW2_OFF:
  373    0000002C ........07000     DC32    LIT, 7d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  374    00000040 ........          DC32    SEMIS
  375                           
  376                           //  PC6 GPIO_Output     SW1
  377                           //  SW1:        ( -1 | 0 -- ) Use ON and OFF
  378                           /*
  379                           : SW1 ( ON | OFF -- )   \ BIT PC6
  380                                   IF 6 GPIOC-ODR SETBIT ELSE 6 GPIOC-ODR CLRBIT THEN ;
  381                           
  382                           */
  383                            SECTION .text : CONST (2)
  384                           SW1_NFA:
  385    00000000 83                    DC8     0x80+3
  386    00000001 5357                  DC8     'SW'
  387    00000003 B1                    DC8     '1'+0x80
  388                            ALIGNROM 2,0xFFFFFFFF
  389    00000004 ........              DC32    SW2_NFA
  390                           SW1: // BIT 040h IN GPIOC_ODR - PC6 SW1
  391    00000008 ........          DC32    DOCOL
  392                           // ZBRAN USES TOS ~ ON|OFF
  393    0000000C ........          DC32  ZBRAN
  394    00000010 1C000000          DC32    SW1_OFF-.
  395                           SW1_ON:
  396    00000014 ........06000     DC32    LIT, 6d, LIT, GPIOC_ODR, SETBIT
                  000........14
                  080240.......
                  .            
  397    00000028 ........          DC32    SEMIS
  398                           SW1_OFF:
  399    0000002C ........06000     DC32    LIT, 6d, LIT, GPIOC_ODR, CLRBIT
                  000........14
                  080240.......
                  .            
  400    00000040 ........          DC32    SEMIS
  401                           
  402                           // .BT-CS       PB14    IS LEDGREEN
  403                           // .DAC-CS      PB13    IS LEDRED
  404                           // .ADC-CS      PB12    IS LEDBLUE
  405                           
  406                           
  407                           //  PB13        GPIO_Output     BT_DAC
  408                           // .DAC-CS      PB13    IS LEDRED
  409                           //      CS_DAC: ( -1 | 0 -- ) Chip select is -1 argument, TRUE
  410                            SECTION .text : CONST (2)
  411                           CS_DAC_NFA:
  412    00000000 86                    DC8     0x80+6
  413    00000001 43532D4441            DC8     'CS-DA'
  414    00000006 C3                    DC8     'C'+0x80
  415    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  416    00000008 ........              DC32    SW1_NFA
  417                           CS_DAC: // BIT 2000h IN GPIOB_ODR PB13 DAC-CSn
  418                           // TURN OFF OTHER CHIP SELECTS WHEN YOU TURN THIS ONE ON~!
  419                           //  CREATE BETTER CODE BY LEARNING HOW TO USE VIC'S RMW___ WORDS.
  420                           //      PB14    BT_CSn  4000h
  421                           //      PB13    DAC-CSn 2000h
  422                           //      PB12    ADC-CSn 1000h
  423    0000000C ........          DC32    DOCOL
  424                           // ZBRAN USES TOS
  425    00000010 ........          DC32  ZBRAN
  426    00000014 44000000          DC32    CS_DAC_OFF-.
  427                           CS_DAC_ON:
  428    00000018 ........14040     DC32    LIT, GPIOB_ODR, LIT, 04000h, SETBITS // SET CS-BT TO 1
                  240........00
                  400000.......
                  .            
  429    0000002C ........14040     DC32    LIT, GPIOB_ODR, LIT, 02000h, CLRBITS // SET CS-DAC TO 0
                  240........00
                  200000.......
                  .            
  430    00000040 ........14040     DC32    LIT, GPIOB_ODR, LIT, 01000h, SETBITS // SET CS-ADC TO 1
                  240........00
                  100000.......
                  .            
  431    00000054 ........          DC32    SEMIS
  432                           
  433                           CS_DAC_OFF:
  434    00000058 ........14040     DC32    LIT, GPIOB_ODR, LIT, 02000h, SETBITS // SET CS-DAC TO 1
                  240........00
                  200000.......
                  .            
  435    0000006C ........          DC32    SEMIS
  436                           
  437                           //  PB14        GPIO_Output     BT_CSn
  438                           // .BT-CS       PB14    IS LEDGREEN
  439                           //      CS_BT:  ( -1 | 0 -- ) Chip select ON is -1 argument.
  440                            SECTION .text : CONST (2)
  441                           CS_BT_NFA:
  442    00000000 85                    DC8     0x80+5d
  443    00000001 43532D42              DC8     'CS-B'
  444    00000005 D4                    DC8     'T'+0x80
  445    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  446    00000008 ........              DC32    CS_DAC_NFA
  447                           CS_BT:  // BIT 4000h IN GPIOB_ODR PB14 BT-CSn
  448                           // TURN OFF OTHER CHIP SELECTS WHEN YOU TURN THIS ONE ON~!
  449                           //  CREATE BETTER CODE BY LEARNING HOW TO USE VIC'S RMW___ WORDS.
  450                           //      PB14    BT_CSn  4000h
  451                           //      PB13    DAC-CSn 2000h
  452                           //      PB12    ADC-CSn 1000h
  453    0000000C ........          DC32    DOCOL
  454                           // ZBRAN USES TOS
  455    00000010 ........          DC32  ZBRAN
  456    00000014 44000000          DC32    CS_BT_OFF-.
  457                           // TRUE CS-BT WORKS
  458                           CS_BT_ON:
  459    00000018 ........14040     DC32    LIT, GPIOB_ODR, LIT, 04000h, CLRBITS // SET CS-BT TO 0
                  240........00
                  400000.......
                  .            
  460    0000002C ........14040     DC32    LIT, GPIOB_ODR, LIT, 02000h, SETBITS // SET CS-DAC TO 1
                  240........00
                  200000.......
                  .            
  461    00000040 ........14040     DC32    LIT, GPIOB_ODR, LIT, 01000h, SETBITS // SET CS-ADC TO 1
                  240........00
                  100000.......
                  .            
  462    00000054 ........          DC32    SEMIS
  463                           CS_BT_OFF:
  464    00000058 ........14040     DC32    LIT, GPIOB_ODR, LIT, 04000h, SETBITS // SET CS-BT TO 1
                  240........00
                  400000.......
                  .            
  465    0000006C ........          DC32    SEMIS
  466                           //  PB12        GPIO_Output     ADC-CSn
  467                           // .ADC-CS      PB12    IS LEDBLUE
  468                           //      CS_ADC: ( -1 | 0 -- ) PB12 Chip select is -1 argument, TRUE
  469                            SECTION .text : CONST (2)
  470                           CS_ADC_NFA:
  471    00000000 86                    DC8     0x80+6
  472    00000001 43532D4144            DC8     'CS-AD'
  473    00000006 C3                    DC8     'C'+0x80
  474    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  475    00000008 ........              DC32    CS_BT_NFA
  476                           CS_ADC: // BIT 1000h IN GPIOB_ODR - PB12 ADC-CSn
  477                           // TURN OFF OTHER CHIP SELECTS WHEN YOU TURN THIS ONE ON~!
  478                           //  CREATE BETTER CODE BY LEARNING HOW TO USE VIC'S RMW___ WORDS.
  479                           //      PB14    BT_CSn  4000h
  480                           //      PB13    DAC-CSn 2000h
  481                           //      PB12    ADC-CSn 1000h
  482    0000000C ........              DC32    DOCOL
  483                           // ZBRAN USES TOS
  484    00000010 ........          DC32  ZBRAN
  485    00000014 44000000          DC32    CS_ADC_OFF-.
  486                           CS_ADC_ON:
  487    00000018 ........14040     DC32    LIT, GPIOB_ODR, LIT, 04000h, SETBITS // SET CS-BT TO 1
                  240........00
                  400000.......
                  .            
  488    0000002C ........14040     DC32    LIT, GPIOB_ODR, LIT, 02000h, SETBITS // SET CS-DAC TO 1
                  240........00
                  200000.......
                  .            
  489    00000040 ........14040     DC32    LIT, GPIOB_ODR, LIT, 01000h, CLRBITS // SET CS-ADC TO 0
                  240........00
                  100000.......
                  .            
  490    00000054 ........          DC32    SEMIS
  491                           CS_ADC_OFF:
  492    00000058 ........14040     DC32    LIT, GPIOB_ODR, LIT, 01000h, SETBITS // SET CS-ADC TO 1
                  240........00
                  100000.......
                  .            
  493    0000006C ........          DC32    SEMIS
  494                           
  495                           
  496                           //      PSTATDACDATA: ( -- addr ) VALUE BEING BIT BANGED TO SPI1 ON THE PSTAT BOARD
  497                            SECTION .text : CONST (2)
  498                           PSTATDACDATA_NFA:
  499    00000000 87                    DC8     0x80 +07d
  500    00000001 444143574F52          DC8     'DACWOR'
  501    00000007 C4                    DC8     'D'+0x80
  502                            ALIGNROM 2,0xFFFFFFFF
  503    00000008 ........              DC32    CS_ADC_NFA
  504                           PSTATDACDATA:
  505    0000000C .............   DC32    DOCON, PSTAT_DAC_DATA
                  ...          
  506                           
  507                           // DACW   ( n IS IN THE DACWORD ALLOCATION IN (MEMMAP) -- )
  508                           // MSB OF THE 24BITS FOR THE DAC IS IN THE MSB OF DACWORD
  509                           // SHIFT OUT LEFT 24X
  510                           // THIS PRIMITIVE WORD NEEDS "ON DAC-CS" PREAMBLE, AND 24 (OR22) CALLS...
  511                           
  512                            SECTION .text : CONST (2)
  513                           DACW_NFA:
  514    00000000 84              DC8   0x80 + 4d
  515    00000001 444143          DC8   'DAC'
  516    00000004 D7                    DC8     'W'+0x80
  517    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  518    00000008 ........        DC32  PSTATDACDATA_NFA
  519                           SPI1_DAC_BB:
  520    0000000C ........              DC32    DOCOL
  521    00000010 .............   DC32  ON, CS_DAC
                  ...          
  522                           ON_BB_BIT:
  523                           
  524                           OFF_BB_BIT:
  525                           
  526                           //=============================== WORDCAT ====================================//
  527                           //NOEXEC HEADERFORWORDCATEGORIES
  528                           //      WC_FISH_SYS: = FISH System: CATEGORY
  529                           
  530                            SECTION .text : CONST (2)
  531                           WC_FISH_GPIO_NFA:
  532    00000000 8F                    DC8     0x80+4+11d        // +4 is format chars constant
  533                                                           // +n is Name lenght
  534    00000001 0D0A                  DC8     0x0D, 0x0A
  535    00000003 5053544154204         DC8     'PSTAT GPIO:'
                  750494F3A    
  536    0000000E 0D8A                  DC8     0x0D, 0x0A+0x80
  537                            ALIGNROM 2,0xFFFFFFFF
  538                           //  DC32 PSTATDACDATA_NFA
  539    00000010 ........        DC32 DACW_NFA
  540                           
  541                           
  542                           /*
  543                           
  544                           //=============================== GPIO -BIG-PSTAT-TEST-SW- WORDCAT ===============================/
                                /
  545                           //NOEXEC HEADERFORWORDCATEGORIES
  546                           //      WC_FISH_GPIO: = FISH System: CATEGORY
  547                           
  548                            SECTION .text : CONST (2)
  549                           WC_FISH_BIG_PSTAT_GPIO_NFA:
  550                                   DC8     0x80+4+23        // +4 is format chars constant
  551                                                           // +n is Name lenght
  552                               DC8     0x0D, 0x0A
  553                               DC8     'GPIO-BIG-PSTAT-TEST-SW:'
  554                               DC8     0x0D, 0x0A+0x80
  555                            ALIGNROM 2,0xFFFFFFFF
  556                                   DC32    SPI1_LED_TEST_NFA       // Where this wordcat links in.
  557                           
  558                           */
 5463                           // If included link below will point to the GPIO WORDCAT
 5464                           //#endif
 5465                           // FIRST WORDCAT
 5466                           
 5467                           //------------------------------------------------------------------------------
 5468                           // FOR MULTI TASKING MUST BE PLACED IN RAM AND OFFSET USED IN SYSTEM VARS!!!!!!
 5469                           //            T A S K
 5470                           //
 5471                           ;.data          // Place TASK at beginning of RAM, or not.
 5472                           /*
 5473                            SECTION .text : CONST (2)
 5474                           TASK_NFA:
 5475                                   DC8     0x84
 5476                                   DC8     'TAS'
 5477                                   DC8     'K'+0x80
 5478                            ALIGNROM 2,0xFFFFFFFF
 5479                           //      TASK Is top of dictionary until new definitionsa added
 5480                           //      PATCH CONTEXT or LATEST else LFA in TASK FROM SYM TABLE
 5481                           //      To debug dictionary searches - see - PFIND & DFIND
 5482                           //      DC32    ZEQU_NFA        // 4 (no match) bombing at +
 5483                           //      DC32    NOOP_NFA        // Patch here to shorten test of PFIND
 5484                           //      DC32    CAT_NFA         // C@ before @
 5485                           //      DC32    LESS_NFA        // < before =
 5486                           //  DC32        SoCinit_NFA     //XON_NFA               // FULL DICT SEARCH
 5487                             DC32    MS_NFA
 5488                           TASK:
 5489                                   DC32    DOCOL
 5490                                   DC32    SEMIS
 5491                           */
 5492                           
 5493                           //------------------------------------------------------------------------------
 5494                           //:NONAME SECTION:
 5495                           // THESE STAY HERE (INSTEAD OF SLLIB) BECAUSE THEY ARE CONDITIONALLY INCLUDED
 5496                           // HI-LEVEL THEM ASM SECTIONS
 5497                           #ifdef IO2TP
 5506                           #endif
 5507                           
 5508                           #ifdef IO2TP
 5517                           #endif
 5518                           
 5519                           #ifdef USE_CMAIN
 5520                           //:NONAME FISH_return2c:      ( -- ) POP main.c saved lr saved in FM0_COLD
 5521                            SECTION .text : CONST (2)
 5522                            ALIGNROM 2,0xFFFFFFFF
 5523                           FISH_return2c:
 5524    00000000 ........              DC32    .+5
 5525                            SECTION .text : CODE (2)
 5526    00000000 0098                  LDR     t_r0, [sp]
 5527    00000002 01B0                  ADD     sp, sp, #4
 5528    00000004 8746                  MOV     pc, t_r0
 5529                           #endif
 5530                           
 5531                           #ifdef TESTRAM
 5637                           #endif  // TESTRAM
 5638                           //------------------------------------------------------------------------------
 5639                           // Placing blocks that can change at end of link map
 5640                           // Place :NONAME for static Library first in FISH_STM_M3_SLIB.s
 5641                           
 5642                           // $PROJ_DIR$\..\FISH_RM_COMMON
 5643                           // $PROJ_DIR$\..\FISH_RM_CORTEX_M_COMMON_CODE
 5644                           // In Assembler preprocessor set additional include directories
 5645                           $FISH_RM_MSGS.h
    1                           //------------------------------------------------------------------------------
    2                           // Valid thru v1.8
    3                            SECTION .text : CONST (2)
    4                           
    5                           // DC8 "?" IS A NULL TERMINATED STRING
    6                           // DC8 '?' IS NOT
    7                           // #define EOL_DLE // DLE 0x10/16d in QUIT>CR after last word interpreted.
    8                           // #define EOL_NAK // NAK 0x15/21d in error messages for STDLED editor highlight
    9                           // The EOL_NAK makes SPACE NAK end of string in FISH_RM_MSGS.h
   10                           
   11                            ALIGNROM 2,0xFFFFFFFF
   12                           // ALIGN THIS ONE FOR PFIND          
   13                           msg_RUN:
   14    00000000 03                    DC8     3
   15    00000001 52554E2000            DC8     "RUN "
   16                           msg_questionmark:
   17    00000006 203F2000              DC8     " ? "
   18                           
   19                           msg_cr:
   20    0000000A 203C43523E200         DC8     " <CR> "
                  0            
   21                           
   22                           msg_uvspace:
   23    00000011 5641522043454         DC8     "VAR CELLS "
                  C4C532000    
   24                           
   25                           msg_dictspace:
   26    0000001C 44494354494F4         DC8     "DICTIONARY BYTES "
                  E415259204259
                  5445532000   
   27                           
   28                           msg_paren_err:
   29                           #ifdef EOL_NAK
   30    0000002E 20434F4D4D454   DC8     ' COMMENT LINE CANNOT BE EMPTY '
                  E54204C494E45
                  2043414E4E4F5
                  420424520454D
                  50545920     
   31    0000004C 0D0A            DC8     0x0d, 0x0a
   32    0000004E 1500            DC8     0x15, 0
   33                           #else
   36                           #endif
   37                                     
   38                           msg_forget_fish:
   39                           #ifdef EOL_NAK
   40    00000050 2043414E54204   DC8     ' CANT FORGET FISH IN FLASH '
                  64F5247455420
                  4649534820494
                  E20464C415348
                  20           
   41    0000006B 0D0A            DC8     0x0d, 0x0a
   42    0000006D 1500            DC8     0x15, 0
   43                           #else
   46                           #endif
   47                           
   48                           msg_forget_saved:
   49                           #ifdef EOL_NAK
   50    0000006F 20494E20464C4   DC8     ' IN FLASH - SEE FLASH_FORGET '
                  15348202D2053
                  454520464C415
                  3485F464F5247
                  455420       
   51    0000008C 0D0A            DC8     0x0d, 0x0a
   52    0000008E 1500            DC8     0x15, 0
   53                           #else
   56                           #endif
   57                           
   58                           msg_dictfull:
   59                           #ifdef EOL_NAK
   60    00000090 2044494354494         DC8     ' DICTIONARY FULL - SEE .DS '
                  F4E4152592046
                  554C4C202D205
                  34545202E4453
                  20           
   61    000000AB 0D0A            DC8     0x0d, 0x0a
   62    000000AD 1500            DC8     0x15, 0
   63                           #else
   65                           #endif
   66                           
   67                           msg_uvfull:
   68                           #ifdef EOL_NAK
   69    000000AF 2052414D20564         DC8     ' RAM VAR SPACE FULL - SEE .VS '
                  1522053504143
                  452046554C4C2
                  02D2053454520
                  2E565320     
   70    000000CD 0D0A            DC8     0x0d, 0x0a
   71    000000CF 1500            DC8     0x15, 0
   72                           #else
   74                           #endif
   75                           
   76                           msg_wordexists:
   77                           #ifdef EOL_NAK
   78    000000D1 20495320414C5         DC8     ' IS ALREADY DEFINED '
                  2454144592044
                  4546494E45442
                  0            
   79    000000E5 0D0A            DC8     0x0d, 0x0a
   80    000000E7 1500            DC8     0x15, 0
   81                           #else
   84                           #endif
   85                           
   86                           msg_word_error:
   87                           #ifdef EOL_NAK
   88    000000E9 203F204E4F542   DC8     ' ? NOT WORD '
                  0574F524420  
   89    000000F5 0D0A            DC8     0x0d, 0x0a
   90    000000F7 1500            DC8     0x15, 0
   91                           #else
   94                           #endif
   95                           
   96                           msg_number_error:
   97                           #ifdef EOL_NAK
   98    000000F9 203F204E4F542         DC8     ' ? NOT WORD OR NUMBER '
                  0574F5244204F
                  52204E554D424
                  55220        
   99    0000010F 0D0A            DC8     0x0d, 0x0a
  100    00000111 1500            DC8     0x15, 0
  101                           #else
  104                           #endif
  105                           
  106                           msg_qstack:
  107                           #ifdef EOL_NAK
  108    00000113 2043415553454         DC8     ' CAUSED A STACK ERROR '
                  4204120535441
                  434B204552524
                  F5220        
  109    00000129 0D0A            DC8     0x0d, 0x0a
  110    0000012B 1500            DC8     0x15, 0
  111                           #else
  114                           #endif
  115                           
  116                           msg_qpair:
  117                           #ifdef EOL_NAK
  118    0000012D 20535441434B2         DC8     ' STACK ERROR WHILE EXECUTING OR COMPILING '
                  04552524F5220
                  5748494C45204
                  5584543555449
                  4E47204F52204
                  34F4D50494C49
                  4E4720       
  119    00000157 0D0A            DC8     0x0d, 0x0a
  120    00000159 1500            DC8     0x15, 0
  121                           #else
  124                           #endif
  125                           
  126                           msg_qcomp:
  127                           #ifdef EOL_NAK
  128    0000015B 204552524F522         DC8     ' ERROR - NOT COMPILING '
                  02D204E4F5420
                  434F4D50494C4
                  94E4720      
  129    00000172 0D0A            DC8     0x0d, 0x0a
  130    00000174 1500            DC8     0x15, 0
  131                           #else
  134                           #endif
  135                           
  136                           msg_qexec:
  137                           #ifdef EOL_NAK
  138    00000176 204552524F522         DC8     ' ERROR - EXECUTED WHILE COMPILING '
                  02D2045584543
                  5554454420574
                  8494C4520434F
                  4D50494C494E4
                  720          
  139    00000198 0D0A            DC8     0x0d, 0x0a
  140    0000019A 1500            DC8     0x15, 0
  141                           #else
  144                           #endif
  145                           
 5646                           // equals below
 5647                           //#include ".\..\FISH_COMMON_CODE\FISH_RM_MSGS.h"
 5648                           
 5649                           // SYSTEMCLOCK #define set in FISH_M0_EQUATES.s for SYSCLOCK value.
 5650                           // THIS IS A :NONAME WORDSET
 5651                           
 5652                           $FISH_STM32F4_SOC_INIT.s
    1                           //  FISH_STM32F3/4_SOC_INIT.s
    2                           //  FISHv4TH-OEM
    3                           
    4                           // This should only setup FISH I/O, RCC and Systick
    5                           
    6                           // Other initializations should be in their own files:
    7                           // like FISH_GPIO_WC.h, FISH_SPI_WC.h etc
    8                           
    9                           // ART init stuff
   10                           DCEN    EQU     00000400h
   11                           ICEN    EQU     00000200h
   12                           PRFTEN  EQU     00000100h
   13                           LATENCY_5WS     EQU     00000005h
   14                           initART:
   15    0000019C .............         DC32    DOCOL, strva, (ICEN | DCEN | PRFTEN | LATENCY_5WS), FLASH_ACR
                  ...0507000000
                  3C0240       
   16    000001AC ........              DC32    SEMIS
   17                           
   18                           
   19                            SECTION .text : CONST (2)
   20                           copyintvecs:
   21    00000000 ........              DC32    .+5
   22                            SECTION .text : CODE (2)
   23                           // Note sure why x_r3 style seems to cause problems.
   24    00000000 .............         mov32   y_r4, RAM_INTVECS
                  ...          
   25    00000008 4FF00003              mov       x_r3, #0    // BOOT REMAP IN MAIN FLASH ALIASED AT 0
   26                           //      mov32   x, = FLASH_START
   27    0000000C 4FF0800C              mov     k_r12, #128
   28                           _copyintvecs
   29    00000010 53F8042B              ldr   w_r2, [x_r3], #4
   30    00000014 44F8042B              str   w_r2, [y_r4], #4
   31    00000018 BCF1010C              subs    k_r12, k_r12, #1
   32    0000001C F8D1                  bne     _copyintvecs
   33                                   NEXT
   33.1                         // ARMv7-M Thumb = .+5
   33.2  0000001E 55F8042B              ldr     w_r2, [i_r5], #4      ; get IP->cfa to w, incr i after
   33.3                         // ARMv6-M Thumb = .+4
   33.4                         //        LDM   i!, {w} // get IP->cfa to w, incr i after
   33                                   NEXT1
   33.1  00000022 22F00302              BIC     w_r2, w_r2, #3        ; Tested WORKS ALSO Thumb2 klooge: clear the 2 LSbits
   33.2  00000026 52F8043B              LDR     x_r3, [w_r2], #4        ; contents of cfa -> x, bump w to cfa+4
   33.3  0000002A 1847                  BX      x               ; w preserves cfa+4 for DOCOL's benefit
   33.4                         // ARMv6-M Thumb = .+4
   33.5                         //      LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   33.6                         //      BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
   33.7                                 ENDM
   33.8                                 ENDM
   34                            LTORG
   35                           
   36                           //HEADERLESS SoCinit:        ( -- )
   37                           //      Initialize main subsystems here.
   38                           //      Initialize SYSCLOCK to system clock frequency in Hz.
   39                           //      Use of IRC, external xtal's and PLL done here.
   40                           //      Initialize SYSTICK only to use system clock.
   41                           //      SYSTICK eventually to be initiatlized for tasker IRQ.
   42                           //      Enable CLKOUT.
   43                           
   44                            SECTION .text : CONST (2)
   45                           SoCinit:
   46    00000000 ........        DC32  DOCOL
   47    00000004 ........        DC32  copyintvecs
   48                           // VTOR for 205 issue fixed in stm32F205RC.icf
   49                           // VTOR_PATCH set in 205 config Options Assembly Preprocessor
   50                           #ifndef VTOR_PATCH
   51    00000008 .............   DC32  strkk, RAM_INTVECS, VTOR
                  ...08ED00E0  
   52                           #endif
   53                           
   54                           #ifdef SLOW_POWERUP
   57                           #endif
   58                           
   59                           //---------------------------XRC HCLK PCLK1 AND PCLK2---------------------------
   60                           #if STM32F4_XRC08_168MHZ | STM32F205RC_XRC10_118MHZ
   61                           ; 168MHz SYSCLK, 84MHz PCLK2, 42MHz PCLK1 for USB and RNG, 38.4MHz for I2S
   62    00000014 ........00380   DC32  atk,RCC_CR, ork,1, strk,RCC_CR                  ; Set HSION bit
                  240........01
                  000000.......
                  .00380240    
   63    0000002C ........00000   DC32  strva,0,RCC_CFGR                                ; Reset CFGR register
                  00008380240  
   64    00000038 ........00380   DC32  atk,RCC_CR, andk,0FEF6FFFFh, strk,RCC_CR        ; Reset HSEON, CSSON and PLLON bits
                  240........FF
                  FFF6FE.......
                  .00380240    
   65    00000050 ........10300   DC32  strva,24003010h,RCC_PLLCFGR                     ; jam PLLCFGR register to PUR value
                  02404380240  
   66    0000005C ........00380   DC32  atk,RCC_CR, andk,0FFFBFFFFh, strk,RCC_CR        ; Reset HSEBYP bit
                  240........FF
                  FFFBFF.......
                  .00380240    
   67    00000074 ........00000   DC32  strva,0,RCC_CIR                                 ; Disable all interrupts
                  0000C380240  
   68                           
   69                           RCC_CR_HSEON    EQU     00010000h
   70                           
   71    00000080 ........00380   DC32  atk,RCC_CR, ork,RCC_CR_HSEON, strk,RCC_CR       ; Enable HSE 8MHz
                  240........00
                  000100.......
                  .00380240    
   72                           
   73                           RCC_CR_HSERDY   EQU     00020000h
   74    00000098 .............   DC32  begin, atk,RCC_CR, andk,RCC_CR_HSERDY, until    ; Wait till HSE is ready
                  ...00380240..
                  ......0000020
                  0........    
   75                           
   76                           RCC_APB1ENR_PWREN       EQU     10000000h
   77                           PWR_CR_PMODE    EQU     4000h
   78                           
   79                           // Enable high performance mode, System frequency up to 168 MHz
   80    000000B0 ........40380   DC32  atk,RCC_APB1ENR, ork, RCC_APB1ENR_PWREN, strk,RCC_APB1ENR
                  240........00
                  000010.......
                  .40380240    
   81    000000C8 ........00700   DC32  atk,PWR_CR, ork,PWR_CR_PMODE, strk,PWR_CR
                  040........00
                  400000.......
                  .00700040    
   82                           
   83                           RCC_CFGR_HPRE_DIV1      EQU     00000000h
   84                           RCC_CFGR_PPRE2_DIV2     EQU     00008000h
   85                           RCC_CFGR_PPRE1_DIV4     EQU     00001400h
   86                           
   87                           // DEFINE OTHER SYSTEM CLOCKS FOR USER AND BAUD CALC
   88                           // PCLK2 = HCLK / 2 ; PCLK1 = HCLK / 4
   89                           // PCLK2 = USB PCLK1 = UART
   90    000000E0 ........08380   DC32  LIT, RCC_CFGR, LIT, RCC_CFGR_HPRE_DIV1, SETBITS         ; HCLK = SYSCLK / 1
                  240........00
                  000000.......
                  .            
   91    000000F4 ........08380   DC32  LIT, RCC_CFGR, LIT, RCC_CFGR_PPRE2_DIV2, SETBITS        ; PCLK2 = HCLK / 2
                  240........00
                  800000.......
                  .            
   92    00000108 ........08380   DC32  LIT, RCC_CFGR, LIT, RCC_CFGR_PPRE1_DIV4, SETBITS        ; PCLK1 = HCLK / 4
                  240........00
                  140000.......
                  .            
   93                           PCLK2   EQU     SYSTEMCLOCK / 2
   94                           PCLK1   EQU     SYSTEMCLOCK / 4
   95                           //STM32F205RC_XRC10_118MHZ
   96                           //PCLK2   EQU     59000000        // 38444C0h
   97                           //PCLK1   EQU     29500000        // 1C22260h
   98                           // STM32F4_XRC08_168MHZ
   99                           //PCLK2   EQU     84000000        // 501BD00h
  100                           //PCLK1   EQU     42000000        // 280DE80h
  101                           
  102                           
  103                           /* VIC: OK, I figured out what I was trying to do... 't'was a failed experiment.
  104                           "Magic" 157 MHz won't work (even with a different xtal)
  105                           because it would bugger-up the USB, which *needs* 48 MHz.
  106                           Right now WITH THESE PLL SETTINGS the clock is in fact 144 MHz.
  107                           PLL_Mbits       EQU     4;8     ; 8MHz/4 = 2MHz
  108                           PLL_N           EQU     144;157;336
  109                           PLL_Nbits       EQU     (PLL_N << 6)
  110                           PLL_P           EQU     2
  111                           PLL_Pbits       EQU     (((PLL_P >> 1) -1) << 16)
  112                           PLL_Q           EQU     6;7
  113                           PLL_Qbits       EQU     (PLL_Q << 24)
  114                           */
  115                           
  116                           // This is for 118MHz HCLK | SYSCLK PCLK2 = 134MHz PCLK1 = 42MHz
  117                           #ifdef STM32F205RC_XRC10_118MHZ
  129                           #endif
  130                           #ifdef STM32F4_XRC08_168MHZ
  131                           PLL_Mbits       EQU     8       ; 8MHz/8 = 1MHz
  132                           PLL_N           EQU     336     ; vco = (1 MHz * 336) = 336 MHz
  133                           //or
  134                           //PLL_Mbits       EQU     4       ; 8MHz/4 = 2MHz
  135                           //PLL_N           EQU     168     ; vco = (2MHz * 168) = 336 MHz
  136                           
  137                           PLL_Nbits       EQU     (PLL_N << 6)
  138                           PLL_P           EQU     2       ; 336/2 = 168 MHz
  139                           PLL_Pbits       EQU     (((PLL_P >> 1) -1) << 16)
  140                           PLL_Q           EQU     7       ; 336/7 = 48 MHz for USB
  141                           PLL_Qbits       EQU     (PLL_Q << 24)
  142                           #endif
  143                           
  144                           RCC_PLLCFGR_PLLSRC_HSE  EQU     00400000h
  145                           
  146    0000011C ........08544   DC32  strkk,(PLL_Mbits | PLL_Nbits | PLL_Pbits | RCC_PLLCFGR_PLLSRC_HSE | PLL_Qbits), RCC_PLLCFGR
                  00704380240  
  147                           
  148                           RCC_CR_PLLON    EQU     01000000h
  149                           
  150    00000128 ........00380   DC32  atk,RCC_CR, ork,RCC_CR_PLLON, strk,RCC_CR       ; Enable the main PLL
                  240........00
                  000001.......
                  .00380240    
  151                           
  152                           RCC_CR_PLLRDY   EQU     02000000h
  153    00000140 .............   DC32  begin, atk,RCC_CR, andk,RCC_CR_PLLRDY, until    ; Wait till the main PLL is ready
                  ...00380240..
                  ......0000000
                  2........    
  154    00000158 ........        DC32  initART ; init flash accelerator
  155                           
  156                           RCC_CFGR_SW     EQU     00000003h
  157                           RCC_CFGR_SW_PLL EQU     00000002h
  158                           
  159                           ; Select main PLL as sysclk
  160    0000015C ........08380   DC32  atk,RCC_CFGR, andk,(~RCC_CFGR_SW), strk,RCC_CFGR
                  240........FC
                  FFFFFF.......
                  .08380240    
  161    00000174 ........08380   DC32  atk,RCC_CFGR, ork,RCC_CFGR_SW_PLL, strk,RCC_CFGR
                  240........02
                  000000.......
                  .08380240    
  162                           
  163                           RCC_CFGR_SWS            EQU     0000000Ch
  164                           RCC_CFGR_SWS_PLL        EQU     00000008h
  165                           
  166                           ; wait for clk changeover
  167    0000018C .............   DC32  begin, atk,RCC_CFGR,andk,RCC_CFGR_SWS, LIT,RCC_CFGR_SWS_PLL, EQUAL, until
                  ...08380240..
                  ......0C00000
                  0........0800
                  0000.........
                  .......      
  168                           
  169                           RCC_CFGR_I2SSRC EQU     00800000h
  170                           //* PLLI2S clock used as I2S clock source */
  171                           //RCC->CFGR &= ~RCC_CFGR_I2SSRC;
  172                           
  173                           PLLI2S_N        EQU     192
  174                           PLLI2S_Nbits    EQU     (PLLI2S_N << 6)
  175                           PLLI2S_R        EQU     5
  176                           PLLI2S_Rbits    EQU     (PLLI2S_R << 28)
  177                           
  178    000001B0 ........00300   DC32  strkk,(PLLI2S_Nbits | PLLI2S_Rbits), RCC_PLLI2SCFGR
                  05084380240  
  179                           
  180                           RCC_CR_PLLI2SON         EQU     04000000h
  181                           RCC_CR_PLLI2SRDY        EQU     08000000h
  182                           
  183    000001BC ........00380   DC32  atk,RCC_CR, ork,RCC_CR_PLLI2SON, strk,RCC_CR
                  240........00
                  000004.......
                  .00380240    
  184    000001D4 .............   DC32  begin, atk,RCC_CR, andk,RCC_CR_PLLI2SRDY, until ; wait for PLL ready
                  ...00380240..
                  ......0000000
                  8........    
  185                           
  186                           #endif  // #if STM32F4_XRC08_168MHZ | STM32F205RC_XRC10_118MHZ
  187                           
  188                           // Set SYSCLOCK = SYSTEMCLOCK defined in FISH_STM32F4_EQUATES.s
  189                           // in Assembler -> Preprocessor -> Defined Symbols
  190    000001EC ........007A0   DC32  strva, SYSTEMCLOCK, SYSCLOCK    // HCLK
                  30A........  
  191                           
  192                           //------------------------USART3 & GPIO I/O-------------------------------------
  193                           // SETUP USART3 I/O FOR UART3_INIT
  194                           //      SETBITS SETBITS:        ( addr val -- ) OR val bits into addr.
  195                           //  DC32  LIT, RCC_AHB1ENR, LIT, 5h, SETBITS    ; GPIO port A,C clk enable
  196    000001F8 ........30380   DC32  LIT, RCC_AHB1ENR, LIT, 10000111b, SETBITS ; GPIO port A,B,C & H clk enable
                  240........87
                  000000.......
                  .            
  197                           
  198                           // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  199                           // ADD GPIO CLK to C include GPIOH to use XRC as GPIO clk
  200    0000020C ........40380   DC32  LIT, RCC_APB1ENR, LIT, 40000h, SETBITS  ; USART3 clk enable
                  240........00
                  000400.......
                  .            
  201                           // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  202                           
  203                           
  204                             ; PC10 as TX / PC11 as RX
  205    00000220 ........00770   DC32  strva, 07700h, GPIOC_AFRH
                  00024080240  
  206                           
  207                           // rmwamd standalone low level ILK macro and rmwamd prim.
  208                           // STM DISCO BOARD:    Pc10 TX, pc11 RX, PC0 GND
  209    0000022C ........00080   DC32 rmwamd, GPIOC_MODER,00F00003h,00A00001h
                  2400300F00001
                  00A000       
  210    0000023C ........0C200   DC32 strva, 200Ch, USART3_CR1         ; Enable USART, TX and RX over8=0=16x
                  0000C480040  
  211                           
  212                           //---------------------------USART3_INIT TEST-----------------------------------
  213                           /*
  214                           // SET BAUD HERE FOR TESTING CHANGE OF BAUD IN UART3_INIT
  215                           // OVER8=0 = 16x OVERSAMPLING
  216                           #ifdef STM32F4_XRC08_168MHZ
  217                           BAUDRATE        SET     ((273 << 4 | 7)); 9600: 42MHz / ( 16 * 273.4375 = 1117h)
  218                           //BAUDRATE      SET     ((136 << 8 | 11)); 19200: 42MHz / ( 16 * 136.75 )
  219                           //BAUDRATE      SET     ((45 << 6 | 13)); 57600: 42MHz / ( 16 * 45.5625 )
  220                           //BAUDRATE      SET     ((22 << 4 | 8)); 115200: 42MHz / ( 16 * 22.8125 = 168h)
  221                           #endif
  222                           #ifdef STM32F4_IRC16_16MHZ
  223                           // 682h DIV_Mantissa = 68H DIV_fraction = 2
  224                           BAUDRATE        SET     ((104 << 4 | 2)); 9600: 16MHz / ( 16 * 104.1875 )
  225                           #endif
  226                             DC32 strva, BAUDRATE, USART3_BRR      ; BRG, x16 oversampling
  227                           */
  228                           
  229                           #ifdef XON_XOFF
  230                           // Asign CTS signal pin
  231                           #endif
  232                           
  233                           #ifdef CTS_RTS
  235                           #endif
  236                           
  237                           #ifdef CLKOUT
  239                           #endif
  240                           
  241                           // SYSTICK SECTION: (SysTick uses the processor clock.)
  242                           // SYST_RVR (Reload value) not set until user does with MS or DELAY.
  243                           // SYSTICK TIMER ENABLE: Bit 0 = 1
  244                           // SYSTICK CLKSOURCE: Bit 2 = 0 (SYSTEM CLOCK/2 OR 8)
  245                           // SYSTICK CLKSOURCE: Bit 2 = 1 (SYSTEM CLOCK)
  246                           //  DC32    strva, 5, SYST_CSR    // SYSCLK NO IRQ
  247    00000248 ........07000   DC32    strva, 7, SYST_CSR    // SYSCLK + SYSTICK IRQ
                  00010E000E0  
  248                           
  249                           // ADDING PSTAT INIT HERE FOR A MINUTE>
  250                           // 1RST TRY DOCS HARD TO FIND~!
  251                           /*
  252                           typedef enum gpio_af {
  253                               GPIO_AF_SPI_1_2              = 5,
  254                               GPIO_AF_USART_1_2_3          = 7,
  255                           } gpio_af;
  256                           */
  257                           
  258                           /* Intialize PORTB_MODER pins this way.
  259                           Value at end is this init                                                               ...........
  260                           PB15    BT-RST          is active high. 0x1
  261                           PB14    BT-CSn          is active low.  0x1 SANITYY CHECK CS-BT USES THIS!!!
  262                           PB13    DAC-CSn         is active low.  0x1
  263                           PB12            ADC-CSn                                 is active low.  0x1
  264                           PB11            SDA2                                            I2C START (NOT USED)
  265                           PB10            SCL2
  266                           PB9                     NC
  267                           PB8                     NC
  268                           PB7                     SDA1
  269                           PB6                     SCL1                                            I2C END (NOT USED)
  270                           PB5                     SPI1-MOSI                               is AF 7, SPI3_MOSI 0x2
  271                           PB4                     SPI1-MISO                               is AF 7, SPI3_MISO 0x2
  272                           PB3                     JTDO/SPI1-SCLK  is AF 7, SPI3_SCLK 0x2
  273                           PB2                     BOOT0                   Do not program   0x0
  274                           PB1                     ADC-PDN         is active low.   0x1
  275                           PB0     ADC-RSTn                                is active high.  0x1
  276                           */
  277                           // NO MORE /*  ...  */ COMMENTS UNTIL THE END OF THIS SEGMENT:
  278    00000254 ........30380   DC32  LIT, RCC_AHB1ENR, LIT, 010b, SETBITS    ; GPIO port B clk enable
                  240........02
                  000000.......
                  .            
  279                           
  280                           #ifdef PSTAT_SPI1_TEST
  282                           #endif
  283                           #ifdef PSTAT_SPI3_TEST
  284                           // test this on pstat and disco again.
  285                           //  DC32        LIT, RCC_APB1ENR, LIT, 08000h, SETBITS  ; ENABLE SPI3 CLOCK
  286                           
  287                           // This works = PWREN, UART3EN and SPI3EN
  288    00000268 ........40380   DC32  LIT, RCC_APB1ENR, LIT, 010048000h, SETBITS
                  240........00
                  800410.......
                  .            
  289                           #endif
  290                           
  291                           #ifdef PSTAT_SPI1_TEST
  294                           #endif
  295                           #ifdef PSTAT_SPI3_TEST
  296                           // AF6 from datasheet
  297    0000027C ........20040   DC32  LIT, GPIOB_AFRL, LIT, 00666000h, SETBITS
                  240........00
                  606600.......
                  .            
  298                           #endif
  299                           
  300                           // THIS NEEDS TO BE HERE!
  301                           // BECAUSE THIS IS THE ONLY INIT THAT LETS ME SET BB IN DEBUGGER
  302                           // 01010101000000000000101010000101b 55000A85h - MODER IS TWO BITS PER PORT
  303                           // YET INIT IS 55000EC5 WHEN i RUN THE BB INIT BELOW. sO IT'S COMMENTED OUT
  304    00000290 ........00040   DC32  LIT, GPIOB_MODER, LIT, 055000A85h, SETBITS
                  240........85
                  0A0055.......
                  .            
  305                           
  306                           #ifdef PSTAT_SPI1_TEST
  312                           #endif
  313                           #ifdef PSTAT_SPI3_TEST
  314                           // 01100111110b (033Eh) is Full Duplex WITH spe NOT ENABLED - CPOL=1 CPHA=0
  315                           // 01100111101b (033Dh) is Full Duplex WITH spe NOT ENABLED - CPOL=0 CPHA=1 = DAC, BT
  316    000002A4 ........003C0   DC32  LIT, SPI3_CR1, LIT, 033Dh, SETBITS              // ENABLE CONFIG BEFORE
                  040........3D
                  030000.......
                  .            
  317                           // 1100001100111101b (0C33Dh) is UNIDIRECTIONAL OUPUT WITH spe NOT ENABLED
  318                           //      DC32    LIT, SPI1_CR1, LIT, 0C33Dh, SETBITS             // ENABLE CONFIG BEFORE
  319                           #endif
  320                           
  321                           #ifdef PSTAT_SPI1_TEST
  325                           #endif
  326                           #ifdef PSTAT_SPI3_TEST
  327                           //      1000000b 040h = ENABLE SPE
  328    000002B8 ........003C0         DC32    LIT, SPI3_CR1, LIT, 040h, SETBITS       // ENABLING SPI
                  040........40
                  000000.......
                  .            
  329    000002CC ........04000   DC32  LIT, 4, LIT, SPI3_CR1, SETBIT
                  000........00
                  3C0040.......
                  .            
  330                           #endif
  331                           
  332                           
  333                           // Set CS's AND ADC-RST/PDN pins 1&2, AND BT-RST ON 15 according to logic.
  334    000002E0 ........14040   DC32  LIT, GPIOB_ODR, LIT, 07002h, SETBITS
                  240........02
                  700000.......
                  .            
  335                           
  336                           #ifdef PSTAT_BB_NOINIT_TEST
  347                           #endif // PSTAT_BB_NOINIT_TEST
  348                           
  349                           #ifdef PSTAT_BB_TEST
  359                           #endif // PSTAT_BB_TEST
  360                           
  361                           //--------------------------------PORTC-----------------------------------------
  362                           // GPIO PORT C Reset value: 0x0000 0000
  363                           
  364                           
  365                           // MODER is a 2 bit init for each of the 16 ports in a bank.
  366                           // Enable PB0-1, and PB12-15 as Outputs for SPI BT, ADC and DAC BT RST
  367                           // PROGRAM SPI1 AF ON PB3, PB4 AND PB5
  368                           // USART3 inited on PORT C, in the first section, after system clocks setup.
  369                           // PORTC - Do std GPIO and level set init. Then do alternate function config.
  370                           /* Intialize PORTC pins this way.
  371                           Value at end is this init                                                               ...........
  372                           PC15
  373                           PC14
  374                           PC13
  375                           PC12
  376                           PC11    UART3_TX        is AF.
  377                           PC10    UART3_RX        is AF.
  378                           PC9     SWITCH4         is active high.
  379                           PC8     SWITCH3         is active high.
  380                           PC7     SWITCH2         is active high.
  381                           PC6     SWITCH1         is active high.
  382                           PC5     ADC_DATA_READY  is actve high.
  383                           PC4
  384                           PC3
  385                           PC2     GAIN_SWITCH2    is active low.
  386                           PC1     GAIN_SWITCH1    is active low.
  387                           PC0     GAIN_SWITCH0    is active low.
  388                           
  389                           FOR PSTAT init add pc0-pc9 init here
  390                           
  391                           */
  392                           
  393                           // FIX ADC_DATA_READY SO IT'S CORRECT TYPE OF INPUT?
  394                           
  395                           //  DC32  LIT, RCC_AHB1ENR, LIT, 0100b, SETBITS ; GPIO port C clk enable
  396                           
  397                           // Good MODER sets GAIN-S0-S2 and SW1-SW4 high AND LEAVES UART3 (PC10/11) ALONE
  398                           // This MODER ONLY sets GAIN-S0-S2 and SW1-SW4 high: 055415h
  399    000002F4 ........00080   DC32  LIT, GPIOC_MODER, LIT, 055415h, SETBITS
                  240........15
                  540500.......
                  .            
  400                           // Create lower speed OTYPER
  401                           
  402                           // Good ODR is 03C0 = SWITCH1-4 ON.
  403    00000308 ........14080   DC32  LIT, GPIOC_ODR, LIT, 03C0h, SETBITS
                  240........C0
                  030000.......
                  .            
  404                           // 03C7 = SWITCH1-4 AND GAIN-SWITCH0-2 ON.
  405                           //  DC32  LIT, GPIOC_ODR, LIT, 03C7h, SETBITS
  406                           
  407                           
  408    0000031C ........        DC32  SEMIS
 5653                           
 5654                            END


ABORT_STOP_TILL_CO   #define, value: , line:      26:7  
EOL_DLE              #define, value: , line:      27:7  
EOL_NAK              #define, value: , line:      28:7  
PSTAT_SPI3_TEST      #define, value: , line:      19:7  
STM32F4_XRC08_168MHZ #define, value: 1, line:         0      60:17
TRUE_EQU_NEG_ONE     #define, value: , line:      24:7  
USE_CMAIN            #define, value: , line:       8:7  
XON_XOFF             #define, value: , line:      25:7  
__ARM4TM__           #define, value: 4, line:         0  
__ARM5TM__           #define, value: 5, line:         0  
__ARM5T__            #define, value: 5, line:         0  
__ARM5__             #define, value: 5, line:         0  
__ARM6MEDIA__        #define, value: 6, line:         0  
__ARM6M__            #define, value: 11, line:         0  
__ARM6SM__           #define, value: 12, line:         0  
__ARM6T2__           #define, value: 6, line:         0  
__ARM6__             #define, value: 6, line:         0  
__ARM7EM__           #define, value: 13, line:         0  
__ARM7M__            #define, value: 7, line:         0  
__ARM7__             #define, value: 7, line:         0  
__ARMVFPV1__         #define, value: 1, line:         0  
__ARMVFPV2__         #define, value: 2, line:         0  
__ARMVFPV3_D16__     #define, value: 1, line:         0  
__ARMVFPV3_FP16__    #define, value: 1, line:         0  
__ARMVFPV3__         #define, value: 3, line:         0  
__ARMVFPV4__         #define, value: 4, line:         0  
__ARMVFP_D16__       #define, value: 1, line:         0  
__ARMVFP_FP16__      #define, value: 1, line:         0  
__ARMVFP_SP__        #define, value: 1, line:         0  
__ARMVFP__           #define, value: __ARMVFPV4__, line:         0  
__ARM_ARCH           #define, value: 7, line:         0  
__ARM_ARCH_ISA_THUMB #define, value: 2, line:         0  
__ARM_ARCH_PROFILE   #define, value: 'M', line:         0  
__ARM_BIG_ENDIAN     #define, value: 0, line:         0  
__ARM_FEATURE_DSP    #define, value: 1, line:         0  
__ARM_FEATURE_FMA    #define, value: 1, line:         0  
__ARM_FEATURE_IDIV   #define, value: 1, line:         0  
__ARM_FP             #define, value: 6, line:         0  
__ARM_MEDIA__        #define, value: 1, line:         0  
__ARM_PROFILE_M__    #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CORE__             #define, value: __ARM7EM__, line:         0  
__DATE__             #define,            line:         0         79
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__IASMARM__          #define, value: 1, line:         0  
__LINE__             #define,            line:         0  
__LITTLE_ENDIAN__    #define, value: 1, line:         0  
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0         82
__VER__              #define,            line:         0  
comma_test           #define, value: , line:       893  
i                    #define, value: r5, line:      18:5     623:10   624:10   635:10   646:10
                                                                   657:10   668:10   698:10   699:10
                                                                   700:10   713:10   725:10   805:10
                                                                   806:10   820:10   850:10   861:10
                                                                   876:10   893:10  1044:10  1045:10
                                                                  1065:10  1085:10  1113:10  1113:10
                                                                    44:11    45:11   117:11      830
i_r5                 #define, value: r5, line:      19:5     609:10   626:10   637:10   649:10
                                                                   660:10   672:10   690:10   706:10
                                                                   714:10   727:10   796:10   807:10
                                                                   821:10   830:10   837:10   852:10
                                                                   863:10   877:10   895:10   899:10
                                                                   911:10   924:10   995:10  1030:10
                                                                  1045:10  1046:10  1065:10  1066:10
                                                                  1085:10  1086:10  1114:10  1146:10
                                                                  1158:10  1190:10  1206:10  1242:10
                                                                  1286:10  1292:10  1308:10  1326:10
                                                                  1362:10  1368:10  1378:10  1389:10
                                                                  1401:10  1413:10    46:11      102
                                                                      406      573      592      740
                                                                      745      797      814      831
                                                                     1276     1583     1626     1642
                                                                     1660     1678     1698     1714
                                                                     1728     1749     1772     1794
                                                                     1816     1836     1890     1919
                                                                     1972     1994     2013     2031
                                                                     2050     3053     3140     3164
                                                                     3181     3198     3215     3232
                                                                     3249     3266     3283     3528
                                                                     3548     3571     3579     3614
                                                                     3689     3723     3791     3871
                                                                     3890     3908     3927     3944
                                                                     3962     3980     4000     4020
                                                                     4040     4278     4327     4350
                                                                     4547     4603     4645     4721
                                                                     4737     4757     4778   129:14
                                                                   446:14   575:14     5129     5189
                                                                     5415   151:15   183:15   202:15
                                                                   223:15   245:15    33:17
k                    #define, value: r12, line:      40:5     700:10   703:10   703:10   704:10
                                                                  1400:10  1411:10
k_r12                #define, value: r12, line:      41:5     958:10   994:10    27:17    31:17
                                                                    31:17
n                    #define, value: r1, line:       6:5     623:10   625:10   683:10   686:10
                                                                   687:10   786:10   790:10   792:10
                                                                   792:10   909:10   909:10   910:10
                                                                   922:10   922:10   923:10   960:10
                                                                  1157:10  1171:10  1180:10  1201:10
                                                                  1219:10  1220:10  1230:10  1231:10
                                                                  1259:10  1260:10  1264:10  1268:10
                                                                  1268:10  1269:10  1305:10  1319:10
                                                                  1350:10  1399:10  1400:10  1411:10
                                                                  1412:10    20:11    25:11   101:11
                                                                   102:11   103:11   105:11   107:11
                                                                      773      776      776     1269
                                                                     1270     1270     1270     1620
                                                                     1625     1744     1745     1866
                                                                     1905     1909     1964     1992
                                                                     2011     2012     2029     2048
                                                                     3135     3526     3527     3546
                                                                     3547     3567     3568     3607
                                                                     3609     3678     3679     3710
                                                                     3718     3718     3718     3869
                                                                     3888     3925     4276     4277
                                                                     4540     4542     4543     4544
                                                                     4546     4595     4598     4598
                                                                     4633     4634     4634     4754
                                                                     4756     4775     4777   439:14
                                                                   570:14   572:14     5127     5128
                                                                     5158     5401     5404     5406
                                                                     5407     5409     5411     5412
                                                                     5414   145:15   177:15   198:15
                                                                   199:15   201:15   219:15   220:15
                                                                   222:15   241:15
n_r1                 #define, value: r1, line:       7:5     908:10   921:10   959:10   971:10
                                                                   972:10   977:10  1156:10  1204:10
                                                                  1325:10  1361:10      134      139
                                                                      139      148      150      159
                                                                      161      404      405      781
                                                                      781      783      801      801
                                                                      803     1869     1879     1879
                                                                     1880     1907     1969     1971
                                                                     1993     2030     2049     3138
                                                                     3870     3889     3926   444:14
                                                                     5167     5171     5181     5182
                                                                     5184     5185   148:15   180:15
                                                                   242:15   244:15
p                    #define, value: r7, line:      24:5     637:10   647:10   649:10   658:10
                                                                   660:10   669:10   682:10   683:10
                                                                   684:10   721:10   830:10   837:10
                                                                   852:10   863:10   876:10   898:10
                                                                   911:10   924:10   944:10   945:10
                                                                   992:10   995:10   995:10  1030:10
                                                                  1058:10  1078:10  1124:10  1139:10
                                                                  1140:10  1154:10  1158:10  1171:10
                                                                  1190:10  1201:10  1202:10  1224:10
                                                                  1226:10  1258:10  1318:10  1319:10
                                                                  1326:10  1326:10  1340:10  1341:10
                                                                  1342:10  1362:10  1362:10  1368:10
                                                                  1368:10  1377:10    38:11      124
                                                                      402      406      571      573
                                                                      590      592      721      722
                                                                      740      740      745      772
                                                                      773      786      797      797
                                                                      814      814     1264     1276
                                                                     1581     1582     1583     1583
                                                                     1619     1620     1624     1625
                                                                     1626     1626     1642     1659
                                                                     1660     1678     1714     1728
                                                                     1744     1763     1769     1771
                                                                     1772     1772     1792     1792
                                                                     1813     1814     1816     1816
                                                                     1834     1836     1866     1867
                                                                     1868     1904     1905     1906
                                                                     1964     1968     1992     1994
                                                                     2011     2013     2028     2029
                                                                     2047     2048     3048     3049
                                                                     3053     3053     3134     3135
                                                                     3136     3137     3140     3140
                                                                     3157     3164     3164     3179
                                                                     3181     3196     3198     3213
                                                                     3215     3230     3232     3247
                                                                     3249     3264     3266     3281
                                                                     3283     3525     3526     3528
                                                                     3545     3546     3548     3566
                                                                     3567     3571     3579     3607
                                                                     3608     3614     3678     3689
                                                                     3710     3723     3788     3791
                                                                     3868     3869     3871     3887
                                                                     3888     3890     3906     3908
                                                                     3924     3925     3927     3942
                                                                     3944     3960     3962     3978
                                                                     3980     3997     3998     4000
                                                                     4017     4018     4020     4037
                                                                     4038     4040     4278     4538
                                                                     4603     4645   123:14   129:14
                                                                   438:14   439:14     5129     5158
                                                                     5159   144:15   145:15   176:15
                                                                   177:15   197:15   198:15   218:15
                                                                   219:15   240:15   241:15
p_r7                 #define, value: r7, line:      25:5  
pfRAMVectors         #define, value: ((pFunc_t *)0x10000000), line:      90:3  
r                    #define, value: r6, line:      21:5     713:10   725:10   726:10   726:10
                                                                   805:10   820:10   893:10  1107:10
                                                                  1112:10  1112:10  1141:10  1142:10
                                                                  1388:10    39:11    45:11   117:11
                                                                      830     1641     1677     1713
                                                                     1727     1745
r_r6                 #define, value: r6, line:      22:5    1101:10  1102:10     1696     1697
ra                   #define, value: r10, line:      34:5    1173:10  1187:10
ra_r10               #define, value: r10, line:      35:5  
rb                   #define, value: r11, line:      37:5  
rb_r11               #define, value: r11, line:      38:5     946:10   952:10
t                    #define, value: r0, line:       3:5     608:10   635:10   636:10   636:10
                                                                   637:10   647:10   648:10   649:10
                                                                   658:10   659:10   660:10   669:10
                                                                   670:10   684:10   687:10   687:10
                                                                   688:10   721:10   722:10   785:10
                                                                   789:10   791:10   791:10   830:10
                                                                   837:10   850:10   852:10   861:10
                                                                   863:10   898:10   910:10   910:10
                                                                   911:10   923:10   923:10   924:10
                                                                   960:10   960:10   962:10   962:10
                                                                   995:10  1009:10  1019:10  1030:10
                                                                  1058:10  1059:10  1078:10  1139:10
                                                                  1142:10  1154:10  1155:10  1157:10
                                                                  1157:10  1158:10  1178:10  1180:10
                                                                  1183:10  1190:10  1220:10  1224:10
                                                                  1225:10  1226:10  1231:10  1258:10
                                                                  1259:10  1268:10  1289:10  1318:10
                                                                  1326:10  1340:10  1350:10  1354:10
                                                                  1354:10  1362:10  1368:10    21:11
                                                                    25:11    26:11    26:11    27:11
                                                                    34:11    35:11   101:11   103:11
                                                                   104:11   104:11   105:11   107:11
                                                                      402      406      571      573
                                                                      590      592      722      740
                                                                      745      772      797      814
                                                                     1276     1583     1624     1626
                                                                     1642     1660     1678     1713
                                                                     1714     1728     1769     1771
                                                                     1772     1814     1816     1836
                                                                     1904     1968     1994     2013
                                                                     2028     2047     3048     3053
                                                                     3134     3140     3164     3179
                                                                     3181     3196     3198     3213
                                                                     3215     3230     3232     3247
                                                                     3249     3264     3266     3281
                                                                     3283     3525     3528     3545
                                                                     3548     3566     3571     3579
                                                                     3614     3689     3723     3788
                                                                     3791     3868     3871     3887
                                                                     3890     3906     3908     3924
                                                                     3927     3942     3944     3960
                                                                     3962     3978     3980     3998
                                                                     4000     4018     4020     4038
                                                                     4040     4278     4538     4603
                                                                     4645   123:14   125:14   125:14
                                                                   128:14   128:14   129:14   438:14
                                                                   572:14   573:14   573:14     5129
                                                                     5159
t_r0                 #define, value: r0, line:       4:5     829:10   836:10   895:10   897:10
                                                                   897:10   907:10   920:10   953:10
                                                                   958:10   970:10   972:10   976:10
                                                                   976:10   977:10   985:10   986:10
                                                                   993:10  1007:10  1018:10  1029:10
                                                                  1079:10  1155:10  1203:10  1204:10
                                                                  1204:10  1205:10  1325:10  1325:10
                                                                  1343:10  1361:10  1365:10  1365:10
                                                                  1365:10  1366:10  1366:10  1367:10
                                                                      403      403      405      405
                                                                      572      572      591      591
                                                                      723      723      726      730
                                                                      730      731      735      738
                                                                      739      744      784      795
                                                                      804      812      813      813
                                                                     1266     1266     1266     1269
                                                                     1272     1272     1581     1641
                                                                     1659     1677     1727     1834
                                                                     1877     1878     1911     1970
                                                                     1970     1971     1993     2012
                                                                     2030     2049     3050     3050
                                                                     3139     3139     3158     3158
                                                                     3162     3162     3180     3180
                                                                     3197     3197     3214     3214
                                                                     3231     3231     3248     3248
                                                                     3265     3265     3282     3282
                                                                     3527     3527     3547     3547
                                                                     3564     3564     3568     3568
                                                                     3570     3570     3575     3602
                                                                     3602     3603     3612     3612
                                                                     3677     3677     3683     3683
                                                                     3713     3713     3714     3721
                                                                     3721     3789     3789     3790
                                                                     3790     3870     3870     3889
                                                                     3889     3907     3907     3926
                                                                     3926     3943     3943     3961
                                                                     3961     3979     3979     3999
                                                                     3999     4019     4019     4039
                                                                     4039     4277     4542     4544
                                                                     4545     4545     4546     4602
                                                                     4631     4631     4639     4755
                                                                     4756     4776     4777   442:14
                                                                   444:14     5128     5162     5162
                                                                     5163     5163     5164     5173
                                                                     5180     5188   146:15   149:15
                                                                   149:15   150:15   178:15   181:15
                                                                   181:15   182:15   199:15   200:15
                                                                   200:15   201:15   220:15   221:15
                                                                   221:15   222:15   242:15   243:15
                                                                   243:15   244:15     5526     5528
w                    #define, value: r2, line:       9:5     624:10   625:10   646:10   648:10
                                                                   657:10   659:10   685:10   686:10
                                                                   686:10   688:10   688:10   689:10
                                                                   701:10   702:10   702:10   704:10
                                                                   704:10   705:10   787:10   793:10
                                                                   793:10   806:10   829:10   836:10
                                                                   945:10   995:10  1103:10  1106:10
                                                                  1106:10  1107:10  1108:10  1140:10
                                                                  1141:10  1172:10  1173:10  1176:10
                                                                  1176:10  1178:10  1179:10  1179:10
                                                                  1188:10  1188:10  1189:10  1202:10
                                                                  1269:10  1270:10  1272:10  1275:10
                                                                  1277:10  1280:10  1282:10  1289:10
                                                                  1290:10  1304:10  1305:10  1306:10
                                                                  1307:10  1326:10  1342:10  1354:10
                                                                  1362:10  1368:10  1376:10  1377:10
                                                                  1387:10  1388:10  1398:10  1399:10
                                                                  1410:10  1412:10    88:11      124
                                                                      721      735      740      786
                                                                      797      814     1264     1583
                                                                     1619     1626     1763     1772
                                                                     1813     1816     1867     1878
                                                                     1906     1909     1911     3049
                                                                     3053     3137     3140     3157
                                                                     3164     3608     3609     3997
                                                                     4017     4019     4037     4039
                                                                     4602   124:14   125:14   126:14
                                                                   127:14   127:14   128:14   440:14
                                                                     5171   144:15   176:15   197:15
                                                                   200:15   218:15   221:15   240:15
w_r2                 #define, value: r2, line:      10:5     609:10   609:10   609:10   609:10
                                                                   626:10   626:10   626:10   626:10
                                                                   637:10   637:10   637:10   637:10
                                                                   649:10   649:10   649:10   649:10
                                                                   660:10   660:10   660:10   660:10
                                                                   672:10   672:10   672:10   672:10
                                                                   690:10   690:10   690:10   690:10
                                                                   706:10   706:10   706:10   706:10
                                                                   714:10   714:10   714:10   714:10
                                                                   727:10   727:10   727:10   727:10
                                                                   796:10   796:10   796:10   796:10
                                                                   807:10   807:10   807:10   807:10
                                                                   821:10   821:10   821:10   821:10
                                                                   830:10   830:10   830:10   830:10
                                                                   837:10   837:10   837:10   837:10
                                                                   852:10   852:10   852:10   852:10
                                                                   863:10   863:10   863:10   863:10
                                                                   877:10   877:10   877:10   877:10
                                                                   899:10   899:10   899:10   899:10
                                                                   911:10   911:10   911:10   911:10
                                                                   924:10   924:10   924:10   924:10
                                                                   946:10   952:10   959:10   968:10
                                                                   968:10   971:10   994:10   995:10
                                                                   995:10   995:10   995:10  1030:10
                                                                  1030:10  1030:10  1030:10  1046:10
                                                                  1046:10  1046:10  1046:10  1066:10
                                                                  1066:10  1066:10  1066:10  1086:10
                                                                  1086:10  1086:10  1086:10  1102:10
                                                                  1114:10  1114:10  1114:10  1114:10
                                                                  1146:10  1146:10  1146:10  1146:10
                                                                  1158:10  1158:10  1158:10  1158:10
                                                                  1190:10  1190:10  1190:10  1190:10
                                                                  1203:10  1205:10  1206:10  1206:10
                                                                  1206:10  1206:10  1242:10  1242:10
                                                                  1242:10  1242:10  1286:10  1286:10
                                                                  1286:10  1286:10  1292:10  1292:10
                                                                  1292:10  1292:10  1308:10  1308:10
                                                                  1308:10  1308:10  1325:10  1326:10
                                                                  1326:10  1326:10  1326:10  1361:10
                                                                  1361:10  1362:10  1362:10  1362:10
                                                                  1362:10  1367:10  1368:10  1368:10
                                                                  1368:10  1368:10  1378:10  1378:10
                                                                  1378:10  1378:10  1389:10  1389:10
                                                                  1389:10  1389:10  1401:10  1401:10
                                                                  1401:10  1401:10  1413:10  1413:10
                                                                  1413:10  1413:10    46:11    46:11
                                                                    46:11    46:11      102      102
                                                                      102      102      125      125
                                                                      125      131      141      147
                                                                      151      158      162      406
                                                                      406      406      406      573
                                                                      573      573      573      592
                                                                      592      592      592      738
                                                                      740      740      740      740
                                                                      745      745      745      745
                                                                      774      775      775      782
                                                                      782      796      796      797
                                                                      797      797      797      802
                                                                      802      812      814      814
                                                                      814      814      831      831
                                                                      831      831     1269     1276
                                                                     1276     1276     1276     1582
                                                                     1583     1583     1583     1583
                                                                     1626     1626     1626     1626
                                                                     1642     1642     1642     1642
                                                                     1660     1660     1660     1660
                                                                     1678     1678     1678     1678
                                                                     1696     1697     1698     1698
                                                                     1698     1698     1714     1714
                                                                     1714     1714     1728     1728
                                                                     1728     1728     1749     1749
                                                                     1749     1749     1772     1772
                                                                     1772     1772     1794     1794
                                                                     1794     1794     1816     1816
                                                                     1816     1816     1836     1836
                                                                     1836     1836     1883     1883
                                                                     1890     1890     1890     1890
                                                                     1912     1912     1913     1919
                                                                     1919     1919     1919     1969
                                                                     1970     1972     1972     1972
                                                                     1972     1994     1994     1994
                                                                     1994     2013     2013     2013
                                                                     2013     2031     2031     2031
                                                                     2031     2050     2050     2050
                                                                     2050     3051     3051     3052
                                                                     3052     3053     3053     3053
                                                                     3053     3138     3138     3140
                                                                     3140     3140     3140     3159
                                                                     3159     3159     3164     3164
                                                                     3164     3164     3181     3181
                                                                     3181     3181     3198     3198
                                                                     3198     3198     3215     3215
                                                                     3215     3215     3232     3232
                                                                     3232     3232     3249     3249
                                                                     3249     3249     3266     3266
                                                                     3266     3266     3283     3283
                                                                     3283     3283     3528     3528
                                                                     3528     3528     3548     3548
                                                                     3548     3548     3571     3571
                                                                     3571     3571     3579     3579
                                                                     3579     3579     3614     3614
                                                                     3614     3614     3689     3689
                                                                     3689     3689     3723     3723
                                                                     3723     3723     3791     3791
                                                                     3791     3791     3871     3871
                                                                     3871     3871     3890     3890
                                                                     3890     3890     3908     3908
                                                                     3908     3908     3927     3927
                                                                     3927     3927     3944     3944
                                                                     3944     3944     3962     3962
                                                                     3962     3962     3980     3980
                                                                     3980     3980     3999     4000
                                                                     4000     4000     4000     4020
                                                                     4020     4020     4020     4040
                                                                     4040     4040     4040     4278
                                                                     4278     4278     4278     4327
                                                                     4327     4327     4327     4350
                                                                     4350     4350     4350     4547
                                                                     4547     4547     4547     4590
                                                                     4603     4603     4603     4603
                                                                     4645     4645     4645     4645
                                                                     4721     4721     4721     4721
                                                                     4737     4737     4737     4737
                                                                     4757     4757     4757     4757
                                                                     4778     4778     4778     4778
                                                                   129:14   129:14   129:14   129:14
                                                                   443:14   446:14   446:14   446:14
                                                                   446:14   575:14   575:14   575:14
                                                                   575:14     5129     5129     5129
                                                                     5129     5166     5167     5169
                                                                     5179     5180     5182     5188
                                                                     5189     5189     5189     5189
                                                                     5415     5415     5415     5415
                                                                   146:15   150:15   151:15   151:15
                                                                   151:15   151:15   178:15   182:15
                                                                   183:15   183:15   183:15   183:15
                                                                   202:15   202:15   202:15   202:15
                                                                   223:15   223:15   223:15   223:15
                                                                   243:15   245:15   245:15   245:15
                                                                   245:15    29:17    30:17    33:17
                                                                    33:17    33:17    33:17
x                    #define, value: r3, line:      12:5     609:10   626:10   637:10   649:10
                                                                   660:10   668:10   670:10   672:10
                                                                   682:10   685:10   689:10   690:10
                                                                   698:10   701:10   705:10   706:10
                                                                   714:10   727:10   789:10   790:10
                                                                   796:10   807:10   821:10   830:10
                                                                   837:10   852:10   863:10   877:10
                                                                   899:10   911:10   924:10   944:10
                                                                   953:10   991:10   992:10   995:10
                                                                  1003:10  1017:10  1019:10  1019:10
                                                                  1020:10  1020:10  1021:10  1030:10
                                                                  1045:10  1046:10  1066:10  1086:10
                                                                  1106:10  1114:10  1124:10  1146:10
                                                                  1158:10  1174:10  1175:10  1189:10
                                                                  1190:10  1206:10  1242:10  1286:10
                                                                  1292:10  1308:10  1326:10  1341:10
                                                                  1362:10  1368:10  1378:10  1389:10
                                                                  1401:10  1413:10    46:11    88:11
                                                                    89:11      102      125      406
                                                                      573      592      740      745
                                                                      797      814      831     1276
                                                                     1583     1626     1642     1660
                                                                     1678     1698     1714     1728
                                                                     1749     1772     1794     1816
                                                                     1836     1868     1877     1890
                                                                     1909     1913     1919     1972
                                                                     1994     2013     2031     2050
                                                                     3053     3136     3140     3164
                                                                     3181     3198     3215     3232
                                                                     3249     3266     3283     3528
                                                                     3548     3571     3579     3614
                                                                     3689     3723     3791     3871
                                                                     3890     3908     3927     3944
                                                                     3962     3980     4000     4020
                                                                     4040     4278     4327     4350
                                                                     4547     4591     4595     4603
                                                                     4632     4633     4645     4721
                                                                     4737     4757     4778   129:14
                                                                   446:14   575:14     5129     5189
                                                                     5415   151:15   183:15   202:15
                                                                   223:15   245:15    33:17
x_r3                 #define, value: r3, line:      13:5     609:10   626:10   637:10   649:10
                                                                   660:10   672:10   690:10   706:10
                                                                   714:10   727:10   796:10   807:10
                                                                   821:10   830:10   837:10   852:10
                                                                   863:10   877:10   899:10   911:10
                                                                   924:10   969:10   969:10   970:10
                                                                   984:10   984:10   985:10   991:10
                                                                   995:10  1003:10  1007:10  1017:10
                                                                  1030:10  1044:10  1046:10  1066:10
                                                                  1086:10  1098:10  1114:10  1146:10
                                                                  1158:10  1190:10  1206:10  1242:10
                                                                  1286:10  1292:10  1308:10  1326:10
                                                                  1345:10  1362:10  1368:10  1378:10
                                                                  1389:10  1401:10  1413:10    46:11
                                                                      102      125      406      573
                                                                      592      740      745      783
                                                                      784      788      795      797
                                                                      803      804      807      814
                                                                      831     1276     1583     1626
                                                                     1642     1660     1678     1698
                                                                     1714     1728     1749     1772
                                                                     1794     1816     1836     1884
                                                                     1884     1890     1919     1972
                                                                     1994     2013     2031     2050
                                                                     3053     3139     3140     3164
                                                                     3181     3198     3215     3232
                                                                     3249     3266     3283     3528
                                                                     3548     3571     3579     3614
                                                                     3689     3723     3791     3871
                                                                     3890     3908     3927     3944
                                                                     3962     3980     4000     4020
                                                                     4040     4278     4327     4350
                                                                     4547     4603     4645     4721
                                                                     4737     4757     4778   129:14
                                                                   446:14   575:14     5129     5189
                                                                     5415   147:15   148:15   149:15
                                                                   151:15   179:15   180:15   181:15
                                                                   183:15   202:15   223:15   245:15
                                                                    25:17    29:17    33:17
y                    #define, value: r4, line:      15:5     699:10   702:10   703:10  1009:10
                                                                  1103:10  1108:10  1108:10  1175:10
                                                                  1176:10  1187:10  1188:10  1295:10
                                                                  1298:10  1301:10  1307:10    23:11
                                                                    27:11     5403     5404     5405
                                                                     5406     5408     5409     5410
                                                                     5411     5413     5414
y_r4                 #define, value: r4, line:      16:5     961:10   962:10   975:10   976:10
                                                                  1008:10  1101:10      132      134
                                                                      149      150      160      161
                                                                   442:14   443:14     5161     5164
                                                                     5184    24:17    30:17

Segment             Type 	Mode
----------------------------------------
.sram_1rst_dict_stdio_bufsDATA  	REL 
.sram_2nd_intvecs_unintDATA  	REL 
.tcm_pref_stacks_and_varsDATA  	REL 
.text               CONST  	REL 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
ABORT               REL    CONST UNTYP.           .text      C 
ABORT_NFA           REL    CONST UNTYP.           .text      0 
ABORT_QUIT          REL    CONST UNTYP.           .text      40 
ABS                 REL    CONST UNTYP.           .text      8 
ABS1_NFA            REL    CONST UNTYP.           .text      0 
ACTIVE0             ABS    CONST UNTYP.           ASEG       E000E300 
ACTIVE1             ABS    CONST UNTYP.           ASEG       E000E304 
ACTIVE2             ABS    CONST UNTYP.           ASEG       E000E308 
ADC1_CR1            ABS    CONST UNTYP.           ASEG       40012004 
ADC1_CR2            ABS    CONST UNTYP.           ASEG       40012008 
ADC1_DR             ABS    CONST UNTYP.           ASEG       4001204C 
ADC1_HTR            ABS    CONST UNTYP.           ASEG       40012024 
ADC1_JDR1           ABS    CONST UNTYP.           ASEG       4001203C 
ADC1_JDR2           ABS    CONST UNTYP.           ASEG       40012040 
ADC1_JDR3           ABS    CONST UNTYP.           ASEG       40012044 
ADC1_JDR4           ABS    CONST UNTYP.           ASEG       40012048 
ADC1_JOFR1          ABS    CONST UNTYP.           ASEG       40012014 
ADC1_JOFR2          ABS    CONST UNTYP.           ASEG       40012018 
ADC1_JOFR3          ABS    CONST UNTYP.           ASEG       4001201C 
ADC1_JOFR4          ABS    CONST UNTYP.           ASEG       40012020 
ADC1_JSQR           ABS    CONST UNTYP.           ASEG       40012038 
ADC1_LTR            ABS    CONST UNTYP.           ASEG       40012028 
ADC1_SMPR1          ABS    CONST UNTYP.           ASEG       4001200C 
ADC1_SMPR2          ABS    CONST UNTYP.           ASEG       40012010 
ADC1_SQR1           ABS    CONST UNTYP.           ASEG       4001202C 
ADC1_SQR2           ABS    CONST UNTYP.           ASEG       40012030 
ADC1_SQR3           ABS    CONST UNTYP.           ASEG       40012034 
ADC1_SR             ABS    CONST UNTYP.           ASEG       40012000 
ADC2_CR1            ABS    CONST UNTYP.           ASEG       40012104 
ADC2_CR2            ABS    CONST UNTYP.           ASEG       40012108 
ADC2_DR             ABS    CONST UNTYP.           ASEG       4001214C 
ADC2_HTR            ABS    CONST UNTYP.           ASEG       40012124 
ADC2_JDR1           ABS    CONST UNTYP.           ASEG       4001213C 
ADC2_JDR2           ABS    CONST UNTYP.           ASEG       40012140 
ADC2_JDR3           ABS    CONST UNTYP.           ASEG       40012144 
ADC2_JDR4           ABS    CONST UNTYP.           ASEG       40012148 
ADC2_JOFR1          ABS    CONST UNTYP.           ASEG       40012114 
ADC2_JOFR2          ABS    CONST UNTYP.           ASEG       40012118 
ADC2_JOFR3          ABS    CONST UNTYP.           ASEG       4001211C 
ADC2_JOFR4          ABS    CONST UNTYP.           ASEG       40012120 
ADC2_JSQR           ABS    CONST UNTYP.           ASEG       40012138 
ADC2_LTR            ABS    CONST UNTYP.           ASEG       40012128 
ADC2_SMPR1          ABS    CONST UNTYP.           ASEG       4001210C 
ADC2_SMPR2          ABS    CONST UNTYP.           ASEG       40012110 
ADC2_SQR1           ABS    CONST UNTYP.           ASEG       4001212C 
ADC2_SQR2           ABS    CONST UNTYP.           ASEG       40012130 
ADC2_SQR3           ABS    CONST UNTYP.           ASEG       40012134 
ADC2_SR             ABS    CONST UNTYP.           ASEG       40012100 
ADC3_CR1            ABS    CONST UNTYP.           ASEG       40012204 
ADC3_CR2            ABS    CONST UNTYP.           ASEG       40012208 
ADC3_DR             ABS    CONST UNTYP.           ASEG       4001224C 
ADC3_HTR            ABS    CONST UNTYP.           ASEG       40012224 
ADC3_JDR1           ABS    CONST UNTYP.           ASEG       4001223C 
ADC3_JDR2           ABS    CONST UNTYP.           ASEG       40012240 
ADC3_JDR3           ABS    CONST UNTYP.           ASEG       40012244 
ADC3_JDR4           ABS    CONST UNTYP.           ASEG       40012248 
ADC3_JOFR1          ABS    CONST UNTYP.           ASEG       40012214 
ADC3_JOFR2          ABS    CONST UNTYP.           ASEG       40012218 
ADC3_JOFR3          ABS    CONST UNTYP.           ASEG       4001221C 
ADC3_JOFR4          ABS    CONST UNTYP.           ASEG       40012220 
ADC3_JSQR           ABS    CONST UNTYP.           ASEG       40012238 
ADC3_LTR            ABS    CONST UNTYP.           ASEG       40012228 
ADC3_SMPR1          ABS    CONST UNTYP.           ASEG       4001220C 
ADC3_SMPR2          ABS    CONST UNTYP.           ASEG       40012210 
ADC3_SQR1           ABS    CONST UNTYP.           ASEG       4001222C 
ADC3_SQR2           ABS    CONST UNTYP.           ASEG       40012230 
ADC3_SQR3           ABS    CONST UNTYP.           ASEG       40012234 
ADC3_SR             ABS    CONST UNTYP.           ASEG       40012200 
ADC_CCR             ABS    CONST UNTYP.           ASEG       40012304 
ADC_CDR             ABS    CONST UNTYP.           ASEG       40012308 
ADC_CSR             ABS    CONST UNTYP.           ASEG       40012300 
AGAIN               REL    CONST UNTYP.           .text      C 
AGAIN_NFA           REL    CONST UNTYP.           .text      0 
AIRCR               ABS    CONST UNTYP.           ASEG       E000ED0C 
ALIGN               REL    CONST UNTYP.           .text      C 
ALIGN32_DP_FF_PAD   REL    CONST UNTYP.           .text      C 
ALIGNED             REL    CONST UNTYP.           .text      C 
ALIGNED_NFA         REL    CONST UNTYP.           .text      0 
ALIGN_NFA           REL    CONST UNTYP.           .text      0 
ALIGN_PAD_DO        REL    CONST UNTYP.           .text      2C 
ALLOT               REL    CONST UNTYP.           .text      C 
ALLOTOK             REL    CONST UNTYP.           .text      2C 
ALLOT_NFA           REL    CONST UNTYP.           .text      0 
ALLOT_PRIM          REL    CONST UNTYP.           .text      1C8 
ALL_UNINIT_SRAM2_ENDABS    CONST UNTYP.           ASEG       2001E000 
ALL_UNINIT_SRAM2_FREE_STARTREL    CONST UNTYP.           .sram_2nd_ 208 
ALL_UNINIT_SRAM2_STARTREL    CONST UNTYP.           .sram_2nd_ 200 
ANDBITS             REL    CONST UNTYP.           .text      C 
ANDBITS_NFA         REL    CONST UNTYP.           .text      0 
ANDD                REL    CONST UNTYP.           .text      8 
ANDD_NFA            REL    CONST UNTYP.           .text      0 
APCONT              REL    CONST UNTYP.           .text      58 
APDONE              REL    CONST UNTYP.           .text      A0 
APGOOD              REL    CONST UNTYP.           .text      80 
APNEXT              REL    CONST UNTYP.           .text      14 
ASR                 REL    CONST UNTYP.           .text      8 
ASR_NFA             REL    CONST UNTYP.           .text      0 
ASSUREPAGE          REL    CONST UNTYP.           .text      0 
AT                  REL    CONST UNTYP.           .text      8 
AT_NFA              REL    CONST UNTYP.           .text      0 
BACK                REL    CONST UNTYP.           .text      4DC 
BACKSLASH           REL    CONST UNTYP.           .text      8 
BACKSLASH_NFA       REL    CONST UNTYP.           .text      0 
BACKSPACE_CHAR      REL    CONST UNTYP.           .text      14 
BASE_FROM_R12       REL    CONST UNTYP.           .text      0 
BASE_NFA            REL    CONST UNTYP.           .text      0 
BASE_RESET_THEN_ERRORREL    CONST UNTYP.           .text      C0 
BASE_SV             REL    CONST UNTYP.           .text      C 
BASE_TO_R12         REL    CONST UNTYP.           .text      0 
BAUD1               REL    CONST UNTYP.           .text      50 
BAUDDEFAULT         REL    CONST UNTYP.           .text      44 
BBRAM               ABS    CONST UNTYP.           ASEG       40024000 
BBRAM_END           ABS    CONST UNTYP.           ASEG       40025000 
BBRAM_START         ABS    CONST UNTYP.           ASEG       40024000 
BCOMP               REL    CONST UNTYP.           .text      10 
BCOMP_NFA           REL    CONST UNTYP.           .text      0 
BDIGS               REL    CONST UNTYP.           .text      8 
BDIGS_NFA           REL    CONST UNTYP.           .text      0 
BEGIN               REL    CONST UNTYP.           .text      C 
BEGIN_NFA           REL    CONST UNTYP.           .text      0 
BELL                REL    CONST UNTYP.           .text      0 
BFAR                ABS    CONST UNTYP.           ASEG       E000ED38 
BIN                 REL    CONST UNTYP.           .text      8 
BIN_NFA             REL    CONST UNTYP.           .text      0 
BITOFF              REL    CONST UNTYP.           .text      40 
BITON               REL    CONST UNTYP.           .text      34 
BLANK               REL    CONST UNTYP.           .text      8 
BLANKS              REL    CONST UNTYP.           .text      C 
BLANKS_NFA          REL    CONST UNTYP.           .text      0 
BLANK_NFA           REL    CONST UNTYP.           .text      0 
BOTTOM_PSTACK       REL    CONST UNTYP.           .tcm_pref_ 368 
BOTTOM_RSTACK       REL    CONST UNTYP.           .tcm_pref_ 158 
BRAN                REL    CONST UNTYP.           .text      0 
BRAN1               REL    CONST UNTYP.           .text      1 
BSOUT               REL    CONST UNTYP.           .text      1C 
BUILDS              REL    CONST UNTYP.           .text      C 
BUILDS_NFA          REL    CONST UNTYP.           .text      0 
BYE                 REL    CONST UNTYP.           .text      8 
BYE_NFA             REL    CONST UNTYP.           .text      0 
CAT                 REL    CONST UNTYP.           .text      8 
CATLT7F             REL    CONST UNTYP.           .text      0 
CAT_NFA             REL    CONST UNTYP.           .text      0 
CCOMMA              REL    CONST UNTYP.           .text      8 
CCOMMA_NFA          REL    CONST UNTYP.           .text      0 
CCOMMA_OK           REL    CONST UNTYP.           .text      20 
CCR                 ABS    CONST UNTYP.           ASEG       E000ED14 
CFA                 REL    CONST UNTYP.           .text      8 
CFA_CREATE_DOES_GOTOREL    CONST UNTYP.           .text      14 
CFA_LIT             REL    CONST UNTYP.           .text      A0 
CFA_NFA             REL    CONST UNTYP.           .text      0 
CFA_PDOTQ           REL    CONST UNTYP.           .text      C0 
CFA_SEMIS           REL    CONST UNTYP.           .text      F8 
CFSR                ABS    CONST UNTYP.           ASEG       E000ED28 
CHECK_NEXT_FLASH_SAVEREL    CONST UNTYP.           .text      C 
CLRBIT              REL    CONST UNTYP.           .text      C 
CLRBITS             REL    CONST UNTYP.           .text      C 
CLRBITS_NFA         REL    CONST UNTYP.           .text      0 
CLRBIT_NFA          REL    CONST UNTYP.           .text      0 
CLRENA0             ABS    CONST UNTYP.           ASEG       E000E180 
CLRENA1             ABS    CONST UNTYP.           ASEG       E000E184 
CLRENA2             ABS    CONST UNTYP.           ASEG       E000E188 
CLRPEND0            ABS    CONST UNTYP.           ASEG       E000E280 
CLRPEND1            ABS    CONST UNTYP.           ASEG       E000E284 
CLRPEND2            ABS    CONST UNTYP.           ASEG       E000E288 
CLRSUFFIX           REL    CONST UNTYP.           .text      55 
CLS                 REL    CONST UNTYP.           .text      8 
CLS_NFA             REL    CONST UNTYP.           .text      0 
CM1                 REL    CONST UNTYP.           .text      11 
CM2                 REL    CONST UNTYP.           .text      21 
CMOVE               REL    CONST UNTYP.           .text      C 
CMOVE_NFA           REL    CONST UNTYP.           .text      0 
CMSIS_DISABLE_IRQS  REL    CONST UNTYP.           .text      14 
CMSIS_ENABLE_IRQS   REL    CONST UNTYP.           .text      10 
COLD                REL    CONST UNTYP.           .text      C 
COLD_NFA            REL    CONST UNTYP.           .text      0 
COLON               REL    CONST UNTYP.           .text      8 
COLON_NFA           REL    CONST UNTYP.           .text      0 
COMMA               REL    CONST UNTYP.           .text      8 
COMMA_NFA           REL    CONST UNTYP.           .text      0 
COMMA_OK            REL    CONST UNTYP.           .text      20 
COMMA_PRIM          REL    CONST UNTYP.           .text      1D8 
COMP                REL    CONST UNTYP.           .text      35C 
CON                 REL    CONST UNTYP.           .text      8 
CONSTANT            REL    CONST UNTYP.           .text      10 
CONSTANT_NFA        REL    CONST UNTYP.           .text      0 
CON_NFA             REL    CONST UNTYP.           .text      0 
COUNT               REL    CONST UNTYP.           .text      C 
COUNT_NFA           REL    CONST UNTYP.           .text      0 
CO_END              REL    CONST UNTYP.           .text      BC 
CPUIDBR             ABS    CONST UNTYP.           ASEG       E000ED00 
CR                  REL    CONST UNTYP.           .text      8 
CRC_CR              ABS    CONST UNTYP.           ASEG       40023008 
CRC_DR              ABS    CONST UNTYP.           ASEG       40023000 
CRC_IDR             ABS    CONST UNTYP.           ASEG       40023004 
CREA1               REL    CONST UNTYP.           .text      5C 
CREATE              REL    CONST UNTYP.           .text      C 
CREATED_OK          REL    CONST UNTYP.           .text      74 
CREATEOK            REL    CONST UNTYP.           .text      30 
CREATE_DOES_GOTO    REL    CONST UNTYP.           .text      13 
CREATE_NFA          REL    CONST UNTYP.           .text      0 
CRS                 REL    CONST UNTYP.           .text      8 
CRS_BEGIN           REL    CONST UNTYP.           .text      14 
CRS_NFA             REL    CONST UNTYP.           .text      0 
CR_CHECK            REL    CONST UNTYP.           .text      13 
CR_NFA              REL    CONST UNTYP.           .text      0 
CSDP                REL    CONST UNTYP.           .tcm_pref_ 128 
CSDP_SV             REL    CONST UNTYP.           .text      504 
CSP                 REL    CONST UNTYP.           .tcm_pref_ 13C 
CSP_SV              REL    CONST UNTYP.           .text      1A0 
CSTATE              REL    CONST UNTYP.           .tcm_pref_ 110 
CSTORE              REL    CONST UNTYP.           .text      8 
CSTORE_NFA          REL    CONST UNTYP.           .text      0 
CS_ADC              REL    CONST UNTYP.           .text      C 
CS_ADC_NFA          REL    CONST UNTYP.           .text      0 
CS_ADC_OFF          REL    CONST UNTYP.           .text      58 
CS_ADC_ON           REL    CONST UNTYP.           .text      18 
CS_BT               REL    CONST UNTYP.           .text      C 
CS_BT_NFA           REL    CONST UNTYP.           .text      0 
CS_BT_OFF           REL    CONST UNTYP.           .text      58 
CS_BT_ON            REL    CONST UNTYP.           .text      18 
CS_DAC              REL    CONST UNTYP.           .text      C 
CS_DAC_NFA          REL    CONST UNTYP.           .text      0 
CS_DAC_OFF          REL    CONST UNTYP.           .text      58 
CS_DAC_ON           REL    CONST UNTYP.           .text      18 
CURRENT             REL    CONST UNTYP.           .tcm_pref_ 130 
CURRENT_NFA         REL    CONST UNTYP.           .text      0 
CURRENT_SV          REL    CONST UNTYP.           .text      C 
CWPJR02_at_gmail_dot_comABS    CONST UNTYP.           ASEG       1 
C_CMSIS_DISABLE_IRQSABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
C_CMSIS_ENABLE_IRQS ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
DABS                REL    CONST UNTYP.           .text      C 
DABSF               REL    CONST UNTYP.           .text      C 
DABS_NFA            REL    CONST UNTYP.           .text      0 
DACW_NFA            REL    CONST UNTYP.           .text      0 
DAC_CR              ABS    CONST UNTYP.           ASEG       40007400 
DAC_DHR12L1         ABS    CONST UNTYP.           ASEG       4000740C 
DAC_DHR12L2         ABS    CONST UNTYP.           ASEG       40007418 
DAC_DHR12LD         ABS    CONST UNTYP.           ASEG       40007424 
DAC_DHR12R1         ABS    CONST UNTYP.           ASEG       40007408 
DAC_DHR12R2         ABS    CONST UNTYP.           ASEG       40007414 
DAC_DHR12RD         ABS    CONST UNTYP.           ASEG       40007420 
DAC_DHR8R1          ABS    CONST UNTYP.           ASEG       40007410 
DAC_DHR8R2          ABS    CONST UNTYP.           ASEG       4000741C 
DAC_DHR8RD          ABS    CONST UNTYP.           ASEG       40007428 
DAC_DOR1            ABS    CONST UNTYP.           ASEG       4000742C 
DAC_DOR2            ABS    CONST UNTYP.           ASEG       40007430 
DAC_SR              ABS    CONST UNTYP.           ASEG       40007434 
DAC_SWTRIGR         ABS    CONST UNTYP.           ASEG       40007404 
DBASE               REL    CONST UNTYP.           .text      C 
DBASEDONE           REL    CONST UNTYP.           .text      184 
DBASE_NFA           REL    CONST UNTYP.           .text      0 
DBAUD               REL    CONST UNTYP.           .sram_2nd_ 200 
DBGMCU_APB1_FZ      ABS    CONST UNTYP.           ASEG       E0042008 
DBGMCU_APB2_FZ      ABS    CONST UNTYP.           ASEG       E004200C 
DBGMCU_CR           ABS    CONST UNTYP.           ASEG       E0042004 
DBGMCU_IDCODE       ABS    CONST UNTYP.           ASEG       E0042000 
DBSUSEDOT           REL    CONST UNTYP.           .text      80 
DBSUSEDUDOT         REL    CONST UNTYP.           .text      7C 
DBUSEDUDOT          REL    CONST UNTYP.           .text      180 
DCEN                ABS    CONST UNTYP.           .text      400 
DDOT                REL    CONST UNTYP.           .text      8 
DDOTR               REL    CONST UNTYP.           .text      8 
DDOTR_NFA           REL    CONST UNTYP.           .text      0 
DDOT_NFA            REL    CONST UNTYP.           .text      0 
DDUP1               REL    CONST UNTYP.           .text      20 
DDUP_NFA            REL    CONST UNTYP.           .text      0 
DECIMAL             REL    CONST UNTYP.           .text      C 
DECIMAL_NFA         REL    CONST UNTYP.           .text      0 
DEC_OR_HEX          REL    CONST UNTYP.           .text      E8 
DEFAULT_BASE        ABS    CONST UNTYP.           ASEG       10 
DEFAULT_BAUD        ABS    CONST UNTYP.           ASEG       1C200 
DELAY               REL    CONST UNTYP.           .text      C 
DELAY_DONE          REL    CONST UNTYP.           .text      2B 
DELAY_LOOP          REL    CONST UNTYP.           .text      25 
DELAY_NFA           REL    CONST UNTYP.           .text      0 
DFIND               REL    CONST UNTYP.           .text      340 
DFSR                ABS    CONST UNTYP.           ASEG       E000ED30 
DICTFULL_ABORT      REL    CONST UNTYP.           .text      1B0 
DICTSPACE           REL    CONST UNTYP.           .text      0 
DICTSPACE_END       REL    CONST UNTYP.           .sram_1rst FA10 
DICTSPACE_START     REL    CONST UNTYP.           .sram_1rst 10 
DIG                 REL    CONST UNTYP.           .text      8 
DIG1                REL    CONST UNTYP.           .text      40 
DIGI1               REL    CONST UNTYP.           .text      17 
DIGI2               REL    CONST UNTYP.           .text      35 
DIGIT               REL    CONST UNTYP.           .text      C 
DIGIT_NFA           REL    CONST UNTYP.           .text      0 
DIGS                REL    CONST UNTYP.           .text      8 
DIGS1               REL    CONST UNTYP.           .text      C 
DIGS_NFA            REL    CONST UNTYP.           .text      0 
DIG_NFA             REL    CONST UNTYP.           .text      0 
DLIT1               REL    CONST UNTYP.           .text      30 
DLITERAL            REL    CONST UNTYP.           .text      10 
DLITERAL_NFA        REL    CONST UNTYP.           .text      0 
DMA1_HIFCR          ABS    CONST UNTYP.           ASEG       4002600C 
DMA1_HISR           ABS    CONST UNTYP.           ASEG       40026004 
DMA1_LIFCR          ABS    CONST UNTYP.           ASEG       40026008 
DMA1_LISR           ABS    CONST UNTYP.           ASEG       40026000 
DMA1_S0CR           ABS    CONST UNTYP.           ASEG       40026010 
DMA1_S0FCR          ABS    CONST UNTYP.           ASEG       40026024 
DMA1_S0M0AR         ABS    CONST UNTYP.           ASEG       4002601C 
DMA1_S0M1AR         ABS    CONST UNTYP.           ASEG       40026020 
DMA1_S0NDTR         ABS    CONST UNTYP.           ASEG       40026014 
DMA1_S0PAR          ABS    CONST UNTYP.           ASEG       40026018 
DMA1_S1CR           ABS    CONST UNTYP.           ASEG       40026028 
DMA1_S1FCR          ABS    CONST UNTYP.           ASEG       4002603C 
DMA1_S1M0AR         ABS    CONST UNTYP.           ASEG       40026034 
DMA1_S1M1AR         ABS    CONST UNTYP.           ASEG       40026038 
DMA1_S1NDTR         ABS    CONST UNTYP.           ASEG       4002602C 
DMA1_S1PAR          ABS    CONST UNTYP.           ASEG       40026030 
DMA1_S2CR           ABS    CONST UNTYP.           ASEG       40026040 
DMA1_S2FCR          ABS    CONST UNTYP.           ASEG       40026054 
DMA1_S2M0AR         ABS    CONST UNTYP.           ASEG       4002604C 
DMA1_S2M1AR         ABS    CONST UNTYP.           ASEG       40026050 
DMA1_S2NDTR         ABS    CONST UNTYP.           ASEG       40026044 
DMA1_S2PAR          ABS    CONST UNTYP.           ASEG       40026048 
DMA1_S3CR           ABS    CONST UNTYP.           ASEG       40026058 
DMA1_S3FCR          ABS    CONST UNTYP.           ASEG       4002606C 
DMA1_S3M0AR         ABS    CONST UNTYP.           ASEG       40026064 
DMA1_S3M1AR         ABS    CONST UNTYP.           ASEG       40026068 
DMA1_S3NDTR         ABS    CONST UNTYP.           ASEG       4002605C 
DMA1_S3PAR          ABS    CONST UNTYP.           ASEG       40026060 
DMA1_S4CR           ABS    CONST UNTYP.           ASEG       40026070 
DMA1_S4FCR          ABS    CONST UNTYP.           ASEG       40026084 
DMA1_S4M0AR         ABS    CONST UNTYP.           ASEG       4002607C 
DMA1_S4M1AR         ABS    CONST UNTYP.           ASEG       40026080 
DMA1_S4NDTR         ABS    CONST UNTYP.           ASEG       40026074 
DMA1_S4PAR          ABS    CONST UNTYP.           ASEG       40026078 
DMA1_S5CR           ABS    CONST UNTYP.           ASEG       40026088 
DMA1_S5FCR          ABS    CONST UNTYP.           ASEG       4002609C 
DMA1_S5M0AR         ABS    CONST UNTYP.           ASEG       40026094 
DMA1_S5M1AR         ABS    CONST UNTYP.           ASEG       40026098 
DMA1_S5NDTR         ABS    CONST UNTYP.           ASEG       4002608C 
DMA1_S5PAR          ABS    CONST UNTYP.           ASEG       40026090 
DMA1_S6CR           ABS    CONST UNTYP.           ASEG       400260A0 
DMA1_S6FCR          ABS    CONST UNTYP.           ASEG       400260B4 
DMA1_S6M0AR         ABS    CONST UNTYP.           ASEG       400260AC 
DMA1_S6M1AR         ABS    CONST UNTYP.           ASEG       400260B0 
DMA1_S6NDTR         ABS    CONST UNTYP.           ASEG       400260A4 
DMA1_S6PAR          ABS    CONST UNTYP.           ASEG       400260A8 
DMA1_S7CR           ABS    CONST UNTYP.           ASEG       400260B8 
DMA1_S7FCR          ABS    CONST UNTYP.           ASEG       400260CC 
DMA1_S7M0AR         ABS    CONST UNTYP.           ASEG       400260C4 
DMA1_S7M1AR         ABS    CONST UNTYP.           ASEG       400260C8 
DMA1_S7NDTR         ABS    CONST UNTYP.           ASEG       400260BC 
DMA1_S7PAR          ABS    CONST UNTYP.           ASEG       400260C0 
DMA2_HIFCR          ABS    CONST UNTYP.           ASEG       4002640C 
DMA2_HISR           ABS    CONST UNTYP.           ASEG       40026404 
DMA2_LIFCR          ABS    CONST UNTYP.           ASEG       40026408 
DMA2_LISR           ABS    CONST UNTYP.           ASEG       40026400 
DMA2_S0CR           ABS    CONST UNTYP.           ASEG       40026410 
DMA2_S0FCR          ABS    CONST UNTYP.           ASEG       40026424 
DMA2_S0M0AR         ABS    CONST UNTYP.           ASEG       4002641C 
DMA2_S0M1AR         ABS    CONST UNTYP.           ASEG       40026420 
DMA2_S0NDTR         ABS    CONST UNTYP.           ASEG       40026414 
DMA2_S0PAR          ABS    CONST UNTYP.           ASEG       40026418 
DMA2_S1CR           ABS    CONST UNTYP.           ASEG       40026428 
DMA2_S1FCR          ABS    CONST UNTYP.           ASEG       4002643C 
DMA2_S1M0AR         ABS    CONST UNTYP.           ASEG       40026434 
DMA2_S1M1AR         ABS    CONST UNTYP.           ASEG       40026438 
DMA2_S1NDTR         ABS    CONST UNTYP.           ASEG       4002642C 
DMA2_S1PAR          ABS    CONST UNTYP.           ASEG       40026430 
DMA2_S2CR           ABS    CONST UNTYP.           ASEG       40026440 
DMA2_S2FCR          ABS    CONST UNTYP.           ASEG       40026454 
DMA2_S2M0AR         ABS    CONST UNTYP.           ASEG       4002644C 
DMA2_S2M1AR         ABS    CONST UNTYP.           ASEG       40026450 
DMA2_S2NDTR         ABS    CONST UNTYP.           ASEG       40026444 
DMA2_S2PAR          ABS    CONST UNTYP.           ASEG       40026448 
DMA2_S3CR           ABS    CONST UNTYP.           ASEG       40026458 
DMA2_S3FCR          ABS    CONST UNTYP.           ASEG       4002646C 
DMA2_S3M0AR         ABS    CONST UNTYP.           ASEG       40026464 
DMA2_S3M1AR         ABS    CONST UNTYP.           ASEG       40026468 
DMA2_S3NDTR         ABS    CONST UNTYP.           ASEG       4002645C 
DMA2_S3PAR          ABS    CONST UNTYP.           ASEG       40026460 
DMA2_S4CR           ABS    CONST UNTYP.           ASEG       40026470 
DMA2_S4FCR          ABS    CONST UNTYP.           ASEG       40026484 
DMA2_S4M0AR         ABS    CONST UNTYP.           ASEG       4002647C 
DMA2_S4M1AR         ABS    CONST UNTYP.           ASEG       40026480 
DMA2_S4NDTR         ABS    CONST UNTYP.           ASEG       40026474 
DMA2_S4PAR          ABS    CONST UNTYP.           ASEG       40026478 
DMA2_S5CR           ABS    CONST UNTYP.           ASEG       40026488 
DMA2_S5FCR          ABS    CONST UNTYP.           ASEG       4002649C 
DMA2_S5M0AR         ABS    CONST UNTYP.           ASEG       40026494 
DMA2_S5M1AR         ABS    CONST UNTYP.           ASEG       40026498 
DMA2_S5NDTR         ABS    CONST UNTYP.           ASEG       4002648C 
DMA2_S5PAR          ABS    CONST UNTYP.           ASEG       40026490 
DMA2_S6CR           ABS    CONST UNTYP.           ASEG       400264A0 
DMA2_S6FCR          ABS    CONST UNTYP.           ASEG       400264B4 
DMA2_S6M0AR         ABS    CONST UNTYP.           ASEG       400264AC 
DMA2_S6M1AR         ABS    CONST UNTYP.           ASEG       400264B0 
DMA2_S6NDTR         ABS    CONST UNTYP.           ASEG       400264A4 
DMA2_S6PAR          ABS    CONST UNTYP.           ASEG       400264A8 
DMA2_S7CR           ABS    CONST UNTYP.           ASEG       400264B8 
DMA2_S7FCR          ABS    CONST UNTYP.           ASEG       400264CC 
DMA2_S7M0AR         ABS    CONST UNTYP.           ASEG       400264C4 
DMA2_S7M1AR         ABS    CONST UNTYP.           ASEG       400264C8 
DMA2_S7NDTR         ABS    CONST UNTYP.           ASEG       400264BC 
DMA2_S7PAR          ABS    CONST UNTYP.           ASEG       400264C0 
DNEGATE             REL    CONST UNTYP.           .text      C 
DNEGATE_NFA         REL    CONST UNTYP.           .text      0 
DO                  REL    CONST UNTYP.           .text      8 
DOCOL               REL    CONST UNTYP.           .text      1 
DOCON               REL    CONST UNTYP.           .text      1 
DOES                REL    CONST UNTYP.           .text      C 
DOES_NFA            REL    CONST UNTYP.           .text      0 
DOT                 REL    CONST UNTYP.           .text      8 
DOTBASE             REL    CONST UNTYP.           .text      14C 
DOTBIN              REL    CONST UNTYP.           .text      8 
DOTBIN_NFA          REL    CONST UNTYP.           .text      0 
DOTDEC              REL    CONST UNTYP.           .text      8 
DOTDEC_NFA          REL    CONST UNTYP.           .text      0 
DOTDICTSPACE        REL    CONST UNTYP.           .text      8 
DOTDICTSPACE_NFA    REL    CONST UNTYP.           .text      0 
DOTHEX              REL    CONST UNTYP.           .text      8 
DOTHEX_NFA          REL    CONST UNTYP.           .text      0 
DOTQ                REL    CONST UNTYP.           .text      8 
DOTQ1               REL    CONST UNTYP.           .text      4C 
DOTQ2               REL    CONST UNTYP.           .text      5C 
DOTQ_NFA            REL    CONST UNTYP.           .text      0 
DOTR                REL    CONST UNTYP.           .text      8 
DOTRU               REL    CONST UNTYP.           .text      8 
DOTRU_NFA           REL    CONST UNTYP.           .text      0 
DOTR_NFA            REL    CONST UNTYP.           .text      0 
DOTS                REL    CONST UNTYP.           .text      8 
DOTSBASE            REL    CONST UNTYP.           .text      98 
DOTSBIN             REL    CONST UNTYP.           .text      8 
DOTSBIN_NFA         REL    CONST UNTYP.           .text      0 
DOTSDEC             REL    CONST UNTYP.           .text      8 
DOTSDEC_NFA         REL    CONST UNTYP.           .text      0 
DOTSEND             REL    CONST UNTYP.           .text      90 
DOTSHEX             REL    CONST UNTYP.           .text      8 
DOTSHEX_NFA         REL    CONST UNTYP.           .text      0 
DOTSLOOP            REL    CONST UNTYP.           .text      4C 
DOTS_NFA            REL    CONST UNTYP.           .text      0 
DOTVARSPACE         REL    CONST UNTYP.           .text      8 
DOTVARSPACE_NFA     REL    CONST UNTYP.           .text      0 
DOT_BASE_SUFFIX     REL    CONST UNTYP.           .text      11C 
DOT_NFA             REL    CONST UNTYP.           .text      0 
DOVAR               REL    CONST UNTYP.           .text      1 
DO_NFA              REL    CONST UNTYP.           .text      0 
DP                  REL    CONST UNTYP.           .tcm_pref_ 124 
DPLUS               REL    CONST UNTYP.           .text      8 
DPLUS_NFA           REL    CONST UNTYP.           .text      0 
DPL_NFA             REL    CONST UNTYP.           .text      0 
DPL_RESET           REL    CONST UNTYP.           .text      B4 
DPL_SV              REL    CONST UNTYP.           .text      8 
DPL_ZERO_INCR       REL    CONST UNTYP.           .text      D4 
DPM                 REL    CONST UNTYP.           .text      524 
DPM1                REL    CONST UNTYP.           .text      538 
DP_NFA              REL    CONST UNTYP.           .text      0 
DP_SV               REL    CONST UNTYP.           .text      8 
DROP                REL    CONST UNTYP.           .text      C 
DROP_NFA            REL    CONST UNTYP.           .text      0 
DUMP                REL    CONST UNTYP.           .text      C 
DUMP_ADDR_LINE      REL    CONST UNTYP.           .text      28 
DUMP_CONT           REL    CONST UNTYP.           .text      78 
DUMP_EACH_LOC       REL    CONST UNTYP.           .text      48 
DUMP_NFA            REL    CONST UNTYP.           .text      0 
DUP                 REL    CONST UNTYP.           .text      8 
DUP_NFA             REL    CONST UNTYP.           .text      0 
DZERO               REL    CONST UNTYP.           .text      37 
EDIGS               REL    CONST UNTYP.           .text      8 
EDIGS_NFA           REL    CONST UNTYP.           .text      0 
EHOFF               REL    CONST UNTYP.           .text      C 
EHOFF_NFA           REL    CONST UNTYP.           .text      0 
EHON                REL    CONST UNTYP.           .text      C 
EHON_NFA            REL    CONST UNTYP.           .text      0 
EIGHT               REL    CONST UNTYP.           .text      14 
EL1                 REL    CONST UNTYP.           .text      5C 
ELSE                REL    CONST UNTYP.           .text      C 
ELSE_NFA            REL    CONST UNTYP.           .text      0 
EMIT                REL    CONST UNTYP.           .text      C 
EMIT_NFA            REL    CONST UNTYP.           .text      0 
ENCL                REL    CONST UNTYP.           .text      C 
ENCL1               REL    CONST UNTYP.           .text      D 
ENCL2               REL    CONST UNTYP.           .text      39 
ENCL3               REL    CONST UNTYP.           .text      47 
ENCL4               REL    CONST UNTYP.           .text      47 
ENCL_NFA            REL    CONST UNTYP.           .text      0 
ENDIF               REL    CONST UNTYP.           .text      C 
ENDIF_NFA           REL    CONST UNTYP.           .text      0 
END_RAMVARSPACE_SV_STARTREL    CONST UNTYP.           .tcm_pref_ 104 
EOL_SEND_XOFF       REL    CONST UNTYP.           .text      19 
EQUAL               REL    CONST UNTYP.           .text      8 
EQUAL_NFA           REL    CONST UNTYP.           .text      0 
EQUAL_TRUE          REL    CONST UNTYP.           .text      23 
ERASE               REL    CONST UNTYP.           .text      C 
ERASE_NFA           REL    CONST UNTYP.           .text      0 
ERROR               REL    CONST UNTYP.           .text      C 
ERROR_FIXUP         REL    CONST UNTYP.           .text      48 
ERROR_HALT          REL    CONST UNTYP.           .tcm_pref_ 138 
ERROR_NFA           REL    CONST UNTYP.           .text      0 
EXEC                REL    CONST UNTYP.           .text      C 
EXEC_ACTION         REL    CONST UNTYP.           .text      9 
EXEC_NFA            REL    CONST UNTYP.           .text      0 
EXPE1               REL    CONST UNTYP.           .text      34 
EXPE2               REL    CONST UNTYP.           .text      D0 
EXPE3               REL    CONST UNTYP.           .text      128 
EXPE33              REL    CONST UNTYP.           .text      12C 
EXPE4               REL    CONST UNTYP.           .text      100 
EXPE5               REL    CONST UNTYP.           .text      104 
EXPE6               REL    CONST UNTYP.           .text      C4 
EXPE7               REL    CONST UNTYP.           .text      C8 
EXPECT              REL    CONST UNTYP.           .text      C 
EXPECT_NFA          REL    CONST UNTYP.           .text      0 
EXTI_EMR            ABS    CONST UNTYP.           ASEG       40013C04 
EXTI_FTSR           ABS    CONST UNTYP.           ASEG       40013C0C 
EXTI_IMR            ABS    CONST UNTYP.           ASEG       40013C00 
EXTI_PR             ABS    CONST UNTYP.           ASEG       40013C14 
EXTI_RTSR           ABS    CONST UNTYP.           ASEG       40013C08 
EXTI_SWIER          ABS    CONST UNTYP.           ASEG       40013C10 
FENCE               REL    CONST UNTYP.           .tcm_pref_ 12C 
FENCE_NFA           REL    CONST UNTYP.           .text      0 
FENCE_SV            REL    CONST UNTYP.           .text      C 
FEND                REL    CONST UNTYP.           .text      1B 
FFDONE              REL    CONST UNTYP.           .text      F0 
FF_FINISH           REL    CONST UNTYP.           .text      B8 
FILL                REL    CONST UNTYP.           .text      C 
FILL_NFA            REL    CONST UNTYP.           .text      0 
FISH                REL    CONST UNTYP.           .text      C 
FISH_Author_Clyde_W_Phillips_JrABS    CONST UNTYP.           ASEG       1 
FISH_Copyright_2014_2018ABS    CONST UNTYP.           ASEG       1 
FISH_FUNDING_Contributions_NEEDED
                    ABS    CONST UNTYP.           ASEG       1 
FISH_NFA            REL    CONST UNTYP.           .text      0 
FISH_ONLY           REL    CONST UNTYP.           .text      10 
FISH_ONLY_NFA       REL    CONST UNTYP.           .text      0 
FISH_Questions_WelcomeABS    CONST UNTYP.           ASEG       1 
FISH_Team_A_Team_ForthABS    CONST UNTYP.           ASEG       1 
FISH_return2c       REL    CONST PUB UNTYP.       .text      0 
FLASHWRITE          REL    CONST UNTYP.           .text      0 
FLASH_ACR           ABS    CONST UNTYP.           ASEG       40023C00 
FLASH_CODE_RS       REL    CONST UNTYP.           .sram_1rst FED4 
FLASH_CODE_SRAM2_ENDREL    CONST UNTYP.           .sram_1rst FF18 
FLASH_CODE_SRAM2_STARTREL    CONST UNTYP.           .sram_1rst FED4 
FLASH_COPY_LOOP     REL    CONST UNTYP.           .text      B 
FLASH_CR            ABS    CONST UNTYP.           ASEG       40023C10 
FLASH_FORGET        REL    CONST UNTYP.           .text      14 
FLASH_FORGET_NFA    REL    CONST UNTYP.           .text      0 
FLASH_KEYR          ABS    CONST UNTYP.           ASEG       40023C04 
FLASH_LOCK          REL    CONST UNTYP.           .text      0 
FLASH_NOT_BSY       REL    CONST UNTYP.           .text      0 
FLASH_OPTCR         ABS    CONST UNTYP.           ASEG       40023C14 
FLASH_OPTKEYR       ABS    CONST UNTYP.           ASEG       40023C08 
FLASH_PPAGE         ABS    CONST UNTYP.           ASEG       8100000 
FLASH_RAMCODE_EXEC  REL    CONST UNTYP.           .text      0 
FLASH_SAVE          REL    CONST UNTYP.           .text      10 
FLASH_SAVE_NFA      REL    CONST UNTYP.           .text      0 
FLASH_SCAN          REL    CONST UNTYP.           .text      0 
FLASH_SPAGE         ABS    CONST UNTYP.           ASEG       8020000 
FLASH_SR            ABS    CONST UNTYP.           ASEG       40023C0C 
FLASH_START         ABS    CONST UNTYP.           ASEG       8000000 
FLASH_TCODE_COPY    REL    CONST UNTYP.           .text      0 
FLASH_TCODE_END     REL    CONST UNTYP.           .text      14 
FLASH_TCODE_START   REL    CONST UNTYP.           .text      10C 
FLASH_TEST_CODE_IN_FLASHREL    CONST UNTYP.           .text      0 
FLASH_TEST_CODE_IN_RAMREL    CONST UNTYP.           .text      0 
FLASH_UNLOCK        REL    CONST UNTYP.           .text      0 
FLASH_WRITE_EXIT_LOOPREL    CONST UNTYP.           .text      88 
FLASH_WRITE_FINISH  REL    CONST UNTYP.           .text      100 
FLASH_WRITE_LOOP    REL    CONST UNTYP.           .text      44 
FLOOP               REL    CONST UNTYP.           .text      13 
FLPT                REL    CONST UNTYP.           .text      44 
FM4_WARM            REL    CONST UNTYP.           .text      0 
FMx_SYSTICK_ISR     REL    CONST PUB UNTYP.       .text      1 
FORGET              REL    CONST UNTYP.           .text      C 
FORGET_NFA          REL    CONST UNTYP.           .text      0 
FOUR                REL    CONST UNTYP.           .text      8 
FOURM               REL    CONST UNTYP.           .text      8 
FOURM_NFA           REL    CONST UNTYP.           .text      0 
FOURP               REL    CONST UNTYP.           .text      8 
FOURP_NFA           REL    CONST UNTYP.           .text      0 
FOUR_NFA            REL    CONST UNTYP.           .text      0 
FPA                 REL    CONST UNTYP.           .sram_1rst 4 
FPADDR              REL    CONST UNTYP.           .text      0 
FPC                 REL    CONST UNTYP.           .sram_1rst 8 
FPCURR              REL    CONST UNTYP.           .text      0 
FPSV                REL    CONST UNTYP.           .sram_1rst C 
FPVAR               REL    CONST UNTYP.           .text      0 
FSAVE               REL    CONST UNTYP.           .text      84 
FSLASTPAGE          REL    CONST UNTYP.           .text      60 
FSMC_BCR1           ABS    CONST UNTYP.           ASEG       A0000000 
FSMC_BCR2           ABS    CONST UNTYP.           ASEG       A0000008 
FSMC_BCR3           ABS    CONST UNTYP.           ASEG       A0000010 
FSMC_BCR4           ABS    CONST UNTYP.           ASEG       A0000018 
FSMC_BTR1           ABS    CONST UNTYP.           ASEG       A0000004 
FSMC_BTR2           ABS    CONST UNTYP.           ASEG       A000000C 
FSMC_BTR3           ABS    CONST UNTYP.           ASEG       A0000014 
FSMC_BTR4           ABS    CONST UNTYP.           ASEG       A000001C 
FSMC_BWTR1          ABS    CONST UNTYP.           ASEG       A0000104 
FSMC_BWTR2          ABS    CONST UNTYP.           ASEG       A000010C 
FSMC_BWTR3          ABS    CONST UNTYP.           ASEG       A0000114 
FSMC_BWTR4          ABS    CONST UNTYP.           ASEG       A000011C 
FSMC_ECCR2          ABS    CONST UNTYP.           ASEG       A0000074 
FSMC_ECCR3          ABS    CONST UNTYP.           ASEG       A0000094 
FSMC_PATT2          ABS    CONST UNTYP.           ASEG       A000006C 
FSMC_PATT3          ABS    CONST UNTYP.           ASEG       A000008C 
FSMC_PATT4          ABS    CONST UNTYP.           ASEG       A00000AC 
FSMC_PCR2           ABS    CONST UNTYP.           ASEG       A0000060 
FSMC_PCR3           ABS    CONST UNTYP.           ASEG       A0000080 
FSMC_PCR4           ABS    CONST UNTYP.           ASEG       A00000A0 
FSMC_PIO4           ABS    CONST UNTYP.           ASEG       A00000B0 
FSMC_PMEM2          ABS    CONST UNTYP.           ASEG       A0000068 
FSMC_PMEM3          ABS    CONST UNTYP.           ASEG       A0000088 
FSMC_PMEM4          ABS    CONST UNTYP.           ASEG       A00000A8 
FSMC_SR2            ABS    CONST UNTYP.           ASEG       A0000064 
FSMC_SR3            ABS    CONST UNTYP.           ASEG       A0000084 
FSMC_SR4            ABS    CONST UNTYP.           ASEG       A00000A4 
FS_BEGIN            REL    CONST UNTYP.           .text      A8 
FS_EXIT             REL    CONST UNTYP.           .text      EC 
FS_RWORD            REL    CONST UNTYP.           .text      100 
FS_WRITE            REL    CONST UNTYP.           .text      BC 
FWARM               REL    CONST UNTYP.           .text      0 
FWARM_STARTING_UP   REL    CONST UNTYP.           .text      C 
FWASM               REL    CONST UNTYP.           .text      1 
FWBEGIN             REL    CONST UNTYP.           .text      7 
GOTO                REL    CONST UNTYP.           .text      0 
GPIOA_AFRH          ABS    CONST UNTYP.           ASEG       40020024 
GPIOA_AFRL          ABS    CONST UNTYP.           ASEG       40020020 
GPIOA_BSRR          ABS    CONST UNTYP.           ASEG       40020018 
GPIOA_IDR           ABS    CONST UNTYP.           ASEG       40020010 
GPIOA_LCKR          ABS    CONST UNTYP.           ASEG       4002001C 
GPIOA_MODER         ABS    CONST UNTYP.           ASEG       40020000 
GPIOA_ODR           ABS    CONST UNTYP.           ASEG       40020014 
GPIOA_OSPEEDR       ABS    CONST UNTYP.           ASEG       40020008 
GPIOA_OTYPER        ABS    CONST UNTYP.           ASEG       40020004 
GPIOA_PUPDR         ABS    CONST UNTYP.           ASEG       4002000C 
GPIOB_AFRH          ABS    CONST UNTYP.           ASEG       40020424 
GPIOB_AFRL          ABS    CONST UNTYP.           ASEG       40020420 
GPIOB_BSRR          ABS    CONST UNTYP.           ASEG       40020418 
GPIOB_IDR           ABS    CONST UNTYP.           ASEG       40020410 
GPIOB_IDR_NFA       REL    CONST UNTYP.           .text      0 
GPIOB_LCKR          ABS    CONST UNTYP.           ASEG       4002041C 
GPIOB_MODER         ABS    CONST UNTYP.           ASEG       40020400 
GPIOB_MODER_NFA     REL    CONST UNTYP.           .text      0 
GPIOB_ODR           ABS    CONST UNTYP.           ASEG       40020414 
GPIOB_ODR_NFA       REL    CONST UNTYP.           .text      0 
GPIOB_OSPEEDR       ABS    CONST UNTYP.           ASEG       40020408 
GPIOB_OTYPER        ABS    CONST UNTYP.           ASEG       40020404 
GPIOB_PUPDR         ABS    CONST UNTYP.           ASEG       4002040C 
GPIOC_AFRH          ABS    CONST UNTYP.           ASEG       40020824 
GPIOC_AFRL          ABS    CONST UNTYP.           ASEG       40020820 
GPIOC_BSRR          ABS    CONST UNTYP.           ASEG       40020818 
GPIOC_IDR           ABS    CONST UNTYP.           ASEG       40020810 
GPIOC_IDR_NFA       REL    CONST UNTYP.           .text      0 
GPIOC_LCKR          ABS    CONST UNTYP.           ASEG       4002081C 
GPIOC_MODER         ABS    CONST UNTYP.           ASEG       40020800 
GPIOC_MODER_NFA     REL    CONST UNTYP.           .text      0 
GPIOC_ODR           ABS    CONST UNTYP.           ASEG       40020814 
GPIOC_ODR_NFA       REL    CONST UNTYP.           .text      0 
GPIOC_OSPEEDR       ABS    CONST UNTYP.           ASEG       40020808 
GPIOC_OTYPER        ABS    CONST UNTYP.           ASEG       40020804 
GPIOC_PUPDR         ABS    CONST UNTYP.           ASEG       4002080C 
GPIOD_AFRH          ABS    CONST UNTYP.           ASEG       40020C24 
GPIOD_AFRL          ABS    CONST UNTYP.           ASEG       40020C20 
GPIOD_BSRR          ABS    CONST UNTYP.           ASEG       40020C18 
GPIOD_IDR           ABS    CONST UNTYP.           ASEG       40020C10 
GPIOD_LCKR          ABS    CONST UNTYP.           ASEG       40020C1C 
GPIOD_MODER         ABS    CONST UNTYP.           ASEG       40020C00 
GPIOD_ODR           ABS    CONST UNTYP.           ASEG       40020C14 
GPIOD_OSPEEDR       ABS    CONST UNTYP.           ASEG       40020C08 
GPIOD_OTYPER        ABS    CONST UNTYP.           ASEG       40020C04 
GPIOD_PUPDR         ABS    CONST UNTYP.           ASEG       40020C0C 
GPIOE_AFRH          ABS    CONST UNTYP.           ASEG       40021024 
GPIOE_AFRL          ABS    CONST UNTYP.           ASEG       40021020 
GPIOE_BSRR          ABS    CONST UNTYP.           ASEG       40021018 
GPIOE_IDR           ABS    CONST UNTYP.           ASEG       40021010 
GPIOE_LCKR          ABS    CONST UNTYP.           ASEG       4002101C 
GPIOE_MODER         ABS    CONST UNTYP.           ASEG       40021000 
GPIOE_ODR           ABS    CONST UNTYP.           ASEG       40021014 
GPIOE_OSPEEDR       ABS    CONST UNTYP.           ASEG       40021008 
GPIOE_OTYPER        ABS    CONST UNTYP.           ASEG       40021004 
GPIOE_PUPDR         ABS    CONST UNTYP.           ASEG       4002100C 
GPIOF_AFRH          ABS    CONST UNTYP.           ASEG       40021424 
GPIOF_AFRL          ABS    CONST UNTYP.           ASEG       40021420 
GPIOF_BSRR          ABS    CONST UNTYP.           ASEG       40021418 
GPIOF_IDR           ABS    CONST UNTYP.           ASEG       40021410 
GPIOF_LCKR          ABS    CONST UNTYP.           ASEG       4002141C 
GPIOF_MODER         ABS    CONST UNTYP.           ASEG       40021400 
GPIOF_ODR           ABS    CONST UNTYP.           ASEG       40021414 
GPIOF_OSPEEDR       ABS    CONST UNTYP.           ASEG       40021408 
GPIOF_OTYPER        ABS    CONST UNTYP.           ASEG       40021404 
GPIOF_PUPDR         ABS    CONST UNTYP.           ASEG       4002140C 
GPIOG_AFRH          ABS    CONST UNTYP.           ASEG       40021824 
GPIOG_AFRL          ABS    CONST UNTYP.           ASEG       40021820 
GPIOG_BSRR          ABS    CONST UNTYP.           ASEG       40021818 
GPIOG_IDR           ABS    CONST UNTYP.           ASEG       40021810 
GPIOG_LCKR          ABS    CONST UNTYP.           ASEG       4002181C 
GPIOG_MODER         ABS    CONST UNTYP.           ASEG       40021800 
GPIOG_ODR           ABS    CONST UNTYP.           ASEG       40021814 
GPIOG_OSPEEDR       ABS    CONST UNTYP.           ASEG       40021808 
GPIOG_OTYPER        ABS    CONST UNTYP.           ASEG       40021804 
GPIOG_PUPDR         ABS    CONST UNTYP.           ASEG       4002180C 
GPIOH_AFRH          ABS    CONST UNTYP.           ASEG       40021C24 
GPIOH_AFRL          ABS    CONST UNTYP.           ASEG       40021C20 
GPIOH_BSRR          ABS    CONST UNTYP.           ASEG       40021C18 
GPIOH_IDR           ABS    CONST UNTYP.           ASEG       40021C10 
GPIOH_LCKR          ABS    CONST UNTYP.           ASEG       40021C1C 
GPIOH_MODER         ABS    CONST UNTYP.           ASEG       40021C00 
GPIOH_ODR           ABS    CONST UNTYP.           ASEG       40021C14 
GPIOH_OSPEEDR       ABS    CONST UNTYP.           ASEG       40021C08 
GPIOH_OTYPER        ABS    CONST UNTYP.           ASEG       40021C04 
GPIOH_PUPDR         ABS    CONST UNTYP.           ASEG       40021C0C 
GPIOI_AFRH          ABS    CONST UNTYP.           ASEG       40022024 
GPIOI_AFRL          ABS    CONST UNTYP.           ASEG       40022020 
GPIOI_BSRR          ABS    CONST UNTYP.           ASEG       40022018 
GPIOI_IDR           ABS    CONST UNTYP.           ASEG       40022010 
GPIOI_LCKR          ABS    CONST UNTYP.           ASEG       4002201C 
GPIOI_MODER         ABS    CONST UNTYP.           ASEG       40022000 
GPIOI_ODR           ABS    CONST UNTYP.           ASEG       40022014 
GPIOI_OSPEEDR       ABS    CONST UNTYP.           ASEG       40022008 
GPIOI_OTYPER        ABS    CONST UNTYP.           ASEG       40022004 
GPIOI_PUPDR         ABS    CONST UNTYP.           ASEG       4002200C 
GREATERTHAN         REL    CONST UNTYP.           .text      8 
GREATERTHAN_NFA     REL    CONST UNTYP.           .text      0 
GS0                 REL    CONST UNTYP.           .text      8 
GS0_NFA             REL    CONST UNTYP.           .text      0 
GS0_OFF             REL    CONST UNTYP.           .text      2C 
GS0_ON              REL    CONST UNTYP.           .text      14 
GS1                 REL    CONST UNTYP.           .text      8 
GS1_NFA             REL    CONST UNTYP.           .text      0 
GS1_OFF             REL    CONST UNTYP.           .text      2C 
GS1_ON              REL    CONST UNTYP.           .text      14 
GS2                 REL    CONST UNTYP.           .text      8 
GS2_NFA             REL    CONST UNTYP.           .text      0 
GS2_OFF             REL    CONST UNTYP.           .text      2C 
GS2_ON              REL    CONST UNTYP.           .text      14 
HERE                REL    CONST UNTYP.           .text      C 
HERE_NFA            REL    CONST UNTYP.           .text      0 
HEX                 REL    CONST UNTYP.           .text      8 
HEX_NFA             REL    CONST UNTYP.           .text      0 
HFSR                ABS    CONST UNTYP.           ASEG       E000ED2C 
HLD_SV              REL    CONST UNTYP.           .text      1A8 
HOLD                REL    CONST UNTYP.           .text      C 
HOLD_NFA            REL    CONST UNTYP.           .text      0 
I                   REL    CONST UNTYP.           .text      8 
ICEN                ABS    CONST UNTYP.           .text      200 
ICSR                ABS    CONST UNTYP.           ASEG       E000ED04 
IDDOT               REL    CONST UNTYP.           .text      8 
IDDOT_NFA           REL    CONST UNTYP.           .text      0 
IF                  REL    CONST UNTYP.           .text      8 
IF_EOL_SEND_XOFF    REL    CONST UNTYP.           .text      0 
IF_NFA              REL    CONST UNTYP.           .text      0 
IMMED               REL    CONST UNTYP.           .text      10 
IMMED_NFA           REL    CONST UNTYP.           .text      0 
IN                  REL    CONST UNTYP.           .tcm_pref_ 108 
INITRO              REL    CONST UNTYP.           .tcm_pref_ 118 
INITRO_SV           REL    CONST UNTYP.           .text      198 
INITSO              REL    CONST UNTYP.           .tcm_pref_ 114 
INITSO_SV           REL    CONST UNTYP.           .text      190 
INITTIB             REL    CONST UNTYP.           .tcm_pref_ 11C 
INTE1               REL    CONST UNTYP.           .text      3E4 
INTE2               REL    CONST UNTYP.           .text      428 
INTE3               REL    CONST UNTYP.           .text      414 
INTE4               REL    CONST UNTYP.           .text      41C 
INTE5               REL    CONST UNTYP.           .text      45C 
INTE6               REL    CONST UNTYP.           .text      450 
INTE7               REL    CONST UNTYP.           .text      458 
INTERPRET           REL    CONST UNTYP.           .text      3E0 
IN_NFA              REL    CONST UNTYP.           .text      0 
IN_SV               REL    CONST UNTYP.           .text      8 
IOBUFSIZE           ABS    CONST UNTYP.           ASEG       60 
IP0                 ABS    CONST UNTYP.           ASEG       E000E400 
IP1                 ABS    CONST UNTYP.           ASEG       E000E404 
IP10                ABS    CONST UNTYP.           ASEG       E000E428 
IP11                ABS    CONST UNTYP.           ASEG       E000E42C 
IP12                ABS    CONST UNTYP.           ASEG       E000E430 
IP13                ABS    CONST UNTYP.           ASEG       E000E434 
IP14                ABS    CONST UNTYP.           ASEG       E000E438 
IP15                ABS    CONST UNTYP.           ASEG       E000E43C 
IP16                ABS    CONST UNTYP.           ASEG       E000E440 
IP2                 ABS    CONST UNTYP.           ASEG       E000E408 
IP3                 ABS    CONST UNTYP.           ASEG       E000E40C 
IP4                 ABS    CONST UNTYP.           ASEG       E000E410 
IP5                 ABS    CONST UNTYP.           ASEG       E000E414 
IP6                 ABS    CONST UNTYP.           ASEG       E000E418 
IP7                 ABS    CONST UNTYP.           ASEG       E000E41C 
IP8                 ABS    CONST UNTYP.           ASEG       E000E420 
IP9                 ABS    CONST UNTYP.           ASEG       E000E424 
IRQS_RESUME_NFA     REL    CONST UNTYP.           .text      0 
IRQS_SUSPEND_NFA    REL    CONST UNTYP.           .text      0 
ISR_SEMIS           REL    CONST UNTYP.           .text      0 
IS_BIN              REL    CONST UNTYP.           .text      D4 
IS_DECIMAL          REL    CONST UNTYP.           .text      FC 
IS_HEX              REL    CONST UNTYP.           .text      10C 
IWDG_KR             ABS    CONST UNTYP.           ASEG       40003000 
IWDG_PR             ABS    CONST UNTYP.           ASEG       40003004 
IWDG_RLR            ABS    CONST UNTYP.           ASEG       40003008 
IWDG_SR             ABS    CONST UNTYP.           ASEG       4000300C 
I_NFA               REL    CONST UNTYP.           .text      0 
KEY                 REL    CONST UNTYP.           .text      18 
KEY_INTERPRETED_ENTRYREL    CONST UNTYP.           .text      8 
KEY_NFA             REL    CONST UNTYP.           .text      0 
LATENCY_5WS         ABS    CONST UNTYP.           .text      5 
LATEST              REL    CONST UNTYP.           .text      C 
LATEST_NFA          REL    CONST UNTYP.           .text      0 
LBRAC               REL    CONST UNTYP.           .text      8 
LBRAC_NFA           REL    CONST UNTYP.           .text      0 
LEAVE               REL    CONST UNTYP.           .text      C 
LEAVE_NFA           REL    CONST UNTYP.           .text      0 
LESS1               REL    CONST UNTYP.           .text      13 
LESSTHAN            REL    CONST UNTYP.           .text      8 
LESSTHAN_NFA        REL    CONST UNTYP.           .text      0 
LFA                 REL    CONST UNTYP.           .text      8 
LFA_NFA             REL    CONST UNTYP.           .text      0 
LINK_FLASHCODE_SEGMENTREL    CONST UNTYP.           .text      44 
LIT                 REL    CONST UNTYP.           .text      0 
LITE1               REL    CONST UNTYP.           .text      2C 
LITERAL             REL    CONST UNTYP.           .text      C 
LITERAL_NFA         REL    CONST UNTYP.           .text      0 
LOOP                REL    CONST UNTYP.           .text      C 
LOOP_NFA            REL    CONST UNTYP.           .text      0 
LSL                 REL    CONST UNTYP.           .text      8 
LSL_NFA             REL    CONST UNTYP.           .text      0 
LSR                 REL    CONST UNTYP.           .text      8 
LSR_NFA             REL    CONST UNTYP.           .text      0 
MAX                 REL    CONST UNTYP.           .text      8 
MAX1                REL    CONST UNTYP.           .text      20 
MAXWORDLEN          ABS    CONST UNTYP.           ASEG       1F 
MAX_NFA             REL    CONST UNTYP.           .text      0 
MIN                 REL    CONST UNTYP.           .text      8 
MIN1                REL    CONST UNTYP.           .text      20 
MIN_NFA             REL    CONST UNTYP.           .text      0 
MMFAR               ABS    CONST UNTYP.           ASEG       E000ED34 
MOD                 REL    CONST UNTYP.           .text      8 
MODD_NFA            REL    CONST UNTYP.           .text      0 
MS                  REL    CONST UNTYP.           .text      8 
MSLASH              REL    CONST UNTYP.           .text      8 
MSLASH_NFA          REL    CONST UNTYP.           .text      0 
MSMOD               REL    CONST UNTYP.           .text      37C 
MSTAR               REL    CONST UNTYP.           .text      8 
MSTAR_NFA           REL    CONST UNTYP.           .text      0 
MS_NFA              REL    CONST UNTYP.           .text      0 
MYBAUD              REL    CONST UNTYP.           .text      C 
MYBAUD_NFA          REL    CONST UNTYP.           .text      0 
MYWORDS             REL    CONST UNTYP.           .text      C 
MYWORDS_NFA         REL    CONST UNTYP.           .text      0 
NBASE               REL    CONST UNTYP.           .tcm_pref_ 104 
NDPL                REL    CONST UNTYP.           .tcm_pref_ 140 
NEGATE              REL    CONST UNTYP.           .text      C 
NEGATE_NFA          REL    CONST UNTYP.           .text      0 
NFA                 REL    CONST UNTYP.           .text      8 
NFA_ALIGN_BEGIN     REL    CONST UNTYP.           .text      14 
NFA_NFA             REL    CONST UNTYP.           .text      0 
NHLD                REL    CONST UNTYP.           .tcm_pref_ 144 
NOOP                REL    CONST UNTYP.           .text      C 
NOOP_NFA            REL    CONST UNTYP.           .text      0 
NOT                 REL    CONST UNTYP.           .text      8 
NOT_CO              REL    CONST UNTYP.           .text      64 
NOT_CR              REL    CONST UNTYP.           .text      21 
NOT_NFA             REL    CONST UNTYP.           .text      0 
NOT_WC              REL    CONST UNTYP.           .text      E0 
NO_KEY              REL    CONST UNTYP.           .text      15 
NSEXIT1             REL    CONST UNTYP.           .text      29 
NSLEN_DONE          REL    CONST UNTYP.           .text      F 
NSLEN_LOOP          REL    CONST UNTYP.           .text      5 
NSNOTTWO            REL    CONST UNTYP.           .text      D 
NSTWO               REL    CONST UNTYP.           .text      37 
NULL                REL    CONST UNTYP.           .text      8 
NULLSTRLEN          REL    CONST UNTYP.           .text      C 
NULLSTRLEN_NFA      REL    CONST UNTYP.           .text      0 
NULL_NFA            REL    CONST UNTYP.           .text      0 
NUMB1               REL    CONST UNTYP.           .text      58 
NUMB2               REL    CONST UNTYP.           .text      E0 
NUMB3               REL    CONST UNTYP.           .text      F4 
NUMBER              REL    CONST UNTYP.           .text      C 
NUMBERSUFFIX        REL    CONST UNTYP.           .text      0 
NUMBER_NFA          REL    CONST UNTYP.           .text      0 
NVIC                ABS    CONST UNTYP.           ASEG       E000E004 
OFF_BB_BIT          REL    CONST UNTYP.           .text      18 
OFF_ZERO            REL    CONST UNTYP.           .text      8 
OFF_ZERO_NFA        REL    CONST UNTYP.           .text      0 
ON                  REL    CONST UNTYP.           .text      8 
ONE                 REL    CONST UNTYP.           .text      8 
ONEM                REL    CONST UNTYP.           .text      8 
ONEM_NFA            REL    CONST UNTYP.           .text      0 
ONEP                REL    CONST UNTYP.           .text      8 
ONEP_NFA            REL    CONST UNTYP.           .text      0 
ONE_NFA             REL    CONST UNTYP.           .text      0 
ON_BB_BIT           REL    CONST UNTYP.           .text      18 
OR                  REL    CONST UNTYP.           .text      8 
ORIG                REL    CONST UNTYP.           .sram_1rst 10 
OR_NFA              REL    CONST UNTYP.           .text      0 
OUT                 REL    CONST UNTYP.           .tcm_pref_ 10C 
OUT_NFA             REL    CONST UNTYP.           .text      0 
OUT_SV              REL    CONST UNTYP.           .text      8 
OVER                REL    CONST UNTYP.           .text      C 
OVER_NFA            REL    CONST UNTYP.           .text      0 
P                   REL    CONST UNTYP.           .text      8 
PAD                 REL    CONST UNTYP.           .sram_1rst FA10 
PAD_NFA             REL    CONST UNTYP.           .text      0 
PAD_SV              REL    CONST UNTYP.           .text      8 
PAREN               REL    CONST UNTYP.           .text      8 
PAREN_ERR           REL    CONST UNTYP.           .text      58 
PAREN_NFA           REL    CONST UNTYP.           .text      0 
PCLK1               ABS    CONST UNTYP.           .text      280DE80 
PCLK2               ABS    CONST UNTYP.           .text      501BD00 
PDOTQ               REL    CONST UNTYP.           .text      270 
PE_DONE             REL    CONST UNTYP.           .text      54 
PFA                 REL    CONST UNTYP.           .text      8 
PFA_ALIGN_BEGIN     REL    CONST UNTYP.           .text      14 
PFA_NFA             REL    CONST UNTYP.           .text      0 
PFIN1               REL    CONST UNTYP.           .text      B 
PFIN2               REL    CONST UNTYP.           .text      1B 
PFIN21              REL    CONST UNTYP.           .text      2F 
PFIN5               REL    CONST UNTYP.           .text      57 
PFIN51              REL    CONST UNTYP.           .text      59 
PFIN7               REL    CONST UNTYP.           .text      61 
PFIND               REL    CONST UNTYP.           .text      0 
PFIND_NEXT_NFA      REL    CONST UNTYP.           .text      6D 
PINIT               REL    CONST UNTYP.           .tcm_pref_ 568 
PLLI2S_N            ABS    CONST UNTYP.           .text      C0 
PLLI2S_Nbits        ABS    CONST UNTYP.           .text      3000 
PLLI2S_R            ABS    CONST UNTYP.           .text      5 
PLLI2S_Rbits        ABS    CONST UNTYP.           .text      50000000 
PLL_Mbits           ABS    CONST UNTYP.           .text      8 
PLL_N               ABS    CONST UNTYP.           .text      150 
PLL_Nbits           ABS    CONST UNTYP.           .text      5400 
PLL_P               ABS    CONST UNTYP.           .text      2 
PLL_Pbits           ABS    CONST UNTYP.           .text      0 
PLL_Q               ABS    CONST UNTYP.           .text      7 
PLL_Qbits           ABS    CONST UNTYP.           .text      7000000 
PLOOP               REL    CONST UNTYP.           .text      C 
PLOOP_NFA           REL    CONST UNTYP.           .text      0 
PLUS                REL    CONST UNTYP.           .text      8 
PLUS_NFA            REL    CONST UNTYP.           .text      0 
PM                  REL    CONST UNTYP.           .text      50C 
PM1                 REL    CONST UNTYP.           .text      520 
PML_LOOP            REL    CONST UNTYP.           .text      C 
PNUM1               REL    CONST UNTYP.           .text      2C0 
PNUM2               REL    CONST UNTYP.           .text      338 
PNUM3               REL    CONST UNTYP.           .text      32C 
PNUMBER             REL    CONST UNTYP.           .text      2BC 
POFF                REL    CONST UNTYP.           .text      C 
POFF_NFA            REL    CONST UNTYP.           .text      0 
PON                 REL    CONST UNTYP.           .text      8 
PON_NFA             REL    CONST UNTYP.           .text      0 
PRFTEN              ABS    CONST UNTYP.           .text      100 
PRINT_SUFFIX        REL    CONST UNTYP.           .text      B4 
PROMPT              REL    CONST UNTYP.           .tcm_pref_ 134 
PSTART              REL    CONST UNTYP.           .tcm_pref_ 568 
PSTATDACDATA        REL    CONST UNTYP.           .text      C 
PSTATDACDATA_NFA    REL    CONST UNTYP.           .text      0 
PSTAT_DAC_DATA      REL    CONST UNTYP.           .sram_1rst FED0 
PSTORE              REL    CONST UNTYP.           .text      8 
PSTORE_NFA          REL    CONST UNTYP.           .text      0 
PWR_CR              ABS    CONST UNTYP.           ASEG       40007000 
PWR_CR_PMODE        ABS    CONST UNTYP.           .text      4000 
PWR_CSR             ABS    CONST UNTYP.           ASEG       40007004 
P_NFA               REL    CONST UNTYP.           .text      0 
QALIGNED            REL    CONST UNTYP.           .text      10 
QALIGNED_NFA        REL    CONST UNTYP.           .text      0 
QALIGN_OK           REL    CONST UNTYP.           .text      60 
QCOMP               REL    CONST UNTYP.           .text      1F4 
QCSP                REL    CONST UNTYP.           .text      3BC 
QERROR              REL    CONST UNTYP.           .text      C 
QERROR_DONE         REL    CONST UNTYP.           .text      2C 
QERROR_FINISH       REL    CONST UNTYP.           .text      28 
QERROR_NFA          REL    CONST UNTYP.           .text      0 
QEXEC               REL    CONST UNTYP.           .text      214 
QKEY                REL    CONST UNTYP.           .text      C 
QKEY_NFA            REL    CONST UNTYP.           .text      0 
QPAIR               REL    CONST UNTYP.           .text      230 
QSTACK              REL    CONST UNTYP.           .text      248 
QUERY               REL    CONST UNTYP.           .text      298 
QUES                REL    CONST UNTYP.           .text      8 
QUES_NFA            REL    CONST UNTYP.           .text      0 
QUIT                REL    CONST UNTYP.           .text      464 
QUIT1               REL    CONST UNTYP.           .text      470 
QUIT2               REL    CONST UNTYP.           .text      4C4 
QUIT_EOL_DLE        REL    CONST UNTYP.           .text      4C4 
R                   REL    CONST UNTYP.           .text      8 
RAMVARSPACE         REL    CONST UNTYP.           .tcm_pref_ 4 
RAMVARSPACE_START   REL    CONST UNTYP.           .tcm_pref_ 4 
RAMWORDS            REL    CONST UNTYP.           .text      D8 
RAM_END             REL    CONST UNTYP.           .tcm_pref_ 568 
RAM_INIT_END        REL    CONST UNTYP.           .sram_2nd_ 200 
RAM_INTVECS         REL    CONST UNTYP.           .sram_2nd_ 0 
RAM_INTVECS_END     REL    CONST UNTYP.           .sram_2nd_ 200 
RAM_START           REL    CONST UNTYP.           .sram_1rst 0 
RBASE               REL    CONST UNTYP.           .text      C 
RBASE_NFA           REL    CONST UNTYP.           .text      0 
RBRAC               REL    CONST UNTYP.           .text      8 
RBRAC_NFA           REL    CONST UNTYP.           .text      0 
RCC_AHB1ENR         ABS    CONST UNTYP.           ASEG       40023830 
RCC_AHB1LPENR       ABS    CONST UNTYP.           ASEG       40023850 
RCC_AHB1RSTR        ABS    CONST UNTYP.           ASEG       40023810 
RCC_AHB2ENR         ABS    CONST UNTYP.           ASEG       40023834 
RCC_AHB2LPENR       ABS    CONST UNTYP.           ASEG       40023854 
RCC_AHB2RSTR        ABS    CONST UNTYP.           ASEG       40023814 
RCC_AHB3ENR         ABS    CONST UNTYP.           ASEG       40023838 
RCC_AHB3LPENR       ABS    CONST UNTYP.           ASEG       40023858 
RCC_AHB3RSTR        ABS    CONST UNTYP.           ASEG       40023818 
RCC_APB1ENR         ABS    CONST UNTYP.           ASEG       40023840 
RCC_APB1ENR_PWREN   ABS    CONST UNTYP.           .text      10000000 
RCC_APB1LPENR       ABS    CONST UNTYP.           ASEG       40023860 
RCC_APB1RSTR        ABS    CONST UNTYP.           ASEG       40023820 
RCC_APB2ENR         ABS    CONST UNTYP.           ASEG       40023844 
RCC_APB2LPENR       ABS    CONST UNTYP.           ASEG       40023864 
RCC_APB2RSTR        ABS    CONST UNTYP.           ASEG       40023824 
RCC_BDCR            ABS    CONST UNTYP.           ASEG       40023870 
RCC_CFGR            ABS    CONST UNTYP.           ASEG       40023808 
RCC_CFGR_HPRE_DIV1  ABS    CONST UNTYP.           .text      0 
RCC_CFGR_I2SSRC     ABS    CONST UNTYP.           .text      800000 
RCC_CFGR_PPRE1_DIV4 ABS    CONST UNTYP.           .text      1400 
RCC_CFGR_PPRE2_DIV2 ABS    CONST UNTYP.           .text      8000 
RCC_CFGR_SW         ABS    CONST UNTYP.           .text      3 
RCC_CFGR_SWS        ABS    CONST UNTYP.           .text      C 
RCC_CFGR_SWS_PLL    ABS    CONST UNTYP.           .text      8 
RCC_CFGR_SW_PLL     ABS    CONST UNTYP.           .text      2 
RCC_CIR             ABS    CONST UNTYP.           ASEG       4002380C 
RCC_CR              ABS    CONST UNTYP.           ASEG       40023800 
RCC_CR_HSEON        ABS    CONST UNTYP.           .text      10000 
RCC_CR_HSERDY       ABS    CONST UNTYP.           .text      20000 
RCC_CR_PLLI2SON     ABS    CONST UNTYP.           .text      4000000 
RCC_CR_PLLI2SRDY    ABS    CONST UNTYP.           .text      8000000 
RCC_CR_PLLON        ABS    CONST UNTYP.           .text      1000000 
RCC_CR_PLLRDY       ABS    CONST UNTYP.           .text      2000000 
RCC_CSR             ABS    CONST UNTYP.           ASEG       40023874 
RCC_PLLCFGR         ABS    CONST UNTYP.           ASEG       40023804 
RCC_PLLCFGR_PLLSRC_HSEABS    CONST UNTYP.           .text      400000 
RCC_PLLI2SCFGR      ABS    CONST UNTYP.           ASEG       40023884 
RCC_SSCGR           ABS    CONST UNTYP.           ASEG       40023880 
RELOCATE_RAM_ADDR   REL    CONST UNTYP.           .text      118 
REPEAT              REL    CONST UNTYP.           .text      C 
REPEAT_NFA          REL    CONST UNTYP.           .text      0 
REVW                REL    CONST UNTYP.           .text      C 
REVW_NFA            REL    CONST UNTYP.           .text      0 
RFROM               REL    CONST UNTYP.           .text      8 
RFROM_NFA           REL    CONST UNTYP.           .text      0 
RINIT               REL    CONST UNTYP.           .tcm_pref_ 358 
RLIT                REL    CONST UNTYP.           .text      0 
RMWAMD              REL    CONST UNTYP.           .text      0 
RM_GPIOB_IDR        REL    CONST UNTYP.           .text      10 
RM_GPIOB_MODER      REL    CONST UNTYP.           .text      10 
RM_GPIOB_ODR        REL    CONST UNTYP.           .text      10 
RM_GPIOC_IDR        REL    CONST UNTYP.           .text      10 
RM_GPIOC_MODER      REL    CONST UNTYP.           .text      10 
RM_GPIOC_ODR        REL    CONST UNTYP.           .text      10 
RNG_CR              ABS    CONST UNTYP.           ASEG       50060800 
RNG_DR              ABS    CONST UNTYP.           ASEG       50060808 
RNG_SR              ABS    CONST UNTYP.           ASEG       50060804 
ROT                 REL    CONST UNTYP.           .text      8 
ROT_NFA             REL    CONST UNTYP.           .text      0 
RPAD                REL    CONST UNTYP.           .tcm_pref_ 148 
RPAT                REL    CONST UNTYP.           .text      8 
RPAT_NFA            REL    CONST UNTYP.           .text      0 
RPSTO               REL    CONST UNTYP.           .text      0 
RTC_ALRMAR          ABS    CONST UNTYP.           ASEG       4000281C 
RTC_ALRMASSR        ABS    CONST UNTYP.           ASEG       40002844 
RTC_ALRMBR          ABS    CONST UNTYP.           ASEG       40002820 
RTC_ALRMBSSR        ABS    CONST UNTYP.           ASEG       40002848 
RTC_BK0R            ABS    CONST UNTYP.           ASEG       40002850 
RTC_BK10R           ABS    CONST UNTYP.           ASEG       40002878 
RTC_BK11R           ABS    CONST UNTYP.           ASEG       4000287C 
RTC_BK12R           ABS    CONST UNTYP.           ASEG       40002880 
RTC_BK13R           ABS    CONST UNTYP.           ASEG       40002884 
RTC_BK14R           ABS    CONST UNTYP.           ASEG       40002888 
RTC_BK15R           ABS    CONST UNTYP.           ASEG       4000288C 
RTC_BK16R           ABS    CONST UNTYP.           ASEG       40002890 
RTC_BK17R           ABS    CONST UNTYP.           ASEG       40002894 
RTC_BK18R           ABS    CONST UNTYP.           ASEG       40002898 
RTC_BK19R           ABS    CONST UNTYP.           ASEG       4000289C 
RTC_BK1R            ABS    CONST UNTYP.           ASEG       40002854 
RTC_BK2R            ABS    CONST UNTYP.           ASEG       40002858 
RTC_BK3R            ABS    CONST UNTYP.           ASEG       4000285C 
RTC_BK4R            ABS    CONST UNTYP.           ASEG       40002860 
RTC_BK5R            ABS    CONST UNTYP.           ASEG       40002864 
RTC_BK6R            ABS    CONST UNTYP.           ASEG       40002868 
RTC_BK7R            ABS    CONST UNTYP.           ASEG       4000286C 
RTC_BK8R            ABS    CONST UNTYP.           ASEG       40002870 
RTC_BK9R            ABS    CONST UNTYP.           ASEG       40002874 
RTC_CALIBR          ABS    CONST UNTYP.           ASEG       40002818 
RTC_CALR            ABS    CONST UNTYP.           ASEG       4000283C 
RTC_CR              ABS    CONST UNTYP.           ASEG       40002808 
RTC_DR              ABS    CONST UNTYP.           ASEG       40002804 
RTC_ISR             ABS    CONST UNTYP.           ASEG       4000280C 
RTC_PRER            ABS    CONST UNTYP.           ASEG       40002810 
RTC_SHIFTR          ABS    CONST UNTYP.           ASEG       4000282C 
RTC_SSR             ABS    CONST UNTYP.           ASEG       40002828 
RTC_TAFCR           ABS    CONST UNTYP.           ASEG       40002840 
RTC_TR              ABS    CONST UNTYP.           ASEG       40002800 
RTC_TSDR            ABS    CONST UNTYP.           ASEG       40002834 
RTC_TSSSR           ABS    CONST UNTYP.           ASEG       40002838 
RTC_TSTR            ABS    CONST UNTYP.           ASEG       40002830 
RTC_WPR             ABS    CONST UNTYP.           ASEG       40002824 
RTC_WUTR            ABS    CONST UNTYP.           ASEG       40002814 
RWORD               REL    CONST UNTYP.           .text      0 
RW_BEGIN            REL    CONST UNTYP.           .text      94 
RW_DOCONVAR         REL    CONST UNTYP.           .text      54 
RW_LFA              REL    CONST UNTYP.           .text      154 
RW_UNTIL            REL    CONST UNTYP.           .text      150 
R_NFA               REL    CONST UNTYP.           .text      0 
SCR                 ABS    CONST UNTYP.           ASEG       E000ED10 
SCSP                REL    CONST UNTYP.           .text      3A8 
SDIO_ARG            ABS    CONST UNTYP.           ASEG       40012C08 
SDIO_CLKCR          ABS    CONST UNTYP.           ASEG       40012C04 
SDIO_CMD            ABS    CONST UNTYP.           ASEG       40012C0C 
SDIO_DCOUNT         ABS    CONST UNTYP.           ASEG       40012C30 
SDIO_DCTRL          ABS    CONST UNTYP.           ASEG       40012C2C 
SDIO_DLEN           ABS    CONST UNTYP.           ASEG       40012C28 
SDIO_DTIMER         ABS    CONST UNTYP.           ASEG       40012C24 
SDIO_FIFO           ABS    CONST UNTYP.           ASEG       40012C80 
SDIO_FIFOCNT        ABS    CONST UNTYP.           ASEG       40012C48 
SDIO_ICR            ABS    CONST UNTYP.           ASEG       40012C38 
SDIO_MASK           ABS    CONST UNTYP.           ASEG       40012C3C 
SDIO_POWER          ABS    CONST UNTYP.           ASEG       40012C00 
SDIO_RESP1          ABS    CONST UNTYP.           ASEG       40012C14 
SDIO_RESP2          ABS    CONST UNTYP.           ASEG       40012C18 
SDIO_RESP3          ABS    CONST UNTYP.           ASEG       40012C1C 
SDIO_RESP4          ABS    CONST UNTYP.           ASEG       40012C20 
SDIO_RESPCMD        ABS    CONST UNTYP.           ASEG       40012C10 
SDIO_STA            ABS    CONST UNTYP.           ASEG       40012C34 
SEEBIT              REL    CONST UNTYP.           .text      C 
SEEBIT_NFA          REL    CONST UNTYP.           .text      0 
SEMI                REL    CONST UNTYP.           .text      8 
SEMIC_CREATE        REL    CONST UNTYP.           .text      4F0 
SEMIS               REL    CONST UNTYP.           .text      0 
SEMI_NFA            REL    CONST UNTYP.           .text      0 
SETBIT              REL    CONST UNTYP.           .text      C 
SETBITS             REL    CONST UNTYP.           .text      C 
SETBITS_NFA         REL    CONST UNTYP.           .text      0 
SETBIT_NFA          REL    CONST UNTYP.           .text      0 
SETENA0             ABS    CONST UNTYP.           ASEG       E000E100 
SETENA1             ABS    CONST UNTYP.           ASEG       E000E104 
SETENA2             ABS    CONST UNTYP.           ASEG       E000E108 
SETPEND0            ABS    CONST UNTYP.           ASEG       E000E200 
SETPEND1            ABS    CONST UNTYP.           ASEG       E000E204 
SETPEND2            ABS    CONST UNTYP.           ASEG       E000E208 
SHCSR               ABS    CONST UNTYP.           ASEG       E000ED24 
SHPR0               ABS    CONST UNTYP.           ASEG       E000ED18 
SHPR1               ABS    CONST UNTYP.           ASEG       E000ED1C 
SHPR2               ABS    CONST UNTYP.           ASEG       E000ED20 
SIGN                REL    CONST UNTYP.           .text      C 
SIGN1               REL    CONST UNTYP.           .text      2C 
SIGNON              REL    CONST UNTYP.           .text      53C 
SIGN_NFA            REL    CONST UNTYP.           .text      0 
SLASH               REL    CONST UNTYP.           .text      8 
SLASH_NFA           REL    CONST UNTYP.           .text      0 
SLMOD               REL    CONST UNTYP.           .text      C 
SLMOD_NFA           REL    CONST UNTYP.           .text      0 
SPACE               REL    CONST UNTYP.           .text      C 
SPACES              REL    CONST UNTYP.           .text      C 
SPACES_DO           REL    CONST UNTYP.           .text      2C 
SPACES_DONE         REL    CONST UNTYP.           .text      38 
SPACES_NFA          REL    CONST UNTYP.           .text      0 
SPACE_NFA           REL    CONST UNTYP.           .text      0 
SPAD                REL    CONST UNTYP.           .tcm_pref_ 358 
SPAT                REL    CONST UNTYP.           .text      8 
SPAT_NFA            REL    CONST UNTYP.           .text      0 
SPI1_CR1            ABS    CONST UNTYP.           ASEG       40013000 
SPI1_CR2            ABS    CONST UNTYP.           ASEG       40013004 
SPI1_CRCPR          ABS    CONST UNTYP.           ASEG       40013010 
SPI1_DAC_BB         REL    CONST UNTYP.           .text      C 
SPI1_DR             ABS    CONST UNTYP.           ASEG       4001300C 
SPI1_RXCRCR         ABS    CONST UNTYP.           ASEG       40013014 
SPI1_SR             ABS    CONST UNTYP.           ASEG       40013008 
SPI1_TXCRCR         ABS    CONST UNTYP.           ASEG       40013018 
SPI2_CR1            ABS    CONST UNTYP.           ASEG       40003800 
SPI2_CR2            ABS    CONST UNTYP.           ASEG       40003804 
SPI2_CRCPR          ABS    CONST UNTYP.           ASEG       40003810 
SPI2_DR             ABS    CONST UNTYP.           ASEG       4000380C 
SPI2_I2SCFGR        ABS    CONST UNTYP.           ASEG       4000381C 
SPI2_I2SPR          ABS    CONST UNTYP.           ASEG       40003820 
SPI2_RXCRCR         ABS    CONST UNTYP.           ASEG       40003814 
SPI2_SR             ABS    CONST UNTYP.           ASEG       40003808 
SPI2_TXCRCR         ABS    CONST UNTYP.           ASEG       40003818 
SPI3_CR1            ABS    CONST UNTYP.           ASEG       40003C00 
SPI3_CR2            ABS    CONST UNTYP.           ASEG       40003C04 
SPI3_CRCPR          ABS    CONST UNTYP.           ASEG       40003C10 
SPI3_DR             ABS    CONST UNTYP.           ASEG       40003C0C 
SPI3_I2SCFGR        ABS    CONST UNTYP.           ASEG       40003C1C 
SPI3_I2SPR          ABS    CONST UNTYP.           ASEG       40003C20 
SPI3_RXCRCR         ABS    CONST UNTYP.           ASEG       40003C14 
SPI3_SR             ABS    CONST UNTYP.           ASEG       40003C08 
SPI3_TXCRCR         ABS    CONST UNTYP.           ASEG       40003C18 
SPSTO               REL    CONST UNTYP.           .text      0 
SRAM2_CSTACK        ABS    CONST UNTYP.           ASEG       2001E000 
SSLASH              REL    CONST UNTYP.           .text      8 
SSLASH_NFA          REL    CONST UNTYP.           .text      0 
SSMOD               REL    CONST UNTYP.           .text      C 
SSMOD_NFA           REL    CONST UNTYP.           .text      0 
STACKSIZE           ABS    CONST UNTYP.           .tcm_pref_ 80 
STAR                REL    CONST UNTYP.           .text      8 
STAR_NFA            REL    CONST UNTYP.           .text      0 
STATE_NFA           REL    CONST UNTYP.           .text      0 
STATE_SV            REL    CONST UNTYP.           .text      C 
STCTR               REL    CONST UNTYP.           .text      C 
STCTR_NFA           REL    CONST UNTYP.           .text      0 
STICKER             REL    CONST UNTYP.           .tcm_pref_ 0 
STIR                ABS    CONST UNTYP.           ASEG       E000EF00 
STM32Fx_COLD_FISH   REL    CONST PUB UNTYP.       .text      1 
STOD                REL    CONST UNTYP.           .text      C 
STOD1               REL    CONST UNTYP.           .text      D 
STOD_NFA            REL    CONST UNTYP.           .text      0 
STORE               REL    CONST UNTYP.           .text      8 
STORE_NFA           REL    CONST UNTYP.           .text      0 
STRVA               REL    CONST UNTYP.           .text      0 
SUBB                REL    CONST UNTYP.           .text      8 
SUB_CR_4_NL         REL    CONST UNTYP.           .text      7 
SUB_NFA             REL    CONST UNTYP.           .text      0 
SV_END              REL    CONST UNTYP.           .tcm_pref_ 13C 
SV_INIT_VALUES      REL    CONST UNTYP.           .text      0 
SV_START            REL    CONST UNTYP.           .tcm_pref_ 104 
SW1                 REL    CONST UNTYP.           .text      8 
SW1_NFA             REL    CONST UNTYP.           .text      0 
SW1_OFF             REL    CONST UNTYP.           .text      2C 
SW1_ON              REL    CONST UNTYP.           .text      14 
SW2                 REL    CONST UNTYP.           .text      8 
SW2_NFA             REL    CONST UNTYP.           .text      0 
SW2_OFF             REL    CONST UNTYP.           .text      2C 
SW2_ON              REL    CONST UNTYP.           .text      14 
SW3                 REL    CONST UNTYP.           .text      8 
SW3_NFA             REL    CONST UNTYP.           .text      0 
SW3_OFF             REL    CONST UNTYP.           .text      2C 
SW3_ON              REL    CONST UNTYP.           .text      14 
SW4                 REL    CONST UNTYP.           .text      8 
SW4_NFA             REL    CONST UNTYP.           .text      0 
SW4_OFF             REL    CONST UNTYP.           .text      2C 
SW4_ON              REL    CONST UNTYP.           .text      14 
SWAP                REL    CONST UNTYP.           .text      C 
SWAP_NFA            REL    CONST UNTYP.           .text      0 
SXB                 REL    CONST UNTYP.           .text      C 
SXH                 REL    CONST UNTYP.           .text      C 
SXTB_NFA            REL    CONST UNTYP.           .text      0 
SXTH_NFA            REL    CONST UNTYP.           .text      0 
SYSCFG_EXTICR1      ABS    CONST UNTYP.           ASEG       40013808 
SYSCFG_EXTICR2      ABS    CONST UNTYP.           ASEG       4001380C 
SYSCFG_EXTICR3      ABS    CONST UNTYP.           ASEG       40013810 
SYSCFG_EXTICR4      ABS    CONST UNTYP.           ASEG       40013814 
SYSCFG_MEMRMP       ABS    CONST UNTYP.           ASEG       40013800 
SYSCFG_PMC          ABS    CONST UNTYP.           ASEG       40013804 
SYSCLK              REL    CONST UNTYP.           .text      C 
SYSCLK_NFA          REL    CONST UNTYP.           .text      0 
SYSCLOCK            REL    CONST UNTYP.           .sram_1rst 0 
SYSTEMCLOCK         ABS    CONST UNTYP.           ASEG       A037A00 
SYSTICKCALVR        ABS    CONST UNTYP.           ASEG       E000E01C 
SYSTICKCSR          ABS    CONST UNTYP.           ASEG       E000E010 
SYSTICKCVR          ABS    CONST UNTYP.           ASEG       E000E018 
SYSTICKRVR          ABS    CONST UNTYP.           ASEG       E000E014 
SYSTICK_IRQ_OFF     REL    CONST UNTYP.           .text      14 
SYSTICK_IRQ_OFF_NFA REL    CONST UNTYP.           .text      0 
SYSTICK_IRQ_ON      REL    CONST UNTYP.           .text      14 
SYSTICK_IRQ_ON_NFA  REL    CONST UNTYP.           .text      0 
SYST_CALIB          ABS    CONST UNTYP.           ASEG       E000E01C 
SYST_CSR            ABS    CONST UNTYP.           ASEG       E000E010 
SYST_CVR            ABS    CONST UNTYP.           ASEG       E000E018 
SYST_RVR            ABS    CONST UNTYP.           ASEG       E000E014 
SoCinit             REL    CONST UNTYP.           .text      0 
TBRAN               REL    CONST UNTYP.           .text      0 
TCS_FOUND           REL    CONST UNTYP.           .text      1B 
TCS_LOOP            REL    CONST UNTYP.           .text      F 
TDUP                REL    CONST UNTYP.           .text      C 
TDUP_NFA            REL    CONST UNTYP.           .text      0 
THEN                REL    CONST UNTYP.           .text      C 
THEN_NFA            REL    CONST UNTYP.           .text      0 
THREE               REL    CONST UNTYP.           .text      8 
THREE_NFA           REL    CONST UNTYP.           .text      0 
TIB                 REL    CONST UNTYP.           .sram_1rst FA70 
TIB_CHAR_SCAN       REL    CONST UNTYP.           .text      0 
TIB_DMA             REL    CONST UNTYP.           .sram_1rst FAD0 
TIB_DMA_BUF_END     REL    CONST UNTYP.           .sram_1rst FED0 
TIB_NFA             REL    CONST UNTYP.           .text      0 
TIB_SV              REL    CONST UNTYP.           .text      8 
TICK                REL    CONST UNTYP.           .text      8 
TICK_NFA            REL    CONST UNTYP.           .text      0 
TIM10_ARR           ABS    CONST UNTYP.           ASEG       4001442C 
TIM10_CCER          ABS    CONST UNTYP.           ASEG       40014420 
TIM10_CCMR1         ABS    CONST UNTYP.           ASEG       40014418 
TIM10_CCR1          ABS    CONST UNTYP.           ASEG       40014434 
TIM10_CNT           ABS    CONST UNTYP.           ASEG       40014424 
TIM10_CR1           ABS    CONST UNTYP.           ASEG       40014400 
TIM10_DIER          ABS    CONST UNTYP.           ASEG       4001440C 
TIM10_EGR           ABS    CONST UNTYP.           ASEG       40014414 
TIM10_OCMR1         ABS    CONST UNTYP.           ASEG       40014418 
TIM10_PSC           ABS    CONST UNTYP.           ASEG       40014428 
TIM10_SR            ABS    CONST UNTYP.           ASEG       40014410 
TIM11_ARR           ABS    CONST UNTYP.           ASEG       4001482C 
TIM11_CCER          ABS    CONST UNTYP.           ASEG       40014820 
TIM11_CCMR1         ABS    CONST UNTYP.           ASEG       40014818 
TIM11_CCR1          ABS    CONST UNTYP.           ASEG       40014834 
TIM11_CNT           ABS    CONST UNTYP.           ASEG       40014824 
TIM11_CR1           ABS    CONST UNTYP.           ASEG       40014800 
TIM11_DIER          ABS    CONST UNTYP.           ASEG       4001480C 
TIM11_EGR           ABS    CONST UNTYP.           ASEG       40014814 
TIM11_OCMR1         ABS    CONST UNTYP.           ASEG       40014818 
TIM11_OR            ABS    CONST UNTYP.           ASEG       40014850 
TIM11_PSC           ABS    CONST UNTYP.           ASEG       40014828 
TIM11_SR            ABS    CONST UNTYP.           ASEG       40014810 
TIM12_ARR           ABS    CONST UNTYP.           ASEG       4000182C 
TIM12_CCER          ABS    CONST UNTYP.           ASEG       40001820 
TIM12_CCMR1         ABS    CONST UNTYP.           ASEG       40001818 
TIM12_CCR1          ABS    CONST UNTYP.           ASEG       40001834 
TIM12_CCR2          ABS    CONST UNTYP.           ASEG       40001838 
TIM12_CNT           ABS    CONST UNTYP.           ASEG       40001824 
TIM12_CR1           ABS    CONST UNTYP.           ASEG       40001800 
TIM12_CR2           ABS    CONST UNTYP.           ASEG       40001804 
TIM12_DIER          ABS    CONST UNTYP.           ASEG       4000180C 
TIM12_EGR           ABS    CONST UNTYP.           ASEG       40001814 
TIM12_OCMR1         ABS    CONST UNTYP.           ASEG       40001818 
TIM12_PSC           ABS    CONST UNTYP.           ASEG       40001828 
TIM12_SMCR          ABS    CONST UNTYP.           ASEG       40001808 
TIM12_SR            ABS    CONST UNTYP.           ASEG       40001810 
TIM13_ARR           ABS    CONST UNTYP.           ASEG       40001C2C 
TIM13_CCER          ABS    CONST UNTYP.           ASEG       40001C20 
TIM13_CCMR1         ABS    CONST UNTYP.           ASEG       40001C18 
TIM13_CCR1          ABS    CONST UNTYP.           ASEG       40001C34 
TIM13_CNT           ABS    CONST UNTYP.           ASEG       40001C24 
TIM13_CR1           ABS    CONST UNTYP.           ASEG       40001C00 
TIM13_DIER          ABS    CONST UNTYP.           ASEG       40001C0C 
TIM13_EGR           ABS    CONST UNTYP.           ASEG       40001C14 
TIM13_OCMR1         ABS    CONST UNTYP.           ASEG       40001C18 
TIM13_PSC           ABS    CONST UNTYP.           ASEG       40001C28 
TIM13_SR            ABS    CONST UNTYP.           ASEG       40001C10 
TIM14_ARR           ABS    CONST UNTYP.           ASEG       4000202C 
TIM14_CCER          ABS    CONST UNTYP.           ASEG       40002020 
TIM14_CCMR1         ABS    CONST UNTYP.           ASEG       40002018 
TIM14_CCR1          ABS    CONST UNTYP.           ASEG       40002034 
TIM14_CNT           ABS    CONST UNTYP.           ASEG       40002024 
TIM14_CR1           ABS    CONST UNTYP.           ASEG       40002000 
TIM14_DIER          ABS    CONST UNTYP.           ASEG       4000200C 
TIM14_EGR           ABS    CONST UNTYP.           ASEG       40002014 
TIM14_OCMR1         ABS    CONST UNTYP.           ASEG       40002018 
TIM14_PSC           ABS    CONST UNTYP.           ASEG       40002028 
TIM14_SR            ABS    CONST UNTYP.           ASEG       40002010 
TIM1_ARR            ABS    CONST UNTYP.           ASEG       4001002C 
TIM1_BDTR           ABS    CONST UNTYP.           ASEG       40010044 
TIM1_CCER           ABS    CONST UNTYP.           ASEG       40010020 
TIM1_CCMR1          ABS    CONST UNTYP.           ASEG       40010018 
TIM1_CCMR2          ABS    CONST UNTYP.           ASEG       4001001C 
TIM1_CCR1           ABS    CONST UNTYP.           ASEG       40010034 
TIM1_CCR2           ABS    CONST UNTYP.           ASEG       40010038 
TIM1_CCR3           ABS    CONST UNTYP.           ASEG       4001003C 
TIM1_CCR4           ABS    CONST UNTYP.           ASEG       40010040 
TIM1_CNT            ABS    CONST UNTYP.           ASEG       40010024 
TIM1_CR1            ABS    CONST UNTYP.           ASEG       40010000 
TIM1_CR2            ABS    CONST UNTYP.           ASEG       40010004 
TIM1_DCR            ABS    CONST UNTYP.           ASEG       40010048 
TIM1_DIER           ABS    CONST UNTYP.           ASEG       4001000C 
TIM1_DMAR           ABS    CONST UNTYP.           ASEG       4001004C 
TIM1_EGR            ABS    CONST UNTYP.           ASEG       40010014 
TIM1_OCMR1          ABS    CONST UNTYP.           ASEG       40010018 
TIM1_OCMR2          ABS    CONST UNTYP.           ASEG       4001001C 
TIM1_OCMR8          ABS    CONST UNTYP.           ASEG       40010418 
TIM1_PSC            ABS    CONST UNTYP.           ASEG       40010028 
TIM1_RCR            ABS    CONST UNTYP.           ASEG       40010030 
TIM1_SMCR           ABS    CONST UNTYP.           ASEG       40010008 
TIM1_SR             ABS    CONST UNTYP.           ASEG       40010010 
TIM2_ARR            ABS    CONST UNTYP.           ASEG       4000002C 
TIM2_CCER           ABS    CONST UNTYP.           ASEG       40000020 
TIM2_CCMR1          ABS    CONST UNTYP.           ASEG       40000018 
TIM2_CCMR2          ABS    CONST UNTYP.           ASEG       4000001C 
TIM2_CCR1           ABS    CONST UNTYP.           ASEG       40000034 
TIM2_CCR2           ABS    CONST UNTYP.           ASEG       40000038 
TIM2_CCR3           ABS    CONST UNTYP.           ASEG       4000003C 
TIM2_CCR4           ABS    CONST UNTYP.           ASEG       40000040 
TIM2_CNT            ABS    CONST UNTYP.           ASEG       40000024 
TIM2_CR1            ABS    CONST UNTYP.           ASEG       40000000 
TIM2_CR2            ABS    CONST UNTYP.           ASEG       40000004 
TIM2_DCR            ABS    CONST UNTYP.           ASEG       40000048 
TIM2_DIER           ABS    CONST UNTYP.           ASEG       4000000C 
TIM2_DMAR           ABS    CONST UNTYP.           ASEG       4000004C 
TIM2_EGR            ABS    CONST UNTYP.           ASEG       40000014 
TIM2_OCMR1          ABS    CONST UNTYP.           ASEG       40000018 
TIM2_OCMR2          ABS    CONST UNTYP.           ASEG       4000001C 
TIM2_OR             ABS    CONST UNTYP.           ASEG       40000050 
TIM2_PSC            ABS    CONST UNTYP.           ASEG       40000028 
TIM2_SMCR           ABS    CONST UNTYP.           ASEG       40000008 
TIM2_SR             ABS    CONST UNTYP.           ASEG       40000010 
TIM3_ARR            ABS    CONST UNTYP.           ASEG       4000042C 
TIM3_CCER           ABS    CONST UNTYP.           ASEG       40000420 
TIM3_CCMR1          ABS    CONST UNTYP.           ASEG       40000418 
TIM3_CCMR2          ABS    CONST UNTYP.           ASEG       4000041C 
TIM3_CCR1           ABS    CONST UNTYP.           ASEG       40000434 
TIM3_CCR2           ABS    CONST UNTYP.           ASEG       40000438 
TIM3_CCR3           ABS    CONST UNTYP.           ASEG       4000043C 
TIM3_CCR4           ABS    CONST UNTYP.           ASEG       40000440 
TIM3_CNT            ABS    CONST UNTYP.           ASEG       40000424 
TIM3_CR1            ABS    CONST UNTYP.           ASEG       40000400 
TIM3_CR2            ABS    CONST UNTYP.           ASEG       40000404 
TIM3_DCR            ABS    CONST UNTYP.           ASEG       40000448 
TIM3_DIER           ABS    CONST UNTYP.           ASEG       4000040C 
TIM3_DMAR           ABS    CONST UNTYP.           ASEG       4000044C 
TIM3_EGR            ABS    CONST UNTYP.           ASEG       40000414 
TIM3_OCMR1          ABS    CONST UNTYP.           ASEG       40000418 
TIM3_OCMR2          ABS    CONST UNTYP.           ASEG       4000041C 
TIM3_PSC            ABS    CONST UNTYP.           ASEG       40000428 
TIM3_SMCR           ABS    CONST UNTYP.           ASEG       40000408 
TIM3_SR             ABS    CONST UNTYP.           ASEG       40000410 
TIM4_ARR            ABS    CONST UNTYP.           ASEG       4000082C 
TIM4_CCER           ABS    CONST UNTYP.           ASEG       40000820 
TIM4_CCMR1          ABS    CONST UNTYP.           ASEG       40000818 
TIM4_CCMR2          ABS    CONST UNTYP.           ASEG       4000081C 
TIM4_CCR1           ABS    CONST UNTYP.           ASEG       40000834 
TIM4_CCR2           ABS    CONST UNTYP.           ASEG       40000838 
TIM4_CCR3           ABS    CONST UNTYP.           ASEG       4000083C 
TIM4_CCR4           ABS    CONST UNTYP.           ASEG       40000840 
TIM4_CNT            ABS    CONST UNTYP.           ASEG       40000824 
TIM4_CR1            ABS    CONST UNTYP.           ASEG       40000800 
TIM4_CR2            ABS    CONST UNTYP.           ASEG       40000804 
TIM4_DCR            ABS    CONST UNTYP.           ASEG       40000848 
TIM4_DIER           ABS    CONST UNTYP.           ASEG       4000080C 
TIM4_DMAR           ABS    CONST UNTYP.           ASEG       4000084C 
TIM4_EGR            ABS    CONST UNTYP.           ASEG       40000814 
TIM4_OCMR1          ABS    CONST UNTYP.           ASEG       40000818 
TIM4_OCMR2          ABS    CONST UNTYP.           ASEG       4000081C 
TIM4_PSC            ABS    CONST UNTYP.           ASEG       40000828 
TIM4_SMCR           ABS    CONST UNTYP.           ASEG       40000808 
TIM4_SR             ABS    CONST UNTYP.           ASEG       40000810 
TIM5_ARR            ABS    CONST UNTYP.           ASEG       40000C2C 
TIM5_CCER           ABS    CONST UNTYP.           ASEG       40000C20 
TIM5_CCMR1          ABS    CONST UNTYP.           ASEG       40000C18 
TIM5_CCMR2          ABS    CONST UNTYP.           ASEG       40000C1C 
TIM5_CCR1           ABS    CONST UNTYP.           ASEG       40000C34 
TIM5_CCR2           ABS    CONST UNTYP.           ASEG       40000C38 
TIM5_CCR3           ABS    CONST UNTYP.           ASEG       40000C3C 
TIM5_CCR4           ABS    CONST UNTYP.           ASEG       40000C40 
TIM5_CNT            ABS    CONST UNTYP.           ASEG       40000C24 
TIM5_CR1            ABS    CONST UNTYP.           ASEG       40000C00 
TIM5_CR2            ABS    CONST UNTYP.           ASEG       40000C04 
TIM5_DCR            ABS    CONST UNTYP.           ASEG       40000C48 
TIM5_DIER           ABS    CONST UNTYP.           ASEG       40000C0C 
TIM5_DMAR           ABS    CONST UNTYP.           ASEG       40000C4C 
TIM5_EGR            ABS    CONST UNTYP.           ASEG       40000C14 
TIM5_OCMR1          ABS    CONST UNTYP.           ASEG       40000C18 
TIM5_OCMR2          ABS    CONST UNTYP.           ASEG       40000C1C 
TIM5_OR             ABS    CONST UNTYP.           ASEG       40000C50 
TIM5_PSC            ABS    CONST UNTYP.           ASEG       40000C28 
TIM5_SMCR           ABS    CONST UNTYP.           ASEG       40000C08 
TIM5_SR             ABS    CONST UNTYP.           ASEG       40000C10 
TIM6_ARR            ABS    CONST UNTYP.           ASEG       4000102C 
TIM6_CNT            ABS    CONST UNTYP.           ASEG       40001024 
TIM6_CR1            ABS    CONST UNTYP.           ASEG       40001000 
TIM6_CR2            ABS    CONST UNTYP.           ASEG       40001004 
TIM6_DIER           ABS    CONST UNTYP.           ASEG       4000100C 
TIM6_EGR            ABS    CONST UNTYP.           ASEG       40001014 
TIM6_PSC            ABS    CONST UNTYP.           ASEG       40001028 
TIM6_SR             ABS    CONST UNTYP.           ASEG       40001010 
TIM7_ARR            ABS    CONST UNTYP.           ASEG       4000142C 
TIM7_CNT            ABS    CONST UNTYP.           ASEG       40001424 
TIM7_CR1            ABS    CONST UNTYP.           ASEG       40001400 
TIM7_CR2            ABS    CONST UNTYP.           ASEG       40001404 
TIM7_DIER           ABS    CONST UNTYP.           ASEG       4000140C 
TIM7_EGR            ABS    CONST UNTYP.           ASEG       40001414 
TIM7_PSC            ABS    CONST UNTYP.           ASEG       40001428 
TIM7_SR             ABS    CONST UNTYP.           ASEG       40001410 
TIM8_ARR            ABS    CONST UNTYP.           ASEG       4001042C 
TIM8_BDTR           ABS    CONST UNTYP.           ASEG       40010444 
TIM8_CCER           ABS    CONST UNTYP.           ASEG       40010420 
TIM8_CCMR1          ABS    CONST UNTYP.           ASEG       40010418 
TIM8_CCMR2          ABS    CONST UNTYP.           ASEG       4001041C 
TIM8_CCR1           ABS    CONST UNTYP.           ASEG       40010434 
TIM8_CCR2           ABS    CONST UNTYP.           ASEG       40010438 
TIM8_CCR3           ABS    CONST UNTYP.           ASEG       4001043C 
TIM8_CCR4           ABS    CONST UNTYP.           ASEG       40010440 
TIM8_CNT            ABS    CONST UNTYP.           ASEG       40010424 
TIM8_CR1            ABS    CONST UNTYP.           ASEG       40010400 
TIM8_CR2            ABS    CONST UNTYP.           ASEG       40010404 
TIM8_DCR            ABS    CONST UNTYP.           ASEG       40010448 
TIM8_DIER           ABS    CONST UNTYP.           ASEG       4001040C 
TIM8_DMAR           ABS    CONST UNTYP.           ASEG       4001044C 
TIM8_EGR            ABS    CONST UNTYP.           ASEG       40010414 
TIM8_OCMR2          ABS    CONST UNTYP.           ASEG       4001041C 
TIM8_PSC            ABS    CONST UNTYP.           ASEG       40010428 
TIM8_RCR            ABS    CONST UNTYP.           ASEG       40010430 
TIM8_SMCR           ABS    CONST UNTYP.           ASEG       40010408 
TIM8_SR             ABS    CONST UNTYP.           ASEG       40010410 
TIM9_ARR            ABS    CONST UNTYP.           ASEG       4001402C 
TIM9_CCER           ABS    CONST UNTYP.           ASEG       40014020 
TIM9_CCMR1          ABS    CONST UNTYP.           ASEG       40014018 
TIM9_CCR1           ABS    CONST UNTYP.           ASEG       40014034 
TIM9_CCR2           ABS    CONST UNTYP.           ASEG       40014038 
TIM9_CNT            ABS    CONST UNTYP.           ASEG       40014024 
TIM9_CR1            ABS    CONST UNTYP.           ASEG       40014000 
TIM9_CR2            ABS    CONST UNTYP.           ASEG       40014004 
TIM9_DIER           ABS    CONST UNTYP.           ASEG       4001400C 
TIM9_EGR            ABS    CONST UNTYP.           ASEG       40014014 
TIM9_OCMR1          ABS    CONST UNTYP.           ASEG       40014018 
TIM9_PSC            ABS    CONST UNTYP.           ASEG       40014028 
TIM9_SMCR           ABS    CONST UNTYP.           ASEG       40014008 
TIM9_SR             ABS    CONST UNTYP.           ASEG       40014010 
TOFA                REL    CONST UNTYP.           .text      0 
TOGGLE              REL    CONST UNTYP.           .text      0 
TOR                 REL    CONST UNTYP.           .text      8 
TOR_NFA             REL    CONST UNTYP.           .text      0 
TRAVERSE            REL    CONST UNTYP.           .text      58C 
TRAVERSE_BEGIN      REL    CONST UNTYP.           .text      594 
TRUE_NEG_1          REL    CONST UNTYP.           .text      8 
TRUE_NEG_1_NFA      REL    CONST UNTYP.           .text      0 
TWO                 REL    CONST UNTYP.           .text      8 
TWOP                REL    CONST UNTYP.           .text      8 
TWOP_NFA            REL    CONST UNTYP.           .text      0 
TWOSLASH            REL    CONST UNTYP.           .text      8 
TWOSLASH_NFA        REL    CONST UNTYP.           .text      0 
TWOSTAR             REL    CONST UNTYP.           .text      8 
TWOSTAR_NFA         REL    CONST UNTYP.           .text      0 
TWO_NFA             REL    CONST UNTYP.           .text      0 
TXRDY_SUBR          REL    CONST UNTYP.           .text      1 
TYPE                REL    CONST UNTYP.           .text      C 
TYPE1               REL    CONST UNTYP.           .text      4C 
TYPE2               REL    CONST UNTYP.           .text      30 
TYPE3               REL    CONST UNTYP.           .text      50 
TYPE_NFA            REL    CONST UNTYP.           .text      0 
UART0_RX            REL    CONST UNTYP.           .text      10 
UART3_INIT          REL    CONST UNTYP.           .text      10 
UART3_INIT_NFA      REL    CONST UNTYP.           .text      0 
UART3_LSR           REL    CONST UNTYP.           .text      10 
UART3_LSR_NFA       REL    CONST UNTYP.           .text      0 
UART3_RX_NFA        REL    CONST UNTYP.           .text      0 
UART3_TX            REL    CONST UNTYP.           .text      10 
UART3_TX_NFA        REL    CONST UNTYP.           .text      0 
UART4_BRR           ABS    CONST UNTYP.           ASEG       40004C08 
UART4_CR1           ABS    CONST UNTYP.           ASEG       40004C0C 
UART4_CR2           ABS    CONST UNTYP.           ASEG       40004C10 
UART4_CR3           ABS    CONST UNTYP.           ASEG       40004C14 
UART4_DR            ABS    CONST UNTYP.           ASEG       40004C04 
UART4_SR            ABS    CONST UNTYP.           ASEG       40004C00 
UART5_BRR           ABS    CONST UNTYP.           ASEG       40005008 
UART5_CR1           ABS    CONST UNTYP.           ASEG       4000500C 
UART5_CR2           ABS    CONST UNTYP.           ASEG       40005010 
UART5_CR3           ABS    CONST UNTYP.           ASEG       40005014 
UART5_DR            ABS    CONST UNTYP.           ASEG       40005004 
UART5_SR            ABS    CONST UNTYP.           ASEG       40005000 
UART6_BRR           ABS    CONST UNTYP.           ASEG       40011408 
UART6_CR1           ABS    CONST UNTYP.           ASEG       4001140C 
UART6_CR2           ABS    CONST UNTYP.           ASEG       40011410 
UART6_CR3           ABS    CONST UNTYP.           ASEG       40011414 
UART6_DR            ABS    CONST UNTYP.           ASEG       40011404 
UART6_SR            ABS    CONST UNTYP.           ASEG       40011400 
UBAUD               REL    CONST UNTYP.           .sram_2nd_ 204 
UDOT                REL    CONST UNTYP.           .text      8 
UDOT_BASE_SUFFIX    REL    CONST UNTYP.           .text      134 
UDOT_NFA            REL    CONST UNTYP.           .text      0 
ULES1               REL    CONST UNTYP.           .text      34 
ULES2               REL    CONST UNTYP.           .text      3C 
ULESSTHAN           REL    CONST UNTYP.           .text      8 
ULESSTHAN_NFA       REL    CONST UNTYP.           .text      0 
UNTIL               REL    CONST UNTYP.           .text      C 
UNTIL_NFA           REL    CONST UNTYP.           .text      0 
UP                  REL    CONST UNTYP.           .tcm_pref_ 120 
UP_NFA              REL    CONST UNTYP.           .text      0 
UP_SV               REL    CONST UNTYP.           .text      8 
USART1_BRR          ABS    CONST UNTYP.           ASEG       40011008 
USART1_CR1          ABS    CONST UNTYP.           ASEG       4001100C 
USART1_CR2          ABS    CONST UNTYP.           ASEG       40011010 
USART1_CR3          ABS    CONST UNTYP.           ASEG       40011014 
USART1_DR           ABS    CONST UNTYP.           ASEG       40011004 
USART1_GTPR         ABS    CONST UNTYP.           ASEG       40011018 
USART1_SR           ABS    CONST UNTYP.           ASEG       40011000 
USART2_BRR          ABS    CONST UNTYP.           ASEG       40004408 
USART2_CR1          ABS    CONST UNTYP.           ASEG       4000440C 
USART2_CR2          ABS    CONST UNTYP.           ASEG       40004410 
USART2_CR3          ABS    CONST UNTYP.           ASEG       40004414 
USART2_DR           ABS    CONST UNTYP.           ASEG       40004404 
USART2_GTPR         ABS    CONST UNTYP.           ASEG       40004418 
USART2_SR           ABS    CONST UNTYP.           ASEG       40004400 
USART3_BRR          ABS    CONST UNTYP.           ASEG       40004808 
USART3_CR1          ABS    CONST UNTYP.           ASEG       4000480C 
USART3_CR2          ABS    CONST UNTYP.           ASEG       40004810 
USART3_CR3          ABS    CONST UNTYP.           ASEG       40004814 
USART3_DR           ABS    CONST UNTYP.           ASEG       40004804 
USART3_GTPR         ABS    CONST UNTYP.           ASEG       40004818 
USART3_SR           ABS    CONST UNTYP.           ASEG       40004800 
USEBIN              REL    CONST UNTYP.           .text      4B 
USEDEC              REL    CONST UNTYP.           .text      4F 
USEHEX              REL    CONST UNTYP.           .text      53 
USLASH              REL    CONST UNTYP.           .text      0 
USTAR               REL    CONST UNTYP.           .text      0 
VALLOT_OK           REL    CONST UNTYP.           .text      48 
VARALLOT            REL    CONST UNTYP.           .text      10 
VARALLOT_NFA        REL    CONST UNTYP.           .text      0 
VARIABLE            REL    CONST UNTYP.           .text      10 
VARIABLE_NFA        REL    CONST UNTYP.           .text      0 
VARSPACE            REL    CONST UNTYP.           .text      0 
VAR_                REL    CONST UNTYP.           .text      8 
VAR_NFA             REL    CONST UNTYP.           .text      0 
VBASE               REL    CONST UNTYP.           .text      C 
VBASE_NFA           REL    CONST UNTYP.           .text      0 
VS_RECVR_LOOP       REL    CONST UNTYP.           .text      58 
VS_RECVR_NEXT       REL    CONST UNTYP.           .text      A4 
VTOR                ABS    CONST UNTYP.           ASEG       E000ED08 
WARM                REL    CONST UNTYP.           .text      57C 
WC_COMPILE_NFA      REL    CONST UNTYP.           .text      0 
WC_CREATE_NFA       REL    CONST UNTYP.           .text      0 
WC_FISH_GPIO_NFA    REL    CONST UNTYP.           .text      0 
WC_FISH_PubRel_NFA  REL    CONST UNTYP.           .text      0 
WC_FISH_SYS_NFA     REL    CONST UNTYP.           .text      0 
WC_IRQ_NFA          REL    CONST UNTYP.           .text      0 
WC_NUMBERS_NFA      REL    CONST UNTYP.           .text      0 
WC_RWMEMORY_NFA     REL    CONST UNTYP.           .text      0 
WC_STACK_NFA        REL    CONST UNTYP.           .text      0 
WC_UARTx_NFA        REL    CONST UNTYP.           .text      0 
WENCL               REL    CONST UNTYP.           .text      28 
WHILE               REL    CONST UNTYP.           .text      C 
WHILE_NFA           REL    CONST UNTYP.           .text      0 
WORD                REL    CONST UNTYP.           .text      C 
WORD1               REL    CONST UNTYP.           .text      10 
WORD2               REL    CONST UNTYP.           .text      14 
WORD21              REL    CONST UNTYP.           .text      8C 
WORDCAT             REL    CONST UNTYP.           .text      C 
WORDCAT_NFA         REL    CONST UNTYP.           .text      0 
WORDNOTFOUND        REL    CONST UNTYP.           .text      6F 
WORDS               REL    CONST UNTYP.           .text      C 
WORDS1              REL    CONST UNTYP.           .text      20 
WORDS2              REL    CONST UNTYP.           .text      60 
WORDSCONT           REL    CONST UNTYP.           .text      AC 
WORDSDONE           REL    CONST UNTYP.           .text      FC 
WORDS_NFA           REL    CONST UNTYP.           .text      0 
WORD_NFA            REL    CONST UNTYP.           .text      0 
WTEST               REL    CONST UNTYP.           .text      C 
WWDG_CFR            ABS    CONST UNTYP.           ASEG       40002C04 
WWDG_CR             ABS    CONST UNTYP.           ASEG       40002C00 
WWDG_SR             ABS    CONST UNTYP.           ASEG       40002C08 
XDO                 REL    CONST UNTYP.           .text      0 
XLOO1               REL    CONST UNTYP.           .text      3 
XLOO2               REL    CONST UNTYP.           .text      15 
XLOOP               REL    CONST UNTYP.           .text      0 
XOFF                REL    CONST UNTYP.           .text      C 
XOFF_CHAR           ABS    CONST UNTYP.           ASEG       13 
XOFF_NFA            REL    CONST UNTYP.           .text      0 
XOFF_SUBR           REL    CONST UNTYP.           .text      1 
XON                 REL    CONST UNTYP.           .text      8 
XON_CHAR            ABS    CONST UNTYP.           ASEG       11 
XON_NFA             REL    CONST UNTYP.           .text      0 
XON_SUBR            REL    CONST UNTYP.           .text      1 
XORR                REL    CONST UNTYP.           .text      8 
XORR_NFA            REL    CONST UNTYP.           .text      0 
XPLOOP              REL    CONST UNTYP.           .text      0 
ZBRAN               REL    CONST UNTYP.           .text      0 
ZEQU                REL    CONST UNTYP.           .text      8 
ZEQU_NFA            REL    CONST UNTYP.           .text      0 
ZEQU_ZERO           REL    CONST UNTYP.           .text      D 
ZERO                REL    CONST UNTYP.           .text      8 
ZERO_NFA            REL    CONST UNTYP.           .text      0 
ZLESS               REL    CONST UNTYP.           .text      8 
ZLESS1              REL    CONST UNTYP.           .text      F 
ZLESS_NFA           REL    CONST UNTYP.           .text      0 
ZNDUP               REL    CONST UNTYP.           .text      C 
_WaitBsy10          REL    CONST UNTYP.           .text      3 
__iar_program_start REL    CONST PUB UNTYP.       .text      1 
_copyintvecs        REL    CONST UNTYP.           .text      11 
_fillRAM            REL    CONST UNTYP.           .text      7 
andk                REL    CONST UNTYP.           .text      0 
atk                 REL    CONST UNTYP.           .text      0 
begin               REL    CONST UNTYP.           .text      0 
bisk                REL    CONST UNTYP.           .text      0 
copyintvecs         REL    CONST UNTYP.           .text      0 
inc                 REL    CONST UNTYP.           .text      5C4 
inctos              REL    CONST UNTYP.           .text      5C4 
initART             REL    CONST UNTYP.           .text      19C 
msg_CO              REL    CONST UNTYP.           .text      0 
msg_FISH            REL    CONST UNTYP.           .text      0 
msg_FISH_TIMESTAMP  REL    CONST UNTYP.           .text      59 
msg_MY_OK           REL    CONST UNTYP.           .text      68 
msg_RUN             REL    CONST UNTYP.           .text      0 
msg_SIGNON_DLE      REL    CONST UNTYP.           .text      66 
msg_cr              REL    CONST UNTYP.           .text      A 
msg_dictfull        REL    CONST UNTYP.           .text      90 
msg_dictspace       REL    CONST UNTYP.           .text      1C 
msg_forget_fish     REL    CONST UNTYP.           .text      50 
msg_forget_saved    REL    CONST UNTYP.           .text      6F 
msg_number_error    REL    CONST UNTYP.           .text      F9 
msg_paren_err       REL    CONST UNTYP.           .text      2E 
msg_qcomp           REL    CONST UNTYP.           .text      15B 
msg_qexec           REL    CONST UNTYP.           .text      176 
msg_qpair           REL    CONST UNTYP.           .text      12D 
msg_qstack          REL    CONST UNTYP.           .text      113 
msg_questionmark    REL    CONST UNTYP.           .text      6 
msg_uvfull          REL    CONST UNTYP.           .text      AF 
msg_uvspace         REL    CONST UNTYP.           .text      11 
msg_word_error      REL    CONST UNTYP.           .text      E9 
msg_wordexists      REL    CONST UNTYP.           .text      D1 
oneplus             REL    CONST UNTYP.           .text      5C4 
ork                 REL    CONST UNTYP.           .text      0 
rmwamd              REL    CONST UNTYP.           .text      0 
rmwkkk              REL    CONST UNTYP.           .text      0 
rxRDY?              REL    CONST UNTYP.           .text      5 
ssNEXT1             REL    CONST UNTYP.           .text      1 
strda               REL    CONST UNTYP.           .text      0 
strk                REL    CONST UNTYP.           .text      0 
strkk               REL    CONST UNTYP.           .text      0 
strva               REL    CONST UNTYP.           .text      0 
thispfa             REL    CONST UNTYP.           .text      37 
tt1                 REL    CONST UNTYP.           .text      3C 
tt2                 REL    CONST UNTYP.           .text      40 
txRDY?              REL    CONST UNTYP.           .text      5 
until               REL    CONST UNTYP.           .text      0 
zero_IN             REL    CONST UNTYP.           .text      70 
zero_OUT            REL    CONST UNTYP.           .text      84 


##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#        Bytes: 85452        #
##############################



