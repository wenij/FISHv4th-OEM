\ NOTE2ME: DUP DOESNT ERROR WHEN STACK IS EMPTY. IT PUSHES A ZERO~!

POFF    \ TURN LINE RESPONCE OFF
EHON    \ STOP ON 1RST ERROR

\ PSTAT_

\ The spi3 register addresses.
040003C00h CONSTANT	SPI3-CR1
040003C04h CONSTANT	SPI3-CR2
040003C08h CONSTANT	SPI3-SR
040003C0Ch CONSTANT	SPI3-DR
040003C10h CONSTANT	SPI3-CRCPR
040003C14h CONSTANT	SPI3-RXCRCR
040003C18h CONSTANT	SPI3-TXCRCR

: ?SPI3-DIRECTION
SPI3-CR1 @ 0C37Dh = IF ." IN UNIDIRECTIONAL MODE " THEN
SPI3-CR1 @ 037Dh = IF ." IN BIDIRECTIONAL  MODE " THEN
;

: .SPI3 ( -- )
CR  ?SPI3-DIRECTION CR
." SPI3-CR1 ADDR IS: " SPI3-CR1 .H ." , VALUE IS: " SPI3-CR1 @ .H	CR
." SPI3-CR2 ADDR IS: " SPI3-CR2 .H ." , VALUE IS: " SPI3-CR2 @ .H	CR
." SPI3-SR ADDR IS: " SPI3-SR .H ." , VALUE IS: " SPI3-SR @ .B 
." <<< 10b IS TXE AND 11b IS LOOPBACK" CR
." SPI3-DR ADDR IS: " SPI3-DR .H ." , VALUE IS: " SPI3-DR	@ .H CR
;

.SPI3

(
\ The gpio registers involved.
040020000h	CONSTANT	GPIOA-MODER
040020004h	CONSTANT	GPIOA-OTYPER
040020008h	CONSTANT	GPIOA-OSPEEDR
04002000Ch	CONSTANT	GPIOx-PUPDR
040020010h	CONSTANT	GPIOA_IDR
040020014h	CONSTANT	GPIOA_ODR
\ 040020018h	CONSTANT	GPIOA_BSRR	
\ 04002001Ch	CONSTANT	GPIOA_LCKR	
040020020h	CONSTANT	GPIOA_AFRL	
040020024h	CONSTANT	GPIOA_AFRH	
)

\ I NEED MACROS FOR A BUNCH OF THIS:
\ $ creation
\ WC creation
\ talking Create Does~!

(
\ The gpio registers involved.
040020414h	CONSTANT	GPIOB-ODR
040020441h	CONSTANT	GPIOA-IDR
040020400h	CONSTANT	GPIOA-MODER
)
(
\ The gpio registers involved.
040020814h	CONSTANT	GPIOC-ODR
040020810h	CONSTANT	GPIOC-IDR
040020800h	CONSTANT	GPIOC-MODER     \ NEEDED FOR BIT BANG TEST
)
\ 1 0 LSL .B 1b
\ 1 1 LSL .B 10b
\ 1 2 LSL .B 100b
\ 2 2 LSL .B 1000b
\ 3 2 LSL .B 1100b
\ 1 9 LSL .SB TOS> 1000000000b


\ SPI3 WORDS FOR THE DAC.
\ ~WORD IS A WAIT UNTIL LOOP IS TRUE.
\ ?WORD IS A DISPLAY WORD.
\ WORD? IS FLAG GENERATOR, ON OR OFF.

(
TXE: Transmit buffer empty
0: Tx buffer not empty
1: Tx buffer empty
)
: ~TXE ( -- ) \ Until spi3 TXE ok.
 BEGIN SPI3-SR @ 2 AND UNTIL ;

: TXE? ( -- ON/OFF ) \ push on or off = TXE
 SPI3-SR @ 2 AND IF ON ELSE OFF THEN ;

(
RXNE: Receive buffer not empty
0: Rx buffer empty
1: Rx buffer not empty
)
: ~RXNE	( -- )
 BEGIN SPI3-SR @ 1 AND UNTIL ;

: RXNE?	( -- ON/OFF )	\ push on or off = RXNE
 SPI3-SR @ 1 AND IF ON ELSE OFF THEN ;

: ?RXNE  ;

: ?TXE ;

: ?OVR
  CR ." OVERFLOW FLAG IS " SPI3-SR @ 1h AND ?TRUE IF ." ON" ELSE ." OFF" THEN CR ;


: ?BSY ;

: ?MODF ;

\ .BT-CS	PB14	IS LEDGREEN
\ .DAC-CS	PB13	IS LEDRED
\ .ADC-CS	PB12	IS LEDBLUE
\ PSTAT SPI3 CHIP SELECT WORDS.
: .ADC-CS ( -- )	\ PB12
	CR ." ADC-CS IS " GPIOB-ODR @ 1000h AND ?TRUE IF ." OFF" ELSE ." ON" THEN CR ;

: .BT-CS ( -- )		\ PB14
	CR ." BT-CS IS "	GPIOB-ODR @ 4000h AND ?TRUE IF ." OFF" ELSE ." ON" THEN CR ;

: .DAC-CS ( -- )	\ PB13
	CR ." DAC-CS IS " GPIOB-ODR @ 2000h AND ?TRUE IF ." OFF" ELSE ." ON" THEN CR ;

: .CS	( -- )
	CR	
  .ADC-CS
	.BT-CS
	.DAC-CS
;

.CS

\ TWO THINGS DONE - C! AND ...
: DW ( N3 n2 n1=MSB -- )
\ this may have to read back false values, because the spi engine always reads back something.
 	ON CS-DAC \ DAC PB13 CS (LEDRED) low=ON
	~TXE	( n1 )	3Fh AND SPI3-DR C!
  ~RXNE	SPI3-DR C@  DROP  ?OVR
	~TXE	( n2 )  SPI3-DR C!
  ~RXNE	SPI3-DR C@  DROP  ?OVR
	~TXE	( n3 ) 	SPI3-DR C!
  ~RXNE	SPI3-DR C@  DROP  ?OVR
	OFF CS-DAC \ DAC PB13 CS (LEDRED) high=OFF
;

: TS	( -- )
\	GPIOB-ODR 3 13d LSL CLRBITS \ DAC (LEDRED) and BT (LEDGREEN) CS low=ON PB13 & PB14
\ DW WILL KILL THE BT CS
\ CHECK FOR OVERRUN
\	SPI3-SR @ 0F0h AND IF ." OVERRUN ERROR, GOING BYE " BYE THEN
\ now do the 3 write ramp.
ON CS-DAC
\	DO A 3 BYTE Write FOR THE DAC
	FFh 0 DO	\ I 1rst byte is AND'd with 3Fh
		I I I 03Fh AND DW
		100 MS
	LOOP
	1 MS

\ GPIOB-ODR 3 13d LSL SETBITS \ DAC and BT CS HIGH PB13 & PB14
;

: DAC-SCOPE-TEST BEGIN TS ?KEY UNTIL ;

\ SPI3 3 BYTE DAC WRITE 
: DAC3W	( N1 N2 N3 -- )\
	CR ." DAC 3 BYTE WRITE TEST"
	ON CS-DAC \ DAC PB13 CS (LEDRED) low=ON
	.DAC-CS
  ?OVR
	DUP CR ." 1RST BYTE WRITTEN = " 03Fh AND .H
	~TXE	3Fh AND SPI3-DR C!
	~RXNE	SPI3-DR C@
	CR ." 1RST BYTE READ BACK = " .H
  ?OVR
	DUP CR ." 2ND BYTE WRITTEN = "  0FFh AND .H
	~TXE	SPI3-DR C!
	~RXNE	SPI3-DR C@
	CR ." 2ND BYTE READ BACK = " .H
  ?OVR
	DUP CR ." 3RD BYTE WRITTEN = "  0FFh AND .H
	~TXE	SPI3-DR C!
	~RXNE	SPI3-DR C@
	CR ." 3RD BYTE READ BACK = " .H
  OFF CS-DAC
  .DAC-CS
  ?OVR
CR
.S
;

: SEEBIT@ ( 1-based-bit# addr -- )
	SWAP \ MAKES STACK ARGS SAME AS SETBIT/CLRBIT
	1 SWAP LSL >R @ R AND R> AND IF ." ON" ELSE ." OFF" THEN ;

: READ-SPI3-CR1 CR SPI3-CR1 @ DUP .B ;

: READ-SPI3-CR2 CR SPI3-CR2 @ DUP .B ;

: READ-SPI3-DR CR SPI3-DR @ DUP .B ;

: READ-SPI3-SR CR SPI3-SR @ DUP .B ;

: .SPI-REGISTERS
  \ TEXT PREFIX
  READ-SPI3-CR1
  \ TEXT PREFIX
  READ-SPI3-CR2
  \ TEXT PREFIX
  READ-SPI3-DR
  \ TEXT PREFIX
  READ-SPI3-SR
;

.SPI-REGISTERS

: .SW1 ." SW1 (PC6) IS " 9 GPIOC-ODR SEEBIT@	;

: .SW2 ." SW2 (PC7) IS " 8 GPIOC-ODR SEEBIT@	;

: .SW3 ." SW3 (PC8) IS " 7 GPIOC-ODR SEEBIT@	;

: .SW4 ." SW4 (PC9) IS " 6 GPIOC-ODR SEEBIT@	;

: .SW CR .SW1 CR .SW2 CR .SW3 CR .SW4 CR ;

.SW

\ BUT lsb ORDER IS disordered is WHAT SCOPE SEEs~!
\ Yet register LSBFIRST bit is zero~!
\ CHECK RXE AND OVERRUN~!
\ 1RST TRY DOCS HARD TO FIND~! CUBE DOES THIS.
(
typedef enum gpio_af {
    GPIO_AF_SPI_1_2              = 5,
    GPIO_AF_USART_1_2_3          = 7,
} gpio_af;
)

(
\ --------------------------------PORTB-----------------------------------------
\ Intialize PORTB_MODER pins this way.
\ GPIO PORT B Reset value: 0x0000 0280 = JTAG, WHICH WE DISABLE FOR SPI AND USE SWD
\ MODER is a 2 bit init for each of the 16 ports in a bank.
\ Enable PB12-15, and PB0-1 as Outputs for SPI BT, ADC and DAC BT CS AND RST
\ PROGRAM SPI3 AF ON PB3, PB4 AND PB5, TAKING OVER THE JTAG PINS
\ PORTB - Do std GPIO and level set init. Then do alternate function config.
PB15  BT-RST            is active high.	0x1
PB14  BT-CSn            is active low. 	0x1
PB13  DAC-CSn           is active low. 	0x1
PB12  ADC-CSn           is active low. 	0x1
PB11  SDA2              I2C START NOT USED
PB10  SCL2		
PB9   NC
PB8   NC
PB7   SDA1
PB6   SCL1              I2C END NOT USED
PB5   SPI3-MOSI         is AF, SPI3_MOSI 0x2
PB4   SPI3-MISO         is AF, SPI3_MISO 0x2
PB3   JTDO/SPI3-SCLK    is AF, SPI3_SCLK 0x2
PB2   BOOT0             Do not program	 0x0
PB1   ADC-PDN           is active low. 	 0x1
PB0   ADC-RSTn          is active high.	 0x1
)

(
\ --------------------------------PORTC-----------------------------------------
\ GPIO PORT C Reset value: 0x0000 0000
\ MODER is a 2 bit init for each of the 16 ports in a bank.
\ Enable PC5 as input, and PC0-2-15 as Outputs for the ADC GAIN SWITCHES.
\ USART3 inited on PORT C, in the first section, after system clocks setup.
\ PORTC - Do std GPIO and level set init. Then do alternate function config.
\ Intialize PORTC pins this way.
PC15
PC14
PC13
PC12
PC11    UART3_TX        is AF.
PC10    UART3_RX        is AF.
PC9     SWITCH4         is active high.
PC8     SWITCH3         is active high.
PC7     SWITCH2         is active high.
PC6     SWITCH1         is active high.
PC5     ADC_DATA_READY  is actve high.
PC4
PC3
PC2     GAIN_SWITCH2    is active low.
PC1     GAIN_SWITCH1    is active low.
PC0     GAIN_SWITCH0    is active low.
)

\ ------------------------------------------------------------------------------
\ BIT and BITS SET AND SEE WORDS FOR MEMORY AND REGISTER
\ update GLOSSARY WITH BETTER EXAMPLES/EXPLNATIONS

\ SPI3 BIT BANG WORDS
\ GPIOB- MODER 000000010100b 14h

: SET-BB 
  .SPI-REGISTERS
    GPIOB-ODR 14h SETBITS
  .SPI-REGISTERS
;

EHOFF
(
GPIO WORDSET TO TEST:
+ = TESTED
+CS-ADC
+CS-BT
+CS-DAC
+SW1
+SW2
+SW3
+SW4
GS2
GS1
GS0
CLRBITS
SETBITS
ANDBITS
CLRBIT
SETBIT
SEEBIT
)

\ STACK SANITY CHECK
.S

: .SPI3-DUMP
?SPI3-DIRECTION
\ DAC SWITCHES
.SW
.SPI3
.CS
\ FFh 7Fh A0h DAC3W
;

.SPI3
.SPI3-DUMP
\ ThIS SHOULD SET 2.05V IF ALL SWITCHES ARE ON.
FFh 7Fh A0h DAC3W

FFh 7Fh 3Fh DAC3W
\ WDR RDR ARE ATOMIC WORDS FOR THE LOOPBACK ISSUE.

: WDR ( n=8bits -- ) \ write to spi3 odr 7 layer fifo
	SPI3-DR C! ;

: RDR ( n=8bits -- ) \ read spi3 odr 7 layer fifo
	SPI3-DR C@ ;

PON


